const STATIC_SCALE_STARTS = {
    "r": function() { return new Decimal(2000) },
    "u": function() { return new Decimal(320) },
    "e": function() { return decimalTen },
    "Ur": function() { return decimalTen },
    "Uu": function() { return new Decimal(120) },
    "Us": function() { return decimalTen },
}
function makeRed(c){
    return "<span style='color:#aa0000'>" + c + "</span>"
}
function makeBlue(c){
    return "<span style='color:#4444bb'>" + c + "</span>"
}
function makeGreen(c){
    return "<span style='color:#448844'>" + c + "</span>"
}

function scaleStaticCost(gain, layer) {
    let start = (STATIC_SCALE_STARTS[layer]?STATIC_SCALE_STARTS[layer]():1);
    let g = gain
    if (gain.gte(start)) { 
        if (layer == "r") gain = gain.pow(2).div(start);
        if (layer == "Ur") {
            if (g.gte(15e4)) gain = gain.div(15e4).pow(1.5).mul(15e4)
            if (g.gte(5e4)) gain = gain.div(5e4).pow(1.5).mul(5e4)
            gain = gain.pow(2).div(start)
        }
        if (layer == "u") {
            gain = gain.pow(3).div(Decimal.pow(start, 2))
        }
        if (layer == "Uu") {
            if (gain.gte("ee8")) gain = powExp(gain.root(1e6).log10().root(2),1/2).pow10().div(100).pow10()
            if (g.gte(1e16)) gain = gain.log10().div(16).pow(2).mul(16).pow10()
            if (g.gte(1e15)) gain = gain.log10().div(15).pow(2).mul(15).pow10()
            if (g.gte(1e14)) gain = gain.log10().div(14).pow(1.5).mul(14).pow10()
            if (g.gte(5e7)) gain = gain.div(5e7).pow(1.5).mul(5e7)
            gain = gain.pow(1.6).div(Decimal.pow(start,0.6))
        }
        if (layer == "Us") {
            if (g.gte(1e30)) gain = gain.log10().div(30).pow(2).mul(30).pow10()
            if (g.gte(1e25)) gain = gain.log10().div(25).pow(2).mul(25).pow10()
            if (g.gte(1e21)) gain = gain.mul(1.4).sub(1e21*.4).div(1e21).pow(1.3).mul(1e21)
            if (g.gte(45e9)) gain = gain.mul(1.4).sub(45e9*.4).div(45e9).pow(1.3).mul(45e9)
            if (g.gte(2e4)) gain = gain.mul(1.4).sub(8e3).div(2e4).pow(1.1).mul(2e4)
            if (g.gte(1e4)) gain = gain.mul(1.4).sub(4e3).div(1e4).pow(1.1).mul(1e4)
            if (g.gte(50)) gain = gain.mul(1.2).sub(10).div(50).pow(1.1).mul(50)
            if (g.gte(45)) gain = gain.mul(1.2).sub(9).div(45).pow(1.25).mul(45)
            if (g.gte(40)) gain = gain.mul(1.2).sub(8).div(40).pow(1.1).mul(40)
            gain = gain.pow(2).div(start)
        }
        if (layer == "e") {
            let scale = tmp.e.infScale
            let social = tmp.e.scStart
            let qu = tmp.e.qStart
            if (g.gte(tet10(qu))) g = tet10(slog(g).log10().div(qu.log10()).root(0.5).mul(qu.log10()).pow10())
            if (g.gte(tet10(social))) g = tet10(slog(g).div(social).root(0.7).mul(social))
            if (g.gte(tet10(10))) g = tet10(slog(g.div(10).pow(2).mul(10)))
            if (g.gte(tet10(7))) g = tet10(slog(g).sub(7).mul(2).add(7))
            if (g.gte(3e6)) g = Decimal.pow(1.000005,g.sub(3e6)).mul(3e6)
            if (g.gte(scale.add(1e3))) g = g.pow(5).div(Decimal.pow(scale.add(1e3), 4))
            if (g.gte(scale)) g = g.pow(3).div(Decimal.pow(scale, 2))
            if (g.gte(30)) gain = Decimal.pow(1.08,g.sub(30)).mul(30)
            gain = gain.pow(3).div(Decimal.pow(start, 2))
        };
    }
	return gain
}
function startCChallenge(id) {
    doReset("f")
    player.f.p = decimalZero
    player.f.cp = decimalZero
    player.f.casuals = decimalOne
    player.f.cboosts = decimalZero
    player.f.points = decimalZero
    player.f.resettime = new Decimal(0.001)
    player.f.sac = decimalZero
    player.f.d1 = decimalZero
    player.f.d2 = decimalZero
    player.f.d3 = decimalZero
    player.f.d4 = decimalZero
    player.f.d5 = decimalZero
    player.f.d6 = decimalZero
    player.f.d7 = decimalZero
    player.f.d8 = decimalZero
    player.f.mult = decimalZero
    player.f.buyables[11] = decimalZero
    player.f.buyables[12] = decimalZero
    player.f.buyables[13] = decimalZero
    player.f.buyables[14] = decimalZero
    player.f.buyables[21] = decimalZero
    player.f.buyables[22] = decimalZero
    player.f.buyables[23] = decimalZero
    player.f.buyables[24] = decimalZero
    player.f.buyables[31] = decimalZero
    player.f.buyables[32] = (hasFUpg(84) && id !== 22 && id !== 31) ? decimalTwo : decimalZero
    player.f.buyables[33] = decimalZero 
    player.f.buyables[71] = player.f.buyables[71].min(player.f.cd[0])
    player.f.buyables[72] = player.f.buyables[72].min(player.f.cd[1])
    player.f.buyables[73] = player.f.buyables[73].min(player.f.cd[2])
    player.f.buyables[74] = player.f.buyables[74].min(player.f.cd[3])
    player.f.buyables[81] = player.f.buyables[81].min(player.f.cd[4])
    player.f.buyables[82] = player.f.buyables[82].min(player.f.cd[5])
    player.f.buyables[83] = player.f.buyables[83].min(player.f.cd[6])
    updateTemp()
    updateTemp()
    updateTemp()
}

function startIChallenge(id) {
    doReset("i")
    player.v.upgrades = []
    player.e.ct = 0
    player.i.points = decimalZero
    player.r.points = decimalZero
    player.v.points = decimalZero
    player.points = decimalZero
}

function startCTChallenge(id) {
    layers.ct.clickables[32].onClick()
    if (id==32) {
        player.points = decimalZero
        player.s.severity = decimalZero
        player.e.mu = decimalZero
        player.e.mu2 = decimalZero
        if (hasUpgrade("ct",463)) {
        player.Uv.upgrades = [11,12,13,21,22,23,31,32,33]
        player.Uv.milestones = [0,1,2]
        }
        if (hasUpgrade("ct",465)) player.Ui.milestones = [0,1,2,3]
        if (hasUpgrade("ct",472)) player.Ur.milestones = [2]
        if (hasUpgrade("ct",476)) player.Ur.milestones = [2,3]
        if (hasUpgrade("ct",481)) player.Ui.upgrades = [11,12,13,21,22,23,31,32,33]
        if (hasUpgrade("ct",483)) player.Ur.upgrades = [11,12,13,21,22,23,31,32,33]
        if (hasUpgrade("ct",484)) {
            player.Ui.milestones = [0,1,2,3,4,5,6,7,8,9,10,11,12]
            player.Ur.milestones = [0,1,2,3,4,5,6,7]
        }
        if (hasUpgrade("ct",494)) {
            player.Ur.milestones = [0,1,2,3,4,5,6,7,8,9,10]
            player.Up.milestones = [0,1,2,3,4,5]
            player.Ur.auto = true
            player.Up.auto = true
            player.Up.auto2 = true
        }
        if (hasUpgrade("ct",495)) {
            player.Up.milestones = [0,1,2,3,4,5,6,7,8,9,10]
        }
        if (hasUpgrade("ct",496)) {
            player.Up.milestones = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]
            player.Up.upgrades = [11,12,13,14,15,21,22,23,24,25,31,32,33,34,35,41,42,43,44,45,51,52,53,54,55]
            for (i = 0; i < player.Up.chal.length; i++){
                player.Up.challenges[player.Up.chal[i]]=1
            }
            player.Up.autop = true
            player.Up.autop2 = true
            player.Up.autopr = true
            player.Up.autoupr = true
            player.Up.autoapr = true
            player.Up.autoe = true
        }
        if (hasUpgrade("ct",503)) {
            player.Up.upgrades = [11,12,13,14,15,21,22,23,24,25,31,32,33,34,35,41,42,43,44,45,51,52,53,54,55,61,62,63,64,65,71,72,73,74,75,81,82,83,84,85,91,92,93,94,95]
            player.Uu.milestones = [0,1,2,6]
        }
        if (hasUpgrade("ct",505)) {
            player.Uu.upgrades = [11,12,13,14,15]
            player.Uu.milestones = [0,1,2,3,4,5,6,7,13]
            player.Uu.auto = true
            player.Uu.auto2 = true
            player.Uu.autou = true
        }
        if (hasUpgrade("ct",506)) {
            player.Uu.upgrades.push(21,22,23,24,25)
            player.Uu.milestones.push(8,9,10,11,12,14,15)
            player.Uu.autoun = true
        }
        if (hasUpgrade("ct",516)) {
            player.Uu.upgrades.push(31,32,33,34,35,41,42,43,44,45)
            player.Uu.milestones.push(16,17,18,19,20,21)
            player.Uu.autoue = true
            player.Uu.autoub = true
        }
        if (hasUpgrade("ct",522)) {
            player.Uu.upgrades.push(61,62,63,64,65)
            player.Uu.milestones.push(22,23)
            player.Uu.autoen = true
        }
        if (hasUpgrade("ct",524)) {
            player.Uu.upgrades.push(71,72,73,74,75)
        }
        if (hasUpgrade("ct",526)) {
            player.Uu.upgrades.push(81,82,83,84,85)
            player.Uu.milestones.push(24,25,26)
            player.Uu.autoex = true
        }
        if (hasUpgrade("ct",533)) {
            player.Us.milestones.push(0)
            player.Uu.milestones.push(27,28)
            player.Us.auto = true
            player.Uu.autouqe = true
        }
        if (hasUpgrade("ct",536)) {
            player.Us.milestones.push(1)
            player.Uu.upgrades.push(91,92,93,94,95)
            player.Us.auto2 = true
        }
        if (hasUpgrade("ct",543)) {
            player.Us.milestones.push(6)
            player.Uu.upgrades.push(51,52,53,54,55)
            player.Us.automult = true
        }
        if (hasUpgrade("ct",544)) {
            player.Us.milestones.push(7)
            player.Us.autoatom = true
        }
        if (hasMilestone("uv",0)) {
            player.Us.upgrades = ['11','12','13','14','15','21','22','23','24','25','31','32','33','34','35','41','42','43','44','45']
            player.Us.milestones.push(2,3,4,5,8,9,10,15)
            player.Us.autosymp = true
            
        }
        if (hasMilestone("uv",1)) {
            player.Us.upgrades.push('61','62','63','64','65')
            player.Us.milestones.push(11,12,13,14,16)
        }
        if (hasMilestone("uv",2)) {
            player.Us.upgrades.push('71','72','73','74','75')
            player.Us.milestones.push(17,18)
        }
        if (hasMilestone("uv",4)) {
            player.Us.milestones.push(19,20,21)
        }
        if (hasMilestone("uv",9)) {
            player.Us.milestones.push(22)
            player.Us.autosev = true
        }
        if (hasMilestone("uv",10)) {
            player.Us.autotrna = true
        }
        if (hasMilestone("uv",20)) {
            player.Us.autorrna = true
        }
        if (hasMilestone("uv",11)) {
            player.Us.autoupg = true
        }
        if (hasMilestone("uv",14)) {
            player.Us.automut = true
            player.Us.mutPercent = player.uv.mutPercent
            player.Us.mutPer = player.uv.mutPer
        }
        if (hasUpgrade("uv",72)) {
            player.Us.upgrades.push('81','82','83','84','85')
            player.Us.milestones.push(23)
        }
        if (hasMilestone("uv",16)) {
            player.Us.autotmut = true
            player.Us.tmutPercent = player.uv.tmutPercent
            player.Us.tmutPer = player.uv.tmutPer
        }
        if (hasUpgrade("uv",75)) {
            player.Us.upgrades.push('51','52','53','54','55','91','92','93','94','95')
            player.Us.milestones.push(24,25,26,27,28,29)
        }
        if (hasUpgrade("uv",83)) {
            player.Us.upgrades.push('101','102','103','104','105')
            player.Us.milestones.push(30,31,32,33,34,35,36,37,38,39,56)
            player.Us.autounr = true
        }
        if (hasMilestone("uv",24)) {
            player.Ud.milestones.push(0,1,2)
            player.Us.milestones.push(40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58)
        }
        if (hasMilestone("uv",25)) {
            player.Ud.upgrades.push('11','12','13','14','15','21','22','23','24','25')
            player.Ud.milestones.push(3,4,5)
        }
    }
}

function softcapStaticGain(gain, layer) {
	let start = (STATIC_SCALE_STARTS[layer]?STATIC_SCALE_STARTS[layer]():1);
    if (gain.gte(start)) {
        if (layer == "r" || layer == "Ur" || layer == "Us") gain = gain.times(start).pow(1/2);
        if (layer == "Ur") {
            if (gain.gte(5e4)) gain = gain.div(5e4).root(1.5).mul(5e4)
            if (gain.gte(15e4)) gain = gain.div(15e4).root(1.5).mul(15e4)
        }
        if (layer == "u") {
            gain = gain.times(Decimal.pow(start,2)).root(3)
        }
        if (layer == "Uu") {
            gain = gain.mul(Decimal.pow(start,0.6)).root(1.6)
            if (gain.gte(5e7)) gain = gain.div(5e7).root(1.5).mul(5e7)
            if (gain.gte(1e14)) gain = gain.log10().div(14).root(1.5).mul(14).pow10()
            if (gain.gte(1e15)) gain = gain.log10().div(15).root(2).mul(15).pow10()
            if (gain.gte(1e16)) gain = gain.log10().div(16).root(2).mul(16).pow10()
            if (gain.gte("ee8")) gain = powExp(gain.log10().mul(100).log10(),2).pow(2).pow10().pow(1e6)
        }
        if (layer == "Us") {
            if (gain.gte(40)) gain = gain.div(40).root(1.1).mul(40).add(8).div(1.2)
            if (gain.gte(45)) gain = gain.div(45).root(1.25).mul(45).add(9).div(1.2)
            if (gain.gte(50)) gain = gain.div(50).root(1.1).mul(50).add(10).div(1.2)
            if (gain.gte(1e4)) gain = gain.div(1e4).root(1.1).mul(1e4).add(4e3).div(1.4)
            if (gain.gte(2e4)) gain = gain.div(2e4).root(1.1).mul(2e4).add(8e3).div(1.4)
            if (gain.gte(45e9)) gain = gain.div(45e9).root(1.3).mul(45e9).add(45e9*.4).div(1.4)
            if (gain.gte(1e21)) gain = gain.div(1e21).root(1.3).mul(1e21).add(1e21*.4).div(1.4)
            if (gain.gte(1e25)) gain = gain.log10().div(25).root(2).mul(25).pow10()
            if (gain.gte(1e30)) gain = gain.log10().div(30).root(2).mul(30).pow10()
        }
        if (layer == "e") {
            let scale = tmp.e.infScale
            let social = tmp.e.scStart
            let qu = tmp.e.qStart
            gain = gain.times(Decimal.pow(start,2)).root(3)
            if (gain.gte(30)) gain = gain.div(30).log(1.08).add(30)
            if (gain.gte(scale)) gain = gain.times(Decimal.pow(scale,2)).root(3)
            if (gain.gte(scale.add(1e3))) gain = gain.times(Decimal.pow(scale.add(1e3),4)).root(5)
            if (gain.gte(3e6)) gain = gain.div(3e6).log(1.000005).add(3e6)
            if (gain.gte(tet10(7))) gain = tet10(slog(gain).sub(7).div(2).add(7))
            if (gain.gte(tet10(social))) gain = tet10(slog(gain).div(social).pow(0.7).mul(social))
            if (gain.gte(tet10(qu))) gain = tet10(slog(gain).log10().div(qu.log10()).pow(0.5).mul(qu.log10()).pow10())
        }
    }
	return gain;
}
function hasVUpg(id){
    return hasUpgrade("v",id)
}
function getVUpgEff(id){
    return upgradeEffect("v",id)
}
function hasIUpg(id){
    return hasUpgrade("i",id)
}
function getIUpgEff(id){
    return upgradeEffect("i",id)
}
function hasRUpg(id){
    return hasUpgrade("r",id)
}
function getRUpgEff(id){
    return upgradeEffect("r",id)
}
function hasUUpg(id){
    return hasUpgrade("u",id)
}
function getUUpgEff(id){
    return upgradeEffect("u",id)
}
function hasSUpg(id){
    return hasUpgrade("s",id)
}
function getSUpgEff(id){
    return upgradeEffect("s",id)
}
function hasDUpg(id){
    return hasUpgrade("d",id)
}
function getDUpgEff(id){
    return upgradeEffect("d",id)
}
function hasFUpg(id){
    return hasUpgrade("f",id)
}
function getFUpgEff(id){
    return upgradeEffect("f",id)
}

addLayer("v", {
    name: "virus",
    symbol: "V",
    position: 0,
    startData() {
        return {
            unlocked: true,
            points: decimalZero,
            total: decimalZero,
            best: decimalZero,
        }
    },
    color: "#777777",
    requires: decimalOne,
    resource: "virus points",
    resourceSingular: "virus point",
    baseResource: "cases",
    baseSingular: "case",
    baseAmount() { return player.points },
    type: "normal",
    exponent: 0.5,
    softcap: Decimal.pow(10,1e7),
    softcapPower: 0.5,
    gainMult() {
        mult = decimalOne
        if(hasVUpg(22)) mult = mult.mul(getVUpgEff(22))
        if(hasVUpg(31)) mult = mult.mul(getVUpgEff(31))
        if(hasIUpg(11)) mult = mult.mul(getIUpgEff(11))
        if(hasUpgrade("Uv",12)) mult = mult.mul(upgradeEffect("Uv",12))
        mult = mult.mul(tmp.d.effect)
        mult = mult.mul(tmp.f.effect)
        if (hasAchievement("a", 21)) mult = mult.mul(tmp.a.effect)
        if (player.s.unlocked) mult = mult.mul(tmp.s.severityEff);
        return mult.mul(tmp.ct.effect)
    },
    gainExp() {
        return decimalOne
    },
    updateInterval()  {
        if (player===undefined||tmp===undefined) return 50
        return player.ms
    },
    row: 0,
    hotkeys: [
        {
            key:"v", description: "V:Reset for virus points", onPress() {
                if (canReset(this.layer))
                    doReset(this.layer)
            }
        },
    ],
    update(diff) {
        if (hasMilestone("i", 1)) generatePoints("v", diff);
    },
    doReset(resettingLayer) {
        let keep = [];
        if (hasMilestone("i", 0) && resettingLayer=="i") keep.push("upgrades")
        if (hasMilestone("r", 0) && resettingLayer=="r") keep.push("upgrades")
        if (hasAchievement("a", 31)) keep.push("upgrades")
        if (layers[resettingLayer].row > this.row) layerDataReset(this.layer, keep)
    },
    upgrades: {
        rows: 3,
        cols: 3,
        11: {
            title: "Start",
            description: "Gain 0.1 cases/s.",
            cost: decimalOne,
            effect(){
                return true
            },
            effectDisplay() {
                return format(getPointGen()) + "/s"
            }
        },
        12: {
            title: "Infection",
            description: "Multiply cases gain.",
            cost: decimalTwo,
            base() {
                let base =  decimalTwo
                if(hasIUpg(21)) base = base.add(getIUpgEff(21))
                if(hasIUpg(22)) base = base.add(getIUpgEff(22))
                base = base.add(tmp.r.effect2)
                if(hasIUpg(21) && hasIUpg(31)) base = base.mul(getIUpgEff(21).max(1))
                if(hasIUpg(22) && hasIUpg(32)) base = base.mul(getIUpgEff(22).max(1))
                if(hasUUpg(11)) base = base.mul(getUUpgEff(11))
                if(hasSUpg(24)) base = base.mul(getSUpgEff(24))
                base = base.mul(tmp.s.buyables[23].effect)
                return base
            },
            effect(){
                let eff = tmp.v.upgrades[12].base
                let v12sf = Decimal.pow(10,1e4)
                let v12sf2 = Decimal.pow(10,1e10)
                let v12sf3 = Decimal.pow(10,1e50)
                if(hasVUpg(23)) eff = eff.pow(getVUpgEff(23))
                if(hasFUpg(33)) eff = eff.pow(getFUpgEff(33))
                if(eff.gte(v12sf)) eff = Decimal.pow(10,Decimal.log10(eff.div(v12sf)).pow(3/4)).mul(v12sf)
                if(eff.gte(v12sf2)) eff = Decimal.pow(10,Decimal.log10(eff.div(v12sf2)).pow(0.9)).mul(v12sf2)
                if(eff.gte(v12sf3)) eff = Decimal.pow(10,Decimal.pow(10,eff.div(v12sf3).log10().log10().pow(0.99))).mul(v12sf3)
                if (eff.gte(Decimal.pow(10,Decimal.pow(10,1e3)))) eff = eff.log10().pow(Decimal.pow(10,997))
                if(hasUpgrade("e",11)) eff = eff.pow(upgradeEffect("e",11))
                if(hasUpgrade("e",16)) eff = eff.pow(tmp.e.upgrades[16].effect2)
                if(hasUpgrade("e",61)) eff = eff.pow(upgradeEffect("e",61))
                if(hasUpgrade("e",111)) eff = eff.pow(upgradeEffect("e",111))
                if (inChallenge("u", 12)) eff = decimalOne
                return eff
            },
            effectDisplay(){
                let v12dis = format(getVUpgEff(12))+"x"
                let v12sf = Decimal.pow(10,1e4)
                if (getVUpgEff(12).gte(v12sf)) v12dis = v12dis+" (softcapped)"
                return v12dis
            },
            unlocked(){
                return hasVUpg(11)
            }
        },
        13: {
            title: "Transmission",
            description: "Multiplier to cases based on VP.",
            cost: decimalFive,
            effect(){
                let v13 = player.v.points.add(2)
                let v13sf = new Decimal(1.797e308)
                let v13sf2 = Decimal.pow(10,2370)
                let v13sf3 = Decimal.pow(10,25e8)
                let v13sf4 = Decimal.pow(10,1e14)
                let v13sf5 = Decimal.pow(10,1e50)
                let v13sff = decimalHalf
                let v13sff2 = new Decimal(0.8)
                let v13sff3 = new Decimal(10/11)
                let v13sff4 = new Decimal(5/6)
                let v13sff5 = new Decimal(0.8)
                v13 = v13.pow(1/2)
                if(hasUUpg(12)) v13sf = v13sf.mul(getUUpgEff(12))
                if(hasUUpg(12)) v13sf2 = v13sf2.mul(getUUpgEff(12)).add(1).max(1)
                if(hasUUpg(12)) v13sf3 = v13sf3.mul(getUUpgEff(12)).add(1).max(1)
                if(hasUUpg(12)) v13sf4 = v13sf4.mul(getUUpgEff(12)).add(1).max(1)
                if(hasUUpg(12)) v13sf5 = v13sf5.mul(getUUpgEff(12)).add(1).max(1)
                if (inChallenge("u", 22)) v13sf = decimalOne
                if (inChallenge("u", 22)) v13sf2 = decimalOne
                if (hasChallenge("u", 22)) v13sff = v13sff.pow(challengeEffect("u", 22).pow(-1))
                if (hasChallenge("u", 22)) v13sff2 = v13sff2.pow(challengeEffect("u", 22).pow(-1))
                if(hasIUpg(12)) v13 = v13.pow(getIUpgEff(12))
                if(hasDUpg(14)) v13 = v13.pow(getDUpgEff(14))
                if(hasSUpg(55)) v13 = v13.pow(getSUpgEff(55))
                if(v13.gte(v13sf)) v13 = v13.mul(v13sf).pow(v13sff) 
                if(v13.gte(v13sf2)) {
                    v13 = Decimal.pow(10,Decimal.log10(v13.div(v13sf2)).pow(v13sff2)).mul(v13sf2)
                }
                if(v13.gte(v13sf3)) {
                    v13 = Decimal.pow(10,Decimal.log10(v13.div(v13sf3)).pow(v13sff3)).mul(v13sf3)
                }
                if(v13.gte(v13sf4)) {
                    v13 = Decimal.pow(10,Decimal.log10(v13.div(v13sf4)).pow(v13sff4)).mul(v13sf4)
                }
                if(v13.gte(v13sf5)) {
                    v13 = Decimal.pow(10,Decimal.pow(10,v13.div(v13sf5).log10().add(1).max(1).log10().pow(v13sff5))).mul(v13sf5)
                }
                if (v13.gte("eee3")) v13 = v13.log10().pow("e997")
                return v13  
            },
            effectDisplay(){
                let v13sf = new Decimal(1.797e308)
                if(hasUUpg(12)) v13sf = v13sf.mul(getUUpgEff(12))
                let v13dis = format(getVUpgEff(13))+"x"
                if (getVUpgEff(13).gte(v13sf) || inChallenge("u", 22)) v13dis = v13dis+" (softcapped)"
            return v13dis
            },
            unlocked(){
                return hasVUpg(12)
            }
        },
        21: {
            title: "Self Boost",
            description: "Multiplier to cases based on cases.",
            cost: decimalTen,
            effect(){
                let v21 = player.points.add(1).max(1)
                let v21sf = Decimal.pow(10,1e5)
                let v21sf2 = Decimal.pow(10,1e16)
                let v21sf3 = Decimal.pow(10,1e90)
                v21 = Decimal.log10(v21).pow(2).add(2)
                if(hasVUpg(32)) v21 = v21.pow(getVUpgEff(32))
                if(hasRUpg(23)) v21 = v21.pow(getRUpgEff(23))
                if(v21.gte(v21sf)) v21 = Decimal.pow(10,Decimal.log10(v21.div(v21sf)).pow(0.8)).mul(v21sf)
                if(v21.gte(v21sf2)) v21 = Decimal.pow(10,Decimal.log10(v21.div(v21sf2)).pow(0.88)).mul(v21sf2)
                if(v21.gte(v21sf3)) v21 = Decimal.pow(10,Decimal.pow(10,Decimal.log10(v21.div(v21sf3)).log10().pow(0.95))).mul(v21sf3)
                if (v21.gte(Decimal.pow(10,Decimal.pow(10,1e3)))) v21 = v21.log10().pow(Decimal.pow(10,997))
                return v21
            },
            effectDisplay(){
                let v21sf = Decimal.pow(10,1e5)
                let v21dis = format(getVUpgEff(21))+"x"
                if (getVUpgEff(21).gte(v21sf)) v21dis = v21dis + " (softcapped)"
                return v21dis
            },
            unlocked(){
                return hasVUpg(13)
            }
        },
        22: {
            title: "Contaminate",
            description: "Multiplier to VP based on cases.",
            cost: new Decimal(20),
            effect(){
                let v22 = player.points.add(1).max(1)
                v22 = Decimal.log10(v22).add(1).max(1)
                if(hasVUpg(33)) v22 = v22.pow(getVUpgEff(33))
                if(hasRUpg(31)) v22 = v22.pow(getRUpgEff(31))
                return v22
            },
            effectDisplay(){
                return format(getVUpgEff(22))+"x"
            },
            unlocked(){
                return hasVUpg(21)
            }
        },
        23: {
            title: "More Infections",
            description: "Raise 'Infection' to the number of bought upgrades.",
            cost: new Decimal(200),
            effect(){
                let v23 = player.v.upgrades.length
                if(hasRUpg(22)) v23 = Decimal.mul(v23,getRUpgEff(22))
                return v23
            },
            effectDisplay(){
                return "^"+format(getVUpgEff(23))
            },
            unlocked(){
                return hasVUpg(22)
            }
        },
        31: {
            title: "Disease",
            description: "Multiplier to VP based on VP.",
            cost: new Decimal(5e3),
            effect(){
                let v31 = player.v.points.add(10).max(10)
                v31 = Decimal.log10(v31).pow(1.3)
                if(hasRUpg(12)) v31 = v31.pow(getRUpgEff(12))
                if (v31.gte("eee50")) v31 = v31.div("eee50").log10().log10().pow(0.85).pow10().pow10().mul("eee50")
                if (v31.gte(Decimal.pow(10,Decimal.pow(10,Decimal.pow(10,4e4))))) v31 = v31.log10().log10().pow(Decimal.pow(10,39995).mul(2.5)).pow10()
                return v31
            },
            effectDisplay(){
                return format(getVUpgEff(31))+"x"
            },
            unlocked(){
                return hasVUpg(23)
            }
        },
        32: {
            title: "BOOSTER",
            description: "'Self Boost' is stronger based on VP.",
            cost: new Decimal(2.5e5),
            effect(){
                let v32 = player.v.points.add(10).max(10)
                v32 = Decimal.log10(v32).pow(0.2)
                return v32
            },
            effectDisplay(){
                return "^"+format(getVUpgEff(32))
            },
            unlocked(){
                return hasVUpg(31)
            }
        },
        33: {
            title: "Food Contamination",
            description: "'Contaminate' is stronger based on cases.",
            cost: new Decimal(5e6),
            effect(){
                let v33 = player.points.add(10).max(10)
                v33 = Decimal.log10(v33).pow(0.15)
                if (hasMilestone("Uv",2)) v33 = v33.pow(4.5)
                return v33
            },
            effectDisplay(){
                return "^"+format(getVUpgEff(33))
            },
            unlocked(){
                return hasVUpg(32)
            }
        },
    },
    layerShown() {return player.uv.tree == "normal"}
})

addLayer("i", {
    name: "infectivity",
    symbol: "I",
    position: 0,
    startData() { return {
        points: decimalZero,
        best: decimalZero,
        total: decimalZero,
    unlocked: false,
    total: decimalZero
    }},
    color: "#880435",
    requires: new Decimal(7.8e9),
    resource: "infectivity",
    baseResource: "cases",
    baseSingular: "case",
    baseAmount() { return player.points },
    type: "normal",
    exponent: 0.08,
    branches: ["v"],
    softcap: new Decimal(Decimal.pow(10,1e7)),
    softcapPower: 0.5,
    hotkeys: [
        {
            key:"i", description: "I:Reset for infectivity", onPress() {
                if (canReset(this.layer))
                    doReset(this.layer)
            }
        },
    ],
    doReset(resettingLayer) {
        let keep = [];
        if (hasMilestone("u", 0) && resettingLayer=="u") keep.push("milestones")
        if (hasMilestone("s", 0) && resettingLayer=="s") keep.push("milestones")
        if (hasMilestone("u", 3) && resettingLayer=="u") keep.push("upgrades")
        if (hasMilestone("s", 1) && resettingLayer=="s") keep.push("upgrades")
        if (hasMilestone("d", 6) && resettingLayer=="d") keep.push("upgrades")
        if (hasAchievement("a", 41)) keep.push("upgrades")
        if (hasMilestone("a", 0)) keep.push("upgrades")
        if (hasMilestone("a", 0)) keep.push("milestones")
        if (layers[resettingLayer].row > this.row) layerDataReset(this.layer, keep)
    },
    effect(){
        let eff = player.i.points.add(1).max(1)
        eff = eff.pow(2)
        if (inChallenge("u", 12)) eff = decimalOne
        if (eff.gte(Decimal.pow(10,1e16))) eff = Decimal.pow(10,eff.div(Decimal.pow(10,1e16)).log10().pow(0.88)).mul(Decimal.pow(10,1e16))
        if (eff.gte(Decimal.pow(10,1e32))) eff = Decimal.pow(10,eff.div(Decimal.pow(10,1e32)).log10().pow(0.85)).mul(Decimal.pow(10,1e32))
        if (eff.gte(Decimal.pow(10,1e63))) eff = eff.log10().div(1e13).pow(2e61)
        return eff
    },
    effectDescription() {
        let dis = "which boosts cases gain by "+layerText("h2", "i", format(tmp.i.effect))
        if (tmp.i.effect.gte(Decimal.pow(10,1e16))) dis += " (softcapped)"
        return dis
    },
    gainMult() {
        imult = decimalOne
        if (!inChallenge("ct",32)) {
        if (hasIUpg(13)) imult = imult.mul(getIUpgEff(13))
        if (hasIUpg(23)) imult = imult.mul(getIUpgEff(23))
        imult = imult.mul(tmp.u.effect)
        imult = imult.mul(tmp.d.effect)
        imult = imult.mul(tmp.f.effect).mul(tmp.ct.effect)
        if (hasAchievement("a", 31)) imult = imult.mul(tmp.a.effect)
        imult = imult.mul(tmp.s.buyables[12].effect)
        if (player.s.unlocked) imult = imult.mul(tmp.s.severityEff);
        }
        else {
            imult = imult.mul(tmp.Uv.buyables[12].effect).mul(tmp.Ui.effect).mul(tmp.Ui.pathEff)
            if (hasMilestone("Ui",4)) imult = imult.mul(milestoneEffect("Ui",4))
        }
        return imult
    },
    gainExp() {
        let exp = decimalOne
        return exp
    },
    row: 1,
    layerShown() {
        let shown = player.v.total.gte(decimalOne)
        if(player.i.unlocked) shown = true
        return shown && player.uv.tree == "normal"
    },
    milestones: {
        0: {
            requirementDescription: "15 total infectivity",
            effectDescription: "Keep virus upgrades on reset.",
            done() { return player.i.total.gte(15) }
        },
        1: {
            requirementDescription: "2,000 total infectivity",
            effectDescription: "Gain 100% of VP gain per second.",
            done() { return player.i.total.gte(2e3) }
        }
    },
    upgrades: {
        rows: 3,
        cols: 3,
        11: {
            title: "VP Boost",
            description: "Infectivity boosts VP gain.",
            cost: decimalTen,
            effect(){
            let i11 = player.i.points.add(1).max(1)
            if (inChallenge("u", 12)) i11 = decimalOne
            if (hasUpgrade("Uv",21)) i11 = i11.pow(tmp.Uv.upgrades[21].effect)
            return i11
            },
            effectDisplay(){
            return format(getIUpgEff(11))+"x"
            },
        },
        12: {
            title: "Air Transmission",
            description: "Infectivity boosts 'Transmission'.",
            cost: new Decimal(20),
            effect(){
            let i12 = player.i.points.add(15)
            let i12sf = new Decimal(1.35)
            i12 = Decimal.log10(i12.mul(2)).pow(0.3)
            if (hasUUpg(21)) i12sf = i12sf.mul(getUUpgEff(21))
            if (i12.gte(i12sf)) i12 = i12.mul(Decimal.pow(i12sf,2)).pow(1/3)
            if (i12.gte(2) && !hasUUpg(21)) i12 = decimalTwo
            if (inChallenge("u", 12)) i12 = decimalOne
            return i12
            },
            effectDisplay(){
                let i12dis = "^"+format(getIUpgEff(12))
                let i12sf = new Decimal(1.35)
                if (hasUUpg(21)) i12sf = i12sf.mul(getUUpgEff(21))
                if ((getIUpgEff(12).gte(i12sf) && getIUpgEff(12).lt(2)) || (hasUUpg(21) && getIUpgEff(12).gte(i12sf))) i12dis = i12dis+" (softcapped)" 
                if (getIUpgEff(12).gte(2) && !hasUUpg(21)) i12dis = i12dis+" (hardcapped)"
            return i12dis
            },
            unlocked(){
                return hasIUpg(11)
            }
        },
        13: {
            title: "Resistance",
            description: "Multiplier to infectivity based on VP.",
            cost: new Decimal(50),
            effect(){
            let i13 = player.v.points.add(10).max(10)
            i13 = Decimal.log10(i13).pow(0.4)
            if (hasIUpg(33)) i13 = i13.pow(getIUpgEff(33))
            return i13
            },
            effectDisplay(){
            return format(getIUpgEff(13))+"x"
            },
            unlocked(){
                return hasIUpg(12)
            }
        },
        21: {
            title: "Susceptible",
            description: "Infectivity increases 'Infection' base.",
            cost: new Decimal(500),
            effect(){
            let i21 = player.i.points.add(1).max(1)
            i21 = Decimal.log10(i21).pow(0.5)
            if(hasIUpg(31)) i21 = i21.mul(getIUpgEff(31))
            if (inChallenge("u", 12)) i21 = decimalOne
            return i21
            },
            effectDisplay(){
            return "+"+format(getIUpgEff(21))
            },
            unlocked(){
                return hasIUpg(13)
            }
        },
        22: {
            title: "Drug Resistance",
            description: "Cases increase 'Infection' base.",
            cost: new Decimal(5e3),
            effect(){
            let i22 = player.points.add(1).max(1)
            i22 = Decimal.log10(i22).pow(0.2)
            if(hasIUpg(32)) i22 = i22.mul(getIUpgEff(32))
            return i22
            },
            effectDisplay(){
            return "+"+format(getIUpgEff(22))
            },
            unlocked(){
                return hasIUpg(21)
            }
        },
        23: {
            title: "Environmental Hardening",
            description: "Multiplier to infectivity based on cases.",
            cost: new Decimal(25e3),
            effect(){
            let i23 = player.points.add(10).max(10)
            i23 = Decimal.log10(i23).pow(0.3).mul(1.25)
            if (hasIUpg(33)) i23 = i23.pow(getIUpgEff(33))
            return i23
            },
            effectDisplay(){
            return format(getIUpgEff(23))+"x"
            },
            unlocked(){
                return hasIUpg(22)
            }
        },
        31: {
            title: "SUSceptible",
            description: "'Susceptible' is stronger based on replicators and make it add and multiply.",
            cost: new Decimal(2.5e60),
            effect(){
            let i31 = player.r.points.add(1).max(1)
            i31 = i31.pow(0.78)
            if (inChallenge("u", 21)) i31 = decimalOne
            return i31
            },
            effectDisplay(){
            return format(getIUpgEff(31))+"x"
            },
            unlocked(){
                return hasRUpg(32)
            }
        },
        32: {
            title: "Genetic Hardening",
            description: "'Drug Resistance' is stronger based on replicators and make it add and multiply.",
            cost: new Decimal(4.20e69),
            effect(){
            let i32 = player.r.points.add(1).max(1)
            if (inChallenge("u", 21)) i32 = decimalOne
            return i32
            },
            effectDisplay(){
            return format(getIUpgEff(32))+"x"
            },
            unlocked(){
                return hasIUpg(31)
            }
        },
        33: {
            title: "Genetic ReShuffle",
            description: "'Resistance' and 'Environmental Hardening' is stronger based on infectivity.",
            cost: new Decimal(7.77e77),
            effect(){
            let i33 = player.i.points.add(10).max(10)
            i33 = Decimal.log10(i33).pow(1/3)
            if (inChallenge("u", 12)) i33 = decimalOne
            if (hasChallenge("u", 12)) i33 = i33.pow(challengeEffect("u", 12))
            if (i33.gte(1e17)) i33 = i33.div(1e17).pow(0.5).mul(1e17)
            if (i33.gte(1e130)) i33 = Decimal.pow(10,i33.div(1e130).log10().pow(0.75)).mul(1e130)
            if (i33.gte(Decimal.pow(10,1e57))) i33 = Decimal.pow(10,i33.div(Decimal.pow(10,1e57)).log10().pow(0.9)).mul(Decimal.pow(10,1e57))
            return i33
            },
            effectDisplay(){
                let dis = "^"+format(getIUpgEff(33))
                if (tmp.i.upgrades[33].effect.gte(1e17)) dis += " (softcapped)"
                return dis
            },
            unlocked(){
                return hasIUpg(32)
            }
        },
    },
})
addLayer("r", {
    name: "replicators",
    symbol: "R",
    position: 1,
    startData() { return {
        points: decimalZero,
        total: decimalZero,
        best: decimalZero,
    unlocked: false
    }},
    color: "#df34c9",
    requires: new Decimal(5e58),
    resource: "replicators",
    resourceSingular: "replicator",
    baseResource: "cases",
    baseSingular: "case",
    baseAmount() { 
        return player.points 
    },
    type: "static",
    exponent: new Decimal(1.7),
    base: new Decimal(1e4),
    branches: ["v"],
    hotkeys: [
        {
            key:"r", description: "R:Reset for replicators", onPress() {
                if (canReset(this.layer))
                    doReset(this.layer)
            }
        },
    ],
    doReset(resettingLayer) {
        let keep = [];
        if ((hasMilestone("u", 0) && resettingLayer=="u") || hasMilestone("a", 0)) keep.push("milestones")
        if (hasMilestone("s", 0) && resettingLayer=="s") keep.push("milestones")
        if (hasMilestone("u", 3) && resettingLayer=="u") keep.push("upgrades")
        if (hasMilestone("s", 1) && resettingLayer=="s") keep.push("upgrades")
        if (hasMilestone("d", 6) && resettingLayer=="d") keep.push("upgrades")
        if (hasAchievement("a", 41)) keep.push("upgrades")
        if (hasMilestone("a", 0)) keep.push("upgrades")
        if (hasMilestone("a", 0)) keep.push("milestones")
        if (layers[resettingLayer].row > this.row) layerDataReset(this.layer, keep)
    },
    automate() {},
    autoPrestige() { return (hasMilestone("u", 4) && player.u.auto) },
    effbase() {
        let eff = new Decimal(100)
        if(hasRUpg(11)) eff = eff.mul(getRUpgEff(11))
        if(hasRUpg(13)) eff = eff.mul(getRUpgEff(13))
        if(hasSUpg(15)) eff = eff.mul(getSUpgEff(15))
        if(hasUUpg(13)) eff = eff.mul(upgradeEffect("u",13).r)
        if(hasChallenge("u", 21)) eff = eff.mul(challengeEffect("u", 21))
        if(hasUpgrade("Ui", 11)) eff = eff.mul(tmp.Ui.upgrades[11].effect)
        return eff
    },
    effect(){
        let eff = tmp.r.effbase
        eff = Decimal.pow(eff,player.r.points)
        if (eff.gte(Decimal.pow(10,Decimal.pow(10,1e3)))) eff = eff.log10().pow(Decimal.pow(10,997))
        if (inChallenge("u", 21)) eff = decimalOne
        return eff
    },
    effect2(){
        let eff2 = player.r.points
        eff2 = eff2.pow(0.75)
        if(hasRUpg(21)) eff2 = eff2.mul(getRUpgEff(21))
        if(hasUUpg(22)) eff2 = eff2.pow(getUUpgEff(22))
        if (inChallenge("u", 21)) eff2 = decimalZero
        return eff2
    },
    effectDescription() {
        return "which "+pluralize(player.r.points,'boosts','boost',true)+" cases gain by "+layerText("h2", "r", format(tmp.r.effect))+" and "+pluralize(player.r.points,'increases','increase',true)+" 'Infection' base by "+layerText("h2", "r", format(tmp.r.effect2))
    },
    gainMult() {
        rmult = decimalOne
        if(hasUUpg(14)) rmult = rmult.div(getUUpgEff(14))
        return rmult
    },
    gainExp() {
        return decimalOne
    },
    row: 1,
    resetsNothing() { return hasMilestone("u", 5) },
    layerShown() {
        let shown = player.i.total.gte(decimalOne)
        if(player.r.unlocked) shown = true
        return shown && player.uv.tree == "normal"
    },
    canBuyMax() {
        return hasMilestone("r", 1)
    },
    milestones: {
        0: {
            requirementDescription: "5 replicators",
            effectDescription: "Keep virus upgrades on reset.",
            done() { return player.r.points.gte(5) }
        },
        1: {
            requirementDescription: "12 replicators",
            effectDescription: "You can buy max replicators.",
            done() { return player.r.points.gte(12) }
        },
    },
    upgrades: {
        rows: 3,
        cols: 3,
        11: {
            title: "Replication",
            description: "Infectivity boosts replicators 1st effect base.",
            cost: decimalFour,
            effect(){
            let r11 = player.i.points.add(10).max(10)
            r11 = Decimal.log10(r11).pow(1.2).add(1).max(1)
            if (inChallenge("u", 12)) r11 = decimalOne
            return r11
            },
            effectDisplay(){
            return format(getRUpgEff(11))+"x"
            },
        },
        12: {
            title: "DNA",
            description: "Replicators boost 'Disease'.",
            cost: decimalFive,
            effect(){
            let r12 = player.r.points.add(10).max(10)
            r12 = Decimal.log10(r12).pow(1.6).mul(1.65).add(1).max(1)
            if (!inChallenge("ct",32)) r12 = r12.pow(tmp.e.reff2)
            if(hasRUpg(33)) r12 = r12.pow(getRUpgEff(33))
            if (inChallenge("u", 21)) r12 = decimalOne
            return r12
            },
            effectDisplay(){
            return "^"+format(getRUpgEff(12))
            },
            unlocked(){
                return hasRUpg(11)
            }
        },
        13: {
            title: "Attachment",
            description: "VP boosts replicators 1st effect base.",
            cost: new Decimal(7),
            effect(){
            let r13 = player.v.points.add(10).max(10)
            r13 = Decimal.log10(r13).pow(0.7).add(1).max(1)
            return r13
            },
            effectDisplay(){
            return format(getRUpgEff(13))+"x"
            },
            unlocked(){
                return hasRUpg(12)
            }
        },
        21: {
            title: "Entry",
            description: "VP boosts replicators 2nd effect.",
            cost: new Decimal(12),
            effect(){
            let r21 = player.v.points.add(10).max(10)
            r21 = Decimal.log10(r21).pow(0.35).add(1).max(1)
            return r21
            },
            effectDisplay(){
            return format(getRUpgEff(21))+"x"
            },
            unlocked(){
                return hasRUpg(13)
            }
        },
        22: {
            title: "Uncoating",
            description: "Cases boost 'More Infections'.",
            cost: new Decimal(13),
            effect(){
            let r22 = player.points.add(10).max(10)
            r22 = Decimal.log10(r22).add(10).max(10)
            r22 = Decimal.log10(r22).pow(2).div(10).add(1).max(1)
            r22 = r22.mul(tmp.u.effect2)
            if (r22.gte(4.8e6)) r22 = r22.div(4.8e6).pow(0.5).mul(4.8e6)
            if (r22.gte(3e11)) r22 = Decimal.pow(10,r22.div(3e11).log10().pow(0.5)).mul(3e11)
            if (r22.gte(1e55)) r22 = Decimal.pow(10,r22.div(1e55).log10().pow(0.75)).mul(1e55)
            return r22
            },
            effectDisplay(){
                let dis = format(getRUpgEff(22))+"x"
                if (tmp.r.upgrades[22].effect.gte(4.8e6)) dis += " (softcapped)"
                return dis
            },
            unlocked(){
                return hasRUpg(21)
            }
        },
        23: {
            title: "Transcription",
            description: "'Self Boost' is stronger based on replicators",
            cost: new Decimal(16),
            effect(){
            let r23 = player.r.points.add(10).max(10)
            r23 = Decimal.log10(r23).pow(2.4).add(1).max(1)
            if (hasChallenge("u", 22)) r23 = r23.mul(challengeEffect("u", 22))
            if (hasUUpg(24)) r23 = r23.pow(getUUpgEff(24))
            if (r23.gte(1e25)) r23 = r23.div(1e25).pow(0.3).mul(1e25)
            if (r23.gte(1e80)) r23 = Decimal.pow(10,r23.div(1e80).log10().pow(0.75)).mul(1e80)
            if (inChallenge("u", 21)) r23 = decimalOne
            return r23
            },
            effectDisplay(){
                let dis = "^"+format(getRUpgEff(23))
                if (tmp.r.upgrades[23].effect.gte(1e25)) dis += " (softcapped)"
                return dis
            },
            unlocked(){
                return hasRUpg(22)
            }
        },
        31: {
            title: "Synthesis",
            description: "'Contaminate' is stronger based on replicators",
            cost: new Decimal(20),
            effect(){
            let r31 = player.r.points.add(10).max(10)
            r31 = Decimal.log10(r31).pow(3.8).add(1).max(1)
            if (inChallenge("u", 21)) r31 = decimalOne
            return r31
            },
            effectDisplay(){
            return "^"+format(getRUpgEff(31))
            },
            unlocked(){
                return hasRUpg(23)
            }
        },
        32: {
            title: "Virion",
            description: "Unlock a row of infectivity upgrades.",
            cost: new Decimal(21),
            unlocked(){
                return hasRUpg(31)
            }
        },
        33: {
            title: "Release",
            description: "'DNA' is stronger based on cases",
            cost: new Decimal(26),
            effect(){
            let r33 = player.points.add(10).max(10)
            r33 = Decimal.log10(r33).add(10).max(10)
            r33 = Decimal.log10(r33).pow(0.4).add(1).max(1)
            if (hasUpgrade("e",146)) r33 = r33.pow(upgradeEffect("e",146))
            if (r33.gte(1e50)) r33 = r33.div(1e50).log10().pow(0.5).pow10().mul(1e50)
            return r33
            },
            effectDisplay(){
            return "^"+format(getRUpgEff(33))
            },
            unlocked(){
                return hasIUpg(33)
            }
        },
    },
})
addLayer("u", {
    name: "uncoaters",
    symbol: "U",
    position: 0,
    startData() { return {
        points: decimalZero,
        best: decimalZero,
        total: decimalZero,
        auto: false,
    unlocked: false
    }},
    color: "#3fa3d3",
    requires: new Decimal(5e116),
    resource: "uncoaters",
    resourceSingular: "uncoater",
    baseResource: "infectivity",
    baseAmount() { 
        return player.i.points
    },
    type: "static",
    exponent() {
        let exp = new Decimal(3.2)
        return exp
    },
    base() {
        let base = new Decimal(1e10)
        return base
    },
    branches: ["i","r"],
    hotkeys: [
        {
            key:"u", description: "U:Reset for uncoaters", onPress() {
                if (canReset(this.layer))
                    doReset(this.layer)
            }
        },
    ],
    tabFormat: {
        "Main": {
        content:[
            function() {if (player.tab == "u") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "u") return "resource-display"},
            "blank",
            "upgrades"
            ]
        },
        "Milestones": {
            content:[
                function() {if (player.tab == "u") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "u") return "resource-display"},
            "blank",
            "milestones"
            ],
        },
        "Challenges": {
            content:[
                function() {if (player.tab == "u") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "u") return "resource-display"},
            "blank",
                "challenges"
            ],
            unlocked() {return hasMilestone("u",6)}
        },
    },
    effbase() {
        let eff = new Decimal(30)
        if(hasUUpg(13)) eff = eff.mul(upgradeEffect("u",13).u)
        if(hasSUpg(11)) eff = eff.mul(getSUpgEff(11))
        if(hasSUpg(13)) eff = eff.mul(getSUpgEff(13))
        if(hasDUpg(21)) eff = eff.mul(getDUpgEff(21))
        if (getBuyableAmount("s", 22).gte(1)) eff = eff.mul(tmp.s.buyables[22].effect.add(1).max(1))
        return eff
    },
    effect(){
        let eff =tmp.u.effbase
        eff = eff.pow(player.u.points)
        if(hasFUpg(54)) eff = eff.pow(getFUpgEff(54))
        if (eff.gte(Decimal.pow(10,Decimal.pow(10,15e3)))) eff = eff.log10().mul(Decimal.pow(10,5e3)).pow(Decimal.pow(10,14995).mul(5))
        if (inChallenge("u", 11)) eff = decimalOne
        return eff
    },
    effect2(){
        let eff2 = player.u.points.add(10).max(10)
        eff2 = Decimal.log10(eff2).pow(3)
        if(hasSUpg(12)) eff2 = eff2.mul(getSUpgEff(12))
        if(hasUUpg(23)) eff2 = eff2.pow(getUUpgEff(23))
        if (eff2.gte(Decimal.pow(10,1e4))) eff2 = Decimal.pow(10,eff2.div(Decimal.pow(10,1e4)).log10().pow(0.5)).mul(Decimal.pow(10,1e4))
        if (eff2.gte(Decimal.pow(10,Decimal.pow(10,1e15)))) eff2 = Decimal.pow(10,eff2.div(Decimal.pow(10,Decimal.pow(10,1e15))).log10().pow(0.3)).mul(Decimal.pow(10,Decimal.pow(10,1e15)))
        if (eff2.gte(Decimal.pow(10,Decimal.pow(10,1e52)))) eff2 = eff2.div(Decimal.pow(10,Decimal.pow(10,1e52))).log10().log10().pow(0.85).pow10().pow10().mul(Decimal.pow(10,Decimal.pow(10,1e52)))
        if (inChallenge("u", 11)) eff2 = decimalOne
        return eff2
    },
    effectDescription() {
        return "which "+pluralize(player.u.points,'boosts','boost',true)+" cases and infectivity by "+layerText("h2", "u", format(tmp.u.effect))+", and "+pluralize(player.u.points,'boosts','boost',true)+" 'Uncoating' by "+layerText("h2", "u", format(tmp.u.effect2))
    },
    gainMult() {
        umult = decimalOne
        if (hasChallenge("u", 11)) umult = umult.div(challengeEffect("u", 11))
        return umult
    },
    gainExp() {
        return decimalOne
    },
    directMult () {
        let gain = tmp.Uu.effect
        return gain
    },
    row: 2,
    layerShown() {
        let shown = hasIUpg(33)
        if(player.u.unlocked) shown = true
        return shown && player.uv.tree == "normal"
    },
    doReset(resettingLayer) {
        let keep = [];
        if (resettingLayer=="d") {
            if (hasMilestone("d",0)) keep.push("milestones")
            if (hasMilestone("d",6)) keep.push("upgrades")
            if (hasMilestone("d",3)) keep.push("challenges")
        }
        if (hasMilestone("a", 0)) {
            keep.push("upgrades")
            keep.push("milestones")
        }
        if (hasMilestone("f", 0) || hasMilestone("a", 1)) keep.push("challenges")
        if (layers[resettingLayer].row > this.row || resettingLayer=="d") layerDataReset(this.layer, keep)
    },
    autoPrestige() { return (hasMilestone("d", 2) && player.d.auto) },
    canBuyMax() { return hasMilestone("d", 1)},
    resetsNothing() { return hasMilestone("d", 5) },
    milestones: {
        0: {
            requirementDescription: "2 uncoaters",
            effectDescription: "Keep Infectivity/Replicator milestones on reset.",
            done() { return player.u.points.gte(2) }
        },
        2: {
            requirementDescription: "3 uncoaters",
            effectDescription: "Gain 100% of infectivity gain per second.",
            done() { return player.u.points.gte(3) }
        },
        3: {
            requirementDescription: "6 uncoaters",
            effectDescription: "Keep Infectivity/Replicator upgrades on reset.",
            done() { return player.u.points.gte(6) }
        },
        4: {
            requirementDescription: "8 uncoaters",
            effectDescription: "Autobuy replicators.",
            toggles: [["u", "auto"]],
            done() { return player.u.points.gte(8) }
        },
        5: {
            requirementDescription: "10 uncoaters",
            effectDescription: "Replicators reset nothing.",
            done() { return player.u.points.gte(10) }
        },
        6: {
            requirementDescription: "15 uncoaters",
            effectDescription: "Unlock uncoater challenges.",
            done() { return player.u.points.gte(15) }
        },
    },
    upgrades: {
        rows: 2,
        cols: 4,
        11: {
            title: "Uncoated Infection",
            description: "Best uncoaters boosts 'Infection' base.",
            cost: decimalTwo,
            effect(){
            let u11 = player.u.best.add(1).max(1)
            u11 = u11.pow(4.5)
            if (inChallenge("u", 11) || inChallenge("s", 21)) u11 = decimalOne
            return u11
            },
            effectDisplay(){
            return format(getUUpgEff(11))+"x"
            },
        },
        12: {
            title: "Water Transmission",
            description: "'Transmission' softcap starts later based on uncoaters and replicators.",
            cost: decimalThree,
            effect(){
            let u12 = tmp.u.effect.pow(7.5)
            let rep = player.r.points
            u12 = u12.pow(rep.div(10).add(1).max(1))
            if (inChallenge("u", 11) || inChallenge("u", 21) || inChallenge("s", 21)) u12 = decimalOne
            if (u12.gte(Decimal.pow(10,1500))) u12 = u12.div(Decimal.pow(10,1500)).pow(0.3).mul(Decimal.pow(10,1500))
            if (u12.gte(Decimal.pow(10,15000))) u12 = Decimal.pow(10,u12.div(Decimal.pow(10,1500)).log10().pow(2/3)).mul(Decimal.pow(10,15000))
            if (u12.gte(Decimal.pow(10,1e17))) u12 = Decimal.pow(10,u12.div(Decimal.pow(10,1e17)).log10().pow(0.93)).mul(Decimal.pow(10,1e17))
            if (u12.gte(Decimal.pow(10,1e70))) u12 = Decimal.pow(10,u12.div(Decimal.pow(10,1e70)).log10().pow(0.9)).mul(Decimal.pow(10,1e70))
            if (u12.gte(Decimal.pow(10,Decimal.pow(10,1e3)))) u12 = u12.log10().pow(Decimal.pow(10,997))
            return u12
            },
            effectDisplay(){
                let u12dis = format(getUUpgEff(12))+"x"
                if (tmp.u.upgrades[12].effect.gte(Decimal.pow(10,1500))) u12dis = u12dis + " (softcapped)"
                return u12dis
            },
            unlocked(){
                return hasUUpg(11)
            }
        },
        13: {
            title: "Synergy",
            description: "Uncoaters and replicators boost each other .",
            cost: decimalFour,
            effect(){
                let u13 = player.u.points.add(1).max(1)
                let u13b = player.r.points.add(1).max(1)
                u13 = u13.pow(2.2)
                u13b = u13b.pow(0.63)
                if (hasMilestone("Ui", 5)) {
                    u13 = u13.pow(10)
                    u13b = powExp(u13b.pow(5),3)
                }
                if (inChallenge("u", 11) || inChallenge("s", 21)) u13 = decimalOne
                if (inChallenge("u", 21) || inChallenge("s", 21)) u13b = decimalOne
                return {r:u13, u:u13b}
            },
            effectDisplay(){
            return format(tmp.u.upgrades[13].effect.r)+"x to replicators base, "+format(tmp.u.upgrades[13].effect.u)+"x to uncoaters base."
            },
            unlocked(){
                return hasUUpg(12)
            }
        },
        14: {
            title: "Genome Replication",
            description: "Cases make replicators cheaper.",
            cost: new Decimal(6),
            effect(){
            let u14 = player.points.add(1).max(1)
            u14 = Decimal.log10(u14).pow(0.83)
            u14 = Decimal.pow(10,u14).pow(1.536)
            if (hasUpgrade("Ui", 11)) u14 = u14.pow(2)
            if (hasUpgrade("Ui", 21)) u14 = powExp(u14,1.1)
            if (inChallenge("s", 21)) u14 = decimalOne
            return u14
            },
            effectDisplay(){
            return format(getUUpgEff(14))+"x"
            },
            unlocked(){
                return hasUUpg(13)
            }
        },
        21: {
            title: "Bird Transmission",
            description: "Remove 'Air Transmission' hardcap and its softcap starts later based on cases.",
            cost: new Decimal(8),
            effect(){
            let u21 = player.points.add(10).max(10)
            u21 = Decimal.log10(u21).add(10).max(10)
            u21 = Decimal.log10(u21).add(10).max(10)
            u21 = u21.pow(0.1).div(1.12)
            if (inChallenge("s", 21)) u21 = decimalOne
            return u21
            },
            effectDisplay(){
            return format(getUUpgEff(21))+"x"
            },
            unlocked(){
                return hasUUpg(14)
            }
        },
        22: {
            title: "Viral Proteins",
            description: "Infectivity boosts replicators 2nd effect.",
            cost: decimalTen,
            effect(){
            let u22 = player.i.points.add(10).max(10)
            u22 = Decimal.log10(u22)
            u22 = u22.pow(0.26).add(0.13)
            if (inChallenge("u", 12) || inChallenge("s", 21)) u22 = decimalOne
            return u22
            },
            effectDisplay(){
            return "^"+format(getUUpgEff(22))
            },
            unlocked(){
                return hasUUpg(21)
            }
        },
        23: {
            title: "Viral Enzymes",
            description: "Infectivity boosts uncoaters 2nd effect.",
            cost: new Decimal(11),
            effect(){
            let u23 = player.i.points.add(10).max(10)
            u23 = Decimal.log10(u23)
            u23 = u23.pow(0.0747)
            if (u23.gte(150)) u23 = u23.div(150).pow(0.333).mul(150)
            if (u23.gte(1e9)) u23 = u23.div(1e9).pow(0.2).mul(1e9)
            if (inChallenge("u", 12) || inChallenge("s", 21)) u23 = decimalOne
            return u23
            },
            effectDisplay(){
                let dis = "^"+format(getUUpgEff(23))
                if (getUUpgEff(23).gte(150)) dis += " (softcapped)"
                return dis
            },
            unlocked(){
                return hasUUpg(22)
            }
        },
        24: {
            title: "Endocytosis",
            description: "'Transcription' is stronger based on uncoaters.",
            cost: new Decimal(13),
            effect(){
            let u24 = player.u.points.add(10).max(10)
            u24 = Decimal.log10(u24)
            u24 = u24.pow(1.523)
            if (inChallenge("u", 11) || inChallenge("s", 21)) u24 = decimalOne
            return u24
            },
            effectDisplay(){
            return "^"+format(getUUpgEff(24))
            },
            unlocked(){
                return hasUUpg(23)
            }
        },
    },
    challenges: { // Order: 1x1,2x1,1x2,3x1,4x1,2x2,1x3,3x2,2x3,4x2,3x3,4x3
        rows: 2,
        cols: 2,
        11: {
            name: "Coated",
            challengeDescription: function() {
                let c11 = "Uncoaters are useless."
                if (inChallenge("u", 11)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("u", 11) == 3) c11 = c11 + " (Completed)"
                c11 = c11 + "<br>Completed:" + challengeCompletions("u",11) + "/" + tmp.u.challenges[11].completionLimit
                return c11
            },
            goal(){
                if (challengeCompletions("u", 11) == 0) return Decimal.pow(10,2610);
                if (challengeCompletions("u", 11) == 1) return Decimal.pow(10,2865);
                if (challengeCompletions("u", 11) == 2) return Decimal.pow(10,4860);
            },
            currencyDisplayName: "cases",
            completionLimit:3 ,
            rewardDescription: "Infectivity makes uncoaters cheaper.",
            rewardEffect() {
                 let c11 = player.i.points.add(1).max(1)
                 let c11r = new Decimal(1.27)
                 let c11c = challengeCompletions("u", 11)
                 c11c = Decimal.pow(1.2, c11c)
                 c11 = Decimal.log10(c11).pow(0.7)
                 c11 = Decimal.pow(10,c11)
                 c11r = c11r.mul(c11c)
                 c11 = c11.pow(c11r)
                 c11 = c11.pow(tmp.s.buyables[13].effect)
                 if (hasMilestone("Ui", 5)) c11 = powExp(c11.pow(1.1),1.1)
                 if (inChallenge("u", 12)) c11 = decimalOne
                 return c11
            },
            rewardDisplay() {return format(tmp.u.challenges[11].rewardEffect)+"x"},
            unlocked(){
                return hasMilestone("u", 6)
            }
        },
        12: {
            name: "Disinfectant",
            challengeDescription: function() {
                let c12 = "Infectivity and 'Infection' are useless."
                if (inChallenge("u", 12)) c12 = c12 + " (In Challenge)"
                if (challengeCompletions("u", 12) == 3) c12 = c12 + " (Completed)"
                c12 = c12 + "<br>Completed:" + challengeCompletions("u",12) + "/" + tmp.u.challenges[12].completionLimit
                return c12
            },
            goal(){
                if (challengeCompletions("u", 12) == 0) return Decimal.pow(10,714);
                if (challengeCompletions("u", 12) == 1) return Decimal.pow(10,2360);
                if (challengeCompletions("u", 12) == 2) return Decimal.pow(10,3434);
            },
            currencyDisplayName: "cases",
            completionLimit:3 ,
            rewardDescription: "Cases boost 'Genetic ReShuffle'.",
            rewardEffect() {
                 let c12 = player.points.add(10).max(10)
                 let c12r = new Decimal(1/5)
                 let c12c = challengeCompletions("u", 12)
                 c12c = Decimal.div(c12c, 20)
                 c12r = c12r.add(c12c)
                 c12 = Decimal.log10(c12).add(10).max(10)
                 c12 = Decimal.log10(c12).pow(c12r)
                 return c12
            },
            rewardDisplay() {return "^"+format(tmp.u.challenges[12].rewardEffect)},
            unlocked(){
                return hasChallenge("u", 11)
            }
        },
        21: {
            name: "Unreplicated",
            challengeDescription: function() {
                let c21 = "Replicators are useless."
                if (inChallenge("u", 21)) c21 = c21 + " (In Challenge)"
                if (challengeCompletions("u", 21) == 3) c21 = c21 + " (Completed)"
                c21 = c21 + "<br>Completed:" + challengeCompletions("u",21) + "/" + tmp.u.challenges[21].completionLimit
                return c21
            },
            goal(){
                if (challengeCompletions("u", 21) == 0) return Decimal.pow(10,3700);
                if (challengeCompletions("u", 21) == 1) return Decimal.pow(10,5720);
                if (challengeCompletions("u", 21) == 2) return Decimal.pow(10,6905);
            },
            currencyDisplayName: "cases",
            completionLimit:3 ,
            rewardDescription: "Cases boost replicators 1st effect base.",
            rewardEffect() {
                 let c21 = player.points.add(10).max(10)
                 let c21r = decimalHalf
                 let c21c = challengeCompletions("u", 21)
                 c21c = Decimal.div(c21c, 2)
                 c21r = c21r.add(c21c)
                 c21 = Decimal.log10(c21).pow(c21r)
                 return c21
            },
            rewardDisplay() {return format(tmp.u.challenges[21].rewardEffect)+"x"},
            unlocked(){
                return hasChallenge("u", 12)
            }
        },
        22: {
            name: "Masks",
            challengeDescription: function() {
                let c22 = "'Transmission' softcap starts instantly and 'Coated' and 'Disinfectant' are applied at once. Cases gain is multiplied by 5^(total challenge completions-4)"
                if (inChallenge("u", 22)) c22 = c22 + " (In Challenge)"
                if (challengeCompletions("u", 22) == 3) c22 = c22 + " (Completed)"
                c22 = c22 + "<br>Completed:" + challengeCompletions("u",22) + "/" + tmp.u.challenges[22].completionLimit
                return c22
            },
            goal(){
                if (challengeCompletions("u", 22) == 0) return new Decimal(1e14);
                if (challengeCompletions("u", 22) == 1) return new Decimal(5e19);
                if (challengeCompletions("u", 22) == 2) return new Decimal(5e21);
            },
            currencyDisplayName: "cases",
            completionLimit:3 ,
            countsAs: [11, 12],
            rewardDescription: "VP boosts 'Transcription' and makes 'Transmission' softcap weaker.",
            rewardEffect() {
                 let c22 = player.v.points.add(10).max(10)
                 let c22r = new Decimal(0.15)
                 let c22c = challengeCompletions("u", 22)
                 c22c = Decimal.div(c22c, 20)
                 c22r = c22r.add(c22c)
                 c22 = Decimal.log10(c22).add(10).max(10)
                 c22 = Decimal.max(Decimal.log10(c22).pow(c22r).div(1.15),1)
                 return c22
            },
            rewardDisplay() {return format(tmp.u.challenges[22].rewardEffect)+"x"},
            unlocked(){
                return hasChallenge("u", 21)
            }
        },
    },
})
addLayer("s", {
    name: "symptoms",
    symbol: "S",
    position: 1,
    startData() { return {
        points: decimalZero,
        best: decimalZero,
        total: decimalZero,
        auto: false,
        severity: decimalZero,
        recoveries: decimalZero,
        time: decimalZero,
        ct: 0,
        unlocked: false
    }},
    color: "#5ad93f",
    requires: Decimal.pow(10,10310),
    resource: "symptoms",
    resourceSingular: "symptom",
    baseResource: "infectivity",
    baseAmount() { 
        return player.i.points
    },
    type: "static",
    exponent: new Decimal(1.99),
    base: Decimal.pow(10,570),
    branches: ["i","r","u"],
    hotkeys: [
        {
            key:"s", description: "S:Reset for symptoms", onPress() {
                if (canReset(this.layer))
                    doReset(this.layer)
            }
        },
    ],
    doReset(resettingLayer) {
        let keep = [];
        if (resettingLayer=="d") {
            keep.push("challenges")
            if (hasMilestone("d",0)) keep.push("milestones")
            if (hasMilestone("d",6)) keep.push("upgrades")
        }
        if (hasMilestone("a",1)) keep.push("milestones")
        if (hasMilestone("f", 3) || hasMilestone("a",1)) keep.push("upgrades")
        if (hasMilestone("f", 4) || hasMilestone("a",1)) keep.push("challenges")
        if (layers[resettingLayer].row > this.row || resettingLayer=="d") layerDataReset(this.layer, keep)
    },
    resetsNothing() { return hasMilestone("d", 9) },
    autoPrestige() { return (hasMilestone("d", 7) && player.d.autos) },
    effbase() {
        let eff = new Decimal(123)
        eff = eff.mul(tmp.s.buyables[21].effect)
        if (hasDUpg(11)) eff = eff.mul(getDUpgEff(11))
        if (hasSUpg(35)) eff = eff.mul(getSUpgEff(35))
        return eff
    },
    effect(){
        let eff = tmp.s.effbase
        eff = eff.pow(player.s.points).sub(1)
        if (inChallenge("ct",32)) {
            eff = player.s.points.mul(tmp.Ur.replicantEff)
            if (hasUpgrade("Ui",32)) eff = eff.mul(tmp.Ui.upgrades[32].effect)
            if (hasUpgrade("Ui",33)) eff = eff.mul(tmp.Ui.upgrades[33].effect)
            if (hasMilestone("Ui",12)) eff = eff.mul(tmp.Ui.milestones[12].effect)
        }        
        else {
        if (hasSUpg(14)) eff = eff.mul(getSUpgEff(14))
        if (hasSUpg(32)) eff = eff.mul(getSUpgEff(32))
        eff = eff.mul(tmp.s.buyables[11].effect)
        eff = eff.mul(tmp.d.effect)
        eff = eff.mul(tmp.f.effect)
        if (hasChallenge("s", 11)) eff = eff.mul(challengeEffect("s", 11))
        eff = eff.pow(tmp.s.buyables[33].effect)
        if (player.s.severity.gte(new Decimal(1.797e308))) eff = eff.div(tmp.s.recoveryEff)
        if (hasDUpg(42)) {
            if (hasDUpg(31)) eff = eff.pow(getDUpgEff(31))
            if (hasDUpg(32)) eff = eff.pow(getDUpgEff(32))
            if (hasChallenge("s", 22)) eff = eff.pow(challengeEffect("s", 22))
            if (hasSUpg(53)) eff = Decimal.pow(10,eff.log10().pow(getSUpgEff(53)))
            if (hasSUpg(54)) eff = Decimal.pow(10,eff.log10().pow(getSUpgEff(54)))
            if (hasDUpg(44)) eff = Decimal.pow(10,eff.log10().pow(getDUpgEff(44)))
            if (hasFUpg(21)) eff = Decimal.pow(10,eff.log10().pow(getFUpgEff(21)))
        }
        if (eff.gte(Decimal.pow(10,2e6))) eff = eff.log10().mul(5000).pow(2e5)
        if (player.s.points.eq(0)) eff = decimalZero
        if (hasFUpg(11)) eff = eff.mul(getFUpgEff(11))
        if (hasFUpg(13)) eff = eff.mul(getFUpgEff(13))
        if (hasFUpg(15)) eff = eff.mul(tmp.f.effect)
        eff = eff.mul(tmp.d.buyables[11].effect).mul(tmp.ct.effect)
        }
        return eff
    },
    recoveryGain() {
        let s = player.s.severity
        let recov = (s.add(10).max(10)).log10().div(308.254).pow(40)
        let r = player.s.recoveries.add(1).max(1)
        if (s.gte(Decimal.pow(10,1000))) recov = recov.pow(s.log10().sub(999).pow(0.3)).pow(r.log10().pow(0.1))
        if (s.gte(Decimal.pow(10,150000))) recov = Decimal.pow(10,recov.log10().pow(s.log10().div(3e6).add(0.95)))
        if (hasDUpg(42)) recov = decimalZero
        return recov
    },
    recoveryEff() {
        let s = player.s.severity
        let recov = player.s.recoveries.add(1).max(1)
        recov = Decimal.log10(recov).add(1).max(1).pow(40)
        if (s.gte(Decimal.pow(10,1000))) recov = recov.pow(s.log10().sub(999).pow(0.15)).pow(recov.log10().pow(0.2))
        if (s.gte(Decimal.pow(10,2000))) recov = recov.pow(s.log10().sub(1999).pow(0.12))
        if (s.gte(Decimal.pow(10,5000))) recov = Decimal.pow(10,recov.log10().pow(s.log10().sub(4999).pow(0.02)))
        if (s.gte(Decimal.pow(10,150000))) recov = Decimal.pow(10,recov.log10().pow(s.log10().div(1.5e6).add(0.9)))
        if (hasDUpg(31)) recov = recov.pow(getDUpgEff(31))
        if (hasDUpg(32)) recov = recov.pow(getDUpgEff(32))
        if (hasChallenge("s", 22)) recov = recov.pow(challengeEffect("s", 22))
        if (hasSUpg(53)) recov = Decimal.pow(10,recov.log10().pow(getSUpgEff(53)))
        if (hasSUpg(54)) recov = Decimal.pow(10,recov.log10().pow(getSUpgEff(54)))
        if (hasDUpg(42)) recov = decimalOne
        return recov
    },
    effectDescription() {
        let desc = "which "+pluralize(player.s.points,'produces ','produce ',true) + layerText("h2", "s", format(tmp.s.effect)) + " severity "
        if (tmp.s.effect.gte(Decimal.pow(10,2e6))) desc += " (softcapped) "
        if (player.s.severity.gte(new Decimal(1.797e308)) && !hasDUpg(42)) desc = desc + "and " + format(tmp.s.recoveryGain) +pluralize(tmp.s.recoveryGain,'recovery','recoveries')
        desc = desc + " per second."
        return desc
    },
    severityEff() {
        let seff = player.s.severity.add(1).max(1)
        seff = seff.pow(6)
        if (hasSUpg(21)) seff = seff.pow(getSUpgEff(21))
        if (hasSUpg(51)) seff = seff.pow(getSUpgEff(51))
        if (seff.gte("eee3")) seff = seff.log10().pow("e997")
        if (inChallenge("s", 11)) seff = decimalOne
        return seff
    },
    bulk() {
        let buymult = decimalOne
        if (hasMilestone("d", 4)) buymult = buymult.mul(10)
        if (hasMilestone("a", 0)) buymult = buymult.mul(2)
        if (hasAchievement("a", 41)) buymult = buymult.mul(2)
        if (hasDUpg(23)) buymult = buymult.mul(2)
        if (hasDUpg(32)) buymult = buymult.mul(5)
        if (hasDUpg(33)) buymult = buymult.mul(2)
        if (hasSUpg(55)) buymult = buymult.mul(25)
        if (hasMilestone("f", 8)) buymult = buymult.mul(100)
        if (hasFUpg(73)) buymult = buymult.mul(1000)
        if (hasFUpg(123)) buymult = buymult.pow(2)
        if (hasFUpg(143)) buymult = buymult.pow(10)
        if (hasUpgrade("e",15)) buymult = buymult.tetrate(1.79e308)
        return buymult
    },
    speed() {
        let speed = 1
        if (hasMilestone("d", 9)) speed *= 2
        if (hasMilestone("a", 0)) speed *= 2
        if (hasAchievement("a", 41)) speed *= 2
        if (hasDUpg(33)) speed *= 2
        if (hasFUpg(73)) speed *= 2
        return speed
    },
    update(diff) {
        if (player.s.unlocked) player.s.severity = player.s.severity.add(tmp.s.effect.times(diff));
        if (tmp.s.effect.gte(Decimal.pow(10,1000)) && player.s.severity.lt(Decimal.pow(10,1000))) player.s.severity = Decimal.pow(10,1000)
        if (tmp.s.effect.gte(Decimal.pow(10,5000)) && player.s.severity.lt(Decimal.pow(10,5000))) player.s.severity = Decimal.pow(10,5000)
        if (player.s.severity.gte(1.797e308)) player.s.recoveries = player.s.recoveries.add(tmp.s.recoveryGain.times(diff));
        if (player.s.recoveries.log10().gte(tmp.s.recoveryGain.log10().add(2))) player.s.recoveries = tmp.s.recoveryGain.mul(100)
        let t = diff*tmp.s.speed
            player.s.time = Decimal.add(player.s.time, t)
            if (player.s.time.gte(1) && tmp.s.speed<20) {
                let times = Decimal.floor(player.s.time).mul(-1)
                player.s.time = Decimal.add(player.s.time, times)
                times = times.mul(-1)
                if ((hasUpgrade("s", 31) || hasAchievement("a", 41)) && tmp.s.speed<20) {
                    layers.s.buyables[11].buyMax(times.mul(tmp.s.bulk))
                    layers.s.buyables[12].buyMax(times.mul(tmp.s.bulk))
                    layers.s.buyables[13].buyMax(times.mul(tmp.s.bulk))
                    layers.s.buyables[21].buyMax(times.mul(tmp.s.bulk))
                    layers.s.buyables[22].buyMax(times.mul(tmp.s.bulk))
                    layers.s.buyables[23].buyMax(times.mul(tmp.s.bulk))
                    layers.s.buyables[31].buyMax(times.mul(tmp.s.bulk))
                    layers.s.buyables[32].buyMax(times.mul(tmp.s.bulk))
                    layers.s.buyables[33].buyMax(times.mul(tmp.s.bulk))
                }
            };
        if (player.s.ct <0.1 && (inChallenge("s", 11) || inChallenge("s", 12) || inChallenge("s", 21) || inChallenge("s", 22)))player.s.ct += diff
        if (player.s.ct >= 0.1) {
            player.v.upgrades = [11,12,13,21,22,23,31,32,33]
        }
        if ((hasUpgrade("s", 31) || hasAchievement("a", 41)) && tmp.s.speed>20) {
            let s = player.s.severity.max(1)
            player.s.buyables[11] = player.s.buyables[11].add(Decimal.log10(s.div(1e15)).div(Decimal.log10(2.5)).pow(10/13).ceil().sub(player.s.buyables[11]).min(tmp.s.bulk)).max(player.s.buyables[11])
            player.s.buyables[12] = player.s.buyables[12].add(Decimal.log10(s.div(1e19)).pow(Decimal.pow(1.29,-1)).ceil().sub(player.s.buyables[12]).min(tmp.s.bulk)).max(player.s.buyables[12])
            player.s.buyables[13] = player.s.buyables[13].add(Decimal.log10(s.div(2e164)).div(Decimal.log10(tmp.s.buyables[13].scalebase)).pow(Decimal.pow(1.5,-1)).ceil().sub(player.s.buyables[13]).min(tmp.s.bulk)).max(player.s.buyables[13])
            player.s.buyables[21] = player.s.buyables[21].add(Decimal.log10(s.div(1e20)).div(Decimal.log10(65)).pow(Decimal.pow(1.35,-1)).ceil().sub(player.s.buyables[21]).min(tmp.s.bulk)).max(player.s.buyables[21])
            player.s.buyables[22] = player.s.buyables[22].add(Decimal.log10(s.div(1e37)).div(Decimal.log10(tmp.s.buyables[22].scalebase)).pow(Decimal.pow(1.5,-1)).ceil().sub(player.s.buyables[22]).min(tmp.s.bulk)).max(player.s.buyables[22])
            player.s.buyables[23] = player.s.buyables[23].add(Decimal.log10(s.div(1e270)).div(Decimal.log10(tmp.s.buyables[23].scalebase)).pow(Decimal.pow(1.65,-1)).ceil().sub(player.s.buyables[23]).min(tmp.s.bulk)).max(player.s.buyables[23])
            player.s.buyables[31] = player.s.buyables[31].add(Decimal.log10(s.div(Decimal.pow(10,34e5))).div(Decimal.log10(tmp.s.buyables[31].scalebase)).pow(0.5).ceil().sub(player.s.buyables[31]).min(tmp.s.bulk)).max(player.s.buyables[31])
            player.s.buyables[32] = player.s.buyables[32].add(Decimal.log10(s.div(Decimal.pow(10,3573000))).div(Decimal.log10(tmp.s.buyables[32].scalebase)).pow(0.5).ceil().sub(player.s.buyables[32]).min(tmp.s.bulk)).max(player.s.buyables[32])
            player.s.buyables[33] = player.s.buyables[33].add(Decimal.log10(s.div(Decimal.pow(10,388e4))).div(Decimal.log10(tmp.s.buyables[33].scalebase)).pow(Decimal.pow(2.2,-1)).ceil().sub(player.s.buyables[33]).min(tmp.s.bulk)).max(player.s.buyables[33])
        }
    },
    tabFormat: {
        "Main": {
        content:[
            function() {if (player.tab == "s") return "main-display"},
            "prestige-button",
            "blank",
            ["raw-html", function() {if (player.tab == "s") return "You have " + layerText("h2", "s", format(player.s.severity)) +  ' severity, which boosts cases, VP, and infectivity by ' + layerText("h2", "s", format(tmp.s.severityEff))}],
            ["display-text",
            function() {
                if (player.s.severity.gte(1.797e308) && !hasDUpg(42)) return 'You have ' + formatWhole(player.s.recoveries) + ' '+pluralize(player.s.recoveries,'recovery','recoveries',true)+', which '+pluralize(player.s.recoveries,'divides','divide',true)+' severity gain by ' + format(tmp.s.recoveryEff)
            },
            ],
            "upgrades"
            ]
        },
        "Milestones": {
            content:[
                function() {if (player.tab == "s") return "main-display"},
            "prestige-button",
            "blank",
            ["raw-html", function() {if (player.tab == "s") return "You have " + layerText("h2", "s", format(player.s.severity)) +  ' severity, which boosts cases, VP, and infectivity by ' + layerText("h2", "s", format(tmp.s.severityEff))}],
            ["display-text",
            function() {
                if (player.s.severity.gte(1.797e308) && !hasDUpg(42)) return 'You have ' + formatWhole(player.s.recoveries) + ' '+pluralize(player.s.recoveries,'recovery','recoveries',true)+', which '+pluralize(player.s.recoveries,'divides','divide',true)+' severity gain by ' + format(tmp.s.recoveryEff)
            },
            ],
                "milestones"
            ],
        },
        "Buyables": {
            content:[
                function() {if (player.tab == "s") return "main-display"},
            "prestige-button",
            "blank",
            ["raw-html", function() {if (player.tab == "s") return "You have " + layerText("h2", "s", format(player.s.severity)) +  ' severity, which boosts cases, VP, and infectivity by ' + layerText("h2", "s", format(tmp.s.severityEff))}],
            ["display-text",
            function() {
                if (player.s.severity.gte(1.797e308) && !hasDUpg(42)) return 'You have ' + formatWhole(player.s.recoveries) + ' '+pluralize(player.s.recoveries,'recovery','recoveries',true)+', which '+pluralize(player.s.recoveries,'divides','divide',true)+' severity gain by ' + format(tmp.s.recoveryEff)
            },
            ],
                "buyables"
            ],
            unlocked() {return hasMilestone("s",2)}
        },
        "Challenges": {
            content:[
                function() {if (player.tab == "s") return "main-display"},
            "prestige-button",
            "blank",
            ["raw-html", function() {if (player.tab == "s") return "You have " + layerText("h2", "s", format(player.s.severity)) +  ' severity, which boosts cases, VP, and infectivity by ' + layerText("h2", "s", format(tmp.s.severityEff))}],
            ["display-text",
            function() {
                if (player.s.severity.gte(1.797e308) && !hasDUpg(42)) return 'You have ' + formatWhole(player.s.recoveries) + ' '+pluralize(player.s.recoveries,'recovery','recoveries',true)+', which '+pluralize(player.s.recoveries,'divides','divide',true)+' severity gain by ' + format(tmp.s.recoveryEff)
            },
            ],
                "challenges"
            ],
            unlocked() {return hasMilestone("d",8)}
        },
    },
    gainMult() {
        smult = decimalOne
        let s = player.s.points
        let ssc = new Decimal(8)
        let ssc2 = new Decimal(20)
        if (hasDUpg(41)) ssc2 = ssc2.add(getDUpgEff(41))
        if (s.gte(ssc)) smult = smult.mul(Decimal.pow(1e100, s.sub(ssc).pow(3.7)))
        if (s.gte(ssc2)) smult = smult.mul(Decimal.pow(Decimal.pow(10,10000),Decimal.pow(1.9,s.sub(ssc2))))
        return smult
    },
    gainExp() {
        return decimalOne
    },
    row: 2,
    layerShown() {
        let shown = challengeCompletions("u" ,22) == 3
        if(player.s.unlocked) shown = true
        return shown && player.uv.tree == "normal"
    },
    canBuyMax() {return hasMilestone("f",12)},
    milestones: {
        0: {
            requirementDescription: "2 symptoms",
            effectDescription: "Keep Infectivity/Replicator milestones on reset.",
            done() { return player.s.points.gte(2) }
        },
        1: {
            requirementDescription: "3 symptoms",
            effectDescription: "Keep Infectivity/Replicator upgrades on reset.",
            done() { return player.s.points.gte(3) }
        },
        2: {
            requirementDescription: "4 symptoms",
            effectDescription: "Unlock buyables.",
            done() { return player.s.points.gte(4) }
        },
        3: {
            requirementDescription: "10 symptoms",
            effectDescription: "Unlock 2 more buyables.",
            done() { return player.s.points.gte(10) }
        },
    },
    buyables: {
		rows: 3,
        cols: 3,
        11: {
			title: "Severity Gain",
			cost(x=player.s.buyables[11]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(2.5, x.pow(1.3)).mul(1e15)
                return cost.floor()
            },
            base() { 
                let base = decimalTwo
                if (hasSUpg(33)) base = base.add(getSUpgEff(33))
                base = base.mul(tmp.s.buyables[31].effect)
                return base
            },
            extra() {
                let extra = decimalZero
                if (!inChallenge("s", 22)) {
                if (hasSUpg(22)) extra = extra.add(tmp.s.buyables[12].total)
                if (hasSUpg(23)) extra = extra.add(tmp.s.buyables[21].total)
                extra = extra.add(tmp.d.buyables[11].total)
                extra = extra.add(tmp.s.buyables[33].total)
                }
                return extra
            },
            total() {
                let total = getBuyableAmount("s", 11).add(tmp.s.buyables[11].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp.s.buyables[11].total
                let base = tmp.s.buyables[11].base
                if (inChallenge("s", 12)) x = decimalZero
                return Decimal.pow(base, x);
            },
			display() { // Everything else displayed in the buyable button after the title
                let extra = ""
                if (hasSUpg(22)) extra = "+" + formatWhole(tmp.s.buyables[11].extra)
                if (player.tab != "s") return 
                return "Multiply severity gain by "+format(this.base())+".\n\
                Cost: " + format(tmp.s.buyables[11].cost)+" severity\n\
                Effect: " + format(tmp.s.buyables[11].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("s", 11)) + extra
            },
            unlocked() { return hasMilestone("s", 2) }, 
            canAfford() {
                    return player.s.severity.gte(tmp.s.buyables[11].cost)},
            buy() { 
                cost = tmp.s.buyables[11].cost
                if (tmp.s.buyables[11].canAfford) {
                    if (!hasMilestone("d", 4)) player.s.severity = player.s.severity.sub(cost).max(0)	
                    player.s.buyables[11] = player.s.buyables[11].add(1).max(1)
                }
            },
            buyMax(max) {
                let s = player.s.severity
                let target = Decimal.log10(s.div(1e15)).div(Decimal.log10(2.5)).pow(10/13)
                target = target.ceil()
                let cost = Decimal.pow(2.5, target.sub(1).pow(1.3)).mul(1e15)
                let diff = target.sub(player.s.buyables[11])
                if (tmp.s.buyables[11].canAfford) {
                    if (!hasMilestone("d", 4)) player.s.severity = player.s.severity.sub(cost).max(0)
                    if (diff.gt(max)) diff = max
                    player.s.buyables[11] = player.s.buyables[11].add(diff)
                }
            },
        },
        12: {
			title: "Infectivity Gain",
			cost(x=player.s.buyables[12]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(10, x.pow(1.29)).mul(1e19)
                return cost.floor()
            },
            base() { 
                let base = new Decimal(1e100)
                if (hasDUpg(13)) base = base.mul(getDUpgEff(13))
                return base
            },
            extra() {
                let extra = decimalZero
                extra = extra.add(tmp.s.buyables[33].total)
                if (hasSUpg(25) && !inChallenge("s", 21)) extra = extra.add(tmp.s.buyables[22].total)
                if (hasSUpg(34) && !inChallenge("s", 21)) extra = extra.add(tmp.s.buyables[13].total)
                extra = extra.add(tmp.d.buyables[12].total)
                return extra
            },
            total() {
                let total = getBuyableAmount("s", 12).add(tmp.s.buyables[12].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp.s.buyables[12].total
                let base = tmp.s.buyables[12].base
                if (inChallenge("s", 12)) x = decimalZero
                return Decimal.pow(base, x);
            },
			display() { // Everything else displayed in the buyable button after the title
                let extra = ""
                if (player.tab != "s") return 
                if (hasSUpg(25)) extra = "+" + formatWhole(tmp.s.buyables[12].extra)
                return "Multiply Infectivity gain by "+format(tmp.s.buyables[12].base)+".\n\
                Cost: " + format(tmp.s.buyables[12].cost)+" severity\n\
                Effect: " + format(tmp.s.buyables[12].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("s", 12)) + extra
            },
            unlocked() { return player[this.layer].buyables[11].gte(1) }, 
            canAfford() {
                    return player.s.severity.gte(tmp.s.buyables[12].cost)},
            buy() { 
                cost = tmp.s.buyables[12].cost
                if (tmp.s.buyables[12].canAfford) {
                    if (!hasMilestone("d", 4)) player.s.severity = player.s.severity.sub(cost).max(0)	
                    player.s.buyables[12] = player.s.buyables[12].add(1).max(1)
                }
            },
            buyMax(max) {
                let s = player.s.severity
                let target = Decimal.log10(s.div(1e19)).pow(Decimal.pow(1.29,-1))
                target = target.ceil()
                let cost = Decimal.pow(10, target.sub(1).pow(1.29)).mul(1e19)
                let diff = target.sub(player.s.buyables[12])
                if (tmp.s.buyables[12].canAfford) {
                    if (!hasMilestone("d", 4)) player.s.severity = player.s.severity.sub(cost).max(0)
                    if (diff.gt(max)) diff = max
                    player.s.buyables[12] = player.s.buyables[12].add(diff)
                }
            },
		},
		21: {
			title: "Symptom Base",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(65, x.pow(1.35)).mul(new Decimal(1e20))
                return cost.floor()
            },
            base() { 
                let base = new Decimal(1.5)
                if (hasSUpg(45)) base = base.add(getSUpgEff(45))
                base = base.add(tmp.s.buyables[32].effect)
                return base
            },
            extra() {
                let extra = decimalZero
                extra = extra.add(tmp.s.buyables[33].total)
                if (hasSUpg(31) && !inChallenge("s", 21)) extra = extra.add(tmp.s.buyables[22].total)
                return extra
            },
            total() {
                let total = getBuyableAmount("s", 21).add(tmp[this.layer].buyables[this.id].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp.s.buyables[21].total
                let base = tmp.s.buyables[21].base
                if (inChallenge("s", 12)) x = decimalZero
                return Decimal.pow(base, x);
            },
			display() { // Everything else displayed in the buyable button after the title
                let extra = ""
                if (player.tab != "s") return 
                if (hasSUpg(31)) extra = "+" + formatWhole(tmp.s.buyables[21].extra)
                return "Multiply the symptom base by "+ format(this.base()) + ".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" severity\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("s", 21)) + extra
            },
            unlocked() { return player[this.layer].buyables[12].gte(1) }, 
            canAfford() {
                    return player.s.severity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("d", 4)) player.s.severity = player.s.severity.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(max) {
                let s = player.s.severity
                let target = Decimal.log10(s.div(1e20)).div(Decimal.log10(65)).pow(Decimal.pow(1.35,-1))
                target = target.ceil()
                let cost = Decimal.pow(65, target.sub(1).pow(1.35)).mul(1e20)
                let diff = target.sub(player.s.buyables[21])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("d", 4)) player.s.severity = player.s.severity.sub(cost).max(0)
                    if (diff.gt(max)) diff = max
                    player.s.buyables[21] = player.s.buyables[21].add(diff)
                }
            },
        },
        22: {
            title: "Uncoater Base",
            scalebase(){
                let base = new Decimal(5e3)
                if (hasSUpg(42)) base = base.div(getSUpgEff(42))
                return base
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(this.scalebase(), x.pow(1.5)).mul(new Decimal(1e37))
                return cost.floor()
            },
            base() { 
                let b = player.points.add(10).max(10)
                b = Decimal.log10(b)
                return new Decimal(b)
            },
            extra() {
                let extra = decimalZero
                extra = extra.add(tmp.s.buyables[33].total)
                if (hasSUpg(44) && !inChallenge("s", 21)) extra = extra.add(tmp.s.buyables[23].total)
                return extra
            },
            total() {
                let total = getBuyableAmount("s", 22).add(tmp[this.layer].buyables[this.id].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp.s.buyables[22].total
                let base = tmp.s.buyables[22].base
                if (inChallenge("s", 12)) x = decimalZero
                return Decimal.pow(base, x);
            },
			display() { // Everything else displayed in the buyable button after the title
                let extra = ""
                if (player.tab != "s") return 
                if (hasSUpg(44)) extra = "+" + formatWhole(tmp.s.buyables[22].extra)
                return "Multiply the uncoater base by " + format(this.base())+" (based on cases)\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" severity\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("s", 22)) + extra
            },
            unlocked() { return player[this.layer].buyables[21].gte(1) }, 
            canAfford() {
                    return player.s.severity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("d", 4)) player.s.severity = player.s.severity.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(max) {
                let s = player.s.severity
                let target = Decimal.log10(s.div(1e37)).div(Decimal.log10(this.scalebase())).pow(Decimal.pow(1.5,-1))
                target = target.ceil()
                let cost = Decimal.pow(this.scalebase(), target.sub(1).pow(1.5)).mul(1e37)
                let diff = target.sub(player.s.buyables[22])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("d", 4)) player.s.severity = player.s.severity.sub(cost).max(0)
                    if (diff.gt(max)) diff = max
                    player.s.buyables[22] = player.s.buyables[22].add(diff)
                }
            },
        },
        13: {
            title: "'Coated' Boost",
            scalebase(){
                let base = new Decimal(1e5)
                if (hasSUpg(41)) base = base.div(getSUpgEff(41))
                return base
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(this.scalebase(), x.pow(1.5)).mul(new Decimal(2e164))
                return cost.floor()
            },
            base() { 
                let b = player.i.points.add(1).max(1)
                b = Decimal.log10(b).add(10).max(10)
                b = Decimal.log10(b).pow(0.8)
                return new Decimal(b)
            },
            extra() {
                let extra = decimalZero
                extra = extra.add(tmp.d.buyables[13].total)
                extra = extra.add(tmp.s.buyables[33].total)
                if (hasSUpg(44) && !inChallenge("s", 21)) extra = extra.add(tmp.s.buyables[23].total)
                return extra
            },
            total() {
                let total = getBuyableAmount("s", 13).add(tmp[this.layer].buyables[this.id].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp.s.buyables[13].total
                let base = tmp.s.buyables[13].base
                if (inChallenge("s", 12)) x = decimalZero
                return Decimal.mul(base, x).add(1).max(1);
            },
			display() { // Everything else displayed in the buyable button after the title
                let extra = ""
                if (player.tab != "s") return 
                if (hasSUpg(44)) extra = "+" + formatWhole(tmp.s.buyables[13].extra)
                return "Raise 'Coated' reward to ^(1+" + format(this.base())+"x) (based on infectivity)\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" severity\n\
                Effect: ^" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("s", 13)) + extra
            },
            unlocked() { return hasMilestone("s", 3) }, 
            canAfford() {
                    return player.s.severity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("d", 4)) player.s.severity = player.s.severity.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(max) {
                let s = player.s.severity
                let target = Decimal.log10(s.div("2e164")).div(Decimal.log10(tmp.s.buyables[13].scalebase)).pow(Decimal.pow(1.5,-1))
                target = target.ceil()
                let cost = Decimal.pow(tmp.s.buyables[13].scalebase, target.sub(1).pow(1.5)).mul("2e164")
                let diff = target.sub(player.s.buyables[13])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("d", 4)) player.s.severity = player.s.severity.sub(cost).max(0)
                    if (diff.gt(max)) diff = max
                    player.s.buyables[13] = player.s.buyables[13].add(diff)
                }
            },
        },
        23: {
            title: "'Infection' Base",
            scalebase(){
                let base = new Decimal(1e10)
                if (hasSUpg(43)) base = base.div(getSUpgEff(43))
                return base
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(this.scalebase(), x.pow(1.65)).mul(new Decimal(1e270))
                return cost.floor()
            },
            base() { 
                let b = player.v.points.add(10).max(10)
                b = Decimal.log10(b).pow(4)
                return new Decimal(b)
            },
            extra() {
                let extra = decimalZero
                extra = extra.add(tmp.s.buyables[33].total)
                return extra
            },
            total() {
                let total = getBuyableAmount("s", 23).add(tmp[this.layer].buyables[this.id].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp.s.buyables[23].total
                let base = tmp.s.buyables[23].base
                if (inChallenge("s", 12)) x = decimalZero
                return Decimal.pow(base, x);
            },
			display() { // Everything else displayed in the buyable button after the title
                let extra = ""
                if (player.tab != "s") return 
                if (player["s"].buyables[33].gte(1)) extra = "+" + formatWhole(tmp.s.buyables[23].extra)
                return "Multiply 'Infection' base by " + format(this.base())+". (based on VP)\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" severity\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("s", 23)) + extra
            },
            unlocked() { return player[this.layer].buyables[13].gte(1) }, 
            canAfford() {
                return player.s.severity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("d", 4)) player.s.severity = player.s.severity.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(max) {
                let s = player.s.severity
                let target = Decimal.log10(s.div("e270")).div(Decimal.log10(this.scalebase())).pow(Decimal.pow(1.65,-1))
                target = target.ceil()
                let cost = Decimal.pow(this.scalebase(), target.sub(1).pow(1.65)).mul("e270")
                let diff = target.sub(player.s.buyables[23])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("d", 4)) player.s.severity = player.s.severity.sub(cost).max(0)
                    if (diff.gt(max)) diff = max
                    player.s.buyables[23] = player.s.buyables[23].add(diff)
                }
            },
        },
        31: {
            title: "Severity Boost",
            scalebase(){
                let base = new Decimal(1e100)
                return base
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(this.scalebase(), x.pow(2)).mul(new Decimal(Decimal.pow(10,34e5)))
                return cost.floor()
            },
            base() { 
                let b = player.d.points.add(1).max(1)
                b = Decimal.pow(10,b.log10().pow(0.5)).pow(0.02)
                return b
            },
            extra() {
                let extra = decimalZero
                extra = extra.add(tmp.s.buyables[33].total)
                return extra
            },
            total() {
                let total = getBuyableAmount("s", 31).add(tmp[this.layer].buyables[this.id].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp.s.buyables[31].total
                let base = tmp.s.buyables[31].base
                if (inChallenge("s", 12)) x = decimalZero
                return Decimal.pow(base, x);
            },
			display() { // Everything else displayed in the buyable button after the title
                let extra = ""
                if (player.tab != "s") return 
                if (player["s"].buyables[33].gte(1)) extra = "+" + formatWhole(tmp.s.buyables[31].extra)
                return "Multiply 'Severity Gain' base by " + format(this.base())+"x (based on deaths)\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" severity\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("s", 31)) + extra
            },
            unlocked() { return hasFUpg(21) }, 
            canAfford() {
                    return player.s.severity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("d", 4)) player.s.severity = player.s.severity.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(max) {
                let s = player.s.severity
                let target = Decimal.log10(s.div("e34e5")).div(Decimal.log10(this.scalebase())).pow(Decimal.pow(2,-1))
                target = target.ceil()
                let cost = Decimal.pow(this.scalebase(), target.sub(1).pow(2)).mul("e34e5")
                let diff = target.sub(player.s.buyables[31])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("d", 4)) player.s.severity = player.s.severity.sub(cost).max(0)
                    if (diff.gt(max)) diff = max
                    player.s.buyables[31] = player.s.buyables[31].add(diff)
                }
            },
        },
        32: {
            title: "Symptom Boost",
            scalebase(){
                let base = new Decimal(1e300)
                return base
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(this.scalebase(), x.pow(2)).mul(Decimal.pow(10,3573000))
                return cost.floor()
            },
            base() { 
                let b = player.f.points.add(10).max(10)
                let s = player.s.severity.add(10).max(10)
                b = Decimal.pow(10,b.log10().pow(1.25)).pow(0.03).pow(s.log10().pow(0.17)).div(20)
                if (b.gte(1e300)) b = b.div(1e300).pow(0.1).mul(1e300)
                if (b.gte("ee4")) b = Decimal.pow(10,b.div("ee4").log10().pow(0.8)).mul("ee4")
                return b
            },
            extra() {
                let extra = decimalZero
                extra = extra.add(tmp.s.buyables[33].total)
                return extra
            },
            total() {
                let total = getBuyableAmount("s", 32).add(tmp[this.layer].buyables[this.id].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp.s.buyables[32].total
                let base = tmp.s.buyables[32].base
                if (inChallenge("s", 12)) x = decimalZero
                return Decimal.mul(base, x);
            },
			display() { // Everything else displayed in the buyable button after the title
                let extra = ""
                if (player.tab != "s") return 
                if (player["s"].buyables[33].gte(1)) extra = "+" + formatWhole(tmp.s.buyables[32].extra)
                return "Increase 'Symptom Base' base by " + format(this.base())+" (based on fatality and severity)\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" severity\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("s", 32)) + extra
            },
            unlocked() { return player["s"].buyables[31].gte(1) }, 
            canAfford() {
                    return player.s.severity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("d", 4)) player.s.severity = player.s.severity.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(max) {
                let s = player.s.severity
                let target = Decimal.log10(s.div(Decimal.pow(10,3573000))).div(Decimal.log10(this.scalebase())).pow(Decimal.pow(2,-1))
                target = target.ceil()
                let cost = Decimal.pow(this.scalebase(), target.sub(1).pow(2)).mul(Decimal.pow(10,3573000))
                let diff = target.sub(player.s.buyables[32])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("d", 4)) player.s.severity = player.s.severity.sub(cost).max(0)
                    if (diff.gt(max)) diff = max
                    player.s.buyables[32] = player.s.buyables[32].add(diff)
                }
            },
        },
        33: {
            title: "Severity Exponent",
            scalebase(){
                let base = Decimal.pow(10,500)
                return base
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(this.scalebase(), x.pow(2.2)).mul(Decimal.pow(10,388e4))
                return cost.floor()
            },
            base() { 
                let b = player.points.add(10).max(10)
                let s = player.i.points.add(10).max(10)
                b = Decimal.pow(10,b.log10().pow(0.12)).pow(0.03).pow(s.log10().pow(0.005)).div(100)
                return b
            },
            extra() {
                let extra = decimalZero
                return extra
            },
            total() {
                let total = getBuyableAmount("s", 33).add(tmp[this.layer].buyables[this.id].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp.s.buyables[33].total
                let base = tmp.s.buyables[33].base
                if (inChallenge("s", 12)) x = decimalZero
                return Decimal.mul(base, x).add(1).max(1);
            },
			display() { // Everything else displayed in the buyable button after the title
                let extra = ""
                if (player.tab != "s") return 
                return "Increase severity gain exponent by " + format(this.base())+" (based on cases and infectivity) and gives free levels to all previous buyables\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" severity\n\
                Effect: ^" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("s", 33)) + extra
            },
            unlocked() { return player["s"].buyables[32].gte(1) }, 
            canAfford() {
                    return player.s.severity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("d", 4)) player.s.severity = player.s.severity.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(max) {
                let s = player.s.severity
                let target = Decimal.log10(s.div("e388e4")).div(Decimal.log10(this.scalebase())).pow(Decimal.pow(2.2,-1))
                target = target.ceil()
                let cost = Decimal.pow(this.scalebase(), target.sub(1).pow(2.2)).mul("e388e4")
                let diff = target.sub(player.s.buyables[33])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("d", 4)) player.s.severity = player.s.severity.sub(cost).max(0)
                    if (diff.gt(max)) diff = max
                    player.s.buyables[33] = player.s.buyables[33].add(diff)
                }
            },
        },
    },
    upgrades: {
        rows: 5,
        cols: 5,
        11: {
            title: "Cough",
            description: "Severity boosts uncoaters 1st effect base.",
            cost: new Decimal(5e3),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            effect(){
            let s11 = player.s.severity.add(10).max(10)
            s11 = Decimal.log10(s11)
            s11 = s11.pow(2).add(10).max(10)
            if (inChallenge("s", 11) || inChallenge("s", 21)) s11 = decimalOne
            return s11
            },
            effectDisplay(){
            return format(getSUpgEff(11))+"x"
            },
        },
        12: {
            title: "Fever",
            description: "Uncoaters 2nd effect is boosted by bought symptom upgrades.",
            cost: decimalTwo,
            effect(){
            let s12 = player.s.upgrades.length
            if (hasDUpg(34)) s12 += player.d.upgrades.length*2
            s12 = Decimal.div(s12, 2.85).pow(0.3)
            s12 = s12.mul(1.5).add(0.7)
            if (inChallenge("s", 21)) s12 = decimalOne
            return s12
            },
            effectDisplay(){
            return format(getSUpgEff(12))+"x"
            },
            unlocked(){
            return hasSUpg(11)
            }
        },
        13: {
            title: "Tiredness",
            description: "Symptoms boost uncoaters 1st effect base.",
            cost: new Decimal(3e7),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            effect(){
            let s13 = player.s.points.add(1).max(1)
            s13 = s13.pow(3.75)
            if (inChallenge("s", 11) || inChallenge("s", 21)) s13 = decimalOne
            return s13
            },
            effectDisplay(){
            return format(getSUpgEff(13))+"x"
            },
            unlocked(){
                return hasSUpg(12)
            }
        },
        14: {
            title: "Pain",
            description: "Infectivity boost severity gain.",
            cost: new Decimal(77777777),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            effect(){
            let s14 = player.i.points.add(1).max(1)
            s14 = s14.pow(new Decimal(3e-4))
            if (s14.gte(Decimal.pow(10,5000))) s14 = s14.div(Decimal.pow(10,5000)).pow(0.1).mul(Decimal.pow(10,5000))
            if (inChallenge("s", 21)) s14 = decimalOne
            return s14
            },
            effectDisplay(){
                let dis = format(getSUpgEff(14))+"x"
                if (tmp.s.upgrades[14].effect.gte(Decimal.pow(10,5000))) dis += " (softcapped)"
                return dis
            },
            unlocked(){
                return hasSUpg(13)
            }
        },
        15: {
            title: "Sore Throat",
            description: "Severity boosts replicators 1st effect base.",
            cost: new Decimal(1.5e12),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            effect(){
            let s15 = player.s.severity.add(1).max(1)
            s15 = s15.pow(0.3)
            if (s15.gte(Decimal.pow(10,1e45))) s15 = Decimal.pow(10,s15.div(Decimal.pow(10,1e45)).log10().pow(0.8)).mul(Decimal.pow(10,1e45))
            if (inChallenge("s", 11) || inChallenge("s", 21)) s15 = decimalOne
            return s15
            },
            effectDisplay(){
            return format(getSUpgEff(15))+"x"
            },
            unlocked(){
                return hasSUpg(14)
            }
        },
        21: {
            title: "Chills",
            description: "'Fever' boosts severity effect.",
            cost: new Decimal(1e15),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            effect(){
            let s21 = getSUpgEff(12)
            s21 = s21.pow(2).add(1.8)
            if (inChallenge("s", 21)) s21 = decimalOne
            return s21
            },
            effectDisplay(){
            return "^"+format(getSUpgEff(21))
            },
            unlocked(){
                return hasSUpg(15)
            }
        },
        22: {
            title: "Headache",
            description: "'Infectivity Gain' gives free levels to 'Severity Gain'.",
            cost: new Decimal(2.22e22),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            unlocked(){
                return hasSUpg(21)
            }
        },
        23: {
            title: "Diarrhea",
            description: "'Symptom Base' gives free levels to 'Severity Gain'.",
            cost: new Decimal(5e38),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            unlocked(){
                return hasSUpg(22)
            }
        },
        24: {
            title: "Conjunctivitis",
            description: "Symptoms boost 'Infection' base.",
            cost: new Decimal(7),
            effect(){
            let s24 = player.s.points
            s24 = Decimal.pow(1e4,s24)
            if (inChallenge("s", 11) || inChallenge("s", 21)) s24 = decimalOne
            return s24
            },
            effectDisplay(){
            return format(getSUpgEff(24))+"x"
            },
            unlocked(){
                return hasSUpg(23)
            }
        },
        25: {
            title: "Taste Loss",
            description: "'Uncoater Base' gives free levels to 'Infectivity Gain'.",
            cost: new Decimal(5e58),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            unlocked(){
                return hasSUpg(24)
            }
        },
        31: {
            title: "Smell Loss",
            description: "'Uncoater Base' gives free levels to 'Symptom Base' and autobuy buyables once per second.",
            cost: new Decimal(1e63),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            unlocked(){
                return hasSUpg(25)
            }
        },
        32: {
            title: "Skin Rash",
            description: "Replicators boost severity gain.",
            cost: new Decimal(5e164),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            effect(){
                let s32 = player.r.points
                s32 = Decimal.pow(1.02, s32)
                if (inChallenge("s", 21)) s32 = decimalOne
                return s32
            },
            effectDisplay(){
                return format(getSUpgEff(32))+"x"
            },
            unlocked(){
                return hasSUpg(31)
            }
        },
        33: {
            title: "Discoloration",
            description: "'Severity Gain' base is increased by 0.0002 per level.",
            cost: new Decimal(15e271),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            effect(){
                let s32 = tmp.s.buyables[11].total.div(5e3)
                if (hasChallenge("s", 21)) s32 = s32.mul(challengeEffect("s", 21))
                if (inChallenge("s", 21)) s32 = decimalOne
                return s32
            },
            effectDisplay(){
                return "+"+format(getSUpgEff(33))
            },
            unlocked(){
                return hasSUpg(32)
            }
        },
        34: {
            title: "Shortness of Breath",
            description: "'Coated Boost' gives free 'Infectivity gain'.",
            cost: Decimal.pow(10,54490),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            unlocked(){
                return hasDUpg(34)
            }
        },
        35: {
            title: "Chest Pain",
            description: "Cases boost symptom base.",
            cost: Decimal.pow(10,60100),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            effect(){
                let s32 = player.points.add(10).max(10)
                s32 = s32.log10().pow(5)
                if (inChallenge("s", 21)) s32 = decimalOne
                return s32
            },
            effectDisplay(){
                return format(getSUpgEff(35))+"x"
            },
            unlocked(){
                return hasSUpg(34)
            }
        },
        41: {
            title: "Speech Loss",
            description: "Deaths reduce 'Coated Boost' scaling base.",
            cost: Decimal.pow(10,7e4),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            effect(){
                let s32 = player.d.points.add(10).max(10)
                s32 = s32.log10().pow(1.2)
                if (inChallenge("s", 21)) s32 = decimalOne
                return s32.min(7e4)
            },
            effectDisplay(){
                return format(getSUpgEff(41))+"x"
            },
            unlocked(){
                return hasSUpg(35)
            }
        },
        42: {
            title: "Movement Loss",
            description: "Severity reduces 'Uncoater Base' scaling base.",
            cost: Decimal.pow(10,87700),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            effect(){
                let s32 = player.s.severity.add(10).max(10)
                s32 = s32.log10().pow(0.27)
                if (inChallenge("s", 21)) s32 = decimalOne
                return s32.min(1e3)
            },
            effectDisplay(){
                return format(getSUpgEff(42))+"x"
            },
            unlocked(){
                return hasSUpg(41)
            }
        },
        43: {
            title: "Pneumonia",
            description: "Cases reduce 'Infection Base' scaling base.",
            cost: Decimal.pow(10,133420),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            effect(){
                let s32 = player.points.add(10).max(10)
                s32 = s32.log10().add(10).max(10)
                s32 = s32.log10().pow(5).mul(3333)
                if (inChallenge("s", 21)) s32 = decimalOne
                return s32.min(3e9)
            },
            effectDisplay(){
                return format(getSUpgEff(43))+"x"
            },
            unlocked(){
                return hasSUpg(42)
            }
        },
        44: {
            title: "Fatigue",
            description: "'Infection Base' gives free 'Coated Boost' and 'Uncoater Base'.",
            cost: Decimal.pow(10,146060),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            unlocked(){
                return hasSUpg(43)
            }
        },
        45: {
            title: "Congestion",
            description: "Each 'Infection Base' adds 0.0001 to 'Symptom Base' base.",
            cost: Decimal.pow(10,191185),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            effect(){
                let s32 = tmp.s.buyables[23].total.div(1e4)
                return s32
            },
            effectDisplay(){
                return "+"+format(getSUpgEff(45))
            },
            unlocked(){
                return hasSUpg(44)
            }
        },
        51: {
            title: "Muscle Aches",
            description: "Cases boost severity effect.",
            cost: Decimal.pow(10,215350),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            effect(){
                let s32 = player.points.add(10).max(10)
                s32 = s32.log10().add(1).max(1).log10()
                return s32
            },
            effectDisplay(){
                return "^"+format(getSUpgEff(51))
            },
            unlocked(){
                return hasSUpg(45)
            }
        },
        52: {
            title: "Nausea",
            description: "Infectivity boosts 'Deadly'.",
            cost: Decimal.pow(10,225315),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            effect(){
                let s32 = player.i.points.add(10).max(10)
                s32 = s32.log10().pow(0.23)
                return s32
            },
            effectDisplay(){
                return "^"+format(getSUpgEff(52))
            },
            unlocked(){
                return hasSUpg(51)
            }
        },
        53: {
            title: "Asthma",
            description() {
                let des =  "Uncoaters reduce recovery effect exponent."
                if (hasDUpg(42)) des =  "Uncoaters boost severity gain exponent."
                return des
            },
            cost: Decimal.pow(10,301777),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            effect(){
                let s32 = player.u.points.add(10).max(10)
                s32 = s32.log10().pow(-0.1)
                if (hasDUpg(42)) s32 = s32.pow(-1)
                return s32
            },
            effectDisplay(){
                return "^"+format(getSUpgEff(53))
            },
            unlocked(){
                return hasSUpg(52)
            }
        },
        54: {
            title: "Cancer",
            description() {
                let des =  "Replicators reduce recovery effect exponent."
                if (hasDUpg(42)) des =  "Replicators boost severity gain exponent."
                return des
            },
            cost: Decimal.pow(10,435630),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            effect(){
                let s32 = player.r.points.add(10).max(10)
                s32 = s32.log10().pow(-0.05)
                if (hasDUpg(42)) s32 = s32.pow(-1)
                return s32
            },
            effectDisplay(){
                return "^"+format(getSUpgEff(54))
            },
            unlocked(){
                return hasSUpg(53)
            }
        },
        55: {
            title: "Heart Failure",
            description: "Severity boosts 'Transmission', 'Smell Loss' buys 25x more, and unlock a row of death upgrades.",
            cost: Decimal.pow(10,545766),
            currencyDisplayName: "severity",
            currencyInternalName: "severity",
            currencyLayer: "s",
            effect(){
                let s32 = player.s.severity.add(10).max(10)
                s32 = s32.log10().pow(0.12)
                return s32
            },
            effectDisplay(){
                return "^"+format(getSUpgEff(55))
            },
            unlocked(){
                return hasSUpg(54)
            }
        },
    },
    challenges: { // Order: 1x1,2x1,1x2,3x1,2x2,1x3,4x1,1x4,2x3,3x2,4x2,3x3,2x4,1x5,4x3,3x4,4x4,2x5,3x5,4x5
        rows: 2,
        cols: 2,
        11: {
            name: "Asymptomatic",
            currencyDisplayName: "cases",
            challengeDescription: function() {
                let c11 = "Symptoms and severity are useless. Cases gain is ^0.1."
                if (inChallenge("s", 11)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("s", 11) == 5) c11 = c11 + " (Completed)"
                c11 = c11 + "<br>Completed:" + challengeCompletions("s",11) + "/" + this.completionLimit
                return c11
            },
            goal(){
                if (challengeCompletions("s", 11) == 0) return Decimal.pow(10,78000);
                if (challengeCompletions("s", 11) == 1) return Decimal.pow(10,107500);
                if (challengeCompletions("s", 11) == 2) return Decimal.pow(10,285000);
                if (challengeCompletions("s", 11) == 3) return Decimal.pow(10,3e6);
                if (challengeCompletions("s", 11) == 4) return Decimal.pow(10,893e4);
            },
            onStart(testInput=false) { 
                if (testInput) {
                    doReset("i")
                    player.v.upgrades = []
                    player.s.ct = 0
                    player.i.points = decimalZero
                    player.r.points = decimalZero
                    player.v.points = decimalZero
                    player.points = decimalZero
                }
            },
            completionLimit: 5,
            rewardDescription: "Cases boost severity gain.",
            rewardEffect() {
                 let c11 = player.points.add(1).max(1)
                 let c11r = new Decimal(0.38)
                 let c11c = challengeCompletions("s", 11)
                 c11r = Decimal.add(c11r, Decimal.div(c11c, 50))
                 let c11r2 = new Decimal(0.3)
                 if (c11c >= 4) c11r2 = Decimal.sub(0.6, Decimal.div(c11c, 11))
                 if (c11c == 5) c11r = c11r.add(0.007)
                 c11 = Decimal.pow(10, Decimal.log10(c11).pow(c11r)).pow(c11r2)
                 return c11
            },
            rewardDisplay() {return format(this.rewardEffect())+"x"},
            unlocked(){
                return hasMilestone("d", 8)
            }
        },
        12: {
            name: "Unbuyable",
            currencyDisplayName: "cases",
            challengeDescription: function() {
                let c12 = "Symptom buyables are useless. Cases gain is ^0.01."
                if (inChallenge("s", 12)) c12 = c12 + " (In Challenge)"
                if (challengeCompletions("s", 12) == 5) c12 = c12 + " (Completed)"
                c12 = c12 + "<br>Completed:" + challengeCompletions("s",12) + "/" + this.completionLimit
                return c12
            },
            goal(){
                if (challengeCompletions("s", 12) == 0) return Decimal.pow(10,5640);
                if (challengeCompletions("s", 12) == 1) return Decimal.pow(10,13600);
                if (challengeCompletions("s", 12) == 2) return Decimal.pow(10,86400);
                if (challengeCompletions("s", 12) == 3) return Decimal.pow(10,154000);
                if (challengeCompletions("s", 12) == 4) return Decimal.pow(10,327000);
            },
            onStart(testInput=false) { 
                if (testInput) {
                    doReset("i")
                    player.v.upgrades = []
                    player.s.ct = 0
                    player.i.points = decimalZero
                    player.r.points = decimalZero
                    player.v.points = decimalZero
                    player.points = decimalZero
                }
            },
            completionLimit: 5,
            rewardDescription: "Infectivity boosts death gain.",
            rewardEffect() {
                 let c12 = player.points.add(1).max(1)
                 let c12r = new Decimal(0.33)
                 let c12c = challengeCompletions("s", 12)
                 c12r = Decimal.add(c12r, Decimal.div(c12c, 5))
                 c12 = Decimal.log10(c12).pow(c12r).div(100).max(1)
                 return c12
            },
            rewardDisplay() {return format(this.rewardEffect())+"x"},
            unlocked(){
                return hasChallenge("s", 11)
            }
        },
        21: {
            name: "Row 3 Downgrade",
            currencyDisplayName: "cases",
            challengeDescription: function() {
                let c12 = "Row 3 Upgrades are useless. Cases gain is ^0.03."
                if (inChallenge("s", 21)) c12 = c12 + " (In Challenge)"
                if (challengeCompletions("s", 21) == 5) c12 = c12 + " (Completed)"
                c12 = c12 + "<br>Completed:" + challengeCompletions("s",21) + "/" + this.completionLimit
                return c12
            },
            goal(){
                if (challengeCompletions("s", 21) == 0) return Decimal.pow(10,4660);
                if (challengeCompletions("s", 21) == 1) return Decimal.pow(10,34100);
                if (challengeCompletions("s", 21) == 2) return Decimal.pow(10,44640);
                if (challengeCompletions("s", 21) == 3) return Decimal.pow(10,64500);
                if (challengeCompletions("s", 21) == 4) return Decimal.pow(10,89100);
            },
            onStart(testInput=false) { 
                if (testInput) {
                    doReset("i")
                    player.v.upgrades = []
                    player.s.ct = 0
                    player.i.points = decimalZero
                    player.r.points = decimalZero
                    player.v.points = decimalZero
                    player.points = decimalZero
                }
            },
            completionLimit: 5,
            rewardDescription: "Deaths boost 'Discoloration'.",
            rewardEffect() {
                 let c12 = player.d.points.add(10).max(10)
                 let c12r = new Decimal(0.07)
                 let c12c = challengeCompletions("s", 21)
                 c12r = Decimal.add(c12r, Decimal.div(c12c, 15))
                 c12 = Decimal.log10(c12).pow(c12r)
                 return c12
            },
            rewardDisplay() {return format(this.rewardEffect())+"x"},
            unlocked(){
                return hasChallenge("s", 12)
            }
        },
        22: {
            name: "Symptomless Symptoms",
            currencyDisplayName: "cases",
            challengeDescription: function() {
                let c12 = "'Asymptomatic' and 'Unbuyable' at once."
                if (inChallenge("s", 22)) c12 = c12 + " (In Challenge)"
                if (challengeCompletions("s", 22) == 5) c12 = c12 + " (Completed)"
                c12 = c12 + "<br>Completed:" + challengeCompletions("s",22) + "/" + this.completionLimit
                return c12
            },
            goal(){
                if (challengeCompletions("s", 22) == 0) return Decimal.pow(10,1020);
                if (challengeCompletions("s", 22) == 1) return Decimal.pow(10,2170);
                if (challengeCompletions("s", 22) == 2) return Decimal.pow(10,4720);
                if (challengeCompletions("s", 22) == 3) return Decimal.pow(10,5850);
                if (challengeCompletions("s", 22) == 4) return Decimal.pow(10,12715);
            },
            onStart(testInput=false) { 
                if (testInput) {
                    doReset("i")
                    player.v.upgrades = []
                    player.s.ct = 0
                    player.i.points = decimalZero
                    player.r.points = decimalZero
                    player.v.points = decimalZero
                    player.points = decimalZero
                }
            },
            countsAs: [11,12],
            completionLimit: 5,
            rewardDescription() {
                let des =  "Severity reduces the recovery effect."
                if (hasDUpg(42)) des =  "Severity boosts severity gain."
                return des
            },
            rewardEffect() {
                 let c12 = player.s.severity.add(10).max(10)
                 let c12r = new Decimal(0.02)
                 let c12c = challengeCompletions("s", 22)
                 c12r = Decimal.add(c12r, Decimal.div(c12c, 200))
                 c12 = Decimal.log10(c12).pow(-c12r)
                 if (hasDUpg(42)) c12 = c12.pow(-1)
                 return c12
            },
            rewardDisplay() {return "^"+format(this.rewardEffect())},
            unlocked(){
                return hasChallenge("s", 21)
            }
        },
    },
})
addLayer("d", {
    name: "deaths",
    symbol: "D",
    position: 2,
    startData() { return {
        points: decimalZero,
        best: decimalZero,
        total: decimalZero,
        auto: false,
        autob: false,
        autos: false,
        unlocked: false,
        time: decimalZero
    }},
    color: "#ff1234",
    requires: new Decimal(1.797e308),
    resource: "deaths",
    resourceSingular: "death",
    baseResource: "severity",
    baseAmount() { return player.s.severity },
    type: "normal",
    exponent: new Decimal(0.0035),
    branches: ["i","r","s"],
    row: 2,
    hotkeys: [
        {
            key:"d", description: "D:Reset for deaths", onPress() {
                if (canReset(this.layer) && !hasMilestone("d",10))
                    doReset(this.layer)
            }
        },
    ],
    bulk() {
        let bulk = new Decimal(100)
        if (hasAchievement("a", 53)) bulk = bulk.mul(5)
        if (hasMilestone("f", 8)) bulk = bulk.mul(100)
        if (hasFUpg(73)) bulk = bulk.mul(1000)
        if (hasFUpg(123)) bulk = bulk.pow(2)
        if (hasFUpg(143)) bulk = bulk.pow(10)
        if (hasUpgrade("e",15)) bulk = bulk.tetrate(1.79e308)
        return bulk
    },
    speed() {
        let speed = 1
        if (hasAchievement("a", 53)) speed *=2
        if (hasFUpg(73)) speed *=2
        if (hasMilestone("a", 0)) speed *=2
        if (hasMilestone("a", 1)) speed *=2
        if (hasMilestone("e", 0)) speed *=2
        return speed
    },
    update(diff) {
        if (hasMilestone("d", 10) && !inChallenge("f",31) && !inChallenge("Up",21)) generatePoints("d", diff/100);
        let t = diff*tmp.d.speed
        player.d.time = Decimal.add(player.d.time, t)
            if (player.d.time.gte(1)) {
                let times = Decimal.floor(player.d.time).mul(-1)
                player.d.time = Decimal.add(player.d.time, times)
                times = times.mul(-1)
                if (hasUpgrade("f", 25) && tmp.d.speed<20) {
                    layers.d.buyables[11].buyMax(times.mul(tmp.d.bulk))
                    layers.d.buyables[12].buyMax(times.mul(tmp.d.bulk))
                    layers.d.buyables[13].buyMax(times.mul(tmp.d.bulk))
                }
            };
        if (hasUpgrade("f", 25) && tmp.d.speed>20) {
            let s = player.d.points.max(1)
            let target = Decimal.log10(s.div(Decimal.pow(10,17000)).max(10).log10().div(1000)).div(Decimal.log10(tmp.d.buyables[13].scalebase))
            let d = tmp.d.buyables[13].distant
                if (target.gte(d)) target = target.div(d).pow(0.4).mul(d)
                target = target.ceil()
            player.d.buyables[11] = player.d.buyables[11].add(Decimal.log10(s.div(Decimal.pow(10,16000))).div(Decimal.log10(tmp.d.buyables[11].scalebase)).pow(2/3).ceil().sub(player.d.buyables[11]).min(tmp.d.bulk)).max(player.d.buyables[11])
            player.d.buyables[12] = player.d.buyables[12].add(Decimal.log10(s.div(Decimal.pow(10,17000))).div(Decimal.log10(tmp.d.buyables[12].scalebase)).pow(2/3).ceil().sub(player.d.buyables[12]).min(tmp.d.bulk)).max(player.d.buyables[12])
            player.d.buyables[13] = player.d.buyables[13].add(target.sub(player.d.buyables[13]).min(tmp.d.bulk)).max(player.d.buyables[13])
        }
    },
    layerShown() {
        let shown = hasSUpg(33)
        if(player.d.unlocked) shown = true
        return shown && player.uv.tree == "normal"
    },
    effect() {
        let eff = player.d.best.add(1).max(1)
        eff = eff.pow(5)
        if (eff.gte(Decimal.pow(10,Decimal.pow(10,1000)))) eff = eff.log10().pow(Decimal.pow(10,997))
        return eff
    },
    effectDescription() {
        return "which "+pluralize(player.d.points,'boosts','boost',true)+" cases, VP, infectivity, and severity gain by "+layerText("h2", "d", format(tmp.d.effect)) + " (based on best)."
    },
    gainMult() {
        let mult = decimalOne
        if (inChallenge("ct",32)) {
            mult = mult.mul(10).mul(tmp.Ur.buyables[13].effect).mul(tmp.Up.effect[0])
            if (hasMilestone("Ur",4)) mult = mult.mul(100)
            if (hasMilestone("Ur",6)) mult = mult.mul(tmp.Ur.milestones[6].effect)
        }
        else {if (hasDUpg(12)) mult = mult.mul(getDUpgEff(12))
        if (hasDUpg(22)) mult = mult.mul(getDUpgEff(22))
        if (hasDUpg(24)) mult = mult.mul(getDUpgEff(24))
        if (hasFUpg(23)) mult = mult.mul(getFUpgEff(23))
        if (hasFUpg(45)) mult = mult.mul(getFUpgEff(45))
        if (hasAchievement("a", 43)) mult = mult.mul(2)
        if (hasAchievement("a", 44)) mult = mult.mul(2)
        mult = mult.mul(tmp.f.effect2)
        if (hasAchievement("a", 52)) mult = mult.mul(tmp.a.effect)
        mult = mult.mul(tmp.d.buyables[12].effect)
        if (hasChallenge("s", 12)) mult = mult.mul(challengeEffect("s", 12))
        mult.mul(tmp.ct.effect)
        }
        return mult
    },
    doReset(resettingLayer){
        let keep = [];
        if (hasMilestone("d", 0)) player.u.auto = true
        if (hasMilestone("f", 1) || hasMilestone("a",1)) keep.push("milestones")
        if (hasMilestone("f", 3) || hasMilestone("a",1)) keep.push("upgrades")
        if (layers[resettingLayer].row > this.row) layerDataReset(this.layer, keep)
        if (hasMilestone("f", 0) || hasMilestone("a",1)) {
            player.d.auto = true
            player.d.autos = true
            if (!hasMilestone("f",1) && !hasMilestone("a",1)) player.d.milestones = [0,1,2,3,4]
        }
    },
    tabFormat: {
        "Milestones": {
            content: [
                function() {if (player.tab == "d") return "main-display"},
            function() {if (!hasMilestone("d", 10)) return "prestige-button"},
            ["raw-html", function() {if (hasMilestone("d",10) && player.tab == "d") return "You are gaining " + layerText("h2", "d", format(getResetGain("d").div(100))) + " "+pluralize(getResetGain("d").div(100),'death','deaths')+" per second"}],
            function() {if (player.tab == "d") return "resource-display"},
            "blank",
            ["display-text",
            "Deaths reset all previous progress.",
            ],
            "milestones"
            ]
        },
        "Upgrades": {
            content: [
                function() {if (player.tab == "d") return "main-display"},
                function() {if (!hasMilestone("d", 10)) return "prestige-button"},
                ["raw-html", function() {if (hasMilestone("d",10) && player.tab == "d") return "You are gaining " + layerText("h2", "d", format(getResetGain("d").div(100))) + " "+pluralize(getResetGain("d").div(100),'death','deaths')+" per second"}],
                function() {if (player.tab == "d") return "resource-display"},
                "blank",
                ["display-text",
                "Deaths reset all previous progress.",
                ],
                "upgrades",
            ],
            unlocked() { return hasMilestone("d", 2) }
        },
        "Buyables": {
            content: [
                function() {if (player.tab == "d") return "main-display"},
                function() {if (!hasMilestone("d", 10)) return "prestige-button"},
                ["raw-html", function() {if (hasMilestone("d",10) && player.tab == "d") return "You are gaining " + layerText("h2", "d", format(getResetGain("d").div(100))) + " deaths per second"}],
                function() {if (player.tab == "d") return "resource-display"},
                "blank",
                ["display-text",
                "Buyables give free levels to the previous layer buyable.",
                ],
                "buyables",
            ],
            unlocked() { return hasMilestone("f", 5) }
        }
    },
    milestones: {
        0: {
            requirementDescription: "1 total death",
            effectDescription: "Keep uncoater/symptom milestones on reset.",
            done() { return player.d.total.gte(1) }
        },
        1: {
            requirementDescription: "2 total deaths",
            effectDescription: "You can buy max uncoaters.",
            done() { return player.d.total.gte(2) }
        },
        2: {
            requirementDescription: "3 total deaths",
            effectDescription: "Autobuy uncoaters and unlock upgrades.",
            toggles:[["d", "auto"]],
            done() { return player.d.total.gte(3) }
        },
        3: {
            requirementDescription: "4 total deaths",
            effectDescription: "Keep uncoater challenge completions.",
            done() { return player.d.total.gte(4) }
        },
        4: {
            requirementDescription: "6 total deaths",
            effectDescription: "'Smell Loss' buys 10x more and buyables cost nothing.",
            done() { return player.d.total.gte(6) }
        },
        5: {
            requirementDescription: "24 total deaths",
            effectDescription: "Uncoaters reset nothing.",
            done() { return player.d.total.gte(24) }
        },
        6: {
            requirementDescription: "48 total deaths",
            effectDescription: "Keep previous upgrades on reset.",
            done() { return player.d.total.gte(48) }
        },
        7: {
            requirementDescription: "96 total deaths",
            effectDescription: "Autobuy symptoms.",
            toggles:[["d", "autos"]],
            done() { return player.d.total.gte(96) }
        },
        8: {
            requirementDescription: "1,048,576 total deaths",
            effectDescription: "Unlock symptom challenges.",
            done() { return player.d.total.gte(1048576) }
        },
        9: {
            requirementDescription() {
                return format(Decimal.pow(2, 32)) + " total deaths"
            },
            effectDescription: "Symptoms reset nothing and 'Smell Loss' buys 2x often.",
            done() { return player.d.total.gte(Decimal.pow(2, 32)) }
        },
        10: {
            requirementDescription() {
                return format(Decimal.pow(2, 1024)) + " total deaths"
            },
            effectDescription: "Gain 1% of death gain per second and disable prestige.",
            unlocked() {
                return hasDUpg(34) || player.f.unlocked
            },
            done() { return player.d.total.gte(Decimal.pow(2,1024))}
        },
    },
    buyables: {
		rows: 3,
        cols: 3,
        11: {
            title: "Severity Gain",
            scalebase() {
                return decimalThree
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(this.scalebase(), x.pow(1.5)).mul(Decimal.pow(10,16000))
                return cost.floor()
            },
            base() { 
                let base = player.d.points.add(10).max(10)
                base = base.log10().pow(100)
                return base
            },
            extra() {
                let extra = decimalZero
                return extra
            },
            total() {
                let total = getBuyableAmount("d", 11).add(tmp[this.layer].buyables[this.id].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "d") return 
                let extra = ""
                return "Multiply severity gain by "+format(this.base())+" after softcap (based on deaths).\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" deaths\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("d", 11)) + extra
            },
            unlocked() { return hasMilestone("f", 5) }, 
            canAfford() {
                    return player.d.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",6)) player.d.points = player.d.points.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(max) {
                let s = player.d.points
                let target = Decimal.log10(s.div(Decimal.pow(10,16000))).div(Decimal.log10(this.scalebase())).pow(2/3)
                target = target.ceil()
                let cost = Decimal.pow(this.scalebase(), target.sub(1).pow(1.5)).mul(Decimal.pow(10,16000))
                let diff = target.sub(player.d.buyables[11])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",6)) player.d.points = player.d.points.sub(cost).max(0)
                    if (diff.gt(max)) diff = max
                    player.d.buyables[11] = player.d.buyables[11].add(diff)
                }
            },
        },
        12: {
            title: "Death Gain",
            scalebase() {
                return decimalTen
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(this.scalebase(), x.pow(1.5)).mul(Decimal.pow(10,17000))
                return cost.floor()
            },
            base() { 
                let base = player.f.points.add(10).max(10)
                base = base.log10().pow(3)
                return base
            },
            extra() {
                let extra = decimalZero
                return extra
            },
            total() {
                let total = getBuyableAmount("d", 12).add(tmp[this.layer].buyables[this.id].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "d") return 
                let extra = ""
                return "Multiply death gain by "+format(this.base())+" (based on fatality).\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" deaths\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("d", 12)) + extra
            },
            unlocked() { return player.d.buyables[11].gte(1) }, 
            canAfford() {
                    return player.d.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",6)) player.d.points = player.d.points.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(max) {
                let s = player.d.points
                let target = Decimal.log10(s.div(Decimal.pow(10,17000))).div(Decimal.log10(this.scalebase())).pow(2/3)
                target = target.ceil()
                let cost = Decimal.pow(this.scalebase(), target.sub(1).pow(1.5)).mul(Decimal.pow(10,17000))
                let diff = target.sub(player.d.buyables[12])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",6)) player.d.points = player.d.points.sub(cost).max(0)
                    if (diff.gt(max)) diff = max
                    player.d.buyables[12] = player.d.buyables[12].add(diff)
                }
            },
        },
        13: {
            title() {
                let dis = ""
                if (player.d.buyables[13].gte(tmp.d.buyables[13].distant)) dis = "Distant "
                dis += "Cases Boost"
                return dis
            },
            distant() {
                let d = new Decimal(1e20)
                if (hasUpgrade("e",191)) d = d.mul(upgradeEffect("e",191))
                if (hasUpgrade("e",203)) d = d.mul(upgradeEffect("e",203))
                if (hasUpgrade("e",213)) d = d.mul(upgradeEffect("e",213))
                if (hasUpgrade("e",234)) d = d.mul(upgradeEffect("e",234))
                if (hasUpgrade("e",241)) d = d.mul(tmp.e.upgrades[241].effect)
                return d
            },
            scalebase() {
                let base = new Decimal(1.007)
                if (hasFUpg(142)) base = base.div(getFUpgEff(142))
                return base
            },
            cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let d = tmp.d.buyables[13].distant
                if (x.gte(d)) x = x.div(d).pow(2.5).mul(d)
                let cost = Decimal.pow(10, Decimal.pow(this.scalebase(),x).mul(1000)).mul(Decimal.pow(10,17000))
                return cost.floor()
            },
            scStart() {
                let sc = new Decimal(2500)
                if (hasFUpg(174)) sc = sc.add(getFUpgEff(174))
                if (hasFUpg(175)) sc = sc.add(getFUpgEff(175))
                sc = sc.add(tmp.e.peffect2)
                return sc
            },
            base() { 
                let base = player.points.add(10).max(10)
                base = base.log10().add(10).max(10)
                base = base.log10().add(10).max(10)
                base = base.log10().pow(0.004)
                if (hasFUpg(141)) base = base.add(getFUpgEff(141))
                if (hasFUpg(152)) base = base.add(getFUpgEff(152))
                if (hasUpgrade("e",15)) base = base.add(upgradeEffect("e",15))
                if (hasUpgrade("e",93)) base = base.add(upgradeEffect("e",93))
                if (hasChallenge("e",11)) base = base.add(challengeEffect("e",11))
                base = base.mul(tmp.e.buyables[63].effect)
                return base
            },
            extra() {
                let extra = decimalZero
                if (hasFUpg(71)) extra = extra.add(getFUpgEff(71))
                if (hasFUpg(123)) extra = extra.add(getFUpgEff(123))
                return extra
            },
            total() {
                let total = getBuyableAmount("d", 13).add(tmp[this.layer].buyables[this.id].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x)
                if (x.gte(tmp.d.buyables[13].scStart)) eff = Decimal.pow(base, x.mul(tmp.d.buyables[13].scStart).pow(0.5))
                if (eff.gte(Decimal.pow(10,Decimal.pow(10,1e21)))) eff = eff.log10().log10().div(10).pow(5e19).pow10()
                if (inChallenge("e",11) || player.e.inC) eff = decimalOne
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "d") return 
                let extra = ""
                let eff = format(tmp[this.layer].buyables[this.id].effect)
                if (this.total().gte(tmp.d.buyables[13].scStart)) eff += " (softcapped)"
                if (hasFUpg(71)) extra = "+" + formatWhole(tmp[this.layer].buyables[this.id].extra)
                return "Raise cases gain to "+format(this.base())+" (based on cases).\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" deaths\n\
                Effect: ^" + eff +"\n\
                Amount: " + formatWhole(getBuyableAmount("d", 13)) + extra
            },
            unlocked() { return player.d.buyables[12].gte(1) }, 
            canAfford() {
                    return player.d.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",6)) player.d.points = player.d.points.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(max) {
                let s = player.d.points // log1.003(log10(cost/e17k)/1k)=x
                let d = tmp.d.buyables[13].distant
                let target = Decimal.log10(s.div(Decimal.pow(10,17000)).log10().div(1000)).div(Decimal.log10(this.scalebase()))
                if (target.gte(d)) target = target.div(d).pow(0.4).mul(d)
                target = target.ceil()
                let cost = Decimal.pow(10, Decimal.pow(this.scalebase(),target.sub(1)).mul(1000)).mul(Decimal.pow(10,17000))
                let diff = target.sub(player.d.buyables[13])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",6)) player.d.points = player.d.points.sub(cost).max(0)
                    if (diff.gt(max)) diff = max
                    player.d.buyables[13] = player.d.buyables[13].add(diff)
                }
            },
        },
    },
    canReset() { return !hasMilestone("d", 10) && player.s.severity.gte(1.797e308)},
    upgrades: {
        rows: 4,
        cols: 4,
        11: {
            title: "Deadly",
            description: "Deaths boosts symptom base.",
            cost: decimalTwo,
            effect(){
            let d11 = player.d.points.add(10).max(10)
            d11 = Decimal.log10(d11).pow(4.5).add(1).max(1)
            if (hasSUpg(52)) d11 = d11.pow(getSUpgEff(52))
            if (inChallenge("s", 21)) d11 = decimalOne
            return d11
            },
            effectDisplay(){
            return format(getDUpgEff(11))+"x"
            },
            unlocked() {
                return hasMilestone("d", 2)
            }
        },
        12: {
            title: "Fatal",
            description: "Cases boost death gain.",
            cost: decimalFive,
            effect(){
            let d12 = player.points.add(1).max(1)
            d12 = Decimal.log10(d12).pow(0.1).add(1).max(1)
            if (hasDUpg(33)) d12 = d12.pow(getDUpgEff(33))
            if (hasFUpg(31)) d12 = d12.pow(getFUpgEff(31))
            if (d12.gte("ee3e20")) d12 = d12.div("ee3e20").log10().log10().pow(0.95).pow10().pow10().mul("ee3e20")
            if (d12.gte("eee32")) d12 = d12.div("eee32").log10().log10().pow(0.9).pow10().pow10().mul("eee32")
            if (inChallenge("s", 21)) d12 = decimalOne
            return d12
            },
            effectDisplay(){
            return format(getDUpgEff(12))+"x"
            },
            unlocked() {
                return hasDUpg(11)
            }
        },
        13: {
            title: "Lethal",
            description: "Deaths boost 'Infectivity Gain' base.",
            cost: new Decimal(20),
            effect(){
            let d12 = player.d.points.add(1).max(1)
            d12 = d12.pow(20)
            if (d12.gte("eee20")) d12 = d12.div("eee20").log10().log10().pow(0.95).pow10().pow10().mul("eee20")
            if (inChallenge("s", 21)) d12 = decimalOne
            return d12
            },
            effectDisplay(){
            return format(getDUpgEff(13))+"x"
            },
            unlocked() {
                return hasDUpg(12)
            }
        },
        14: {
            title: "Blood Transmission",
            description: "Deaths boost 'Transmission'.",
            cost: new Decimal(30),
            effect(){
            let d14 = player.d.points.add(10).max(10)
            d14 = Decimal.log10(d14).add(10).max(10)
            d14 = Decimal.log10(d14).pow(4)
            if (d14.gte(10)) d14 = d14.div(10).pow(0.3).mul(10)
            if (inChallenge("s", 21)) d14 = decimalOne
            return d14
            },
            effectDisplay(){
                let dis = "^"+format(getDUpgEff(14))
                if (tmp.d.upgrades[14].effect.gte(10)) dis += " (softcapped)"
                return dis
            },
            unlocked() {
                return hasDUpg(13)
            }
        },
        21: {
            title: "Dangerous",
            description: "Deaths boost uncoater base.",
            cost: new Decimal(75),
            effect(){
            let d12 = player.d.points.add(1).max(1)
            d12 = d12.pow(30)
            if (hasUpgrade("Ur",23)) d12 = d12.pow(tmp.Ur.upgrades[23].effect)
            if (inChallenge("s", 21)) d12 = decimalOne
            return d12
            },
            effectDisplay(){
            return format(getDUpgEff(21))+"x"
            },
            unlocked() {
                return hasDUpg(14)
            }
        },
        22: {
            title: "Mortal",
            description: "Double death gain per death upgrade bought.",
            cost: new Decimal(150),
            effect(){
            let d22 = player.d.upgrades.length
            d22 = Decimal.pow(2, d22)
            if (inChallenge("s", 21)) d22 = decimalOne
            return d22
            },
            effectDisplay(){
            return format(getDUpgEff(22))+"x"
            },
            unlocked() {
                return hasDUpg(21)
            }
        },
        23: {
            title: "Kill",
            description: "'Smell Loss' buys 2x more.",
            cost: new Decimal(3e5),
            unlocked() {
                return hasDUpg(22)
            }
        },
        24: {
            title: "Dying",
            description: "Severity boosts death gain.",
            cost: new Decimal(1e8),
            effect(){
            let d24 = player.s.severity.add(10).max(10)
            d24 = Decimal.log10(d24).pow(0.5)
            if (inChallenge("s", 21)) d24 = decimalOne
            return d24
            },
            effectDisplay(){
            return format(getDUpgEff(24))+"x"
            },
            unlocked() {
                return hasDUpg(23)
            }
        },
        31: {
            title: "Pass Away",
            description() {
                let des =  "Deaths reduce recovery effect."
                if (hasDUpg(42)) des =  "Deaths boost severity gain."
                return des
            },
            cost: new Decimal(5e13),
            effect(){
            let d24 = player.d.points.add(10).max(10)
            d24 = Decimal.log10(d24).pow(-0.12)
            if (hasDUpg(42)) d24 = d24.pow(-1)
            if (inChallenge("s", 21)) d24 = decimalOne
            return d24
            },
            effectDisplay(){
            return "^"+format(getDUpgEff(31))
            },
            unlocked() {
                return hasDUpg(24)
            }
        },
        32: {
            title: "Perish",
            description() {
                let des =  "Cases reduce recovery effect "
                if (hasDUpg(42)) des =  "Cases boost severity gain"
                return des + " and 'Smell Loss' buys 5x more."
            },
            cost: new Decimal(2e27),
            effect(){
            let d24 = player.points.add(10).max(10)
            d24 = Decimal.log10(d24).pow(-0.018)
            if (hasDUpg(42)) d24 = d24.pow(-1)
            if (inChallenge("s", 21)) d24 = decimalOne
            return d24
            },
            effectDisplay(){
            return "^"+format(getDUpgEff(32))
            },
            unlocked() {
                return hasDUpg(31)
            }
        },
        33: {
            title: "Expire",
            description: "VP boost 'Fatal' and 'Smell Loss' buys 2x more and 2x often.",
            cost: new Decimal(3e46),
            effect(){
            let d24 = player.v.points.add(10).max(10)
            d24 = Decimal.log10(d24).pow(0.1)
            if (inChallenge("s", 21)) d24 = decimalOne
            return d24
            },
            effectDisplay(){
            return "^"+format(getDUpgEff(33))
            },
            unlocked() {
                return hasDUpg(32)
            }
        },
        34: {
            title: "Decease",
            description: "Bought death upgrades boost 'Fever' and unlock more symptom upgrades.",
            cost: new Decimal(4e165),
            unlocked() {
                return hasDUpg(33)
            }
        },
        41: {
            title: "Demise",
            description: "Deaths make symptom scaling start later.",
            cost: Decimal.pow(10,2089).mul(1.5),
            effect(){
            let d24 = player.d.points.add(10).max(10)
            d24 = Decimal.log10(d24).pow(0.3).sub(1)
            if (d24.gte(5000)) d24 = d24.div(5000).pow(0.5).mul(5000)
            if (inChallenge("ct",32)) {
                if (d24.gte("ee121")) d24 = d24.log10().log10().div(121).pow(0.5).mul(121).pow10().pow10()
                if (d24.gte("ee225")) d24 = d24.log10().log10().div(225).pow(0.3).mul(225).pow10().pow10()
                if (d24.gte("eee3")) d24 = d24.log10().log10().div(1e3).pow(0.75).mul(1e3).pow10().pow10()
                if (d24.gte("eee37")) d24 = d24.log10().log10().mul(1e3).log10().mul(2.5).pow(18.5).pow10().pow10()
                if (d24.gte("eee61")) d24 = d24.log10().log10().div(1e61).pow(0.5).mul(1e61).pow10().pow10()
            }
            if (inChallenge("s", 21)) d24 = decimalOne
            return d24.pow(tmp.Us.symptomEff)
            },
            effectDisplay(){
            return "+"+format(getDUpgEff(41))
            },
            unlocked() {
                return hasSUpg(55)
            }
        },
        42: {
            title: "Murder",
            description: "Stop gaining recoveries and upgrades that reduce recovery effect boost severity gain.",
            cost: Decimal.pow(10,2208).mul(5),
            unlocked() {
                return hasDUpg(41)
            }
        },
        43: {
            title: "Slain",
            description: "Deaths boost cases gain.",
            cost: Decimal.pow(10,9101).mul(1.5),
            effect(){
            let d24 = player.d.points.add(10).max(10).log10().pow(0.025)
            if (d24.gte(Decimal.pow(10,1e57))) d24 = d24.div(Decimal.pow(10,1e57)).log10().pow(0.85).pow10().mul(Decimal.pow(10,1e57))
            if (d24.gte(Decimal.pow(10,Decimal.pow(10,1e21)))) d24 = d24.log10().log10().div(10).pow(5e19).pow10()
            if (inChallenge("s", 21)) d24 = decimalOne
            return d24
            },
            effectDisplay(){
                let dis = "^"+format(getDUpgEff(43))
                if (getDUpgEff(43).gte(Decimal.pow(10,1e57))) dis += " (softcapped)"
                return dis
            },
            unlocked() {
                return hasDUpg(42)
            }
        },
        44: {
            title: "Slaughter",
            description: "Deaths boost severity gain exponent.",
            cost: Decimal.pow(10,9291).mul(8),
            effect(){
                let d24 = player.d.points.add(10).max(10)
                d24 = Decimal.log10(d24).pow(0.015)
                if (inChallenge("s", 21)) d24 = decimalOne
                return d24
                },
                effectDisplay(){
                return "^"+format(getDUpgEff(44))
                },
            unlocked() {
                return hasDUpg(43)
            }
        },
    },
})
addLayer("stat", {
    name: "Statistics", // This is optional, only used in a few places, If absent it just uses the layer id.
    symbol: "ST", // This appears on the layer's node. Default is the id with the first letter capitalized
    position: 0, // Horizontal position within a row. By default it uses the layer id and sorts in alphabetical order
    startData() { return {
        unlocked: true,
        points: decimalZero,
    }},
    tooltip() {
      return "Statistics"
    },
    color: "#FFFFFF",
    requires: decimalZero, // Can be a function that takes requirement increases into account
    resource: "points", // Name of prestige currency
    type: "none", // normal: cost to gain currency depends on amount gained. static: cost depends on how much you already have
    exponent: 0.5, // Prestige currency exponent
    row: "side", // Row the layer is in on the tree (0 is the first row)
    layerShown() { return true },
    tabFormat: {
        "Main": {
        content:[
            "blank",
        ["raw-html", 
            function () {
                if (player.tab == "stat") {
                let a = "You have "+formatWhole(player.points)+" cases.<br><br>"
                let b = "You have "+formatWhole(player.v.points)+" virus points.<br><br>"
                let c = player.i.unlocked?"You have "+formatWhole(player.i.points)+" infectivity.<br><br>":""
                let d = player.r.unlocked?"You have "+formatWhole(player.r.points)+" replicators.<br><br>":""
                let e = player.u.unlocked?"You have "+formatWhole(player.u.points)+" uncoaters.<br><br>":""
                let f = player.s.unlocked?"You have "+formatWhole(player.s.points)+" symptoms.<br><br>":""
                let g = player.s.unlocked?"You have "+formatWhole(player.s.severity)+" severity.<br><br>":""
                let h = player.d.unlocked?"You have "+formatWhole(player.d.points)+" deaths.<br><br>":""
                let h2 = player.f.unlocked?"You have "+formatWhole(player.f.points)+" fatality.<br><br>":""
                let h3 = player.e.unlocked?"You have "+formatWhole(player.e.points)+" infecters.<br><br>":""
                let h4 = player.ct.unlocked?"You have "+formatWhole(player.ct.points)+" CTNA.<br><br>":""
                let i = "'Infection' base:"+format(tmp.v.upgrades[12].base)+"<br><br>"
                let j = player.r.unlocked?"Replicator base:"+format(tmp.r.effbase)+"<br><br>":""
                let k = player.u.unlocked?"Uncoater base:"+format(tmp.u.effbase)+"<br><br>":""
                let l = player.s.unlocked?"Symptom base:"+format(tmp.s.effbase)+"<br><br>":""
                let m = player.e.unlocked?"Infecter base:"+format(tmp.e.effbase)+"<br><br>":""
                let n = hasSUpg(31) || player.d.unlocked?"'Smell Loss' autobuy:"+formatWhole(tmp.s.bulk)+"/" + format(1/tmp.s.speed)+"s (" + format(Decimal.mul(tmp.s.bulk,tmp.s.speed)) + "/s)<br><br>":""
                let o = hasFUpg(25)?"'More Fatal' autobuy:"+formatWhole(tmp.d.bulk)+"/" + format(1/tmp.d.speed)+"s (" + format(Decimal.mul(tmp.d.bulk,tmp.d.speed)) + "/s)<br><br>":""
                let p = hasFUpg(187)?"'More Exponenter' autobuy:"+formatWhole(tmp.f.bulk)+"/" + format(1/tmp.f.speed)+"s (" + format(Decimal.mul(tmp.f.bulk,tmp.f.speed)) + "/s)<br><br>":""
                let q = player.d.buyables[13].gte(2500)?"'Cases Boost' softcap start:"+format(tmp.d.buyables[13].scStart)+"<br><br>":""
                let r = hasMilestone("f",6)?"Multiplier per Fatality Dimension:"+format(tmp.f.multpd)+"<br><br>":""
                let s = player.f.total.gte(Decimal.pow(10,1e3))?"Fatality Dimension Scaling:"+format(tmp.f.DimScaling)+"<br><br>":""
                let t = player.f.total.gte(Decimal.pow(10,420).mul(6.969))?"Fatality Dimension Boost Scaling:"+format(tmp.f.buyables[32].scale)+"<br><br>":""
                let u = player.f.buyables[33].gte(100)?"Distant Multiplier Boost Scaling Start:"+format(tmp.f.buyables[33].distantStart)+"<br><br>":""
                let v = player.f.buyables[33].gte(10000)?"Social Distant Multiplier Boost Scaling Start:"+format(tmp.f.buyables[33].sStart)+"<br><br>":""
                let w = player.e.rna.gte(Decimal.pow(10,1e3))?"Immunity exponent:"+format(tmp.e.iexp)+"<br><br>":""
                let x = hasUpgrade("ct",22)?"After log exponent:"+format(tmp.e.crme)+"<br><br>":""
                let y = hasUpgrade("ct",145)?"Green Exponent:"+format(tmp.ct.getGreenExp)+"<br><br>":""
                let z = hasUpgrade("ct",166)?"Anti-Vaxxer Base:"+format(tmp.ct.getVaxxerBase.b1)+"<br><br>":""
                let aa = hasUpgrade("ct",166)?"Anti-Vaxxer Cost Base:"+format(tmp.ct.getVaxcostBase)+"<br><br>":""
                let ab = hasUpgrade("ct",194)?"Anti-Capped CTNA Effect:"+format(tmp.ct.getAntiCapCTNA)+"<br><br>":""
                let ab2 = hasUpgrade("ct",194)?"Anti-Capped CTNA Total Effect:"+format(tmp.ct.aCapCtna)+"<br><br>":""
                let ac = player.e.points.gte(tet10(40))?"Social Distant Infecter scaling start:"+format(tet10(tmp.e.scStart))+"<br><br>":""
                let ad = player.ct.buyables[181].gte(298)?"Distant UI Gain scaling start:"+format(tmp.ct.buyables[181].start)+"<br><br>":""
                let ae = player.ct.buyables[181].gte(298)?"Distant UI Gain scaling base:"+format(tmp.ct.buyables[181].dbase)+"<br><br>":""
                let af = player.ct.buyables[181].gte(1e4)?"Social Distant UI Gain scaling start:"+format(tmp.ct.buyables[181].sstart)+"<br><br>":""
                let ag = player.e.points.gte(tet10(2e7))?"Quarantined Infecter scaling start:"+format(tet10(tmp.e.qStart))+"<br><br>":""
                return a+b+c+d+e+f+g+h+h2+h3+h4+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+aa+ab+ab2+ac+ad+ae+af+ag
                }
            }],
            ]
        },
        "Cases Representation": { // From AD NG+++
            content:[
            "blank",
            ["raw-html", 
            function () {
                if (player.tab == "stat") { 
                let x = player.points.max(1e-111)
                let a = "You have "+format(x)+" cases.<br><br>"
                let p = 6.187e34**3*1e-21
                let height = slog(x).floor().div(100)
                let digits = x.log10().floor().add(1).div(3)
                let years = digits.div(31556952)
                let unis = years.div(13.78e9) 
                let size = formatSize(Decimal.div(1e-21,x.min(p)).root(3))
                let b = "If every case were the size of SARS-VoC-3, and SARS-VoC-3 is "+size+" in diameter, you would have enough to make a SARS-CoV-2 virus."
                if (height.gte(8.8e26)) b = "If every 10 in the cases power tower were 1 centimeter tall, the power tower would be "+formatSize(height) + " tall."
                else if (height.gte(1.71)) b = "If every 10 in the cases power tower were 1 centimeter tall, the power tower would be "+formatSize(height) + " tall (" + heightComp(height) + ")."
                else if (x.gte(tet10(100))) b = "If every 10 in the cases power tower were 1 centimeter tall, the power tower would be "+formatSize(height) + " tall (" + format(height.div(0.0171)) + "% of your height)."
                else if (years.gte(1e40)) b = "The time needed to finish writing your full cases amount at a rate of 3 digits per second would span " + formatTimeLong(digits)+"."
                else if (years.gte(1e9)) {
                    b = "The time needed to finish writing your full cases amount at a rate of 3 digits per second would span "
                    if (unis.lt(1)) b+= format(unis.mul(100)) + "% of the age of the universe."
                    else b+= format(unis) + " times the age of the universe."
                }
                else if (years.gte(2022)) b = "If you wanted to finish writing out your cases amount at a rate of 3 digits per second, you would need to start it in " + eventsTime(years)
                else if (x.gte(Decimal.pow(10,750739887.08))) {b = "If you wrote 3 digits of your cases amount every second since you were born, you would "
                    if (years.gte(79.3)) b += "be a ghost for " + format(years.sub(79.3).div(years).mul(100)) + "% of the session."
	                else b += "waste " + format(years.div(0.793)) + "% of your projected average lifespan."
                }
                else if (x.gte("ee5")) b = "If you wrote 3 digits per second, it would take "+formatTime(digits)+" to write down your cases."
                else if (x.gte(p)) b = "If every case were the size of SARS-VoC-3, and SARS-VoC-3 is 1 Planck Length in diameter, you would have enough to make "+formatComp(x.mul(2.2108845e-105))
                return a+b
                }
            }],
            ],
        },
        "Booster Vaccine Stats": {
            content:[
            "blank",
            ["raw-html", 
            function () {
                if (player.tab == "stat") { 
                    let base = getPointBase()
                    let bmult = getBaseGain()
                    let exp = getGainpowSlog()
                    let cexp = tmp.ct.getBoosterExp
                    let bgain = slog(base).mul(bmult)
                    let bexp = bgain.pow(exp)
                    let bslog = slogadd(bexp,tmp.ct.getBoosterSlog)
                    let mult = getGainMultSlog().div(1e9)
                    let cap = tmp.uv.slogCap
                let a = "Base cases gain: "+format(base)+" cases/s.<br><br>"
                let b = "Base cases gain in 'Booster Vaccine' ("+format(bmult)+"x): "+format(bgain)+" cases/s.<br><br>"
                let c = "Base cases gain in 'Booster Vaccine' with exponents (^"+format(exp)+"):"+format(bexp)+" cases/s.<br><br>"
                let d = "Base cases gain in 'Booster Vaccine' with exponents and slog adders (+"+format(tmp.ct.getBoosterSlog)+"): "+format(bslog.min(mult.pow(cap).max("ee10")))+" (caps at "+format(mult.pow(cap).max("ee10"))+") cases/s.<br><br>"
                let e = "Cases gain multiplier after slog: "+format(mult)+"x.<br><br>"
                let f = "Total cases gain: "+format(bslog.min(mult.pow(cap).max("ee10")).mul(mult))+" cases/s.<br><br>"
                let g = "Total cases gain with exponents (^"+format(cexp)+"): "+format(bslog.min(mult.pow(cap).max("ee10")).mul(mult).pow(cexp))+" cases/s.<br><br>"
                let h = "Base gain cap exponent (After slog mult<sup>exp</sup>): "+format(cap)+".<br><br>"
                return a+b+c+d+e+f+g+h
                }
            }],
            ],
            unlocked() {return inChallenge("ct",32) == true}
        },
    },
})
addLayer("a", {
    name: "Achievements", // This is optional, only used in a few places, If absent it just uses the layer id.
    symbol: "A", // This appears on the layer's node. Default is the id with the first letter capitalized
    position: 2, // Horizontal position within a row. By default it uses the layer id and sorts in alphabetical order
    startData() { return {
        unlocked: true,
        points: decimalZero,
    }},
    tooltip() {
      return "Achievements"
    },
    color: "#FFFF00",
    nodeStyle() {return {
        "background": "radial-gradient(#FFFF00, #d5ad83)" ,
    }},
    requires: decimalZero, // Can be a function that takes requirement increases into account
    resource: "Achievement Points",
    resourceSingular: "Achievement Point", 
    type: "none", // normal: cost to gain currency depends on amount gained. static: cost depends on how much you already have
    exponent: 0.5, // Prestige currency exponent
    row: "side", // Row the layer is in on the tree (0 is the first row)
    layerShown() { return true },
    achievements: {
        rows: 26,
        cols: 6,
        11: {
            name: "Start",
            tooltip: "Get 2 cases. Reward: 1 AP",
            done() {
                return player.points.gte(2)
            },
            onComplete() {
                addPoints("a",1)
            }
        },
        12: {
            name: "Infect",
            tooltip: "Get 10 cases. Reward: 1 AP",
            done() {
                return player.points.gte(10)
            },
            onComplete() {
                addPoints("a",1)
            }
        },
        13: {
            name: "Thousand Infected",
            tooltip() {return "Get "+formatWhole(1e3)+" cases. Reward: 1 AP"},
            done() {
                return player.points.gte(1000)
            },
            onComplete() {
                addPoints("a",1)
            }
        },
        14: {
            name: "Million Infected",
            tooltip() {return "Get "+formatWhole(1e6)+" cases. Reward: 1 AP"},
            done() {
                return player.points.gte(1e6)
            },
            onComplete() {
                addPoints("a",1)
            }
        },
        15: {
            name: "Covid 19",
            tooltip() {return "Get "+formatWhole(63154455)+" cases. Reward: 1 AP"},
            done() {
                return player.points.gte(63154455)
            },
            onComplete() {
                addPoints("a",1)
            }
        },
        16: {
            name: "World Infected",
            tooltip() {return "Get "+formatWhole(7.8e9)+" cases. Reward: 1 AP"},
            done() {
                return player.points.gte(7.8e9)
            },
            onComplete() {
                addPoints("a",1)
            }
        },
        21: {
            name: "Infected infections",
            tooltip: "Get 10 infectivity. Reward: 1 AP, AP boosts VP",
            done() {
                return player.i.points.gte(10)
            },
            onComplete() {
                addPoints("a",1)
            }
        },
        22: {
            name: "Upgraded infections",
            tooltip: "Get 5 infectivity upgrades. Reward: 1 AP",
            done() {
                return player.i.upgrades.length>=5
            },
            onComplete() {
                addPoints("a",1)
            }
        },
        23: {
            name: "Replicated",
            tooltip: "Get 1 replicator. Reward: 2 AP",
            done() {
                return player.r.points.gte(1)
            },
            onComplete() {
                addPoints("a",2)
            }
        },
        24: {
            name: "Infected company",
            tooltip() {return "Get "+formatWhole(1e100)+" cases. Reward: 2 AP"},
            done() {
                return player.points.gte(1e100)
            },
            onComplete() {
                addPoints("a",2)
            }
        },
        25: {
            name: "Infinite infections",
            tooltip() {return "Get "+formatWhole(Decimal.pow(2,1024))+" cases. Reward: 2 AP"},
            done() {
                return player.points.gte(Decimal.pow(2,1024))
            },
            onComplete() {
                addPoints("a",2)
            }
        },
        26: {
            name: "SUS Upgrade",
            tooltip: "Get 7 infectivity upgrades. Reward: 2 AP",
            done() {
                return player.i.upgrades.length>=7
            },
            onComplete() {
                addPoints("a",2)
            }
        },
        31: {
            name: "Uncoated",
            tooltip: "Get 1 uncoater. Reward: 2 AP, AP boosts infectivity and keep virus upgrades",
            done() {
                return player.u.points.gte(1)
            },
            onComplete() {
                addPoints("a",2)
            }
        },
        32: {
            name: "(softcapped)",
            tooltip: "Get 2 uncoater upgrades. Reward: 2 AP",
            done() {
                return player.u.upgrades.length>=2
            },
            onComplete() {
                addPoints("a",2)
            }
        },
        33: {
            name: "(hardcapped)",
            tooltip: "Get 5 uncoater upgrades. Reward: 2 AP",
            done() {
                return player.u.upgrades.length>=5
            },
            onComplete() {
                addPoints("a",2)
            }
        },
        34: {
            name: "Challenging",
            tooltip: "Complete an uncoater challenge. Reward: 2 AP",
            done() {
                return challengeCompletions("u", 11)>=1
            },
            onComplete() {
                addPoints("a",2)
            }
        },
        35: {
            name: "Severe case",
            tooltip: "Get 1 severity. Reward: 3 AP",
            done() {
                return player.s.severity.gte(1)
            },
            onComplete() {
                addPoints("a",3)
            }
        },
        36: {
            name: "Auto",
            tooltip: "Get 11 symptom upgrades. Reward: 3 AP",
            done() {
                return player.s.upgrades.length>=11
            },
            onComplete() {
                addPoints("a",3)
            }
        },
        41: {
            name: "Dead",
            tooltip: "Get 1 death. Reward: 3 AP, Autobuy buyables, 'Smell Loss' buys 2x more and faster, AP boosts severity, Keep I/R upgrades",
            done() {
                return player.d.points.gte(1)
            },
            onComplete() {
                addPoints("a",3)
            }
        },
        42: {
            name: "Automated",
            tooltip: "Get 8 death milestones. Reward: 3 AP, AP formula is better",
            done() {
                return hasMilestone("d", 7)
            },
            onComplete() {
                addPoints("a",3)
            }
        },
        43: {
            name: "Corona Death",
            tooltip() {return "Get "+formatWhole(1466925)+" deaths. Reward: 3 AP, Double death gain"},
            done() {
                return player.d.points.gte(1466925)
            },
            onComplete() {
                addPoints("a",3)
            }
        },
        44: {
            name: "Coffin",
            tooltip() {return "Get "+formatWhole(1e30)+" deaths. Reward: 3 AP, Double death gain"},
            done() {
                return player.d.points.gte(1e30)
            },
            onComplete() {
                addPoints("a",3)
            }
        },
        45: {
            name: "Coffin Dance",
            tooltip() {return "Get "+formatWhole(1e100)+" deaths. Reward: 4 AP"},
            done() {
                return player.d.points.gte(1e100)
            },
            onComplete() {
                addPoints("a",4)
            }
        },
        46: {
            name: "Coughin Dance",
            tooltip: "Get 14 death upgrades. Reward: 4 AP",
            done() {
                return player.d.upgrades.length>=14
            },
            onComplete() {
                addPoints("a",4)
            }
        },
        51: {
            name: "Mortal Kombat",
            tooltip: "Get 1 fatality. Reward: 4 AP",
            done() {
                return player.f.points.gte(1)
            },
            onComplete() {
                addPoints("a",4)
            }
        },
        52: {
            name: "Kortal Mombat",
            tooltip: "Get 2 fatality upgrades. Reward: 4 AP, AP boosts death gain",
            done() {
                return player.f.upgrades.length>=2
            },
            onComplete() {
                addPoints("a",4)
            }
        },
        53: {
            name: "DIMENSIONS??",
            tooltip: "Get 6 fatality milestones. Reward: 4 AP, 'More Fatal' buys 5x more and 2x faster",
            done() {
                return player.f.milestones.length>=6
            },
            onComplete() {
                addPoints("a",4)
            }
        },
        54: {
            name: "NG+++ INFECTED",
            tooltip() {return "Get "+formatWhole("ee18")+" cases. Reward: 4 AP, Double Fatality Dimensions"},
            done() {
                return player.points.gte("ee18")
            },
            onComplete() {
                addPoints("a",4)
            }
        },
        55: {
            name: "PPOOWWEERR!",
            tooltip() {return "Get "+formatWhole("ee3")+" fatality power. Reward: 4 AP"},
            done() {
                return player.f.p.gte(Decimal.pow(10,1e3))
            },
            onComplete() {
                addPoints("a",4)
            }
        },
        56: {
            name: "The 9th Dimension is a lie",
            tooltip: "Get exactly 99 8th Dimensions. Reward: 5 AP",
            done() {
                return player.f.buyables[24].eq(99)
            },
            onComplete() {
                addPoints("a",5)
            }
        },
        61: {
            name: "Casual",
            tooltip: "Get 1 casualty. Reward: 5 AP",
            done() {
                return player.f.casualty.gte(1)
            },
            onComplete() {
                addPoints("a",5)
            }
        },
        62: {
            name: "Fatally Challenged",
            tooltip: "Complete 4 Fatality Challenges Reward: 5 AP",
            done() {
                return hasChallenge("f",11) && hasChallenge("f",12) && hasChallenge("f",21) && hasChallenge("f",22)
            },
            onComplete() {
                addPoints("a",5)
            }
        },
        63: {
            name: "Zero Deaths",
            tooltip() {return "Get "+formatWhole("ee4")+" fatality without Dimension and Multiplier Boosts. Reward: 5 AP"},
            done() {
                return player.f.points.gte("ee4") && player.f.buyables[32].eq(0) && player.f.buyables[33].eq(0)
            },
            onComplete() {
                addPoints("a",5)
            }
        },
        64: {
            name: "REPLICANTI",
            tooltip: "Unlock Casuals. Reward: 5 AP",
            done() {
                return hasMilestone("f",17)
            },
            onComplete() {
                addPoints("a",5)
            }
        },
        65: {
            name: "'ZERO' Deaths",
            tooltip() {return "Get "+formatWhole("6e666666")+" fatality without Dimension and Multiplier Boosts in Casualty Challenge 1. Reward: 5 AP, AP boosts fatality dimensions"},
            done() {
                return player.f.points.gte("6e666666") && player.f.buyables[32].eq(0) && player.f.buyables[33].eq(0) && inChallenge("f",31)
            },
            onComplete() {
                addPoints("a",5)
            }
        },
        66: {
            name: "0 cases from Casualty",
            tooltip: "Get 1 Casualty Dimension 8. Reward: 5 AP",
            done() {
                return player.f.buyables[84].gte(1)
            },
            onComplete() {
                addPoints("a",5)
            }
        },
        71: {
            name: "GoogolPlex",
            tooltip() {return "Get "+formatWhole("ee100")+" cases. Reward: 5 AP"},
            done() {
                return player.points.gte("ee100")
            },
            onComplete() {
                addPoints("a",5)
            }
        },
        72: {
            name: "When will it be enough?",
            tooltip() {return "Get "+formatWhole("e30000")+" casuals. Reward: 5 AP"},
            done() {
                return player.f.casuals.gte("e30000")
            },
            onComplete() {
                addPoints("a",5)
            }
        },
        73: {
            name: "GAS",
            tooltip() {return "Get "+formatWhole("eee3")+" cases. Reward: 6 AP"},
            done() {
                return player.points.gte("eee3")
            },
            onComplete() {
                addPoints("a",6)
            }
        },
        74: {
            name: "Corona GAS",
            tooltip() {
                let a = "Get "+formatWhole("eee6")+" cases. Reward: 6 AP, multiply infection power and infectious disease gain (decreases with more IDs, starts at 5e285 IDs)"
                let b = "<br>Currently: "+format(tmp.a.achievements[74].effect)+"x"
                return  a+b
            },
            done() {
                return player.points.gte("eee6")
            },
            effect() {
                if (player.e.diseases.lt(5e285)) return decimalOne
                return player.e.diseases.div(5e284).max(10).log10().pow(-0.275).mul(6).add(1)
            },
            onComplete() {
                addPoints("a",6)
            }
        },
        75: {
            name: "Infected Challenge",
            tooltip: "Complete all Infecter Challenges. Reward: 6 AP",
            done() {
                return player.e.c11.gte(1e6) && player.e.c12.gte(1e6)
            },
            onComplete() {
                addPoints("a",6)
            }
        },
        76: {
            name: "Unimmune",
            tooltip: "Get 1 'Immunity Base'. Reward: 6 AP",
            done() {
                return player.e.buyables[23].gte(1)
            },
            onComplete() {
                addPoints("a",6)
            }
        },
        81: {
            name: "Diseased Diseases",
            tooltip: "Get 1 'Disease Boost'. Reward: 7 AP",
            done() {
                return player.e.buyables[42].gte(1)
            },
            onComplete() {
                addPoints("a",7)
            }
        },
        82: {
            name: "Quarantined",
            tooltip: "Get 1 Unquarantined Infection. Reward: 7 AP",
            done() {
                return player.e.qt.gte(1)
            },
            onComplete() {
                addPoints("a",7)
            }
        },
        83: {
            name: "E-World Quarantine",
            tooltip() {return "Get "+format("e78e8")+" cases in Quarantine. Reward: 8 AP"},
            done() {
                return player.e.inC && player.points.gte("e7.8e9")
            },
            onComplete() {
                addPoints("a",8)
            }
        },
        84: {
            name: "Unquarantined Quarantine",
            tooltip: "Get Unquarantined Infections out of Quarantine. Reward: 8 AP",
            done() {
                return hasUpgrade("e",162)
            },
            onComplete() {
                addPoints("a",8)
            }
        },
        85: {
            name: "GAS GAS",
            tooltip() {return "Get "+format("eee20")+" cases. Reward: 8 AP"},
            done() {
                return player.points.gte("eee20")
            },
            onComplete() {
                addPoints("a",8)
            }
        },
        86: {
            name: "Multi-Million",
            tooltip: "Get 1,000,000 Multiplier Boosts. Reward: 8 AP",
            done() {
                return player.f.buyables[33].gte(1e6)
            },
            onComplete() {
                addPoints("a",8)
            }
        },
        91: {
            name: "Cased GAS",
            tooltip() {return "Get "+format(Decimal.pow(Math.E,Decimal.pow(Math.E,Decimal.pow(Math.E,79))))+" cases. Reward: 9 AP"},
            done() {
                return player.points.gte(Decimal.pow(Math.E,Decimal.pow(Math.E,Decimal.pow(Math.E,79))))
            },
            onComplete() {
                addPoints("a",9)
            }
        },
        92: {
            name: "Atomic Virus",
            tooltip: "Get 1 Atom. Reward: 9 AP",
            done() {
                return player.e.h.gte(1)
            },
            onComplete() {
                addPoints("a",9)
            }
        },
        93: {
            name: "Molecular Virus",
            tooltip: "Get 1 Molecule. Reward: 9 AP",
            done() {
                return player.e.ad.gte(1) || player.e.ur.gte(1)
            },
            onComplete() {
                addPoints("a",9)
            }
        },
        94: {
            name: "Phosphate",
            tooltip: "Get 1 Phosphorus. Reward: 9 AP",
            done() {
                return player.e.ph.gte(1)
            },
            onComplete() {
                addPoints("a",9)
            }
        },
        95: {
            name: "Phosphate Virus",
            tooltip: "Get 1 Ribose-Phosphate. Reward: 9 AP",
            done() {
                return player.e.rp.gte(1)
            },
            onComplete() {
                addPoints("a",9)
            }
        },
        96: {
            name: "mRNA Virus",
            tooltip: "Get 1 mRNA. Reward: 10 AP",
            done() {
                return player.e.mrna.gte(1)
            },
            onComplete() {
                addPoints("a",10)
            }
        },
        101: {
            name: "Corona GAS GAS",
            tooltip() {return "Get "+format("eee1000")+" cases. Reward: 10 AP"},
            done() {
                return player.points.gte("eee1000")
            },
            onComplete() {
                addPoints("a",10)
            }
        },
        102: {
            name: "Automatic Diseases",
            tooltip: "Get 8 Infecter milestones. Reward: 10 AP",
            done() {
                return player.e.points.gte(2e4)
            },
            onComplete() {
                addPoints("a",10)
            }
        },
        103: {
            name: "Mutated",
            tooltip: "Get 1 MMNA. Reward: 10 AP",
            done() {
                return player.e.mm.gte(1)
            },
            onComplete() {
                addPoints("a",10)
            }
        },
        104: {
            name: "Infecterrr",
            tooltip: "Get 10 Infecter milestones. Reward: 10 AP",
            done() {
                return player.e.points.gte(5e4)
            },
            onComplete() {
                addPoints("a",10)
            }
        },
        105: {
            name: "In'F'ected",
            tooltip() {return "Get "+format(tet10(5))+" cases. Reward: 10 AP"},
            done() {
                return player.points.gte(Decimal.tetrate(10,5))
            },
            onComplete() {
                addPoints("a",10)
            }
        },
        106: {
            name: "COV",
            tooltip: "Get 3 Corona Mutations. Reward: 10 AP",
            done() {
                return player.e.mu2.gte(3)
            },
            onComplete() {
                addPoints("a",10)
            }
        },
        111: {
            name: "Mutant",
            tooltip: "Get 300 Mutations. Reward: 15 AP",
            done() {
                return player.e.mu.gte(300)
            },
            onComplete() {
                addPoints("a",15)
            }
        },
        112: {
            name: "CO.RO.NA.",
            tooltip: "Get 1 CRNA. Reward: 15 AP",
            done() {
                return player.e.crna.gte(1)
            },
            onComplete() {
                addPoints("a",15)
            }
        },
        113: {
            name: "COVI",
            tooltip: "Get 7 Corona Mutations. Reward: 15 AP",
            done() {
                return player.e.mu2.gte(7)
            },
            onComplete() {
                addPoints("a",15)
            }
        },
        114: {
            name: "Mutated Mutations",
            tooltip: "Get 1,000 Mutations. Reward: 15 AP",
            done() {
                return player.e.mu.gte(1e3)
            },
            onComplete() {
                addPoints("a",15)
            }
        },
        115: {
            name: "CoTona",
            tooltip: "Get 1 CTNA. Reward: 15 AP",
            done() {
                return player.ct.total.gte(1)
            },
            onComplete() {
                addPoints("a",15)
            }
        },
        116: {
            name: "CoMutated",
            tooltip: "Get 20 Corona Mutations. Reward: 15 AP",
            done() {
                return player.e.mu2.gte(20)
            },
            onComplete() {
                addPoints("a",15)
            }
        },
        121: {
            name: "CRPonent",
            tooltip: "Get 1 'CRNA Exponent'. Reward: 15 AP",
            done() {
                return player.ct.buyables[11].gte(1)
            },
            onComplete() {
                addPoints("a",15)
            }
        },
        122: {
            name: "CorVutated",
            tooltip: "Get 100 Corona Mutations. Reward: 15 AP",
            done() {
                return player.e.mu2.gte(100)
            },
            onComplete() {
                addPoints("a",15)
            }
        },
        123: {
            name: "CrowBird 19",
            tooltip: "Get 1 CorVid. Reward: 20 AP",
            done() {
                return player.ct.CorVid.gte(1)
            },
            onComplete() {
                addPoints("a",20)
            }
        },
        124: {
            name: "UnLogged",
            tooltip: "Get less than 0 log. Reward: 20 AP",
            done() {
                return tmp.e.crlog.lt(0)
            },
            onComplete() {
                addPoints("a",20)
            }
        },
        125: {
            name: "VoCiMutation",
            tooltip: "Get 30,000 Corona Mutations. Reward: 20 AP",
            done() {
                return player.e.mu2.gte(3e4)
            },
            onComplete() {
                addPoints("a",20)
            }
        },
        126: {
            name: "Outside",
            tooltip() {return "Get "+format(1e100)+" LaBas. Reward: 20 AP"},
            done() {
                return player.ct.LaBas.gte(1e100)
            },
            onComplete() {
                addPoints("a",20)
            }
        },
        131: {
            name: "Crowna Mutater",
            tooltip: "Get 1,000,000 Corona Mutations. Reward: 25 AP",
            done() {
                return player.e.mu2.gte(1e6)
            },
            onComplete() {
                addPoints("a",25)
            }
        },
        132: {
            name: "CrowBirder",
            tooltip: "Get 1 'CorVid Gain'. Reward: 25 AP",
            done() {
                return player.ct.buyables[61].gte(1)
            },
            onComplete() {
                addPoints("a",25)
            }
        },
        133: {
            name: "Milestone Booster",
            tooltip: "Get 20 CTNA Milestones. Reward: 25 AP",
            done() {
                return player.ct.milestones.length>=20
            },
            onComplete() {
                addPoints("a",25)
            }
        },
        134: {
            name: "CrowBird '19'",
            tooltip() {return "Get "+format(1e19)+" CorVids. Reward: 25 AP"},
            done() {
                return player.ct.CorVid.gte(1e19)
            },
            onComplete() {
                addPoints("a",25)
            }
        },
        135: {
            name: "Mask^-1",
            tooltip: "Get 1 Anti-Masker. Reward: 25 AP",
            done() {
                return player.ct.Am.gte(1)
            },
            onComplete() {
                addPoints("a",25)
            }
        },
        136: {
            name: "No Maskers",
            tooltip: "Get 100 Anti-Maskers. Reward: 25 AP",
            done() {
                return player.ct.Am.gte(100)
            },
            onComplete() {
                addPoints("a",25)
            }
        },
        141: {
            name: "Anti-Gambler",
            tooltip: "Unlock Anti-Roulette. Reward: 25 AP",
            done() {
                return hasUpgrade("ct",113)
            },
            onComplete() {
                addPoints("a",25)
            }
        },
        142: {
            name: "Anti-House",
            tooltip: "Get an Edge. Reward: 25 AP",
            done() {
                return hasUpgrade("ct",114)
            },
            onComplete() {
                addPoints("a",25)
            }
        },
        143: {
            name: "Lucky Player",
            tooltip: "Win 5 times in a row (After getting 'Streak Multiplier'). Reward: 30 AP",
            done() {
                return player.ct.winstreak>4
            },
            onComplete() {
                addPoints("a",30)
            }
        },
        144: {
            name: "Rigging the wheel",
            tooltip: "Get more than 50% Win Chance. Reward: 30 AP",
            done() {
                return hasUpgrade("ct",125)
            },
            onComplete() {
                addPoints("a",30)
            }
        },
        145: {
            name: "Roller",
            tooltip: "Unlock Auto-Roll. Reward: 30 AP, double Bet Amount",
            done() {
                return hasUpgrade("ct",131)
            },
            onComplete() {
                addPoints("a",30)
            }
        },
        146: {
            name: "Unlucky Player",
            tooltip: "Lose 5 times in a row with at least 60% Win Chance. Reward: 30 AP, double Bet Amount",
            done() {
                return player.ct.losestreak>4 && tmp.ct.getWinChance>=0.6
            },
            onComplete() {
                addPoints("a",30)
            }
        },
        151: {
            name: "Best Bets",
            tooltip: "Get 3 'Better Bets'. Reward: 30 AP, 5x Bet Amount",
            done() {
                return tmp.ct.getIter>3
            },
            onComplete() {
                addPoints("a",30)
            }
        },
        152: {
            name: "Green Roller",
            tooltip: "Win on Green. Reward: 30 AP, AP boosts Bet Amount",
            done() {
                return player.ct.gwinstreak>0
            },
            onComplete() {
                addPoints("a",30)
            }
        },
        153: {
            name: "Anti-Maskest",
            tooltip: "Get 1 'AM Booster'. Reward: 30 AP",
            done() {
                return player.ct.buyables[83].gte(1)
            },
            onComplete() {
                addPoints("a",30)
            }
        },
        154: {
            name: "Luckier Player",
            tooltip: "Win 15 times in a row. Reward: 30 AP",
            done() {
                return player.ct.winstreak>14
            },
            onComplete() {
                addPoints("a",30)
            }
        },
        155: {
            name: "Lucky Greens",
            tooltip: "Win 2 times in a row on Green. Reward: 30 AP",
            done() {
                return player.ct.gwinstreak>1
            },
            onComplete() {
                addPoints("a",30)
            }
        },
        156: {
            name: "Unluckier Player",
            tooltip: "Lose 4 times in a row with at least 75% Win Chance. Reward: 30 AP, Green Exponent is 10",
            done() {
                return player.ct.losestreak>3 && tmp.ct.getWinChance>=0.75
            },
            onComplete() {
                addPoints("a",30)
            }
        },
        161: {
            name: "Vaccination Opposer",
            tooltip: "Get 1 Anti-Vaxxer. Reward: 50 AP",
            done() {
                return player.ct.Avaxxers.gte(1)
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        162: {
            name: "Luckiest Player",
            tooltip: "Win 1,000 times in a row. Reward: 50 AP",
            done() {
                return Decimal.gte(player.ct.winstreak,1e3)
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        163: {
            name: "Green=EVEN",
            tooltip: "Get 18/37 Green Chance. Reward: 50 AP, AP boosts Anti-Vaccine gain",
            done() {
                return hasUpgrade("ct",182)
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        164: {
            name: "Luckier Greens",
            tooltip: "Win 100 times in a row on Green. Reward: 50 AP",
            done() {
                return Decimal.gte(player.ct.gwinstreak,100)
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        165: {
            name: "Capped↑↑10",
            tooltip() {return "Get "+format(tet10(10))+" cases. Reward: 50 AP"},
            done() {
                return player.points.gte(tet10(10))
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        166: {
            name: "Adverse Event",
            tooltip: "Get 1 Side Effect. Reward: 50 AP",
            done() {
                return player.ct.SideEff.gte(1)
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        171: {
            name: "Harmful Effects",
            tooltip: "Get 1 'Side Boost'. Reward: 50 AP",
            done() {
                return player.ct.buyables[153].gte(1)
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        172: {
            name: "Adverser Event",
            tooltip: "Get 1 Adverse Effect. Reward: 50 AP",
            done() {
                return player.ct.AdEff.gte(1)
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        173: {
            name: "CASED GAS GAS",
            tooltip() {return "Get "+format(tet10(20))+" cases. Reward: 50 AP"},
            done() {
                return player.points.gte(tet10(20))
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        174: {
            name: "Difficulties",
            tooltip: "Get 1 Adversity. Reward: 50 AP",
            done() {
                return player.ct.Adversity.gte(1)
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        175: {
            name: "Adverse Difficulties",
            tooltip: "Get 1 'Adversity Gain'. Reward: 50 AP",
            done() {
                return player.ct.buyables[163].gte(1)
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        176: {
            name: "Giggol Infected",
            tooltip() {return "Get "+format(tet10(100))+" cases. Reward: 50 AP"},
            done() {
                return player.points.gte(tet10(100))
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        181: {
            name: "Difficult Difficulties",
            tooltip: "Get 1 'Adversity Gain 2'. Reward: 50 AP",
            done() {
                return player.ct.buyables[164].gte(1)
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        182: {
            name: "In'F'inite CASES",
            tooltip() {return "Get "+format(tet10(Decimal.pow(2,1024).log10()))+" cases. Reward: 50 AP"},
            done() {
                return player.points.gte(tet10(Decimal.pow(2,1024).log10()))
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        183: {
            name: "Anti-Anti-AntiVaxxed",
            tooltip: "Get 1 Unvaccinated Vaxxer. Reward: 50 AP, buy max 'Adverse Boost'",
            done() {
                return player.ct.Uv.gte(1)
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        184: {
            name: "Anti-Vaxxed Giggol",
            tooltip() {return "Get "+format(tet10(100))+" cases in Vaccination. Reward: 50 AP"},
            done() {
                return player.points.gte(tet10(100)) && player.ct.inC
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        185: {
            name: "Anti-Vaxxed Adversity",
            tooltip: "Get 1 'Adversity Gain 2' in Vaccination. Reward: 50 AP",
            done() {
                return player.ct.buyables[164].gte(1) && player.ct.inC
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        186: {
            name: "In'F'inite ANTI-VAX",
            tooltip() {return "Get "+format(tet10(Decimal.pow(2,1024).log10()))+" cases in Vaccination. Reward: 50 AP"},
            done() {
                return player.points.gte(tet10(Decimal.pow(2,1024).log10())) && player.ct.inC
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        191: {
            name: "Harmful-Vaxxer",
            tooltip: "Get 1 Adverse Vaxxer. Reward: 50 AP, Double UV gain per Adverse Vaxxer upgrade",
            done() {
                return player.ct.Advaxxers.gte(1)
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        192: {
            name: "Harmfuler-Vaxxer",
            tooltip: "Get 2 Adverse Vaxxer Upgrades. Reward: 50 AP, Double UV and Adverse Vaxxer gain, Start with 1e50 UV",
            done() {
                return player.ct.upgrades.filter(x=>x>340).length>=2
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        193: {
            name: "Upgraded Vaxxer",
            tooltip: "Get 5 Adverse Vaxxer Upgrades. Reward: 50 AP, Double Adverse Vaxxer gain",
            done() {
                return player.ct.upgrades.filter(x=>x>340).length>=5
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        194: {
            name: "Million In'F'ected",
            tooltip() {return "Get "+format(tet10(1e6))+" cases. Reward: 50 AP, AP boosts UI gain."},
            done() {
                return player.points.gte(tet10(1e6))
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        195: {
            name: "Anti-Ribonucleic",
            tooltip: "Get 2,022 aRNA Vaccines. Reward: 50 AP, Double Adverse Vaxxer gain and log10(UV) boosts UV gain.",
            done() {
                return player.ct.arna.gte(2022)
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        196: {
            name: "Anti-Adenovirus",
            tooltip: "Get 2,023 AAV Vaccines. Reward: 50 AP, Double Adverse Vaxxer gain and log10(UV) boosts UV gain.",
            done() {
                return player.ct.aav.gte(2023)
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        201: {
            name: "Anti-Inactivated",
            tooltip: "Get 2,024 AIV Vaccines. Reward: 50 AP, log10(Adverse Vaxxer) boosts Adverse Vaxxer gain and log10(UV) boosts UV gain.",
            done() {
                return player.ct.aiv.gte(2024)
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        202: {
            name: "Anti-Subunit",
            tooltip: "Get 2,025 ASV Vaccines. Reward: 50 AP, log10(Adverse Vaxxer) boosts Adverse Vaxxer gain and log10(UV) boosts UV gain.",
            done() {
                return player.ct.asv.gte(2025)
            },
            onComplete() {
                addPoints("a",50)
            }
        },
        203: {
            name: "UnVaxxed Covid",// worldometer
            tooltip() {
                let a = "Get 590,362,339 cases in 'Booster Vaccine'. Reward: 100 AP, Adverse Vaxxer gain is multiplied by 1.01 per AP."
                let b = "<br>Currently: "+format(tmp.a.achievements[203].effect)+"x"
                return  a+b
            },
            done() {
                return player.points.gte(590362339) && inChallenge("ct",32)
            },
            effect() {
                return Decimal.pow(1.01,player.a.points)
            },
            onComplete() {
                addPoints("a",100)
            }
        },
        204: {
            name: "World In'F'ected",
            tooltip() {return "Get "+format(tet10(7.8e9))+" cases. Reward: 100 AP, AP boosts cases gain after slog."},
            done() {
                return player.points.gte(tet10(7.8e9))
            },
            onComplete() {
                addPoints("a",100)
            }
        },
        205: {
            name: "UnBoostered Virus",
            tooltip: "Get 1 symptom in 'Booster Vaccine'. Reward: 100 AP, AP boosts base cases gain at 1 symptom and remove AP effect hardcap in 'Booster Challenge'.",
            done() {
                return player.s.points.gte(1) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",100)
            }
        },
        206: {
            name: "TriTri",
            tooltip() {return "Get "+format(Decimal.pentate(3,3))+" cases. Reward: 100 AP."},
            done() {
                return player.points.gte(Decimal.pentate(3,3))
            },
            onComplete() {
                addPoints("a",100)
            }
        },
        211: {
            name: "F-World Vaccination",
            tooltip() {return "Get "+format(tet10(7.8e9))+" cases in Vaccination. Reward: 100 AP."},
            done() {
                return player.points.gte(tet10(78e8)) && player.ct.inC
            },
            onComplete() {
                addPoints("a",100)
            }
        },
        212: {
            name: "Deadly Boosters",
            tooltip: "Get 1 death in 'Booster Vaccine'. Reward: 100 AP, AP boosts base cases gain at 1 death.",
            done() {
                return player.d.points.gte(1) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",100)
            }
        },
        213: {
            name: "Coffin Boosters", //worldometer
            tooltip: "Get 6,470,055 deaths in 'Booster Vaccine'. Reward: 100 AP.",
            done() {
                return player.d.points.gte(6470055) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",100)
            }
        },
        214: {
            name: "Booster Coughin' Dance!", 
            tooltip() {return "Get "+format(Decimal.pow(2,1024))+" deaths in 'Booster Vaccine'. Reward: 100 AP, AP boosts Anti-Booster gain."},
            done() {
                return player.d.points.gte(Decimal.pow(2,1024)) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",100)
            }
        },
        215: {
            name: "Failure!", 
            tooltip: "Fail a challenge. Reward: 100 AP",
            done() {
                return player.Up.fail==1
            },
            onComplete() {
                addPoints("a",100)
            }
        },
        216: {
            name: "Fatal Boosters",
            tooltip: "Get 1 fatality in 'Booster Vaccine'. Reward: 100 AP, AP boosts base cases gain at 1 fatality.",
            done() {
                return player.f.points.gte(1) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",100)
            }
        },
        221: {
            name: "GAS GAS GAS",
            tooltip() {return "Get "+format(tet10(1e20))+" cases. Reward: 100 AP, replicant interval is 2x faster."},
            done() {
                return player.points.gte(tet10(1e20))
            },
            onComplete() {
                addPoints("a",100)
            }
        },
        222: {
            name: "Booster Dimension",
            tooltip: "Get a Fatality Dimension in 'Booster Vaccine'. Reward: 100 AP, fatality and unvaxxed prion gain exponent+0.2 at 1 misfolded protein.",
            done() {
                return player.f.buyables[11].gte(1) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",100)
            }
        },
        223: {
            name: "Casual Booster",
            tooltip: "Get 1 casualty in 'Booster Vaccine'. Reward: 100 AP.",
            done() {
                return player.f.casualty.gte(1) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",100)
            }
        },
        224: {
            name: "'23R0' D34TH5",
            tooltip() {return "Get "+formatWhole("e111111")+" fatality without Dimension and Multiplier Boosts in Casualty Challenge 1 and 'Booster Vaccine'. Reward: 150 AP, Fatality exponent*1.01."},
            done() {
                return player.f.points.gte("e111111") && player.f.buyables[32].eq(0) && player.f.buyables[33].eq(0) && inChallenge("f",31) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",150)
            }
        },
        225: {
            name: "'23R0' R3PD34TH5",
            tooltip() {return "Get "+formatWhole("e1111111")+" fatality without Unvaxxed Replicator upgrades, Dimension and Multiplier Boosts in Casualty Challenge 1 and 'Booster Vaccine'. Reward: 150 AP, Fatality exponent*1.02."},
            done() {
                return player.f.points.gte("e1111111") && player.f.buyables[32].eq(0) && player.f.buyables[33].eq(0) && player.Ur.upgrades.length==0 && inChallenge("f",31) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",150)
            }
        },
        226: {
            name: "Infected Booster",
            tooltip: "Get 1 infecter in 'Booster Vaccine'. Reward: 150 AP.",
            done() {
                return player.e.points.gte(1) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",150)
            }
        },
        231: {
            name: "Diseased Booster",
            tooltip: "Get 1 infectious disease in 'Booster Vaccine'. Reward: 150 AP.",
            done() {
                return player.e.diseases.gte(1) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",150)
            }
        },
        232: {
            name: "Booster GAS",
            tooltip() { return "Get "+format("eee6")+" cases in 'Booster Vaccine'. Reward: 150 AP."},
            done() {
                return player.points.gte("eee6") && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",150)
            }
        },
        233: {
            name: "Anti-Containment",
            tooltip() { return "Reduce the distancing to "+distShort(1)+". Reward: 150 AP."},
            done() {
                return tmp.ct.getDist.lt(1)
            },
            onComplete() {
                addPoints("a",150)
            }
        },
        234: {
            name: "Unquarantined Booster",
            tooltip() { return "Get "+format(1e45)+" unquarantined cases in 'Booster Vaccine'. Reward: 150 AP."},
            done() {
                return player.e.qc.gte(1e45) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",150)
            }
        },
        235: {
            name: "Crowded",
            tooltip() { return "Reduce the distancing to "+distShort(0.3048)+". Reward: 150 AP."},
            done() {
                return tmp.ct.getDist.lt(0.3048)
            },
            onComplete() {
                addPoints("a",150)
            }
        },
        236: {
            name: "Atomic Booster",
            tooltip() { return "Get 1 atom in 'Booster Vaccine'. Reward: 150 AP."},
            done() {
                return player.e.h.gte(1) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",150)
            }
        },
        241: {
            name: "BoosterCased GAS",
            tooltip() { return "Get "+format(Decimal.pow(Math.E,Decimal.pow(Math.E,Decimal.pow(Math.E,79))))+" cases in 'Booster Vaccine'. Reward: 150 AP."},
            done() {
                return player.points.gte(Decimal.pow(Math.E,Decimal.pow(Math.E,Decimal.pow(Math.E,79)))) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",150)
            }
        },
        242: {
            name: "Phosphate Booster",
            tooltip() { return "Get 1 Phosphorus in 'Booster Vaccine'. Reward: 150 AP."},
            done() {
                return player.e.ph.gte(1) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",150)
            }
        },
        243: {
            name: "CentiCrowd",
            tooltip() { return "Reduce the distancing to "+distShort(0.01)+". Reward: 150 AP."},
            done() {
                return tmp.ct.getDist.lt(0.01)
            },
            onComplete() {
                addPoints("a",150)
            }
        },
        244: {
            name: "mRNA Booster",
            tooltip() { return "Get 1 mRNA in 'Booster Vaccine'. Reward: 150 AP, atom exp+0.05."},
            done() {
                return player.e.mrna.gte(1) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",150)
            }
        },
        245: {
            name: "Microscopic",
            tooltip() { return "Reduce the distancing to "+distShort(1e-4)+". Reward: 150 AP."},
            done() {
                return tmp.ct.getDist.lt(1e-4)
            },
            onComplete() {
                addPoints("a",150)
            }
        },
        246: {
            name: "Covid Pandemic",
            tooltip() { return "Play for "+formatTime(tmp.a.achievements[246].days/1000)+" in this Adverse Vaxxer reset. Reward: 150 AP."},
            days() {
                let date1 = new Date("11/17/2019"); //1st case of COVID-19
                let date2 = new Date().getTime()
                return date2-date1
            },
            done() {
                let days = tmp.a.achievements[246].days/1000
                return player.ct.AdvTime>=days
            },
            onComplete() {
                addPoints("a",150)
            }
        },
        251: {
            name: "In'F'ected Booster",
            tooltip() {return "Get "+format(tet10(5))+" cases in 'Booster Vaccine'. Reward: 150 AP"},
            done() {
                return player.points.gte(Decimal.tetrate(10,5)) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",150)
            }
        },
        252: {
            name() {return "COV-"+new Date().getFullYear()},
            tooltip() { 
                let a = "Play for "+formatTimeLong(tmp.a.achievements[252].days)+" in this Adverse Vaxxer reset. Reward: 200 AP, Adverse Vaxxer reset time boosts base anti-distance gain."
                let b = "<br>Currently: "+format(tmp.a.achievements[252].effect)+"x"
                return a+b
            },
            effect() {
                let eff = Decimal.add(player.ct.AdvTime,1).pow(0.06)
                return eff
            },
            days() {
                let date = new Date().getFullYear()*31556952
                return date
            },
            done() {
                let days = tmp.a.achievements[252].days
                return player.ct.AdvTime>=days
            },
            onComplete() {
                addPoints("a",200)
            }
        },
        253: {
            name: "Crowded Virus",
            tooltip() { return "Reduce the distancing to "+distShort(1e-7)+". Reward: 200 AP."},
            done() {
                return tmp.ct.getDist.lt(1e-7)
            },
            onComplete() {
                addPoints("a",200)
            }
        },
        254: {
            name: "CO.RO.NA Booster",
            tooltip() { return "Get 1 CRNA in 'Booster Vaccine'. Reward: 200 AP."},
            done() {
                return player.e.crna.gte(1) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",200)
            }
        },
        255: {
            name: "Crowded Atoms",
            tooltip() { return "Reduce the distancing to "+distShort(1e-10)+". Reward: 200 AP, AP/1,000+1 boosts Anti-Distance gain.<br>Currently: "+format(tmp.a.achievements[255].effect)+"x"},
            effect() {
                let eff = player.a.points.div(1e3).add(1)
                return eff
            },
            done() {
                return tmp.ct.getDist.lt(1e-10)
            },
            onComplete() {
                addPoints("a",200)
            }
        },
        256: {
            name: "Covid Unidemic",
            tooltip() { 
                let a = "Play for "+formatTimeLong(tmp.a.achievements[256].days)+" in this Adverse Vaxxer reset. Reward: 200 AP."
                return a
            },
            days() {
                let date = new Decimal(435e15)
                return date
            },
            done() {
                let days = tmp.a.achievements[256].days
                return Decimal.gte(player.ct.AdvTime,days)
            },
            onComplete() {
                addPoints("a",200)
            }
        },
        261: {
            name: "Unvaxxed Coughin' Dance!", //worldometer 6/26/2023
            tooltip() { return "Get 6,894,285 unvaxxed deaths in 'Booster Vaccine'. Reward: 200 AP, AP/1,000+1 boosts UnBoosted Virus gain at 6,894,285 unvaxxed deaths.<br>Currently: "+format(tmp.a.achievements[261].effect)+"x."},
            effect() {
                if (player.Ud.points.lt(6894285)) return decimalOne
                let eff = player.a.points.div(1e3).add(1)
                return eff
            },
            done() {
                return player.Ud.points.gte(6894285) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",200)
            }
        },
        262: {
            name: "CoTona Booster",
            tooltip() { return "Get 1 CTNA in 'Booster Vaccine'. Reward: 200 AP."},
            done() {
                return player.ct.points.gte(1) && inChallenge("ct",32)
            },
            onComplete() {
                addPoints("a",200)
            }
        },
        263: {
            name: "Anti-Distanced Distances",
            tooltip() { 
                let eff = tmp.a.achievements[263].effect
                return "Have anti-distance exceed distance. Reward: 200 AP, distance boosts anti-distance gain, anti-distance effects^1.01.<br>Currently: "+format(eff)+"x."},
            effect() {
                let eff = player.ct.a263
                return eff
            },
            done() {
                return tmp.ct.getAntiDist.gt(tmp.ct.getDist)
            },
            onComplete() {
                addPoints("a",200)
            }
        },
    },
    effect() {
        let eff = player.a.points
        if (inChallenge("ct",32) && !hasAchievement("a",205)) eff = eff.min(2300)
        let x = Decimal.add(1.2,tmp.e.Gueffect)
        let exp = new Decimal(1.5)
        if (hasUpgrade("e",276)) exp = exp.add(upgradeEffect("e",276))
        if (hasAchievement("a", 42)) eff = Decimal.pow(x, eff.pow(exp))
        else eff = Decimal.pow(1.07, eff)
        return eff
    },
    effectDescription() {
        return "which "+pluralize(player.a.points,'boosts','boost')+" cases gain by " + format(tmp.a.effect)
    },
    tabFormat: {
        "Achievements" :{
            content: ["main-display",
            "achievements"]
        },
        "Milestones" :{
            content: ["milestones"]
        }
    },
    milestones: {
        0: {
            requirementDescription: "50 Achievement Points",
            effectDescription: "Keep I,R,U upgrades and milestones, and autobuy 2x more and faster.",
            done() { return player.a.points.gte(50) }
        },
        1: {
            requirementDescription: "115 Achievement Points",
            effectDescription: "Keep S,D upgrades, milestones and challenges, and autobuy 2x more and faster.",
            done() { return player.a.points.gte(115) }
        }
    },
})

addLayer("uv", {
    name: "Unvaxxed Layers", // This is optional, only used in a few places, If absent it just uses the layer id.
    symbol: "Un", // This appears on the layer's node. Default is the id with the first letter capitalized
    position: 3, // Horizontal position within a row. By default it uses the layer id and sorts in alphabetical order
    startData() { return {
        unlocked: true,
        points: decimalZero,
        tree: "normal",
        uvUnlocked: false,
        virus: decimalZero,
        virusBest: decimalZero,
        virusTotal: decimalZero,
        bestPer: decimalZero,
        uvReset: decimalZero,
        bestTime: 1.79769e308,
        times: decimalZero,
        mutPercent: 3,
        mutPer: 1,
        tmutPercent: 3,
        tmutPer: 1,
        cool: 0,
        autoreset: false,
        m20: false,
        m24: false,
        m25: false,
    }},
    update(diff) {
        if (hasUpgrade("uv",81) && player.uv.autoreset && player.uv.cool == 0 && tmp.uv.clickables[31].gain.gte(player.uv.uvReset)) {
            if (tmp.uv.clickables[31].canClick) {
                layers.uv.clickables[31].onClick()
                player.uv.cool = tmp.uv.buyables[33].effect.toNumber()
            }
        }
        player.uv.cool = Math.max(player.uv.cool-diff,0)
    },
    tooltip() {
        let dis = "Unvaxxed Layers"
        if (player.uv.uvUnlocked) {
            dis = formatWhole(player.uv.virus) + " UnBoosted "+pluralize(player.uv.virus,'Virus','Viruses',true) 
            if (inChallenge("ct",32)) {
                dis += " (+"+formatWhole(tmp.uv.clickables[31].gain)+" on reset)"
            }
        }
        if (inChallenge("ct",32)) {
            if (tmp.e.clickables[31].canClick || tmp.e.clickables[32].canClick) dis += " (You can mutate!)"
        }
      return dis
    },
    shouldNotify() {
        return inChallenge("ct",32) && (tmp.e.clickables[31].canClick || tmp.e.clickables[32].canClick || tmp.uv.clickables[21].canClick || tmp.uv.buyables[11].canAfford)
    },
    color: "#153d63",
    nodeStyle() {return {
        "background": "radial-gradient(#383434, #153d63)" ,
    }},
    requires: decimalZero, // Can be a function that takes requirement increases into account
    resource: "Unvaxxed Layers", // Name of prestige currency
    resourceSingular: "Unvaxxed Layer",
    type: "none", // normal: cost to gain currency depends on amount gained. static: cost depends on how much you already have
    exponent: 0.5, // Prestige currency exponent
    row: "side", // Row the layer is in on the tree (0 is the first row)
    layerShown() { return player.ct.bestCases.gt(0) || hasUpgrade("ct",314) },
    effLayers() {
        let x = player.uv.points
        if (hasUpgrade("uv",22)) x = x.add(upgradeEffect("uv",22))
        if (hasUpgrade("uv",23)) x = x.add(upgradeEffect("uv",23))
        return x
    },
    slogCap () {
        let x = decimalFive
        if (hasUpgrade("ct",492)) x = x.add(1)
        if (hasMilestone("ct",17)) x = x.mul(tmp.Uu.milestones[17].effect)
        return x
    },
    virusEffExp() {
        let eff = decimalFour
        if (hasMilestone("uv",8)) eff = eff.add(1)
        if (hasUpgrade("uv",65)) eff = eff.add(tmp.uv.upgrades[65].effect)
        if (inChallenge("Ud",12)) eff = decimalZero
        return eff
    },
    virusEffDil() {
        let eff = decimalOne
        if (hasUpgrade("uv",56)) eff = eff.add(0.5)
        if (hasUpgrade("uv",72)) eff = eff.add(0.2)
        if (hasUpgrade("uv",73)) eff = eff.add(0.2)
        if (hasUpgrade("uv",76)) eff = eff.add(0.3)
        if (hasUpgrade("Us",112)) eff = eff.add(0.5)
        if (hasUpgrade("Us",125)) eff = eff.add(0.3)
        if (hasUpgrade("Us",132)) eff = eff.add(0.1)
        if (hasUpgrade("uv",93)) eff = eff.add(0.1)
        if (hasUpgrade("Ud",23)) eff = eff.add(0.1)
        if (hasUpgrade("Ud",24)) eff = eff.add(0.1)
        if (hasMilestone("Ud",8)) eff = eff.add(0.2)
        if (hasMilestone("uv",25) && player.Ud.points.gte("e935")) eff = eff.add(0.3)
        return eff
    },
    virusEff() {
        let exp = tmp.uv.virusEffExp
        let dil = tmp.uv.virusEffDil
        let eff = player.uv.virus.max(player.uv.virusBest.div(3))
        eff = eff.add(1).mul(10).log10().pow(dil).sub(1).mul(exp).pow10()
        return eff
    },
    tabFormat: {
        "Main": {
        content:[
             ["display-text", 
                function() {
                    let a = "You have unlocked "+layerText("h2", "uv", formatWhole(player.uv.points))+" Unvaxxed "+pluralize(player.uv.points,'Layer','Layers',true)+" ("+layerText("h2", "uv", format(tmp.uv.effLayers))+" effective)<br><br>"
                    let b = inChallenge("ct",32)?"":"<h2>Start 'Booster Vaccine' to unlock this tab.</h2>"
                    return a+b
                }
                ],
            ["bar","prog"], ["bar","un"],
            "blank",
            ["clickables",[1,2]],
            ["buyables",[1]],
            ]
        },
        "Upgrades": {
            content:[
                ["display-text", 
                function() {
                    let a = "You have unlocked "+layerText("h2", "uv", formatWhole(player.uv.points))+" Unvaxxed "+pluralize(player.uv.points,'Layer','Layers',true)+" ("+layerText("h2", "uv", format(tmp.uv.effLayers))+" effective)<br><br>"
                    return a
                }
                ],
            ["upgrades",[1,2,3,4]]
            ],
        },
        "UnBoosted Viruses": {
            content:[
                ["display-text", 
                function() {
                    let a = "You have "+layerText("h2", "uv", formatWhole(player.uv.virus))+" UnBoosted "+pluralize(player.uv.virus,'Virus','Viruses',true)+", which "+pluralize(player.uv.virus,'boosts','boost',true)+" UV to US unvaxxed resource gain by "+layerText("h2", "uv", format(tmp.uv.virusEff))+" (hold shift to see)<br><br>"
                    let b = shiftDown?"Based on max(UnBoosted Viruses, Best UBV/3)<br>Boosts unvaxxed virus, unvaxxed infectivity, unvaxxed replicator, unvaxxed prion, unvaxxed uncoater, unvaxxed severity, unvaxxed pathogen, unvaxxed replicant, all protein, PrP, PrPSc, PrPres, uncoating power, uncoated enzyme, unvaxxed tRNA gain":""
                    return a+b
                }
                ],
            ["clickables",[3]],
            ["display-text", 
                function() {
                    if (hasUpgrade("uv",81)) return "Reset at x UnBoosted Viruses (type in Scientific, xFy = yptx)"
                }
            ], //1.9e4949035 = 19 covid
            function() { //e18578774880 = 1 태연
                if (hasUpgrade("uv",81)) return ["text-input","uvReset", {
                    color: 'var(--color)',
                    'text-shadow':'0px 0px 10px',
                    width: "600px",
                    "font-size": "24px",
                    border: "2px solid #ffffff17",
                    background: "var(--background)",}]
            },
            ["clickables",[4]],
            "blank",
            ["display-text", 
                function() {
                    let best = "Your best UnBoosted Viruses is "+formatWhole(player.uv.virusBest)+"<br>"
                    let total = "You have made a total of "+formatWhole(player.uv.virusTotal)+" UnBoosted "+pluralize(player.uv.virusTotal,'Virus','Viruses',true)+"<br>"
                    let times = "You have reset "+formatWhole(player.uv.times)+pluralize(player.uv.times,' time',' times',true)+"<br>"
                    let time = "Reset time: "+formatTime(player.ct.resetTime)+"<br>"
                    let gainps = player.uv.bestPer
                    let bes = ""
                    if (gainps.lt(1/60)) bes += format(gainps.mul(3600)) + "/hr"
                    else if (gainps.lt(1)) bes += format(gainps.mul(60)) + "/min"
                    else bes += format(gainps) + "/s"
                    let bestps = "Your best UnBoosted Viruses/hr is "+bes+"<br>"
                    let besttime = "Your best reset time is "+formatTime(player.uv.bestTime)+"<br>"
                    let a = "Gain formula: "+format(tmp.uv.clickables[31].gainbase)+"<sup>(slog10(x)-4)<sup>"+format(tmp.uv.clickables[31].gainexp)+"</sup>-1</sup>*"+format(tmp.uv.clickables[31].gainmult)+"<br>"
                    let b = "Effect formula: 10<sup>(log10(10(x+1))<sup>"+format(tmp.uv.virusEffDil)+"</sup>-1)*"+format(tmp.uv.virusEffExp)+"</sup><br>"
                    return best+total+times+time+bestps+besttime+a+b
                }
                ],
                ["upgrades",[5,6,7,8,9,10]],
                ["buyables",[2,3,4,5]],
            ],
            unlocked() { return player.uv.uvUnlocked }
        },
        "Milestones": {
            content:[
                ["display-text", 
                function() {
                    let a = "You have "+layerText("h2", "uv", formatWhole(player.uv.virus))+" UnBoosted "+pluralize(player.uv.virus,'Virus','Viruses',true)+", which "+pluralize(player.uv.virus,'boosts','boost',true)+" unvaxxed resource gain by "+layerText("h2", "uv", format(tmp.uv.virusEff))+" (hold shift to see)<br><br>"
                    let b = shiftDown?"Boosts unvaxxed virus, unvaxxed infectivity, unvaxxed replicator, unvaxxed prion, unvaxxed uncoater, unvaxxed severity, unvaxxed pathogen, unvaxxed replicant, all protein, PrP, PrPSc, PrPres, uncoating power, uncoated enzyme, unvaxxed tRNA gain":""
                    return a+b
                }
                ],
            "milestones"
            ],
            unlocked() { return player.uv.uvUnlocked }
        },
        "Buyables": {
            content:[
                ["display-text", 
                function() {
                    let a = "You have "+layerText("h2", "uv", formatWhole(player.uv.virus))+" UnBoosted "+pluralize(player.uv.virus,'Virus','Viruses',true)+", which "+pluralize(player.uv.virus,'boosts','boost',true)+" unvaxxed resource gain by "+layerText("h2", "uv", format(tmp.uv.virusEff))+" (hold shift to see)<br><br>"
                    let b = shiftDown?"Boosts unvaxxed virus, unvaxxed infectivity, unvaxxed replicator, unvaxxed prion, unvaxxed uncoater, unvaxxed severity, unvaxxed pathogen, unvaxxed replicant, all protein, PrP, PrPSc, PrPres, uncoating power, uncoated enzyme, unvaxxed tRNA gain":""
                    return a+b
                }
                ],
                ["buyables",[10,11]],
            ],
            unlocked() { return hasUpgrade("uv",83) }
        },
    },
    bars: {
        prog: {
            direction: RIGHT,
            width: 700,
            height: 30,
            fillStyle: {'background-color' : "#153d63"},
            display() {
                let f = player.f.points.add(1).max(1)
                let r = "'Booster Vaccine' progress: " + format(player.points)+"/"+format(tet10(Decimal.pow(2,1024).log10()))+" ("+ format(this.progress().mul(100))+"%)"
                return r
            },
            progress() { 
                let p = slog(player.points).div(Decimal.pow(2,1024).log10()).min(1)
                return p
            },
            unlocked() { return inChallenge("ct",32) }, 
        },
        un: {
            direction: RIGHT,
            width: 700,
            height: 30,
            fillStyle: {'background-color' : "#153d63"},
            display() {
                let f = player.f.points.add(1).max(1)
                let gain = tmp.uv.clickables[31].gain
                let prev = tmp.uv.bars.un.prev
                let nx = gain.add(1)
                if (gain.gte(1e3)) nx = gain.log10().floor().add(1).pow10()
                if (gain.gte(1e308)) nx = Decimal.pow(2,1024)
                if (gain.gte(Decimal.pow(2,1024))) nx = Decimal.pow(2,Decimal.pow(2,gain.log(2).log(2).floor().add(1)))
                let next = layers.uv.bars.un.next(nx)
                let prog = this.progress().mul(100)
                let r = "UnBoosted Viruses unlock progress: " + format(player.points)+"/"+format(tet10(5))+" ("+ format(prog)+"%)"
                if (player.uv.uvUnlocked) {
                    if (gain.gt(0)) {
                        r = "Percentage from " +formatWhole(prev)+ " to " + formatWhole(nx) + " UnBoosted Viruses ("+format(next)+"): " + format(prog)+"%"
                        
                    }
                    else r = "Percentage to UnBoosted Viruses ("+format(player.points)+"/"+format(next)+"): " + format(prog)+"%"
                }
                return r
            },
            next(x) {
                x = new Decimal(x)
                let exp = tmp.uv.clickables[31].gainexp
                let mult = tmp.uv.clickables[31].gainmult
                let base = tmp.uv.clickables[31].gainbase
                let next = tet10(x.div(mult).max(1).log(base).add(1).root(exp).add(4))
                return next
            },
            prev() { 
                let gain = tmp.uv.clickables[31].gain
                let nx = gain.add(1)
                if (gain.gte(1e3)) nx = gain.log10().floor().add(1).pow10()
                if (gain.gte(1e308)) nx = Decimal.pow(2,1024)
                if (gain.gte(Decimal.pow(2,1024))) nx = Decimal.pow(2,Decimal.pow(2,gain.log(2).log(2).floor().add(1)))
                let prev = nx.sub(1)
                if (gain.gte(1e3)) prev = nx.div(10)
                if (gain.gte(1e308)) prev = new Decimal(1e308)
                if (gain.gte(Decimal.pow(2,1024))) prev = nx.root(2)
                return prev
            },
            progress() { 
                let gain = tmp.uv.clickables[31].gain
                let prev = tmp.uv.bars.un.prev
                let nx = gain.add(1)
                if (gain.gte(1e3)) nx = gain.log10().floor().add(1).pow10()
                if (gain.gte(1e308)) nx = Decimal.pow(2,1024)
                if (gain.gte(Decimal.pow(2,1024))) nx = Decimal.pow(2,Decimal.pow(2,gain.log(2).log(2).floor().add(1)))
                let slogcases = slog(player.points)
                let slognext = slog(layers.uv.bars.un.next(nx))
                let slogprev = slog(layers.uv.bars.un.next(prev))
                let p = slogcases.div(5)
                if (player.uv.uvUnlocked && gain.gt(0)) p = slogcases.sub(slogprev).div(slognext.sub(slogprev))
                return p.min(1)
            },
            unlocked() { return inChallenge("ct",32) && player.uv.points.gte(6)}, 
        },
    },
    milestones: {
        0: {
            requirementDescription() {return "1 Total UnBoosted Virus (1)"},
            effectDescription() {return "Keep 1st 4 rows of Main US upgrades, 1st 11 and 16th US milestones, 'UnRecover' cooldown is "+formatTime(30)+"."},
            done() { return player.uv.virusTotal.gte(1) }
        },
        1: {
            requirementDescription() {return "2 Total UnBoosted Viruses (2)"},
            effectDescription() {return "Keep 1st row of Unvaxxed tRNA upgrades, 1st 17 US milestones, 'UnRecover' cooldown is "+formatTime(25)+"."},
            done() { return player.uv.virusTotal.gte(2) }
        },
        2: {
            requirementDescription() {return "3 Total UnBoosted Viruses (3)"},
            effectDescription() {return "Keep 2nd row of Unvaxxed tRNA upgrades and 1st 19 US milestones."},
            done() { return player.uv.virusTotal.gte(3) }
        },
        3: {
            requirementDescription() {return "4 Total UnBoosted Viruses (4)"},
            effectDescription() {return "Buy max Unvaxxed tRNA buyables except 'tRNA Formula'."},
            done() { return player.uv.virusTotal.gte(4) }
        },
        4: {
            requirementDescription() {return "10 Total UnBoosted Viruses (5)"},
            effectDescription() {return "Keep 1st 22 US milestones, 'UnRecover' cooldown is "+formatTime(20)+"."},
            done() { return player.uv.virusTotal.gte(10) }
        },
        5: {
            requirementDescription() {return formatTime(600)+" Best Reset Time (6)"},
            effect() {
                let eff = new Decimal(600/player.uv.bestTime).add(1)
                return eff
            },
            effectDescription() {return "Best reset time boosts UnBoosted Virus gain, 'UnRetRNA' cooldown is "+formatTime(50)+".<br>Currently: "+format(tmp.uv.milestones[5].effect)+'x'},
            done() { return player.uv.bestTime<=600 }
        },
        6: {
            requirementDescription() {return formatTime(300)+" Best Reset Time (7)"},
            effectDescription() {return "Unlock 'Max All' unvaxxed tRNA buyables, 'UnRecover' cooldown is "+formatTime(15)+"."},
            done() { return player.uv.bestTime<=300 }
        },
        7: {
            requirementDescription() {return "100 Total UnBoosted Viruses (8)"},
            effectDescription() {return "'UnRetRNA' cooldown is "+formatTime(40)+"."},
            done() { return player.uv.virusTotal.gte(100) }
        },
        8: {
            requirementDescription() {return formatTime(180)+" Best Reset Time (9)"},
            effectDescription() {return "You can mutate in US, UnBoosted Virus effect exp+1, 'UnRetRNA' cooldown is "+formatTime(30)+"."},
            done() { return player.uv.bestTime<=180 }
        },
        9: {
            requirementDescription() {return "1,000 Total UnBoosted Viruses (10)"},
            effectDescription() {return "Keep US milestone 23, 'UnRetRNA' cooldown is "+formatTime(25)+""},
            done() { return player.uv.virusTotal.gte(1000) }
        },
        10: {
            requirementDescription() {return formatTime(60)+" Best Reset Time (11)"},
            toggles: [["Us","autotrna"]],
            effectDescription() {return "Autoclick 'Max All' tRNA buyables, 'UnRetRNA' cooldown is "+formatTime(20)+"."},
            done() { return player.uv.bestTime<=60 }
        },
        11: {
            requirementDescription() {return formatTime(30)+" Best Reset Time (12)"},
            toggles: [["Us","autoupg"]],
            effectDescription() {return "Autobuy US upgrades, 'UnRetRNA' cooldown is "+formatTime(18)+".<br>Currently: "+formatTime(player.Us.upgCool)},
            done() { return player.uv.bestTime<=30 }
        },
        12: {
            requirementDescription() {return "1,000,000 Total UnBoosted Viruses (13)"},
            effect() {
                let eff = tmp.ct.timeSpeed.pow(0.3)
                return eff
            },
            effectDescription() {return "Time speed boosts base anti-distance gain.<br>Currently: "+format(tmp.uv.milestones[12].effect)+'x'},
            done() { return player.uv.virusTotal.gte(1e6) }
        },
        13: {
            requirementDescription() {return "10,000,000 Total UnBoosted Viruses (14)"},
            effectDescription() {return "UnBoosted Virus gain exponent+0.5."},
            done() { return player.uv.virusTotal.gte(1e7) }
        },
        14: {
            requirementDescription() {return formatTime(10)+" Best Reset Time (15)"},
            toggles: [["Us","automut"]],
            effectDescription() {return "Autobuy mRNA Mutations, you can change percent of max mRNA Mutation attempts, UnBoosted Virus gain*5 at "+format("eee26e18")+" cases, MMNA effect^1.5 at "+format(1e120)+" MMNA, 'CytoMult' and 'GuanBase' are set to best Cytosine and Guanine effect, 'UnRetRNA' cooldown is "+formatTime(17)+".<br>Currently: "+formatTime(player.Us.mutCool)},
            done() { return player.uv.bestTime<=10 }
        },
        15: {
            requirementDescription() {return format(1e12)+" Total UnBoosted Viruses (16)"},
            effectDescription() {return "Anti-Distance gain dilation+0.001, 'AdBases' eff^1.3, Anti-Vax type base gain is dilated^1.5, buy max 'Antiest-Booster Gain'."},
            done() { return player.uv.virusTotal.gte(1e12) }
        },
        16: {
            requirementDescription() {return formatTime(5)+" Best Reset Time (17)"},
            toggles: [["Us","autotmut"]],
            effect() {
                let eff = player.Us.trna
                let e = eff.add(10).log10().div(1e4).max(1).pow(0.2).div(2).min(1)
                return e
            },
            effectDescription() {return "Autobuy tRNA Mutations, you can change percent of max tRNA Mutation attempts, unvaxxed severity effect is based on best, boosted recovery reductions at x tRNA start instantly, raise boosted recovery gain to x (min 0.5, increases with more tRNA starting at "+format("e1e4")+", max 1), 'UnRetRNA' cooldown is "+formatTime(16)+".<br>Currently: ^"+format(tmp.uv.milestones[16].effect)+", "+formatTime(player.Us.tmutCool)},
            done() { return player.uv.bestTime<=5 }
        },
        17: {
            requirementDescription() {return format(1e15)+" Total UnBoosted Viruses (18)"},
            effectDescription() {return "Anti-Distance gain dilation+0.001, 'AdBases' eff^1.1, Anti-Vax type base gain is dilated^1.1."},
            done() { return player.uv.virusTotal.gte(1e15) }
        },
        18: {
            requirementDescription() {return formatTime(4)+" Best Reset Time (19)"},
            effectDescription() {return "Mutated rRNA buyables cost nothing, 'UnRetRNA' cooldown is "+formatTime(15)+"."},
            done() { return player.uv.bestTime<=4 }
        },
        19: {
            requirementDescription() {return formatTime(3)+" Best Reset Time (20)"},
            effectDescription() {return "You can buy max mutated rRNA buyables, 'UnRetRNA' cooldown is "+formatTime(14)+"."},
            done() { return player.uv.bestTime<=3 }
        },
        20: {
            requirementDescription() {return "Reset for "+format(1e20)+" UnBoosted Viruses in "+formatTime(60)+" (21)"},
            toggles: [["Us","autorrna"]],
            effectDescription() {return "Autoclick 'Max All' mutated rRNA buyables, UnBoosted Virus gain base is "+format(202320242025)+",'UnRetRNA' cooldown is "+formatTime(13)+"."},
            done() { return player.uv.m20 }
        },
        21: {
            requirementDescription() {return format(1e32)+" Total UnBoosted Viruses (22)"},
            effectDescription() {return "Anti-Distance gain dilation+0.001, 'Distance Divider' exponent+0.005, time speed*3.2."},
            done() { return player.uv.virusTotal.gte(1e32) }
        },
        22: {
            requirementDescription() {return format(5e35)+" Total UnBoosted Viruses (23)"},
            effectDescription() {return "Anti-Distance gain dilation+0.001, start with "+formatTimeLong(435e15)+" Adverse Vaxxer reset time."},
            done() { return player.uv.virusTotal.gte(5e35) }
        },
        23: {
            requirementDescription() {return " 7 Unlocked Unvaxxed Layers (24)"},
            toggles: [["ct","autoaest"]],
            effectDescription() {return "Autobuy 'Antiest-Booster Gain'."},
            done() { return player.uv.points.gte(7) }
        },
        24: {
            requirementDescription() {return "Reset for "+format(1e50)+" UnBoosted Viruses in "+formatTime(780)+" (25)"},
            effectDescription() {return "Keep 1st 3 UD milestones, UD and CTNA gain*3, gain 0.5% of unvaxxed death gain per second."},
            done() { return player.uv.m24 }
        },
        25: {
            requirementDescription() {return "Reset for "+format(1e64)+" UnBoosted Viruses in "+formatTime(600)+" (26)"},
            effectDescription() {return "Keep 1st 6 UD milestones, 1st 2 rows of UD upgrades, UD and CTNA gain*3 and again at "+format(1e71)+" Total UnBoosted Viruses, UnBoosted Virus effect dilation+0.3 at "+format("e935")+" UD."},
            done() { return player.uv.m25 }
        },
    },
    upgrades: {
        rows: 6,
        cols: 6,
        11: {
            title: "Slog Booster",
            description: "Multiply cases slog by 1.1 (2 in 'Booster Vaccine') per Unvaxxed Layer.",
            cost: new Decimal(1e190),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let b = 1.1
                if (inChallenge("ct",32)) b = 2
                let eff = Decimal.pow(b,tmp.uv.effLayers)
                return eff
            },
            effectDisplay(){
                return format(tmp.uv.upgrades[11].effect)+"x"
            },
            canAfford () {
                return player.points.gte(1e190) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(1e190)
            }
        },
        12: {
            title: "UI Booster",
            description: "Raise UI gain to 1.1 and multiply 'Inf. Mult.' base by 1.1 per UL, Autobuy AdVaccines.",
            cost: new Decimal("e1730"),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let b = 1.1
                let eff = Decimal.pow(b,tmp.uv.effLayers)
                return eff
            },
            effect2(){
                let b = 1.1
                let eff = Decimal.pow(b,tmp.uv.effLayers)
                return eff
            },
            effectDisplay(){
                return "^"+format(tmp.uv.upgrades[12].effect)+", "+format(tmp.uv.upgrades[12].effect2)+"x"
            },
            canAfford () {
                return player.points.gte("e1730") && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub("e1730")
            }
        },
        13: {
            title: "Effect Booster",
            description: "Raise UI effect to 1.01 (1.15 in 'Booster Vaccine') per Unvaxxed Layer.",
            cost: new Decimal("e101e3"),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let b = 1.01
                if (inChallenge("ct",32)) b = 1.15
                let eff = Decimal.pow(b,tmp.uv.effLayers)
                return eff
            },
            effectDisplay(){
                return "^"+format(tmp.uv.upgrades[13].effect)
            },
            canAfford () {
                return player.points.gte("e101e3") && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub("e101e3")
            }
        },
        14: {
            title: "Challenge Booster",
            description: "Multiply eff. challenge completions by 1.1 per Unvaxxed Layer.",
            cost: new Decimal("e633e3"),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let b = 1.1
                let eff = Decimal.pow(b,tmp.uv.effLayers)
                return eff
            },
            effectDisplay(){
                return format(tmp.uv.upgrades[14].effect)+"x"
            },
            canAfford () {
                return player.points.gte("e633e3") && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub("e633e3")
            }
        },
        15: {
            title: "Base Booster",
            description: "Raise 'UI Gain' base to 1.2 (1.5 in 'Booster Vaccine') per Unvaxxed Layer.",
            cost: new Decimal("e5542e3"),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let b = 1.2
                if (inChallenge("ct",32)) b = 1.5
                let eff = Decimal.pow(b,tmp.uv.effLayers)
                return eff
            },
            effectDisplay(){
                return "^"+format(tmp.uv.upgrades[15].effect)
            },
            canAfford () {
                return player.points.gte("e5542e3") && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub("e5542e3")
            }
        },
        21: {
            title: "Scaling Booster",
            description: "'UI Gain' scalings start 1.1x later (1.5 in 'Booster Vaccine') per Unvaxxed Layer.",
            cost: new Decimal("e725e5"),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let b = 1.1
                if (inChallenge("ct",32)) b = 1.5
                let eff = Decimal.pow(b,tmp.uv.effLayers)
                return eff
            },
            effectDisplay(){
                return format(tmp.uv.upgrades[21].effect)+"x"
            },
            canAfford () {
                return player.points.gte("e725e5") && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub("e725e5")
            }
        },
        22: {
            title: "Layer Booster",
            description: "Adverse Vaxxers and cases in 'Booster Vaccine' add eff. Unvaxxed Layers.",
            cost: new Decimal("e25e8"),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let adv = player.ct.Advaxxers.max(10).log10().max(10).log10().pow(1.5)
                let cas = slog(player.points.max(10)).pow(0.5)
                if (!inChallenge("ct",32)) cas = decimalOne
                let eff = adv.mul(cas).div(10).max(1).sub(1)
                return eff
            },
            effectDisplay(){
                return "+"+format(tmp.uv.upgrades[22].effect)
            },
            canAfford () {
                return player.points.gte("e25e8") && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub("e25e8")
            }
        },
        23: {
            title: "Best Booster",
            description: "Best cases in 'Booster Vaccine' add eff. Unvaxxed Layers.",
            cost: new Decimal("e293e28"),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let cas = slog(player.ct.bestCases.max(10)).pow(0.75)
                let eff = cas.div(1.5).max(1).sub(1)
                return eff
            },
            effectDisplay(){
                return "+"+format(tmp.uv.upgrades[23].effect)
            },
            canAfford () {
                return player.points.gte("e293e28") && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub("e293e28")
            }
        },
        24: {
            title: "AntiLayer",
            description: "Raise Anti-Booster gain to 1.002 per Unvaxxed Layer.",
            cost: new Decimal("ee6060"),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let eff = Decimal.pow(1.002,tmp.uv.effLayers)
                return eff
            },
            effectDisplay(){
                return "^"+format(tmp.uv.upgrades[24].effect)
            },
            canAfford () {
                return player.points.gte("ee6060") && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub("ee6060")
            }
        },
        25: {
            title: "DistLayer",
            description: "Divide distance by 1.01 per Unvaxxed Layer.",
            cost: new Decimal("eee150"),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let eff = Decimal.pow(1.01,tmp.uv.effLayers)
                return eff
            },
            effectDisplay(){
                return "/"+format(tmp.uv.upgrades[25].effect)
            },
            canAfford () {
                return player.points.gte("eee150") && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub("eee150")
            }
        },
        31: { // Somi, Chungha
            title: "Time Booster",
            description: "Multiply Time speed by 1.2 per Unvaxxed Layer.",
            cost: new Decimal("eee982900"),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let Somi = Decimal.pow(1.2,tmp.uv.effLayers)
                return Somi
            },
            effectDisplay(){
                return format(tmp.uv.upgrades[31].effect)+'x'
            },
            canAfford () {
                return player.points.gte("eee982900") && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub("eee982900")
            }
        },
        32: {
            title: "AnDister",
            description: "Multiply Anti-Distance gain by 10 per Unvaxxed Layer after 6, Anti-Distance dilation+0.002.",
            cost: new Decimal("eee75e49"),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let Chungha = Decimal.pow(10,tmp.uv.effLayers.sub(6))
                return Chungha
            },
            effectDisplay(){
                return format(tmp.uv.upgrades[32].effect)+'x'
            },
            canAfford () {
                return player.points.gte("eee75e49") && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub("eee75e49")
            }
        },
        51: {
            title: "UB1",
            description: "Unlock 'Max All' severe symptoms, 'ttRNA' cost/10, MMNA gain*3.",
            cost: decimalOne,
            currencyDisplayName: "UnBoosted Virus",
            currencyInternalName: "virus",
            currencyLayer: "uv",
        },
        52: {
            title: "UB2",
            description() {return  "MMNA gain*2, limit*1.5, attempt amount*5. MMNA effect^1.5 at "+format(183e7)+" MMNA."},
            cost: decimalTwo,
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
        },
        53: {
            title: "UB3",
            description() {return  "MMNA gain*2, limit*1.5, attempt amount*2."},
            cost: decimalTen,
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
        },
        54: {
            title: "UB4",
            description() {return  "MMNA effect^1.4."},
            cost: new Decimal(20),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
        },
        55: {
            title: "UB5",
            description() {return  "MMNA gain, mRNA and tRNA attempt amount*3."},
            cost: new Decimal(100),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
        },
        56: {
            title: "UB6",
            description() {return  "UnBoosted Virus effect dilation+0.5."},
            cost: new Decimal(200),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
        },
        61: {
            title: "UB7",
            description() {return  "UnBoosted Virus resets boost UnBoosted Virus gain."},
            cost: new Decimal(2023),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
            effect(){
                let eff = player.uv.times.div(20).add(1)
                return eff
            },
            effectDisplay(){
                return format(tmp.uv.upgrades[61].effect)+'x'
            },
        },
        62: {
            title: "UB8",
            description() {return  "MMNA boosts unvaxxed tRNA effect."},
            cost: new Decimal(1e4),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
            effect(){
                let eff = player.e.mm.add(10).log10().pow(0.5).div(30).add(1)
                return eff
            },
            effectDisplay(){
                return "^"+format(tmp.uv.upgrades[62].effect)
            },
        },
        63: {
            title: "UB9",
            description() {return  "mRNA boosts unvaxxed tRNA effect."},
            cost: new Decimal(5e4),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
            effect(){
                let eff = player.e.mrna.add(10).log10().pow(0.4).div(300).add(1)
                if (eff.gte(15)) eff = eff.div(15).pow(0.5).mul(15)
                if (eff.gte(28)) eff = eff.div(2).add(14)
                if (eff.gte(45)) eff = eff.div(45).pow(0.8).mul(22).add(23)
                if (eff.gte(54)) eff = eff.div(54).pow(0.8).mul(40).add(14)
                return eff
            },
            effectDisplay(){
                return "^"+format(tmp.uv.upgrades[63].effect)
            },
        },
        64: {
            title: "UB10",
            description() {return  "Unvaxxed tRNA boosts unvaxxed tRNA effect."},
            cost: new Decimal(15e5),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
            effect(){
                let eff = player.Us.trna.add(10).log10().pow(0.45).div(100).add(1)
                if (eff.gte(30)) eff = eff.div(30).pow(0.8).mul(15).add(15)
                if (eff.gte(44)) eff = eff.div(44).pow(0.8).mul(35).add(9)
                return eff
            },
            effectDisplay(){
                return "^"+format(tmp.uv.upgrades[64].effect)
            },
        },
        65: {
            title: "UB11",
            description() {return  "Cases add to UnBoosted Virus effect exp, tRNA attempt amount*3."},
            cost: new Decimal(3e6),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
            effect(){
                let eff = slog(player.points.max(10)).sub(4.9).max(0).mul(20).pow(1.25)
                return eff
            },
            effectDisplay(){
                return "+"+format(tmp.uv.upgrades[65].effect)
            },
        },
        66: {
            title: "UB12",
            description() {return  "UnBoosted Viruses boost base anti-distance gain, time speed*3."},
            cost: new Decimal(2e7),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
            effect(){
                let eff = player.uv.virus.div(1e7).pow(0.5).add(1).mul(10)
                if (eff.gte(1e7)) eff = eff.div(1e7).pow(2).mul(1e7)
                return eff
            },
            effectDisplay(){
                return format(tmp.uv.upgrades[66].effect)+'x'
            },
        },
        71: {
            title: "UB13",
            description() {return  shiftDown?"Effect: 10<sup>log10(UBV effect)<sup>0.4</sup>*"+format(tmp.uv.upgrades[71].exp)+"</sup>":"UnBoosted Viruses boost MMNA gain and limit (shift to see formula), tRNA attempt amount*3."},
            cost: new Decimal(1e9),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
            exp() {
                let exp = new Decimal(0.1)
                if (hasUpgrade("uv",76)) exp = exp.mul(2)
                if (hasUpgrade("uv",81)) exp = exp.mul(2)
                if (hasUpgrade("uv",85)) exp = exp.mul(1.5)
                if (hasUpgrade("uv",86) && player.Us.severity.gte("e135e12")) exp = exp.mul(1.5)
                if (hasUpgrade("uv",95) && player.Ud.points.gte(1e185)) exp = exp.mul(5)
                if (hasUpgrade("uv",96) && player.Ud.points.gte(303e301)) exp = exp.mul(5)
                return exp
            },
            effect(){
                let exp = tmp.uv.upgrades[71].exp
                let eff = powExp(tmp.uv.virusEff,0.4).pow(exp)
                return eff
            },
            effectDisplay(){
                return format(tmp.uv.upgrades[71].effect)+'x'
            },
        },
        72: {
            title: "UB14",
            description() {return  "UnBoosted Virus effect dilation +0.2, MMNA and mutated rRNA gain*3, keep 3rd row tRNA upgs, US mile 24."},
            cost: new Decimal(5e10),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
        },
        73: {
            title: "UB15",
            description() {return  "UnBoosted Virus effect dilation +0.2, mutated rRNA gain*3."},
            cost: new Decimal(2e11),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
        },
        74: {
            title: "UB16",
            description() {return  "CRNA buyables boost CRNA gain at ^0.5 effect, CRNA exponent+0.5."},
            cost: new Decimal(2e14),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
            effect(){
                let eff = tmp.e.buyables[111].effect.mul(tmp.e.buyables[112].effect).mul(tmp.e.buyables[113].effect).pow(0.5)
                return eff
            },
            effectDisplay(){
                return format(tmp.uv.upgrades[74].effect)+'x'
            },
        },
        75: {
            title: "UB17",
            description() {return  "CRNA buyables boost CRNA gain after log at ^0.3 effect, keep 5th row US upgs, 4th row tRNA upgs, 1st 30 US miles."},
            cost: new Decimal(3e16),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
            effect(){
                let eff = tmp.e.buyables[121].effect.mul(tmp.e.buyables[122].effect).mul(tmp.e.buyables[123].effect).pow(0.3)
                return eff
            },
            effectDisplay(){
                return format(tmp.uv.upgrades[75].effect)+'x'
            },
        },
        76: {
            title: "UB18",
            description() {return  "Mutated rRNA boosts base CRNA gain, UB13 exp*2, UBV effect dilation+0.3."},
            cost: new Decimal(1e18),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
            effect(){
                let eff = tmp.Us.rrnaAmt.div(1e12).add(1).pow(0.1)
                if (eff.gte("e3e5")) eff = eff.log10().div(3e5).pow(0.6).mul(3e5).pow10()
                return eff
            },
            effectDisplay(){
                return format(tmp.uv.upgrades[76].effect)+'x'
            },
        },
        81: { // Chungha = e3094937511
            title: "UB19",
            description() {return  "Unlock auto-reset, double UnBoosted Virus gain per maxed autobuyer, UB13 exponent*2."},
            cost: new Decimal(1e19),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
            effect(){
                let x = 0 
                for (let a in player.uv.buyables) {
                    if (tmp.uv.buyables[a].effect.lte(tmp.uv.buyables[a].int)) x ++
                }
                let Chungha = Decimal.pow(2,x)
                return Chungha
            },
            effectDisplay(){
                return format(tmp.uv.upgrades[81].effect)+'x'
            },
        },
        82: {
            title: "UB20",
            description() {return  shiftDown?"Effect: 10<sup>log10(UBV effect)<sup>0.35</sup>*"+format(tmp.uv.upgrades[82].exp)+"-5</sup>":"UnBoosted Viruses boost base CRNA gain (shift to see formula)."},
            cost: new Decimal(2e21),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
            exp() {
                let exp = new Decimal(0.09)
                if (hasUpgrade("uv",94) && player.Ud.points.gte(1e45)) exp = exp.mul(3)
                if (hasUpgrade("uv",95) && player.Ud.points.gte(1e185)) exp = exp.mul(5)
                if (hasUpgrade("uv",96) && player.Ud.points.gte(303e301)) exp = exp.mul(5)
                return exp
            },
            effect(){
                let exp = tmp.uv.upgrades[82].exp
                let Chungha = powExp(tmp.uv.virusEff,0.35).pow(exp).div(1e5).max(1)
                return Chungha
            },
            effectDisplay(){
                return format(tmp.uv.upgrades[82].effect)+'x'
            },
        },
        83: {
            title: "UB21",
            description() {return  "Keep 5th row tRNA upgs, 1st 40 and 57th US miles, unlock UBV buyables, unlock Max All rRNA buyables." },
            cost: new Decimal(1e23),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
        },
        84: {
            title: "UB22",
            description() {return  "UnBoosted Virus gain exponent+0.25." },
            cost: new Decimal(5e28),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
        },
        85: {
            title: "UB23",
            description() {return  "Double UnBoosted Virus gain per US milestone after 59, UB13 exponent*1.5."},
            cost: new Decimal(1e34),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
            effect(){
                let x = player.Us.milestones.length-59
                let Chungha = Decimal.pow(2,x).max(1)
                return Chungha
            },
            effectDisplay(){
                return format(tmp.uv.upgrades[85].effect)+'x'
            },
        },
        86: {
            title: "UB24",
            description() {return  "<span style='font-size:9px'>UBVs make unv. sev. 2nd sc. later, UB13 exp*1.5, 'Unva"+colorText("span","#308030","xx")+"ed Severity'^10 at "+format("e135e12")+" unv. sev., UU mile 29 eff*2 at "+format("e169e12")+" unv. sev.</span>"},
            cost: new Decimal(1e35),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
            effect(){
                let Chungha = player.uv.virus.sub(1e34).max(0).div(1e34).add(10).log10().pow(0.35)
                return Chungha
            },
            effectDisplay(){
                return "^"+format(tmp.uv.upgrades[86].effect)
            },
        },
        91: {
            title: "UB25",
            description() {return  "Unvaxxed death gain*3, 'UnRetRNA' cooldown is "+formatTime(12.5)+"." },
            cost: new Decimal(1e41),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
        },
        92: {
            title: "UB26",
            description() {return  "Unvaxxed death gain*2, 'UnRetRNA' cooldown is "+formatTime(12)+"." },
            cost: new Decimal(5e42),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
        },
        93: {
            title: "UB27",
            description() {return  shiftDown?"Effect: 10<sup>log10(UBV effect)<sup>0.3</sup>*"+format(tmp.uv.upgrades[93].exp)+"-7</sup>":"UnBoosted Viruses boost unvaxxed death gain (shift to see formula), UBV effect dilation +0.1."},
            cost: new Decimal(2e43),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
            exp() {
                let exp = new Decimal(0.08)
                return exp
            },
            effect(){
                let exp = tmp.uv.upgrades[93].exp
                let Chungha = powExp(tmp.uv.virusEff,0.3).pow(exp).div(1e7).max(1)
                return Chungha
            },
            effectDisplay(){
                return format(tmp.uv.upgrades[93].effect)+'x'
            },
        },
        94: {
            title: "UB28",
            description() {return  "CTNA gain*3, UB20 exponent*3 at "+format(1e45)+" unvaxxed deaths, 'UnRetRNA' cooldown is "+formatTime(11.5)+"." },
            cost: new Decimal(5e47),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
        },
        95: {
            title: "UB29",
            description() {return  "CTNA gain*3, UB13 and UB20 exponent*5 at "+format(1e185)+" unvaxxed deaths, 'UnRetRNA' cooldown is "+formatTime(11)+"." },
            cost: new Decimal(15e53),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
        },
        96: {
            title: "UB30",
            description() {return  "CTNA gain and 'CRNA Exponent' base*3, UB13, UB20, and UD eff exp*5 at "+format(303e301)+" unvaxxed deaths, 'UnRetRNA' cooldown is "+formatTime(10.8)+"." },
            cost: new Decimal(3e58),
            currencyDisplayName: "UnBoosted Viruses",
            currencyInternalName: "virus",
            currencyLayer: "uv",
        },
    },
    clickables: {
        rows: 4,
        cols: 2,
        11: {
            display() {
                return "<h2>Switch to Normal Layers</h2>"
            },
            canClick() {return true},
            unlocked() { return inChallenge("ct",32) }, 
            onClick() {
                player.uv.tree = "normal"
            },
        },
        12: {
            display() {
                return "<h2>Switch to Unvaxxed Layers</h2>"
            },
            canClick() {return true},
            unlocked() { return inChallenge("ct",32) }, 
            onClick() {
                player.uv.tree = "unvaxxed"
            },
        },
        21: {
            display() {
                return "<h2>Unlock UnBoosted Viruses</h2><br>Requires: "+format(tet10(5))+" cases"
            },
            canClick() {return inChallenge("ct",32) && player.points.gte(tet10(5)) && !player.uv.uvUnlocked},
            unlocked() { return inChallenge("ct",32) && player.uv.points.gte(6) && !player.uv.uvUnlocked }, 
            onClick() {
                player.uv.uvUnlocked = true
            },
        },
        31: {
            display() {
                let gain = tmp.uv.clickables[31].gain
                let next = tmp.uv.clickables[31].next
                let time = player.ct.resetTime
                let gainps = Decimal.div(gain,time)
                let dis = "Reset 'Booster Vaccine' for <h3>"+formatWhole(tmp.uv.clickables[31].gain)+"</h3> UnBoosted "+pluralize(tmp.uv.clickables[31].gain,'Virus','Viruses',true)+"<br><br>"
                if (gain.lt(1e6)) dis += "Next at " + format(next) + " cases<br>"
                if (gainps.lt(1/60)) dis += format(gainps.mul(3600)) + "/hr"
                else if (gainps.lt(1)) dis += format(gainps.mul(60)) + "/min"
                else dis += format(gainps) + "/s"
                return dis
            },
            gain() {//base^((slog(x)-4)^exp-1)
                let exp = tmp.uv.clickables[31].gainexp
                let mult = tmp.uv.clickables[31].gainmult
                let base = tmp.uv.clickables[31].gainbase
                let gain = Decimal.pow(base,slog(player.points).sub(4).pow(exp).sub(1)).mul(mult)
                if (player.points.lt(tet10(5))) return decimalZero
                return gain.floor()
            },
            gainmult() {
                let mult = tmp.uv.buyables[101].effect
                if (hasUpgrade("uv",61)) mult = mult.mul(tmp.uv.upgrades[61].effect)
                if (hasUpgrade("uv",81)) mult = mult.mul(tmp.uv.upgrades[81].effect)
                if (hasUpgrade("uv",85)) mult = mult.mul(tmp.uv.upgrades[85].effect)
                if (hasUpgrade("ct",554)) mult = mult.mul(tmp.ct.upgrades[554].effect)
                if (hasMilestone("Us",24)) mult = mult.mul(tmp.Us.milestones[24].effect)
                if (hasMilestone("uv",5)) mult = mult.mul(tmp.uv.milestones[5].effect)
                if (hasMilestone("uv",14) && player.points.gte("eee26e18")) mult = mult.mul(5)
                if (hasAchievement("a",261)) mult = mult.mul(tmp.a.achievements[261].effect)
                return mult
            },
            gainbase() {
                let exp = new Decimal(2023)
                if (hasUpgrade("ct",545)) exp = new Decimal(20232024)
                if (hasMilestone("uv",20)) exp = new Decimal(202320242025)
                return exp
            },
            gainexp() {
                let exp = decimalOne
                if (hasMilestone("uv",13)) exp = exp.add(.5)
                if (hasUpgrade("uv",84)) exp = exp.add(.25)
                if (hasUpgrade("Us",134)) exp = exp.add(.05)
                if (hasUpgrade("Us",135)) exp = exp.add(.05)
                return exp
            },
            next() {
                let gain = tmp.uv.clickables[31].gain
                let exp = tmp.uv.clickables[31].gainexp
                let mult = tmp.uv.clickables[31].gainmult
                let base = tmp.uv.clickables[31].gainbase
                let next = tet10(gain.add(1).div(mult).max(1).log(base).add(1).root(exp).add(4))
                return next
            },
            unlocked() {
                return player.uv.uvUnlocked && inChallenge("ct",32)
            },
            canClick() {return player.points.gte(tet10(5)) && inChallenge("ct",32)},
            onClick() {
                let gain = tmp.uv.clickables[31].gain
                let next = tmp.uv.clickables[31].next
                let time = player.ct.resetTime
                let gainps = Decimal.div(gain,time)
                player.uv.bestPer = gainps.max(player.uv.bestPer)
                if (time<player.uv.bestTime) player.uv.bestTime = time
                player.uv.times = player.uv.times.add(1)
                player.uv.mutPercent = player.Us.mutPercent
                player.uv.mutPer = player.Us.mutPer
                player.uv.tmutPercent = player.Us.tmutPercent
                player.uv.tmutPer = player.Us.tmutPer
                if (gain.gte(1e20) && time<=60) player.uv.m20 = true
                if (gain.gte(1e50) && time<=780) player.uv.m24 = true
                if (gain.gte(1e64) && time<=600) player.uv.m25 = true
                completeChallenge("ct",32)
                startChallenge("ct",32)
            },
            style: {'height':'130px', 'width':'175px', 'font-size':'13px',"background"() {
                let color = "#bf8f8f"
                if (tmp.uv.clickables[31].canClick) color = "radial-gradient(#383434, #153d63)"
                return color
                }
            }
        },
        32: {
            display() {
                return "<h2>Reset 'Booster Vaccine'<br>"
            },
            canClick() {return true},
            unlocked() { return player.uv.uvUnlocked && inChallenge("ct",32)}, 
            onClick() {
                if (!confirm("Are you sure you want to do this? You will lose all your progress in 'Booster Vaccine'!")) return
                player.uv.mutPercent = player.Us.mutPercent
                player.uv.mutPer = player.Us.mutPer
                player.uv.tmutPercent = player.Us.tmutPercent
                player.uv.tmutPer = player.Us.tmutPer
                let gain = tmp.uv.clickables[31].gain
                let time = player.ct.resetTime
                if (gain.gte(1e20) && time<=60) player.uv.m20 = true
                if (gain.gte(1e50) && time<=780) player.uv.m24 = true
                if (gain.gte(1e64) && time<=600) player.uv.m25 = true
                completeChallenge("ct",32)
                startChallenge("ct",32)
            },
            style: {'height':'130px', 'width':'175px', 'font-size':'13px',"background"() {
                let color = "#bf8f8f"
                if (tmp.uv.clickables[32].canClick) color = "radial-gradient(#383434, #153d63)"
                return color
                }
            }
        },
        41: {
            display() {
                return "<h3>Auto-Reset for UnBoosted Viruses</h3><br>"+(player.uv.autoreset?"ON":"OFF")+"<br></h2>"+formatTime(player.uv.cool)
            },
            canClick() {return true},
            onClick() {
                player.uv.autoreset=(player.uv.autoreset?false:true)
            },
            unlocked() {return hasUpgrade("uv",81)},
            style: {'height':'100px', 'min-height':'100px', 'width':'100px'},
        },
    },
    buyables:{
        11: {
            title: "Unvaxxed Layer",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player.uv.buyables[11]
                let cost = [1,Decimal.pow(2,1024),"e182e3","ee10","e3.4e101","ee1075e25","eee15e181","eeeeeeee10"]
                return new Decimal(cost[x])
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.uv.buyables[11]
                return x;
            },
            display() { // Everything else displayed in the buyable button after the title
                let x = player.uv.buyables[11]
                if (player.tab != "uv") return
                let extra = ""
                let dis = "Unlock an Unvaxxed layer"
                if (player.uv.points.gte(7)) dis += " (next update)"
                return dis + ".\n\
                Requires: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" case"+(x.eq(0)?'':'s')+"\n\
                Amount: " + formatWhole(getBuyableAmount("uv", 11))
            },
            unlocked() { return inChallenge("ct",32) }, 
            canAfford() {
                    return player.points.gte(tmp[this.layer].buyables[this.id].cost) && player.uv.points.lt(7)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.uv.buyables[11].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.uv.points = player.uv.points.add(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.ct.Advaxxers
                let target = s.div("e1111").log10().div(10).root(1.3)
                return target.floor()
            },
            buyMax() { // logr(s(r-1)/a1+1)=(n)
                let target = tmp.ct.buyables[221].maxAfford
                let cost = Decimal.pow(1e6,target.pow(1.3)).mul("e1111")
                let diff = target
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.Advaxxers = player.ct.Advaxxers.sub(cost).max(0)
                    player.ct.Atb = player.ct.Atb.add(diff)
                    player.ct.buyables[221] = player.ct.buyables[221].add(diff)
                
                }
            },
    },
    21: {
            title: "Max Severe Cooldown",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.uv.buyables[21].costb
                let exp = tmp.uv.buyables[21].coste
                let x = player.uv.buyables[21]
                let cost = Decimal.pow(base,x.pow(exp))
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(3)
                return cost
            },
            coste() { 
                let cost = new Decimal(1)
                return cost
            },
            int() {
                let i = 0.1
                return i
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.uv.buyables[21]
                let i = tmp.uv.buyables[21].int
                return Decimal.pow(0.7, x).mul(10).max(i);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "uv" || player.subtabs.uv.mainTabs != "UnBoosted Viruses") return
                let extra = ""
                let dis = "Reduce 'Max All' severe symptoms cooldown by 30%"
                let i = tmp.uv.buyables[21].int
                if (tmp[this.layer].buyables[this.id].effect.eq(i)) dis+= ' (MAXED)'
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" UnBoosted "+(tmp.uv.buyables[21].cost.eq(1)?"Virus":"Viruses")+"\n\
                Cooldown: " + formatTime(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("uv", 21))
            },
            unlocked() { return hasUpgrade("uv",51)}, 
            canAfford() {
                    return player.uv.virus.gte(tmp[this.layer].buyables[this.id].cost) && tmp[this.layer].buyables[this.id].effect.gt(tmp.uv.buyables[21].int)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.uv.buyables[21].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        player.uv.virus = player.uv.virus.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.uv.virus
                let base = tmp.uv.buyables[21].costb
                let exp = tmp.uv.buyables[21].coste
                let target = s.log(base).root(exp)
                return target.floor().add(1)
            },
        },
        22: {
            title: "Max tRNA Cooldown",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.uv.buyables[22].costb
                let exp = tmp.uv.buyables[22].coste
                let x = player.uv.buyables[22]
                let cost = Decimal.pow(base,x.pow(exp)).mul(10)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(3)
                return cost
            },
            coste() { 
                let cost = new Decimal(1)
                return cost
            },
            int() {
                let i = 0.1
                return i
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.uv.buyables[22]
                let i = tmp.uv.buyables[22].int
                return Decimal.pow(0.7, x).mul(15).max(i);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "uv" || player.subtabs.uv.mainTabs != "UnBoosted Viruses") return
                let extra = ""
                let dis = "Reduce 'Max All' unvaxxed tRNA buyables cooldown by 30%"
                let i = tmp.uv.buyables[22].int
                if (tmp[this.layer].buyables[this.id].effect.eq(i)) dis+= ' (MAXED)'
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" UnBoosted "+(tmp.uv.buyables[22].cost.eq(1)?"Virus":"Viruses")+"\n\
                Cooldown: " + formatTime(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("uv", 22))
            },
            unlocked() { return hasMilestone("uv",6) }, 
            canAfford() {
                    return player.uv.virus.gte(tmp[this.layer].buyables[this.id].cost) && tmp[this.layer].buyables[this.id].effect.gt(tmp.uv.buyables[22].int)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.uv.buyables[22].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        player.uv.virus = player.uv.virus.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.uv.virus
                let base = tmp.uv.buyables[22].costb
                let exp = tmp.uv.buyables[22].coste
                let target = s.div(10).log(base).root(exp)
                return target.floor().add(1)
            },
        },
        23: {
            title: "US Upgrade Cooldown",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.uv.buyables[23].costb
                let exp = tmp.uv.buyables[23].coste
                let x = player.uv.buyables[23]
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e4)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(3)
                return cost
            },
            coste() { 
                let cost = new Decimal(1)
                return cost
            },
            int() {
                let i = 0.1
                return i
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.uv.buyables[23]
                let i = tmp.uv.buyables[23].int
                return Decimal.pow(0.7, x).mul(60).max(i);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "uv" || player.subtabs.uv.mainTabs != "UnBoosted Viruses") return
                let extra = ""
                let dis = "Reduce US upgrade autobuyer cooldown by 30%"
                let i = tmp.uv.buyables[23].int
                if (tmp[this.layer].buyables[this.id].effect.eq(i)) dis+= ' (MAXED)'
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" UnBoosted "+(tmp.uv.buyables[23].cost.eq(1)?"Virus":"Viruses")+"\n\
                Cooldown: " + formatTime(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("uv", 23))
            },
            unlocked() { return hasMilestone("uv",6) }, 
            canAfford() {
                    return player.uv.virus.gte(tmp[this.layer].buyables[this.id].cost) && tmp[this.layer].buyables[this.id].effect.gt(tmp.uv.buyables[23].int)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.uv.buyables[23].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        player.uv.virus = player.uv.virus.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.uv.virus
                let base = tmp.uv.buyables[23].costb
                let exp = tmp.uv.buyables[23].coste
                let target = s.div(1e4).log(base).root(exp)
                return target.floor().add(1)
            },
        },
        31: {
            title: "mRNA Mutation Cooldown",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.uv.buyables[31].costb
                let exp = tmp.uv.buyables[31].coste
                let x = player.uv.buyables[31]
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e8)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(3)
                return cost
            },
            coste() { 
                let cost = new Decimal(1)
                return cost
            },
            int() {
                let i = 0.1
                return i
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.uv.buyables[31]
                let i = tmp.uv.buyables[31].int
                return Decimal.pow(0.7, x).mul(60).max(i);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "uv" || player.subtabs.uv.mainTabs != "UnBoosted Viruses") return
                let extra = ""
                let dis = "Reduce mRNA mutation autobuyer cooldown by 30%"
                let i = tmp.uv.buyables[31].int
                if (tmp[this.layer].buyables[this.id].effect.eq(i)) dis+= ' (MAXED)'
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" UnBoosted "+(tmp.uv.buyables[31].cost.eq(1)?"Virus":"Viruses")+"\n\
                Cooldown: " + formatTime(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("uv", 31))
            },
            unlocked() { return hasMilestone("uv",14) }, 
            canAfford() {
                    return player.uv.virus.gte(tmp[this.layer].buyables[this.id].cost) && tmp[this.layer].buyables[this.id].effect.gt(tmp.uv.buyables[31].int)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.uv.buyables[31].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        player.uv.virus = player.uv.virus.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.uv.virus
                let base = tmp.uv.buyables[31].costb
                let exp = tmp.uv.buyables[31].coste
                let target = s.div(1e8).log(base).root(exp)
                return target.floor().add(1)
            },
        },
        32: {
            title: "tRNA Mutation Cooldown",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.uv.buyables[32].costb
                let exp = tmp.uv.buyables[32].coste
                let x = player.uv.buyables[32]
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e12)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(3)
                return cost
            },
            coste() { 
                let cost = new Decimal(1)
                return cost
            },
            int() {
                let i = 0.1
                return i
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.uv.buyables[32]
                let i = tmp.uv.buyables[32].int
                return Decimal.pow(0.7, x).mul(60).max(i);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "uv" || player.subtabs.uv.mainTabs != "UnBoosted Viruses") return
                let extra = ""
                let dis = "Reduce tRNA mutation autobuyer cooldown by 30%"
                let i = tmp.uv.buyables[32].int
                if (tmp[this.layer].buyables[this.id].effect.eq(i)) dis+= ' (MAXED)'
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" UnBoosted "+(tmp.uv.buyables[32].cost.eq(1)?"Virus":"Viruses")+"\n\
                Cooldown: " + formatTime(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("uv", 32))
            },
            unlocked() { return hasMilestone("uv",16) }, 
            canAfford() {
                    return player.uv.virus.gte(tmp[this.layer].buyables[this.id].cost) && tmp[this.layer].buyables[this.id].effect.gt(tmp.uv.buyables[32].int)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.uv.buyables[32].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        player.uv.virus = player.uv.virus.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.uv.virus
                let base = tmp.uv.buyables[32].costb
                let exp = tmp.uv.buyables[32].coste
                let target = s.div(1e12).log(base).root(exp)
                return target.floor().add(1)
            },
        },
        33: {
            title: "Auto Reset Cooldown",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.uv.buyables[33].costb
                let exp = tmp.uv.buyables[33].coste
                let x = player.uv.buyables[33]
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e19)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(3)
                return cost
            },
            coste() { 
                let cost = new Decimal(1)
                return cost
            },
            int() {
                let i = 0.1
                return i
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.uv.buyables[33]
                let i = tmp.uv.buyables[33].int
                return Decimal.pow(0.7, x).mul(60).max(i);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "uv" || player.subtabs.uv.mainTabs != "UnBoosted Viruses") return
                let extra = ""
                let dis = "Reduce auto-reset cooldown by 30%"
                let i = tmp.uv.buyables[33].int
                if (tmp[this.layer].buyables[this.id].effect.eq(i)) dis+= ' (MAXED)'
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" UnBoosted "+(tmp.uv.buyables[33].cost.eq(1)?"Virus":"Viruses")+"\n\
                Cooldown: " + formatTime(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("uv", 33))
            },
            unlocked() { return hasUpgrade("uv",81) }, 
            canAfford() {
                    return player.uv.virus.gte(tmp[this.layer].buyables[this.id].cost) && tmp[this.layer].buyables[this.id].effect.gt(tmp.uv.buyables[33].int)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.uv.buyables[33].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        player.uv.virus = player.uv.virus.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.uv.virus
                let base = tmp.uv.buyables[33].costb
                let exp = tmp.uv.buyables[33].coste
                let target = s.div(1e19).log(base).root(exp)
                return target.floor().add(1)
            },
        },
        41: {
            title: "Max rRNA Cooldown",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.uv.buyables[41].costb
                let exp = tmp.uv.buyables[41].coste
                let x = player.uv.buyables[41]
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e23)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(3)
                return cost
            },
            coste() { 
                let cost = new Decimal(1)
                return cost
            },
            int() {
                let i = 0.1
                return i
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.uv.buyables[41]
                let i = tmp.uv.buyables[41].int
                return Decimal.pow(0.7, x).mul(30).max(i);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "uv" || player.subtabs.uv.mainTabs != "UnBoosted Viruses") return
                let extra = ""
                let dis = "Reduce 'Max All' mutated rRNA buyables cooldown by 30%"
                let i = tmp.uv.buyables[41].int
                if (tmp[this.layer].buyables[this.id].effect.eq(i)) dis+= ' (MAXED)'
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" UnBoosted "+(tmp.uv.buyables[41].cost.eq(1)?"Virus":"Viruses")+"\n\
                Cooldown: " + formatTime(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("uv", 41))
            },
            unlocked() { return hasUpgrade("uv",83) }, 
            canAfford() {
                    return player.uv.virus.gte(tmp[this.layer].buyables[this.id].cost) && tmp[this.layer].buyables[this.id].effect.gt(tmp.uv.buyables[41].int)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.uv.buyables[41].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        player.uv.virus = player.uv.virus.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.uv.virus
                let base = tmp.uv.buyables[41].costb
                let exp = tmp.uv.buyables[41].coste
                let target = s.div(1e23).log(base).root(exp)
                return target.floor().add(1)
            },
        },
        101: {
            title: "UnBoosted Virus Multiplier",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.uv.buyables[101].costb
                let exp = tmp.uv.buyables[101].coste
                let x = player.uv.buyables[101]
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e22)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(10)
                return cost
            },
            coste() { 
                let cost = new Decimal(1)
                return cost
            },
            base() { 
                let base = new Decimal(2)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.uv.buyables[101]
                let base = tmp.uv.buyables[101].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "uv" || player.subtabs.uv.mainTabs != "Buyables") return
                let extra = ""
                let dis = "Multiply UnBoosted Virus gain by " + format(tmp[this.layer].buyables[this.id].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" UnBoosted "+(tmp.uv.buyables[101].cost.eq(1)?"Virus":"Viruses")+"\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("uv", 101))
            },
            unlocked() { return hasUpgrade("uv",83) }, 
            canAfford() {
                    return player.uv.virus.gte(tmp[this.layer].buyables[this.id].cost) && tmp[this.layer].buyables[this.id].effect.gt(tmp.uv.buyables[101].int)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.uv.buyables[101].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        player.uv.virus = player.uv.virus.sub(cost)
                        player.uv.uvReset = player.uv.uvReset.mul(tmp[this.layer].buyables[this.id].base)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.uv.virus
                let base = tmp.uv.buyables[101].costb
                let exp = tmp.uv.buyables[101].coste
                let target = s.div(1e22).log(base).root(exp)
                return target.floor().add(1)
            },
        },
},
}),
addLayer("f", {
    name: "fatality",
    symbol: "F",
    position: 0,
    startData() { return {
        points: decimalZero,
        best: decimalZero,
        total: decimalZero,
        unlocked: false,
        sac: decimalZero,
        p: decimalZero,
        mult: decimalZero,
        d1: decimalZero,
        d2: decimalZero,
        d3: decimalZero,
        d4: decimalZero,
        d5: decimalZero,
        d6: decimalZero,
        d7: decimalZero,
        d8: decimalZero,
        resettime: new Decimal(0.001),
        cpm: decimalZero,
        casualty: decimalZero,
        casualtyTotal: decimalZero,
        d1auto: false,
        d2auto: false,
        d3auto: false,
        d4auto: false,
        d5auto: false,
        d6auto: false,
        d7auto: false,
        d8auto: false,
        multauto: false,
        boostauto: false,
        multbauto: false,
        sacauto: false,
        cmultauto: false,
        cdauto: false,
        crbauto: false,
        rbauto: false,
        iauto: false,
        rmultauto: false,
        kep: ['cdauto','crbauto','cmultauto','d1auto','d2auto','d3auto','d4auto','d5auto','d6auto','d7auto','d8auto','multauto','rmultauto','multbauto','sacauto','boostauto','rbauto','iauto'],
        t: [decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero],
        times: [decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero],
        buy: [41,42,43,44,51,52,53,54,61,62,63],
        sact: decimalZero,
        sactimes: decimalZero,
        cd: [decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero],
        cp: decimalZero,
        casuals: decimalOne,
        rt: decimalZero,
        rtimes: decimalZero,
        crb: decimalZero,
        crbtimes: decimalZero,
        rb: decimalZero,
        rbtimes: decimalZero,
        cboosts: decimalZero,
        virus: decimalZero,
        bt: decimalZero,
        btimes: decimalZero,
    }},
    color: "#f53d63",
    nodeStyle() {return {
        "background": (player.f.unlocked||canReset("f"))?"radial-gradient(#d5a776, #f53d63)":"#bf8f8f" ,
    }},
    componentStyles: {
        "prestige-button"() {return { "background": canReset("f")?"radial-gradient(#d5a776, #f53d63)":"#bf8f8f" }},
    },
    requires: Decimal.pow(10,10450),
    resource: "fatality",
    baseResource: "deaths",
    baseSingular: "death",
    baseAmount() { return player.d.points },
    type: "custom",
    exponent: 0.3,
    branches: ["d","s","u"],
    row: "3",
    hotkeys: [
            {key:"f", description: "F:Reset for fatality", onPress() {
                if (canReset(this.layer) && !hasMilestone("f",9)) doReset(this.layer)}
            },
            {key:"m", description: "M:Buy max Fatality Dimensions", onPress() {
                if (hasMilestone("f",6)) layers.f.clickables[11].onClick()
                if (hasMilestone("f",16)) layers.f.clickables[51].onClick()}
            },
            {key:"c", description: "C:Reset for casualty", onPress() {
                if (hasMilestone("f",12) && player.f.points.gte(Decimal.pow(10,5095).mul(5))) layers.f.clickables[12].onClick()}
            },
    ],
    powergain() {
        let pgain = tmp.f.buyables[11].gain
        return pgain.mul(tmp.ct.effect)
    },
    cpowergain() {
        let pgain = tmp.f.buyables[71].gain
        return pgain.mul(tmp.ct.effect)
    },
    fDimMult() {
        let mult = decimalOne
        if (hasFUpg(35)) mult = mult.mul(getFUpgEff(35))
        if (hasFUpg(41)) mult = mult.mul(getFUpgEff(41))
        if (hasFUpg(52)) mult = mult.mul(getFUpgEff(52))
        if (hasFUpg(55)) mult = mult.mul(getFUpgEff(55))
        if (hasFUpg(61)) mult = mult.mul(getFUpgEff(61))
        if (hasFUpg(81)) mult = mult.mul(getFUpgEff(81))
        if (hasFUpg(103)) mult = mult.mul(getFUpgEff(103))
        mult = mult.mul(tmp.f.buyables[31].effect)
        mult = mult.mul(tmp.f.buyables[32].effect)
        mult = mult.mul(this.cpeffect())
        if (inChallenge("f",61)) mult = tmp.f.buyables[32].effect
        if (inChallenge("f",62)) mult = this.cpeffect()
        if (hasAchievement("a",54)) mult = mult.mul(2)
        if (hasAchievement("a",65)) mult = mult.mul(tmp.a.effect)
        return mult
    },
    cDimMult() {
        let mult = decimalOne
        if (hasChallenge("f",31)) mult = mult.mul(challengeEffect("f",31))
        if (hasChallenge("f",52)) mult = mult.mul(challengeEffect("f",52))
        if (!hasUpgrade("Us",42)) mult = mult.mul(this.caseffect())
        if (hasFUpg(153)) mult = mult.mul(getFUpgEff(153))
        return mult
    },
    virusGain() {
        let exp = decimalTwo
        if (hasFUpg(163)) exp = exp.add(1).max(1)
        if (hasFUpg(164)) exp = exp.add(getFUpgEff(164))
        if (hasFUpg(165)) exp = exp.add(getFUpgEff(165))
        if (hasFUpg(166)) exp = exp.add(getFUpgEff(166))
        exp = exp.add(tmp.f.buyables[102].effect)
        let gain = player.f.casualty.div("ee4").add(1).max(1).log10().pow(exp).div(10000)
        if (hasFUpg(155)) gain = gain.mul(getFUpgEff(155))
        if (hasFUpg(157)) gain = gain.mul(tmp.f.upgrades[157].effect)
        if (hasFUpg(162)) gain = gain.mul(getFUpgEff(162))
        if (hasFUpg(181)) gain = gain.mul(getFUpgEff(181))
        gain = gain.mul(tmp.f.buyables[101].effect)
        if (hasUpgrade("e",12)) gain = gain.mul(upgradeEffect("e",12))
        if (hasUpgrade("e",125)) gain = gain.mul(upgradeEffect("e",125))
        return gain.mul(tmp.ct.effect)
    },
    speed() {
        let speed = 1
        if (hasUpgrade("e",12)) speed*=2
        if (hasUpgrade("e",23)) speed*=2
        if (hasUpgrade("e",123)) speed*=2
        if (hasMilestone("e",0)) speed*=4
        return speed
    },
    bulk() {
        let bulk = decimalOne
        if (hasUpgrade("e",12)) bulk = bulk.mul(10)
        if (hasUpgrade("e",23)) bulk = bulk.mul(100)
        if (hasUpgrade("e",123)) bulk = bulk.mul(1000)
        if (hasUpgrade("e",81)) bulk = bulk.pow(10)
        if (hasMilestone("e",8)) bulk = bulk.tetrate(1.79e308)
        return bulk
    },
    int() {
        let int = new Decimal(308)
        if (hasUpgrade("e",155)) int = int.mul(upgradeEffect("e",155))
        return int
    },
    update(diff) {
        player.f.p = player.f.p.add(tmp.f.powergain.mul(diff))
        player.f.cp = player.f.cp.add(tmp.f.cpowergain.mul(diff))
        if (hasMilestone("f",20)) player.f.virus = player.f.virus.add(tmp.f.virusGain.mul(diff)).min(tmp.f.virusGain.mul(60))
        player.f.casualtyTotal = player.f.casualtyTotal.max(player.f.casualty)
        player.f.resettime = player.f.resettime.add(diff)
        if (hasMilestone("f",7)) generatePoints("f",diff/100)
        if (hasMilestone("f",9)) generatePoints("f",diff)
        if (hasMilestone("f",18)) {
            player.f.casualty = player.f.casualty.add(tmp.f.clickables[12].gain.mul(diff/100))
            player.f.casualtyTotal = player.f.casualtyTotal.add(tmp.f.clickables[12].gain.mul(diff/100))
        }
        if (hasFUpg(113)) {
            player.f.casualty = player.f.casualty.add(getFUpgEff(113).mul(diff))
            player.f.casualtyTotal = player.f.casualtyTotal.add(getFUpgEff(113).mul(diff))
        }
        player.f.buyables[11] = player.f.buyables[11].add(tmp.f.buyables[12].gain.mul(diff))
        player.f.buyables[12] = player.f.buyables[12].add(tmp.f.buyables[13].gain.mul(diff))
        player.f.buyables[13] = player.f.buyables[13].add(tmp.f.buyables[14].gain.mul(diff))
        player.f.buyables[14] = player.f.buyables[14].add(tmp.f.buyables[21].gain.mul(diff))
        player.f.buyables[21] = player.f.buyables[21].add(tmp.f.buyables[22].gain.mul(diff))
        player.f.buyables[22] = player.f.buyables[22].add(tmp.f.buyables[23].gain.mul(diff))
        player.f.buyables[23] = player.f.buyables[23].add(tmp.f.buyables[24].gain.mul(diff))
        player.f.buyables[71] = player.f.buyables[71].add(tmp.f.buyables[72].gain.mul(diff)).max(player.f.cd[0])
        player.f.buyables[72] = player.f.buyables[72].add(tmp.f.buyables[73].gain.mul(diff)).max(player.f.cd[1])
        player.f.buyables[73] = player.f.buyables[73].add(tmp.f.buyables[74].gain.mul(diff)).max(player.f.cd[2])
        player.f.buyables[74] = player.f.buyables[74].add(tmp.f.buyables[81].gain.mul(diff)).max(player.f.cd[3])
        player.f.buyables[81] = player.f.buyables[81].add(tmp.f.buyables[82].gain.mul(diff)).max(player.f.cd[4])
        player.f.buyables[82] = player.f.buyables[82].add(tmp.f.buyables[83].gain.mul(diff)).max(player.f.cd[5])
        player.f.buyables[83] = player.f.buyables[83].add(tmp.f.buyables[84].gain.mul(diff)).max(player.f.cd[6])
        player.f.times = [decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero]
        if (player.f.casualtyTotal.gte(1) || inChallenge("ct",32)) {
        for (i = 0; i < player.f.t.length; i++) {
            let t = tmp.f.buyables[player.f.buy[i]].speed.mul(diff)
            player.f.t[i] = Decimal.add(player.f.t[i], t)
            if (player.f.t[i].gte(1)) {
                player.f.times[i] = Decimal.floor(player.f.t[i]).mul(-1)
                player.f.t[i] = Decimal.add(player.f.t[i], player.f.times[i])
                player.f.times[i] = player.f.times[i].mul(-1)
                if (tmp.f.buyables[player.f.buy[i]].on) layers.f.buyables[player.f.buy[i]-30].buyMax(tmp.f.buyables[player.f.buy[i]].bulk)
            }
        }
    }
        let st = tmp.f.buyables[64].speed.mul(diff)
        player.f.sact = Decimal.add(player.f.sact, st)
        if (player.f.sact.gte(1) && !inChallenge("f",22) && !hasMilestone("f",14)) {
            player.f.sactimes = Decimal.floor(player.f.sact).mul(-1)
            player.f.sact = Decimal.add(player.f.sact, player.f.sactimes)
            player.f.sactimes = player.f.sactimes.mul(-1)
            if (tmp.f.buyables[64].on && tmp.f.clickables[13].effectnext.gte(100)) layers.f.clickables[13].onClick()
        }
        if (hasMilestone("f",14)) {
            player.f.sac = player.f.buyables[11]
        }
        let m = tmp.f.buyables[91].effect.pow(diff)
        let limit = new Decimal(1.7976e308)
        if (hasFUpg(181)) limit = Decimal.tetrate(10,1.79e308)
        if (tmp.f.buyables[92].effect.gte(0.1)) {
        player.f.rt = Decimal.add(player.f.rt, diff)
            if (player.f.rt.gte(tmp.f.buyables[92].interval) && hasMilestone("f",17)) {
                player.f.rtimes = player.f.rt.mul(-1)
                player.f.rt = Decimal.add(player.f.rt, player.f.rtimes)
                player.f.rtimes = player.f.rtimes.mul(-1)
                player.f.casuals = player.f.casuals.mul(tmp.f.buyables[91].effect).min(limit)
            }
        } 
        else if (player.f.casuals.mul(m.pow(tmp.f.buyables[92].interval.pow(-1))).gte(Decimal.pow(10,tmp.f.buyables[91].effect.log10().div(tmp.f.buyables[92].effect).mul(1e4).log(getFUpgEff(184)).mul(tmp.f.int)))) {
            player.f.casuals = Decimal.pow(10,tmp.f.buyables[91].effect.log10().div(tmp.f.buyables[92].effect).mul(0.0001).max(1).log(getFUpgEff(184)).mul(tmp.f.int))
        }
        else {
            player.f.casuals = player.f.casuals.mul(m.pow(tmp.f.buyables[92].interval.pow(-1))).min(limit)
        }
        player.f.casuals = player.f.casuals.max(1)
        let bst = tmp.f.speed*diff
        player.f.bt = Decimal.add(player.f.bt, bst)
        if (player.f.bt.gte(1)) {
            player.f.btimes = Decimal.floor(player.f.bt).mul(-1)
            player.f.bt = Decimal.add(player.f.bt, player.f.btimes)
            player.f.btimes = player.f.btimes.mul(-1)
            if (hasUpgrade("f", 187)) {
                layers.f.buyables[101].buyMax(player.f.btimes.mul(tmp.f.bulk))
                layers.f.buyables[102].buyMax(player.f.btimes.mul(tmp.f.bulk))
                layers.f.buyables[103].buyMax(player.f.btimes.mul(tmp.f.bulk))
            }
        }
        if (player.f.cmultauto) {
            if (hasMilestone("f",18)) {
                let max = player.f.casualty.div(5).max(1).log10()
                if (max.gte(1e35)) max = max.div(1e35).pow(1/3).mul(1e35)
                player.f.buyables[34] = max.ceil().max(player.f.buyables[34])
            }
            else layers.f.clickables[14].onClick()
        }
        if (player.f.cdauto) {
            player.f.cd[0] = player.f.casualty.max(1).div(1e14).log10().div(5).ceil().max(player.f.cd[0])
            player.f.cd[1] = player.f.casualty.max(1).div(1e16).log10().div(9).ceil().max(player.f.cd[1])
            player.f.cd[2] = player.f.casualty.max(1).div(1e29).log10().div(13).ceil().max(player.f.cd[2])
            player.f.cd[3] = player.f.casualty.max(1).div(1e50).log10().div(17).ceil().max(player.f.cd[3])
            player.f.cd[4] = player.f.casualty.max(1).div(Decimal.pow(10,460)).log10().div(20).ceil().max(player.f.cd[4])
            player.f.cd[5] = player.f.casualty.max(1).div(Decimal.pow(10,575)).log10().div(25).ceil().max(player.f.cd[5])
            player.f.cd[6] = player.f.casualty.max(1).div(Decimal.pow(10,790)).log10().div(30).ceil().max(player.f.cd[6])
            player.f.cd[7] = player.f.casualty.max(1).div(Decimal.pow(10,1905)).log10().div(40).ceil().max(player.f.cd[7])
            player.f.buyables[84] = player.f.casualty.max(1).div(Decimal.pow(10,1905)).log10().div(40).ceil().max(player.f.buyables[84])
        }
        if (player.f.crbauto) layers.f.buyables[93].buyMax()
        if (player.f.iauto) hasMilestone("e",0) ? layers.f.buyables[92].buyMax() : layers.f.buyables[92].buy()
        if (player.f.rmultauto) {
            if (hasFUpg(183)) {
                let max = player.f.casualty.max(1).div(Decimal.pow(10,470)).log10().div(25).ceil().max(0)
                player.f.buyables[91] = max
            }
            else layers.f.buyables[91].buyMax()
        }
        if (player.f.rbauto && tmp.f.clickables[52].canClick && !hasFUpg(181)) layers.f.clickables[52].onClick()
        if (player.f.rbauto && hasFUpg(181)) player.f.cboosts = tmp.f.buyables[93].effect
    },
    canReset() {return player.d.points.gte(Decimal.pow(10,10450)) && !hasMilestone("f",9)},
    gainMult() {
        let mult = decimalOne
        if (inChallenge("ct",32)) {
            if (hasUpgrade("Up",32)) mult = mult.mul(tmp.Up.upgrades[32].effect)
            if (hasUpgrade("Up",41)) mult = mult.mul(tmp.Up.upgrades[41].effect)
            if (hasMilestone("Up",9)) mult = mult.mul(tmp.Up.milestones[8].effect)
        }
        else {
        if (hasFUpg(12)) mult = mult.mul(getFUpgEff(12))
        if (hasFUpg(14)) mult = mult.mul(getFUpgEff(14))
        if (hasFUpg(22)) mult = mult.mul(getFUpgEff(22))
        if (hasFUpg(24)) mult = mult.mul(getFUpgEff(24))
        mult = mult.mul(tmp.f.peffect)
        .mul(tmp.ct.effect)
        }
        return mult
    },
    gainExp() {
        let exp = decimalOne
        if (inChallenge("ct",32)) {
            if (hasChallenge("Up",41)) exp = exp.add(1)
            if (hasChallenge("Up",42)) exp = exp.add(1)
            if (hasUpgrade("Up",44)) exp = exp.add(1)
            if (hasUpgrade("ct",495)) exp = exp.add(1)
            if (hasAchievement("a",222) && player.Up.protein.gte(1)) exp = exp.add(0.2)
            exp = exp.add(tmp.Up.buyables[13].effect)
        }
        else {
        if (hasFUpg(25)) exp = exp.add(1).max(1)
        if (hasFUpg(32)) exp = exp.add(getFUpgEff(32))
        if (hasFUpg(42)) exp = exp.add(getFUpgEff(42))
        if (hasFUpg(51)) exp = exp.add(getFUpgEff(51))
        }
        if (hasAchievement("a",224)) exp = exp.mul(1.01)
        if (hasAchievement("a",225)) exp = exp.mul(1.02)
        return exp
    },
    getResetGain() {
        let f = tmp.f.baseAmount
        if (inChallenge("f",31)) f = Decimal.pow(10,10450)
        if (f.lt(tmp.f.requires)) return decimalZero
        let gain = f.div(tmp.f.requires).mul(10).log10().pow(tmp.f.exponent).pow(tmp.f.gainExp).mul(tmp.f.gainMult)
        if (!inChallenge("ct",32)) {
        if (inChallenge("f",42)) gain = gain.pow(0.1)
        if (inChallenge("f",51)) gain = Decimal.pow(10,gain.log10().pow(0.75))
        if (hasChallenge("f",42)) gain = gain.pow(1.05)
        if (hasFUpg(171)) gain = gain.pow(getFUpgEff(171))
        if (hasUpgrade("e",175)) gain = gain.pow(upgradeEffect("e",175))
        if (hasUpgrade("e",194)) gain = gain.pow(upgradeEffect("e",194))
        }
        return gain.floor()
    },
    getNextAt() {
        let next = tmp.f.getResetGain.add(1).max(1)
		if (next.gte(tmp.f.softcap)) next = next.div(tmp.f.softcap.pow(decimalOne.sub(tmp.f.softcapPower))).pow(decimalOne.div(tmp.f.softcapPower))
		next = Decimal.pow(10,(next.div(tmp.f.gainMult).root(tmp.f.exponent).root(tmp.f.gainExp))).mul(tmp.f.requires).div(10).max(tmp.f.requires)
		return next;
    },
    prestigeButtonText() {
        let text =  `${ player.f.points.lt(1e3) ? (tmp.f.resetDescription !== undefined ? tmp.f.resetDescription : "Reset for ") : ""}+<b>${formatWhole(tmp.f.resetGain)}</b> ${tmp.f.resource} ${tmp.f.getResetGain.lt(100) && player.f.points.lt(1e3) ? `<br><br>Next at ${ (tmp.f.roundUpCost ? formatWhole(tmp.f.nextAt) : format(tmp.f.nextAt))} ${ tmp.f.baseResource }` : ""}` + "<br>"
        let gain = tmp.f.getResetGain.div(player.f.resettime)
        if (gain.gte(10)) text += format(gain) + "/s"
        else text += format(gain.mul(60)) + "/min"
        return text
    },
    layerShown() {
        return (hasSUpg(55) || player.f.unlocked) && player.uv.tree == "normal"
    },
    doReset(resettingLayer) {
        let keep=[];
        if (hasMilestone("ct", 0)) {
            keep.push("milestones")
            keep.push("challenges")
        }
        if (hasMilestone("ct", 1)) keep.push("upgrades")
        if (hasMilestone("a", 0)) player.u.auto = true
        player.f.resettime = new Decimal(0.001)
        if (hasMilestone("ct", 0)) {
            for (i = 0; i < player.f.kep.length; i++) {
                keep.push(player.f.kep[i])
            }
        }
        if (layers[resettingLayer].row > this.row || resettingLayer=='Uu' || resettingLayer=='Ud') layerDataReset(this.layer, keep)
        if (hasMilestone("ct", 0)) {
            for (i = 0; i < 9; i++) {
                player.f.buyables[player.f.buy[i]] = new Decimal(15)
            }
            player.f.buyables[62] = new Decimal(9)
            player.f.buyables[63] = new Decimal(13)
            player.f.buyables[64] = new Decimal(9)
        }
    },
    multpd() {
        let base = decimalTwo
        if (hasFUpg(53)) base = base.add(getFUpgEff(53))
        if (hasFUpg(82)) base = base.add(0.3)
        if (hasUpgrade("Up",42)) base = base.pow(tmp.Up.upgrades[42].effect)
        if (hasUpgrade("Up",62)) base = base.pow(3)
        if (inChallenge("f",12)) base = decimalOne
        return base
    },
    cmultpd() {
        let base = decimalFive
        return base
    },
    cmultExp() {
        let exp = decimalOne
        if (hasMilestone("Up",17)) exp = exp.mul(tmp.Up.milestones[17].effect)
        return exp
    },
    effect() {
        let eff = player.f.best.add(1).max(1)
        eff = eff.pow(eff.log10().add(1).max(1).pow(1.7)).pow(15)
        if (hasFUpg(15)) eff = eff.pow(getFUpgEff(15))
        if (hasFUpg(124)) eff = eff.pow(getFUpgEff(124))
        if (eff.gte(Decimal.pow(10,2e6))) eff = Decimal.pow(10,eff.div(Decimal.pow(10,2e6)).log10().pow(0.85)).mul(Decimal.pow(10,2e6))
        return eff
    },
    effect2() {
        let eff = player.f.best.add(1).max(1)
        eff = eff.pow(eff.log10().add(1).max(1).pow(1.2)).pow(2)
        if (hasFUpg(124)) eff = eff.pow(getFUpgEff(124))
        return eff
    },
    peffect() {
        let eff = player.f.p.add(1).max(1)
        eff = eff.pow(0.6)
        if (hasFUpg(62)) eff = eff.pow(getFUpgEff(62))
        if (hasFUpg(161)) eff = eff.pow(getFUpgEff(161))
        if (hasUpgrade("e",144)) eff = eff.pow(upgradeEffect("e",144))
        if (eff.gte(Decimal.pow(10,1e8))) eff = Decimal.pow(10,eff.div(Decimal.pow(10,1e8)).log10().pow(0.8)).mul(Decimal.pow(10,1e8))
        if (eff.gte(Decimal.pow(10,5e10))) eff = hasUpgrade("e",141) ? Decimal.pow(10,eff.div(Decimal.pow(10,5e10)).log10().pow(0.93)).mul(Decimal.pow(10,5e10)) : eff.log10().div(5).pow(5e9)
        if (eff.gte(Decimal.pow(10,1e66))) eff = Decimal.pow(10,eff.div(Decimal.pow(10,1e66)).log10().pow(0.66)).mul(Decimal.pow(10,1e66))
        if (inChallenge("f",52)) eff = decimalOne
        return eff
    },
    cpeffect() {
        let exp = 0.8
        if (hasUpgrade("Up",73)) exp = 8/9
        let eff = player.f.cp.add(1).max(1)
        eff = eff.pow(50)
        if (hasChallenge("f",42)) eff = eff.pow(1.5)
        if (hasChallenge("f",62)) eff = eff.pow(challengeEffect("f",62))
        if (hasFUpg(167)) eff = eff.pow(getFUpgEff(167))
        if (eff.gte(Decimal.pow(10,2e9))) eff = Decimal.pow(10,eff.div(Decimal.pow(10,2e9)).log10().pow(exp)).mul(Decimal.pow(10,2e9))
        if (eff.gte(Decimal.pow(10,1e24)) && inChallenge("ct",32)) eff = Decimal.pow(10,eff.div(Decimal.pow(10,1e24)).log10().pow(0.9)).mul(Decimal.pow(10,1e24))
        if (eff.gte(Decimal.pow(10,1e30)) && inChallenge("ct",32)) eff = eff.log10().div(1e30).pow(0.8).mul(1e30).pow10()
        if (eff.gte(Decimal.pow(10,1e36)) && inChallenge("ct",32)) eff = eff.log10().div(1e36).pow(0.75).mul(1e36).pow10()
        //if (eff.gte(Decimal.pow(10,1e45)) && inChallenge("ct",32)) eff = eff.log10().div(1e45).pow(0.5).mul(1e45).pow10()
        return eff
    },
    caseffect() {
        let eff = player.f.casuals.max(1)
        eff = eff.log10().add(1).max(1).pow(30) 
        if (eff.gte(1e30)) eff = eff.div(1e30).pow(0.2).mul(1e30)
        if (hasFUpg(181)) eff = eff.add(player.f.casuals.max(1).pow(20))
        if (hasUpgrade("Up",72)) eff = eff.pow(tmp.Up.upgrades[72].effect)
        if (hasUpgrade("Us",42)) eff = eff.max(10).log10().pow(0.02)
        if (hasUpgrade("Us",101)) {
            eff = eff.max(10).log10().max(10).log10().pow(0.02)
            if (eff.gte(3)) eff = eff.add(7).log10().pow(0.5).pow10().add(2).div(4)
        }
        return eff
    },
    DimScaling() {
        let scale = decimalTen
        if (inChallenge("ct",32)) {
            if (hasUpgrade("Up",63)) scale = scale.sub(1)
        }
        else {
        if (inChallenge("f",21)) scale = new Decimal(100)
        if (inChallenge("f",41)) scale = new Decimal(1.797e308)
        if (hasFUpg(65)) scale = scale.sub(1)
        if (hasFUpg(73)) scale = scale.sub(1)
        if (hasFUpg(111)) scale = scale.sub(1)
        if (hasFUpg(84)) scale = scale.sub(1)
        if (hasFUpg(115)) scale = scale.sub(1)
        if (hasFUpg(122)) scale = scale.sub(1)
        if (hasFUpg(134)) scale = scale.sub(0.5)
        if (hasFUpg(154)) scale = scale.sub(getFUpgEff(154))
        if (hasFUpg(185)) scale = scale.sub(tmp.f.upgrades[185].effect)
        if (hasChallenge("f",41)) scale = scale.sub(1)
        if (hasUpgrade("e",35)) scale = scale.pow(0.05)
        if (hasUpgrade("e",186)) scale = new Decimal(1.000001)
        }
        return scale
    },
    effectDescription() {
        return "which boosts cases, VP, infectivity, severity by " + layerText("h2", "f", format(this.effect())) + ", and death gain by " +layerText("h2", "f", format(this.effect2())) + " (based on best)."
    },
    tabFormat: {
        "Milestones": {
            content: [
                function() {if (player.tab == "f" && player.subtabs.f.mainTabs == "Milestones") return "main-display"},
                ["raw-html", function() {if (hasMilestone("f",9)) return "You are gaining " + layerText("h2", "f", format(tmp.f.getResetGain)) + " fatality per second"}],
                function() {if (!hasMilestone("f",9)) return "prestige-button"},
                "resource-display",
                ["display-text", 
                function() {
                    if (!hasMilestone("f",9)) return "Fatality time: " + formatTime(player.f.resettime)
                }
                ],
                "blank",
                "milestones",
            ]
        },
        "Upgrades": {
            content: [
                function() {if (player.tab == "f" && player.subtabs.f.mainTabs == "Upgrades") return "main-display"},
                ["raw-html", function() {if (hasMilestone("f",9)) return "You are gaining " + layerText("h2", "f", format(tmp.f.getResetGain)) + " fatality per second"}],
                function() {if (!hasMilestone("f",9)) return "prestige-button"},
                "resource-display",
                ["display-text", 
                function() {
                    if (!hasMilestone("f",9)) return "Fatality time: " + formatTime(player.f.resettime)
                }
                ],
                "blank",
                function() {if (player.tab == "f" && player.subtabs.f.mainTabs == "Upgrades") return ["upgrades",[1,2,3,4,5,6,7]]}
            ]
        },
        "Dimensions": {
            content: [
                function() {if (player.tab == "f" && player.subtabs.f.mainTabs == "Dimensions") return "main-display"},
                ["raw-html", function() {if (hasMilestone("f",9) && player.tab == "f" && player.subtabs.f.mainTabs == "Dimensions" ) return "You are gaining " + layerText("h2", "f", format(tmp.f.getResetGain)) + " fatality per second"}],
                function() {if (!hasMilestone("f",9)) return "prestige-button"},
                "resource-display",
                ["raw-html", function() {
                    if (player.tab != "f" || player.subtabs.f.mainTabs != "Dimensions" ) return
                    let dis = "You have " + layerText("h2", "f", format(player.f.p)) + " fatality power, which boosts fatality gain by " + layerText("h2", "f", format(tmp.f.peffect))
                    if (tmp.f.peffect.gte(Decimal.pow(10,1e8))) dis += " (softcapped)"
                    return dis
                }],
                ["raw-html", 
                function () {
                    if (player.tab == "f" && player.subtabs.f.mainTabs == "Dimensions") {
                    let a = "You are gaining " + format(tmp.f.powergain) + " fatality power per second.<br>"
                    let b = "You are gaining " + format(tmp.f.buyables[12].gain) + " Fatality Dimension 1 per second.<br>"
                    let c = "You are gaining " + format(tmp.f.buyables[13].gain) + " Fatality Dimension 2 per second.<br>"
                    let d = "You are gaining " + format(tmp.f.buyables[14].gain) + " Fatality Dimension 3 per second.<br>"
                    let e = "You are gaining " + format(tmp.f.buyables[21].gain) + " Fatality Dimension 4 per second.<br>"
                    let f = "You are gaining " + format(tmp.f.buyables[22].gain) + " Fatality Dimension 5 per second.<br>"
                    let g = getBuyableAmount("f",32).gte(1)?"You are gaining " + format(tmp.f.buyables[23].gain) + " Fatality Dimension 6 per second.<br>":""
                    let h = getBuyableAmount("f",32).gte(2)?"You are gaining " + format(tmp.f.buyables[24].gain) + " Fatality Dimension 7 per second.<br>":""
                    return a+b+c+d+e+f+g+h
                    }
                }],
                "blank",
                ["row", [["clickable", 11],["clickable", 13]]],
                ["buyables",[1,2]],
                ["row", [["buyable", 31], ["buyable", 32], ["buyable", 33]]],
            ],
            unlocked() {return hasMilestone("f", 6)}
        },
        "Casualty": {
            content: [
                function() {if (player.tab == "f" && player.subtabs.f.mainTabs == "Casualty") return "main-display"},
                function() {if (!hasMilestone("f",9)) return "prestige-button"},
                ["display-text", 
                function() {
                    if (!hasMilestone("f",9)) return "Fatality time: " + formatTime(player.f.resettime)
                }
                ],
                "blank",
                ["raw-html", function() {if (player.tab == "f" && player.subtabs.f.mainTabs == "Casualty") return "You have <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + formatWhole(player.f.casualty) +"</h2> casualty"}],
                "blank",
                function() {if (!hasMilestone("f",18)) return ["row", [["clickable", 12]]]},
                ["display-text", 
                function() {
                    if (hasMilestone("f",18) && player.tab == "f" && player.subtabs.f.mainTabs == "Casualty") return "You are gaining <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + formatWhole(tmp.f.clickables[12].gain.div(100)) + "</h2> casualty per second."
                }
                ],
                "blank",
                ["display-text", 
                function() {
                    if (player.tab == "f" && player.subtabs.f.mainTabs == "Casualty") return "You have made a total of " + formatWhole(player.f.casualtyTotal) + " casualty."
                }
                ],
                ["display-text", 
                function() {
                    if (!hasMilestone("f",18)) return "Casualty time: " + formatTime(player.f.resettime)
                }
                ],
                ["display-text", 
                function() {
                    let dis = "Best Casualty/min: "
                    if (player.f.cpm.lt(10)) dis += format(player.f.cpm.mul(60)) + "/min"
                    else dis += format(player.f.cpm) + "/s"
                    if (!hasMilestone("f",18)) return dis
                }
                ],
                ["raw-html", "<br><h2>Casualty Upgrades</h2><br>"],
                function() {if (player.tab == "f" && player.subtabs.f.mainTabs == "Casualty") return ["upgrades",[8,9,10,11,12,13,14]]}
            ],
            buttonStyle: {"border-color": "#3d2963"},
            unlocked() {return hasMilestone("f", 12)},
        },
        "Multiplier": {
            content: [
                ["raw-html", function() {if (player.tab == "f" && player.subtabs.f.mainTabs == "Multiplier") return "You have <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + formatWhole(player.f.casualty) +"</h2> casualty"}],
                "blank",
                function() {if (!hasMilestone("f",18)) return ["row", [["clickable", 12]]]},
                ["display-text", 
                function() {
                    if (hasMilestone("f",18) && player.tab == "f" && player.subtabs.f.mainTabs == "Multiplier") return "You are gaining <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + formatWhole(tmp.f.clickables[12].gain.div(100)) + "</h2> casualty per second."
                }
                ],
                "blank",
                ["column", [["row", [["clickable", 14]]]]],
                ["row", [["buyable", 34]]],
            ],
            buttonStyle: {"border-color": "#3d2963"},
            unlocked() {return hasMilestone("f", 12)},
        },
        "Challenges": {
            content: [
                ["raw-html", function() {if (player.tab == "f" && player.subtabs.f.mainTabs == "Challenges") return "You have <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + formatWhole(player.f.casualty) +"</h2> casualty"}],
                "blank",
                function() {if (!hasMilestone("f",18)) return ["row", [["clickable", 12]]]},
                ["display-text", 
                function() {
                    if (hasMilestone("f",18) && player.tab == "f" && player.subtabs.f.mainTabs == "Challenges") return "You are gaining <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + formatWhole(tmp.f.clickables[12].gain.div(100)) + "</h2> casualty per second."
                }
                ],
                "blank",
                ["display-text", 
                function() {
                    if (player.tab == "f" && player.subtabs.f.mainTabs == "Challenges") return "You have made a total of " + formatWhole(player.f.casualtyTotal) + " casualty."
                }
                ],
                ["display-text", 
                function() {
                    return "Starting a challenge does a casualty reset. Completing a challenge gives " + formatWhole(tmp.f.buyables[34].effect) + " casualty"
                }
                ],
                ["bar", "NextCC"],
                "challenges"
            ],
            buttonStyle: {"border-color": "#3d2963"},
            unlocked() {return hasMilestone("f", 12)},
        },
        "Autobuyers": {
            content: [
                ["raw-html", function() {if (player.tab == "f" && player.subtabs.f.mainTabs == "Autobuyers") return "You have <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + formatWhole(player.f.casualty) +"</h2> casualty"}],
                "blank",
                function() {if (!hasMilestone("f",18)) return ["row", [["clickable", 12]]]},
                ["display-text", 
                function() {
                    if (hasMilestone("f",18) && player.tab == "f" && player.subtabs.f.mainTabs == "Autobuyers") return "You are gaining <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + formatWhole(tmp.f.clickables[12].gain.div(100)) + "</h2> casualty per second."
                }
                ],
                "blank",
                ["display-text", 
                function() {
                    if (player.tab == "f" && player.subtabs.f.mainTabs == "Autobuyers") return "You have made a total of " + formatWhole(player.f.casualtyTotal) + " casualty."
                }
                ],
                ["row",[["column", [["buyable", 41],["clickable", 21]]],["column", [["buyable", 42],["clickable", 22]]],["column", [["buyable", 43],["clickable", 23]]],["column", [["buyable", 44],["clickable", 24]]]]],
                ["row",[["column", [["buyable", 51],["clickable", 31]]],["column", [["buyable", 52],["clickable", 32]]],["column", [["buyable", 53],["clickable", 33]]],["column", [["buyable", 54],["clickable", 34]]]]],
                ["row",[["column", [["buyable", 61],["clickable", 41]]],["column", [["buyable", 62],["clickable", 42]]],["column", [["buyable", 63],["clickable", 43]]],["column", [["buyable", 64],["clickable", 44]]]]],
            ],
            buttonStyle: {"border-color": "#3d2963"},
            unlocked() {return hasChallenge("f", 11)},
        },
        "Casualty Dimensions": {
            content: [
                ["raw-html", function() {if (player.tab == "f" && player.subtabs.f.mainTabs == "Casualty Dimensions" ) return "You have <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + formatWhole(player.f.casualty) +"</h2> casualty"}],
                "blank",
                function() {if (!hasMilestone("f",18)) return ["row", [["clickable", 12]]]},
                ["display-text", 
                function() {
                    if (hasMilestone("f",18) && player.tab == "f" && player.subtabs.f.mainTabs == "Casualty Dimensions" ) return "You are gaining <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + formatWhole(tmp.f.clickables[12].gain.div(100)) + "</h2> casualty per second."
                }
                ],
                "blank",
                ["display-text", 
                function() {
                    if (player.tab == "f" && player.subtabs.f.mainTabs == "Casualty Dimensions" ) return "You have made a total of " + formatWhole(player.f.casualtyTotal) + " casualty."
                }
                ],
                ["raw-html", function() {
                    if (player.tab != "f" || player.subtabs.f.mainTabs != "Casualty Dimensions" ) return
                    let dis = "You have <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + format(player.f.cp) + "</h2> casualty power, which boosts Fatality Dimensions by <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + format(tmp.f.cpeffect) +"</h2>"
                    if (tmp.f.cpeffect.gte(Decimal.pow(10,2e9))) dis += " (softcapped)"
                    return dis
                }],
                ["raw-html", 
                function () {
                    if (player.tab == "f" && player.subtabs.f.mainTabs == "Casualty Dimensions") {
                    let a = "You are gaining " + format(tmp.f.cpowergain) + " casualty power per second.<br>"
                    let b = "You are gaining " + format(tmp.f.buyables[72].gain) + " Casualty Dimension 1 per second.<br>"
                    let c = tmp.f.buyables[73].unlocked?"You are gaining " + format(tmp.f.buyables[73].gain) + " Casualty Dimension 2 per second.<br>":""
                    let d = tmp.f.buyables[74].unlocked?"You are gaining " + format(tmp.f.buyables[74].gain) + " Casualty Dimension 3 per second.<br>":""
                    let e = tmp.f.buyables[81].unlocked?"You are gaining " + format(tmp.f.buyables[81].gain) + " Casualty Dimension 4 per second.<br>":""
                    let f = tmp.f.buyables[82].unlocked?"You are gaining " + format(tmp.f.buyables[82].gain) + " Casualty Dimension 5 per second.<br>":""
                    let g = tmp.f.buyables[83].unlocked?"You are gaining " + format(tmp.f.buyables[83].gain) + " Fatality Dimension 6 per second.<br>":""
                    let h = tmp.f.buyables[84].unlocked?"You are gaining " + format(tmp.f.buyables[84].gain) + " Fatality Dimension 7 per second.<br>":""
                    return a+b+c+d+e+f+g+h
                    }
                }],
                ["bar", "NextCD"],
                "blank",
                ["column", [["row", [["clickable", 51]]]]],
                ["buyables",[7,8]]
                
            ],
            buttonStyle: {"border-color": "#3d2963"},
            unlocked() {return hasMilestone("f", 16)},
        },
        "Casuals": {
            content: [
                ["raw-html", function() {if (player.tab == "f" && player.subtabs.f.mainTabs == "Casuals") return "You have <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + formatWhole(player.f.casualty) +"</h2> casualty"}],
                "blank",
                function() {if (!hasMilestone("f",18)) return ["row", [["clickable", 12]]]},
                ["display-text", 
                function() {
                    if (hasMilestone("f",18) && player.tab == "f" && player.subtabs.f.mainTabs == "Casuals") return "You are gaining <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + formatWhole(tmp.f.clickables[12].gain.div(100)) + "</h2> casualty per second."
                }
                ],
                "blank",
                ["display-text", 
                function() {
                    if (player.tab == "f" && player.subtabs.f.mainTabs == "Casuals") return "You have made a total of " + formatWhole(player.f.casualtyTotal) + " casualty."
                }
                ],
                ["raw-html", function() {if (player.tab == "f" && player.subtabs.f.mainTabs == "Casuals") return "You have <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + formatWhole(player.f.casuals) +"</h2> "+pluralize(player.f.casuals,'casual','casuals',true)+", which "+pluralize(player.f.casuals,'boosts','boost',true)+(hasUpgrade("Us",101)?" antifolded protein effects by ^":hasUpgrade("Us",42)?" Unvaxxed Prion gain by ^":" Casualty Dimensions by ")+"<h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + format(tmp.f.caseffect) +"</h2>"}],
                "blank",
                ["row", [["column", [["buyable", 91],["clickable", 62]]], ["column", [["buyable", 92],["clickable", 61]]], ["column", [["buyable", 93],["clickable", 53]]]]],
                ["row", [["column", [["clickable", 52],["clickable", 54]]]]]
            ],
            buttonStyle: {"border-color": "#3d2963"},
            unlocked() {return hasMilestone("f", 17)},
        },
        "Casual Virus": {
            content: [
                ["raw-html", function() {if (player.tab == "f" && player.subtabs.f.mainTabs == "Casual Virus") return "You have <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + formatWhole(player.f.casualty) +"</h2> casualty"}],
                "blank",
                function() {if (!hasMilestone("f",18)) return ["row", [["clickable", 12]]]},
                ["display-text", 
                function() {
                    if (hasMilestone("f",18) && player.tab == "f" && player.subtabs.f.mainTabs == "Casual Virus") return "You are gaining <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + formatWhole(tmp.f.clickables[12].gain.div(100)) + "</h2> casualty per second."
                }
                ],
                "blank",
                ["display-text", 
                function() {
                    if (player.tab == "f" && player.subtabs.f.mainTabs == "Casual Virus") return "You have made a total of " + formatWhole(player.f.casualtyTotal) + " casualty."
                }
                ],
                "blank",
                ["raw-html", function() {if (player.tab == "f" && player.subtabs.f.mainTabs == "Casual Virus") return "You have <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + format(player.f.virus) +"</h2> casual "+pluralize(player.f.virus,'virus','viruses')+""}],
                "blank",
                ["raw-html", function() {if (player.tab == "f" && player.subtabs.f.mainTabs == "Casual Virus") return "You are gaining <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + format(tmp.f.virusGain) +"</h2> casual "+pluralize(player.f.virus,'virus','viruses')+" per second, with a limit of <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + format(tmp.f.virusGain.mul(60)) + "</h2> casual "+pluralize(player.f.virus,'virus','viruses')+""}],
                ["upgrades",[15,16,17,18]],
                ["buyables",[10]]
            ],
            buttonStyle: {"border-color": "#3d2963"},
            unlocked() {return hasMilestone("f", 20)},
        },
    },
    
    milestones: {
        0: {
            requirementDescription() { return "2 total fatality" },
            effectDescription() { return "Keep first 5 death milestones on reset." },
            done() { return player.f.total.gte(2) }
        },
        1: {
            requirementDescription() { return "3 total fatality" },
            effectDescription() { return "Keep next 6 death milestones on reset." },
            done() { return player.f.total.gte(3) }
        },
        3: {
            requirementDescription() { return "10 total fatality" },
            effectDescription() { return "Keep previous upgrades on reset." },
            done() { return player.f.total.gte(10) }
        },
        4: {
            requirementDescription() { return "25 total fatality" },
            effectDescription() { return "Keep symptom challenges on reset." },
            done() { return player.f.total.gte(25) }
        },
        5: {
            requirementDescription() { return "3,000,000 total fatality" },
            effectDescription() { return "Unlock death buyables." },
            done() { return player.f.total.gte(3e6) }
        },
        6: {
            requirementDescription() { return format(1e11) + " total fatality" },
            effectDescription() { return "Unlock fatality dimensions and death buyables cost nothing." },
            done() { return player.f.total.gte(1e11) }
        },
        7: {
            requirementDescription() { return format(3e33) + " total fatality" },
            effectDescription() { return "Gain 1% of fatality gain per second." },
            done() { return player.f.total.gte(3e33) },
            unlocked() {return hasMilestone("f",6)|| player.ct.unlocked}
        },
        8: {
            requirementDescription() { return format(4.44e44) + " total fatality" },
            effectDescription() { return "Unlock Dimension Multiplier and autobuyers buy 100x more." },
            done() { return player.f.total.gte(4.44e44) },
            unlocked() {return hasMilestone("f",6)|| player.ct.unlocked}
        },
        9: {
            requirementDescription() { return format(Decimal.pow(2,512)) + " total fatality" },
            effectDescription() { return "Gain 100% of fatality gain per second and disable prestige." },
            done() { return player.f.total.gte(Decimal.pow(2,512)) },
            unlocked() {return hasMilestone("f",6)|| player.ct.unlocked}
        },
        10: {
            requirementDescription() { return format("6.969e420") + " total fatality" },
            effectDescription() { return "Unlock Dimension Shifts and dimensions cost nothing." },
            done() { return player.f.total.gte("6.969e420") },
            unlocked() {return hasMilestone("f",9)|| player.ct.unlocked}
        },
        11: {
            requirementDescription() { return format("1.337e1337") + " total fatality" },
            effectDescription() { return "Unlock Multiplier Boosts and buy max Dimension Boosts." },
            done() { return player.f.total.gte("1.337e1337") },
            unlocked() {return player.f.points.gte(Decimal.pow(10,1e3)) || hasMilestone("f",11)|| player.ct.unlocked}
        },
        12: {
            requirementDescription() { return format("5.095e5095") + " total fatality" },
            effectDescription() { return "Unlock Casualty and buy max Multiplier Boosts." },
            done() { return player.f.total.gte(Decimal.pow(10,5095).mul(5.095)) },
            unlocked() {return player.f.points.gte(Decimal.pow(10,4e3)) || hasMilestone("f",12)|| player.ct.unlocked}
        },
        13: {
            requirementDescription() { return "50 total casualty" },
            effectDescription() { return "Multiplier Boosts don't reset Dimension Boosts and unlock Auto Sacrifice." },
            done() { return player.f.casualtyTotal.gte(50) },
            unlocked() {return player.f.casualtyTotal.gte(1)|| player.ct.unlocked}
        },
        14: {
            requirementDescription() { return "10,000,000 total casualty" },
            effectDescription() { return "Dimension Boosts and Sacrifice reset nothing." },
            done() { return player.f.casualtyTotal.gte(1e7) },
            unlocked() {return player.f.casualtyTotal.gte(1e6)|| player.ct.unlocked}
        },
        15: {
            requirementDescription() { return format(1e12) + " total casualty" },
            effectDescription() { return "Multiplier Boosts reset nothing." },
            done() { return player.f.casualtyTotal.gte(1e12) },
            unlocked() {return player.f.casualtyTotal.gte(1e9)|| player.ct.unlocked}
        },
        16: {
            requirementDescription() { return format(1e14) + " total casualty" },
            effectDescription() { return "Unlock Casualty Dimensions." },
            done() { return player.f.casualtyTotal.gte(1e14) },
            unlocked() {return player.f.casualtyTotal.gte(1e12)|| player.ct.unlocked}
        },
        17: {
            requirementDescription() { return format("4.7e470") + " total casualty" },
            effectDescription() { return "Unlock Casuals." },
            done() { return player.f.casualtyTotal.gte("4.70e470") },
            unlocked() {return player.f.casualtyTotal.gte(1e100)|| player.ct.unlocked}
        },
        18: {
            requirementDescription() { return format("ee3") + " total casualty" },
            effectDescription() { return "Gain 1% of casualty gain per second, autobuy Casualty Multiplier, Casualty Multiplier costs nothing, and disable prestige." },
            done() { return player.f.casualtyTotal.gte(Decimal.pow(10,1e3)) },
            toggles: [["f", "cmultauto"]],
            unlocked() {return player.f.casualtyTotal.gte("e1000")|| player.ct.unlocked}
        },
        19: {
            requirementDescription() { return format("5.555e5555") + " total casualty" },
            effectDescription() { return "Autobuy Casualty Dimensions and they cost nothing." },
            done() { return player.f.casualtyTotal.gte("5.555e5555") },
            toggles: [["f", "cdauto"]],
            unlocked() {return player.f.casualtyTotal.gte(Decimal.pow(10,1e3))|| player.ct.unlocked}
        },
        20: {
            requirementDescription() { return format("ee4") + " total casualty" },
            effectDescription() { return "Unlock Casual Virus and Replicated Boost Autobuyer." },
            done() { return player.f.casualtyTotal.gte("ee4") },
            unlocked() {return player.f.casualtyTotal.gte("e5000")|| player.ct.unlocked}
        },
        21: {
            requirementDescription() { return format("ee5") + " total casualty" },
            effectDescription() { return "Unlock Casual Virus buyables." },
            done() { return player.f.casualtyTotal.gte("ee5") },
            unlocked() {return player.f.casualtyTotal.gte("ee4")|| player.ct.unlocked}
        },
    },
    clickables: {
        rows: 6,
        cols: 4,
        11: {
            display() {
                return "<h2>Max All (M)</h2>"
            },
            canClick() {return true},
            onClick() {
                layers.f.buyables[11].buyMax(Decimal.tetrate(10,1.79e308))
                layers.f.buyables[12].buyMax(Decimal.tetrate(10,1.79e308))
                layers.f.buyables[13].buyMax(Decimal.tetrate(10,1.79e308))
                layers.f.buyables[14].buyMax(Decimal.tetrate(10,1.79e308))
                layers.f.buyables[21].buyMax(Decimal.tetrate(10,1.79e308))
                layers.f.buyables[22].buyMax(Decimal.tetrate(10,1.79e308))
                if (getBuyableAmount("f",32).gte(1)) layers.f.buyables[23].buyMax(Decimal.tetrate(10,1.79e308))
                if (getBuyableAmount("f",32).gte(2)) layers.f.buyables[24].buyMax(Decimal.tetrate(10,1.79e308))
                layers.f.buyables[31].buyMax(Decimal.tetrate(10,1.79e308))
            },
            style: {'height':'130px', 'width':'130px'},
        },
        12: {
            gain() { 
                let f = player.f.points.add(1).max(1)
                if (f.lt("5e5095") && inChallenge("ct",32)) return decimalZero
                f = Decimal.pow(10,f.log10().div(5095).sub(1)).max(1).mul(tmp.f.clickables[12].gainmult)
                return f.floor()
            },
            next() {
                let gain = tmp.f.clickables[12].gain.add(1).max(1)
                let next = Decimal.pow(10,gain.div(tmp.f.clickables[12].gainmult).log10().add(1).max(1).mul(5095))
                return next
            },
            gainmult() {
                let mult = tmp.f.buyables[34].effect 
                if (hasFUpg(94)) mult = mult.mul(getFUpgEff(94))
                if (hasFUpg(104)) mult = mult.mul(getFUpgEff(104))
                if (hasFUpg(114)) mult = mult.mul(getFUpgEff(114))
                if (hasFUpg(85)) mult = mult.mul(getFUpgEff(85))
                if (hasMilestone("Us",5)) return mult.mul(tmp.ct.effect)
                return mult.mul(tmp.ct.effect).mul(tmp.Up.prpEff[0])
            },
            display() {
                let dis = "Reset Dimensions for +<h3>" + formatWhole(tmp.f.clickables[12].gain) + "</h3> casualty<br>"
                if (tmp.f.clickables[12].gain.lt(1000)) {
                if (player.f.points.gte(Decimal.pow(10,5095).mul(5))) dis += "Next at " + format(tmp.f.clickables[12].next) + " fatality"
                else dis += "Req: 5.095e5,095 fatality"
                }
                if (tmp.f.clickables[12].gain.div(player.f.resettime).gte(10)) dis += "<br>" + format(tmp.f.clickables[12].gain.div(player.f.resettime)) + "/s"
                else dis += "<br>" + format(tmp.f.clickables[12].gain.div(player.f.resettime).mul(60)) + "/min"
                return dis
            },
            canClick() {
                return player.f.points.gte(Decimal.pow(10,5095).mul(5)) && !hasMilestone("f",18)
            },
            onClick() {
                if (!hasMilestone("f",18)) {player.f.casualty = player.f.casualty.add(tmp.f.clickables[12].gain)
                player.f.casualtyTotal = player.f.casualtyTotal.add(tmp.f.clickables[12].gain)
                player.f.cpm = player.f.cpm.max(tmp.f.clickables[12].gain.div(player.f.resettime))
                startCChallenge(0)
                }
            },
            style: {'height':'130px', 'width':'175px', 'font-size':'13px',
            'background-color'() {
                let points = player.f.points
                let color = "#bf8f8f"
                if (points.gte(Decimal.pow(10,5095).mul(5))) color = "#3d2963"
                return color
            }
        }
        },
        14: {
            display() {
                return "<h2>Buy Max</h2>"
            },
            canClick() {return true},
            onClick() {
                layers.f.buyables[34].buyMax()
            },
            style: {'height':'130px', 'width':'130px',
                "background-color"() {
                    let color = "#3d2963"
                    return color
                }
            },
        },
        13: {
            display() {
                if (player.tab != "f") return 
                let dis = "<h2>Sacrifice</h2><br>Multiply Fatality Dimension 8 by " + format(this.effectnext().max(1)) + "."
                dis += "<br>Multiplier: " + format(this.effect()) + "x"
                return dis
            },
            effect() {
                let eff = player.f.sac.add(1).max(1).pow(0.025)
                if (hasChallenge("f",32)) eff = eff.pow(3)
                if (eff.gte(Decimal.pow(10,1e8))) eff = eff.div(Decimal.pow(10,1e8)).pow(0.2).mul(Decimal.pow(10,1e8))
                return eff
            },
            effectnext() {
                let eff = player.f.buyables[11].pow(0.025)
                if (hasChallenge("f",32)) eff = eff.pow(3)
                if (eff.gte(Decimal.pow(10,1e8))) eff = eff.div(Decimal.pow(10,1e8)).pow(0.2).mul(Decimal.pow(10,1e8))
                return eff.div(this.effect())
            },
            canClick() {return this.effectnext().gte(1) && player.f.buyables[24].gte(1)},
            onClick() {
                player.f.sac = player.f.sac.add(player.f.buyables[11])
                if (!hasMilestone("f",14)) {
                player.f.buyables[11] = decimalZero
                player.f.buyables[12] = decimalZero
                player.f.buyables[13] = decimalZero
                player.f.buyables[14] = decimalZero
                player.f.buyables[21] = decimalZero
                player.f.buyables[22] = decimalZero
                player.f.buyables[23] = decimalZero
                }
            },
            unlocked() {return hasFUpg(83)},
            style: {'height':'130px', 'width':'130px'},
        },
        21: {
            display() {
                if (player.f.d1auto) return "<h2>ON</h2>"
                else return "<h2>OFF</h2>"
            },
            canClick() {return true},
            onClick() {
                if (player.f.d1auto) player.f.d1auto = false 
                else player.f.d1auto = true
            },
            unlocked() {
                return hasChallenge("f",11)
            },
            style: {'height':'50px', 'min-height':'50px', 'width':'50px', 'background-color':"#3d2963"},
        },
        22: {
            display() {
                if (player.f.d2auto) return "<h2>ON</h2>"
                else return "<h2>OFF</h2>"
            },
            canClick() {return true},
            onClick() {
                if (player.f.d2auto) player.f.d2auto = false 
                else player.f.d2auto = true
            },
            unlocked() {
                return hasChallenge("f",11)
            },
            style: {'height':'50px', 'min-height':'50px', 'width':'50px', 'background-color':"#3d2963"},
        },
        23: {
            display() {
                if (player.f.d3auto) return "<h2>ON</h2>"
                else return "<h2>OFF</h2>"
            },
            canClick() {return true},
            onClick() {
                if (player.f.d3auto) player.f.d3auto = false 
                else player.f.d3auto = true
            },
            unlocked() {
                return hasChallenge("f",11)
            },
            style: {'height':'50px', 'min-height':'50px', 'width':'50px', 'background-color':"#3d2963"},
        },
        24: {
            display() {
                if (player.f.d4auto) return "<h2>ON</h2>"
                else return "<h2>OFF</h2>"
            },
            canClick() {return true},
            onClick() {
                if (player.f.d4auto) player.f.d4auto = false 
                else player.f.d4auto = true
            },
            unlocked() {
                return hasChallenge("f",12)
            },
            style: {'height':'50px', 'min-height':'50px', 'width':'50px', 'background-color':"#3d2963"},
        },
        31: {
            display() {
                if (player.f.d5auto) return "<h2>ON</h2>"
                else return "<h2>OFF</h2>"
            },
            canClick() {return true},
            onClick() {
                if (player.f.d5auto) player.f.d5auto = false 
                else player.f.d5auto = true
            },
            unlocked() {
                return hasChallenge("f",12)
            },
            style: {'height':'50px', 'min-height':'50px', 'width':'50px', 'background-color':"#3d2963"},
        },
        32: {
            display() {
                if (player.f.d6auto) return "<h2>ON</h2>"
                else return "<h2>OFF</h2>"
            },
            canClick() {return true},
            onClick() {
                if (player.f.d6auto) player.f.d6auto = false 
                else player.f.d6auto = true
            },
            unlocked() {
                return hasChallenge("f",12)
            },
            style: {'height':'50px', 'min-height':'50px', 'width':'50px', 'background-color':"#3d2963"},
        },
        33: {
            display() {
                if (player.f.d7auto) return "<h2>ON</h2>"
                else return "<h2>OFF</h2>"
            },
            canClick() {return true},
            onClick() {
                if (player.f.d7auto) player.f.d7auto = false 
                else player.f.d7auto = true
            },
            unlocked() {
                return hasChallenge("f",21)
            },
            style: {'height':'50px', 'min-height':'50px', 'width':'50px', 'background-color':"#3d2963"},
        },
        34: {
            display() {
                if (player.f.d8auto) return "<h2>ON</h2>"
                else return "<h2>OFF</h2>"
            },
            canClick() {return true},
            onClick() {
                if (player.f.d8auto) player.f.d8auto = false 
                else player.f.d8auto = true
            },
            unlocked() {
                return hasChallenge("f",21)
            },
            style: {'height':'50px', 'min-height':'50px', 'width':'50px', 'background-color':"#3d2963"},
        },
        41: {
            display() {
                if (player.f.multauto) return "<h2>ON</h2>"
                else return "<h2>OFF</h2>"
            },
            canClick() {return true},
            onClick() {
                if (player.f.multauto) player.f.multauto = false 
                else player.f.multauto = true
            },
            unlocked() {
                return hasChallenge("f",21)
            },
            style: {'height':'50px', 'min-height':'50px', 'width':'50px', 'background-color':"#3d2963"},
        },
        42: {
            display() {
                if (player.f.boostauto) return "<h2>ON</h2>"
                else return "<h2>OFF</h2>"
            },
            canClick() {return true},
            onClick() {
                if (player.f.boostauto) player.f.boostauto = false 
                else player.f.boostauto = true
            },
            unlocked() {
                return hasChallenge("f",22)
            },
            style: {'height':'50px', 'min-height':'50px', 'width':'50px', 'background-color':"#3d2963"},
        },
        43: {
            display() {
                if (player.f.multbauto) return "<h2>ON</h2>"
                else return "<h2>OFF</h2>"
            },
            canClick() {return true},
            onClick() {
                if (player.f.multbauto) player.f.multbauto = false 
                else player.f.multbauto = true
            },
            unlocked() {
                return hasChallenge("f",22)
            },
            style: {'height':'50px', 'min-height':'50px', 'width':'50px', 'background-color':"#3d2963"},
        },
        44: {
            display() {
                if (player.f.sacauto) return "<h2>ON</h2>"
                else return "<h2>OFF</h2>"
            },
            canClick() {return true},
            onClick() {
                if (player.f.sacauto) player.f.sacauto = false 
                else player.f.sacauto = true
            },
            unlocked() {
                return hasMilestone("f",13)
            },
            style: {'height':'50px', 'min-height':'50px', 'width':'50px', 'background-color':"#3d2963"},
        },
        51: {
            display() {
                return "<h2>Max All (M)</h2>"
            },
            canClick() {return true},
            onClick() {
                layers.f.buyables[71].buyMax(Decimal.tetrate(10,1.79e308))
                layers.f.buyables[72].buyMax(Decimal.tetrate(10,1.79e308))
                if (tmp.f.buyables[73].unlocked) layers.f.buyables[73].buyMax(Decimal.tetrate(10,1.79e308))
                if (tmp.f.buyables[74].unlocked) layers.f.buyables[74].buyMax(Decimal.tetrate(10,1.79e308))
                if (tmp.f.buyables[81].unlocked) layers.f.buyables[81].buyMax(Decimal.tetrate(10,1.79e308))
                if (tmp.f.buyables[82].unlocked) layers.f.buyables[82].buyMax(Decimal.tetrate(10,1.79e308))
                if (tmp.f.buyables[83].unlocked) layers.f.buyables[83].buyMax(Decimal.tetrate(10,1.79e308))
                if (tmp.f.buyables[84].unlocked) layers.f.buyables[84].buyMax(Decimal.tetrate(10,1.79e308))
            },
            style: {'height':'130px', 'width':'130px', 'background-color':"#3d2963"},
        },
        52: {
            display() {
                let dis = "Reset casuals for a Replicated Boost.<br>"
                dis += "Replicated Boosts: " + formatWhole(player.f.cboosts) + "/" + formatWhole(tmp.f.buyables[93].effect)
                return dis
            },
            canClick() {return player.f.casuals.gte(1.796e308) && player.f.cboosts.lt(tmp.f.buyables[93].effect) },
            onClick() {
                if (!hasFUpg(181)) player.f.casuals = decimalOne
                if (!hasFUpg(181)) player.f.cboosts = player.f.cboosts.add(1).max(1)
                else player.f.cboosts = tmp.f.buyables[93].effect
            },
            style: {'height':'130px', 'width':'175px', 'font-size':'13px',
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.f.clickables[52].canClick) color = "#3d2963"
                return color
            }}
        },
        53: {
            display() {
                if (player.f.crbauto) return "<h2>ON</h2>"
                else return "<h2>OFF</h2>"
            },
            canClick() {return true},
            onClick() {
                if (player.f.crbauto) player.f.crbauto = false 
                else player.f.crbauto = true
            },
            unlocked() {
                return hasMilestone("f",20)
            },
            style: {'height':'50px', 'min-height':'50px', 'width':'50px', 'background-color':"#3d2963"},
        },
        54: {
            display() {
                if (player.f.rbauto) return "<h2>ON</h2>"
                else return "<h2>OFF</h2>"
            },
            canClick() {return true},
            onClick() {
                if (player.f.rbauto) player.f.rbauto = false 
                else player.f.rbauto = true
            },
            unlocked() {
                return hasMilestone("f",20)
            },
            style: {'height':'50px', 'min-height':'50px', 'width':'50px', 'background-color':"#3d2963"},
        },
        61: {
            display() {
                if (player.f.iauto) return "<h2>ON</h2>"
                else return "<h2>OFF</h2>"
            },
            canClick() {return true},
            onClick() {
                if (player.f.iauto) player.f.iauto = false 
                else player.f.iauto = true
            },
            unlocked() {
                return hasFUpg(182)
            },
            style: {'height':'50px', 'min-height':'50px', 'width':'50px', 'background-color':"#3d2963"},
        },
        62: {
            display() {
                if (player.f.rmultauto) return "<h2>ON</h2>"
                else return "<h2>OFF</h2>"
            },
            canClick() {return true},
            onClick() {
                if (player.f.rmultauto) player.f.rmultauto = false 
                else player.f.rmultauto = true
            },
            unlocked() {
                return hasFUpg(183)
            },
            style: {'height':'50px', 'min-height':'50px', 'width':'50px', 'background-color':"#3d2963"},
        },
    },
    buyables: {
		rows: 10,
        cols: 4,
        11: {
			title: "Fatality Dimension 1",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x=player.f.d1
                let cost = Decimal.pow(1e3, x).mul(1e11)
                let scale = x.sub(330)
                if (cost.gte(Decimal.pow(10,1e3)) && !(hasUpgrade("e",186) && !inChallenge("ct",32))) cost = cost.mul(this.multInc().pow(scale.mul(scale.add(1).max(1).div(2))))
                return cost.floor()
            },
            multInc() {
                return tmp.f.DimScaling
            },
            base() { 
                let base = tmp.f.multpd
                return base
            },
            gain(x=player[this.layer].buyables[this.id]) {
                let gain = this.effect().mul(x)
                return gain
            },
            total() {
                let total = getBuyableAmount("f", 11)
                return total
            },
            bought() {
                let bought = player.f.d1
                return bought
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].bought
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x).mul(tmp.f.fDimMult)
                if (hasFUpg(91) && !inChallenge("f",61) && !inChallenge("f",62)) eff = eff.mul(getFUpgEff(91))
                if (hasFUpg(34) && !inChallenge("f",61) && !inChallenge("f",62)) eff = eff.mul(getFUpgEff(34))
                if (inChallenge("f", 11)) eff = eff.div("1.8e308")
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Dimensions") return 
                return "Produces fatality power.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" fatality\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total()) + "(" + formatWhole(this.bought()) + ")"
            },
            unlocked() { return hasMilestone("f", 6) }, 
            canAfford() {
                    return player.f.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",10)) player.f.points = player.f.points.sub(cost).max(0)	
                    player.f.d1 = player.f.d1.add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(b) { //log10(cost/1e1001)/log10(Inc) = (x^2+x)/2+3x
                let cost = this.cost()
                let f = player.f.points
                let z = this.multInc().log10()
                let s = f.div("e1001").log10()
                let m = Decimal.tetrate(10,((hasUpgrade("e",186) && !inChallenge("ct",32))+0)*1.79e308).add(329)
                let max = f.div(1e11).max(10).log10().div(3).ceil().min(m)
                if (max.gte(m)) max = max.add(s.mul(2).add(3).mul(4).mul(z).add(z.pow(2)).add(36).pow(0.5).sub(z).sub(6).div(z.mul(2))).ceil()
                let diff = max.sub(player.f.d1).min(b)
                cost = Decimal.sub(1,Decimal.pow(1e3,max)).div(-999).mul(1e11)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",10)) player.f.points = player.f.points.sub(cost).max(0)	
                    player.f.d1 = player.f.d1.add(diff)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px',},
        },
        12: {
			title: "Fatality Dimension 2",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x=player.f.d2
                let cost = Decimal.pow(1e4, x).mul(1e14)
                let scale = x.sub(247)
                if (cost.gte(Decimal.pow(10,1e3)) && !(hasUpgrade("e",186) && !inChallenge("ct",32))) cost = cost.mul(this.multInc().pow(scale.mul(scale.add(1).max(1).div(2))))
                return cost.floor()
            },
            multInc() {
                return tmp.f.DimScaling
            },
            base() { 
                let base = tmp.f.multpd
                return base
            },
            gain(x=player[this.layer].buyables[this.id]) {
                let gain = this.effect().mul(x).div(10)
                return gain
            },
            total() {
                let total = getBuyableAmount("f", 12)
                return total
            },
            bought() {
                let bought = player.f.d2
                return bought
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].bought
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x).mul(tmp.f.fDimMult)
                if (hasFUpg(92) && !inChallenge("f",61) && !inChallenge("f",62)) eff = eff.mul(getFUpgEff(92))
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Dimensions") return 
                return "Produces Fatality Dimension 1.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" fatality\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total()) + "(" + formatWhole(this.bought()) + ")"
            },
            unlocked() { return hasMilestone("f", 6) }, 
            canAfford() {
                    return player.f.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",10)) player.f.points = player.f.points.sub(cost).max(0)
                    player.f.d2 = player.f.d2.add(1).max(1)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(b) { 
                let cost = this.cost()
                let f = player.f.points
                let z = this.multInc().log10()
                let s = f.div("e1001").log10()
                let m = Decimal.tetrate(10,((hasUpgrade("e",186) && !inChallenge("ct",32))+0)*1.79e308).add(246)
                let max = f.div(1e14).max(10).log10().div(4).ceil().min(m)
                if (max.gte(m)) max = max.add(s.mul(2).add(4).mul(4).mul(z).add(z.pow(2)).add(64).pow(0.5).sub(z).sub(8).div(z.mul(2))).ceil()
                let diff = max.sub(player.f.d2).min(b)
                cost = Decimal.sub(1,Decimal.pow(1e4,max)).div(-9999).mul(1e14)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",10)) player.f.points = player.f.points.sub(cost).max(0)	
                    player.f.d2 = player.f.d2.add(diff)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px'},
        },
        13: {
			title: "Fatality Dimension 3",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x=player.f.d3
                let cost = Decimal.pow(1e5, x).mul(1e15)
                let scale = x.sub(197)
                if (cost.gte(Decimal.pow(10,1e3)) && !(hasUpgrade("e",186) && !inChallenge("ct",32))) cost = cost.mul(this.multInc().pow(scale.mul(scale.add(1).max(1).div(2))))
                return cost.floor()
            },
            multInc() {
                return tmp.f.DimScaling
            },
            base() { 
                let base = tmp.f.multpd
                return base
            },
            gain(x=player[this.layer].buyables[this.id]) {
                let gain = this.effect().mul(x).div(10)
                return gain
            },
            total() {
                let total = getBuyableAmount("f", 13)
                return total
            },
            bought() {
                let bought = player.f.d3
                return bought
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].bought
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x).mul(tmp.f.fDimMult)
                if (hasFUpg(101) && !inChallenge("f",61) && !inChallenge("f",62)) eff = eff.mul(getFUpgEff(101))
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Dimensions") return 
                return "Produces Fatality Dimension 2.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" fatality\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total()) + "(" + formatWhole(this.bought()) + ")"
            },
            unlocked() { return hasMilestone("f", 6) }, 
            canAfford() {
                    return player.f.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",10)) player.f.points = player.f.points.sub(cost).max(0)
                    player.f.d3 = player.f.d3.add(1).max(1)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(b) { 
                let cost = this.cost()
                let f = player.f.points
                let z = this.multInc().log10()
                let s = f.div(Decimal.pow(10,1e3)).log10()
                let m = Decimal.tetrate(10,((hasUpgrade("e",186) && !inChallenge("ct",32))+0)*1.79e308).add(196)
                let max = f.div(1e15).max(10).log10().div(5).ceil().min(m)
                if (max.gte(m)) max = max.add(s.mul(2).add(5).mul(4).mul(z).add(z.pow(2)).add(100).pow(0.5).sub(z).sub(10).div(z.mul(2))).ceil()
                let diff = max.sub(player.f.d3).min(b)
                cost = Decimal.sub(1,Decimal.pow(1e5,max)).div(-99999).mul(1e15)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",10)) player.f.points = player.f.points.sub(cost).max(0)	
                    player.f.d3 = player.f.d3.add(diff)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px'},
        },
        14: {
			title: "Fatality Dimension 4",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x=player.f.d4
                let cost = Decimal.pow(1e6, x).mul(1e18)
                let scale = x.sub(164)
                if (cost.gte(Decimal.pow(10,1e3)) && !(hasUpgrade("e",186) && !inChallenge("ct",32))) cost = cost.mul(this.multInc().pow(scale.mul(scale.add(1).max(1).div(2))))
                return cost.floor()
            },
            multInc() {
                return tmp.f.DimScaling
            },
            base() { 
                let base = tmp.f.multpd
                return base
            },
            gain(x=player[this.layer].buyables[this.id]) {
                let gain = this.effect().mul(x).div(10)
                return gain
            },
            total() {
                let total = getBuyableAmount("f", 14)
                return total
            },
            bought() {
                let bought = player.f.d4
                return bought
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].bought
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x).mul(tmp.f.fDimMult)
                if (hasFUpg(102) && !inChallenge("f",61) && !inChallenge("f",62)) eff = eff.mul(getFUpgEff(102))
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Dimensions") return 
                return "Produces Fatality Dimension 3.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" fatality\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total()) + "(" + formatWhole(this.bought()) + ")"
            },
            unlocked() { return hasMilestone("f", 6) }, 
            canAfford() {
                    return player.f.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",10)) player.f.points = player.f.points.sub(cost).max(0)
                    player.f.d4 = player.f.d4.add(1).max(1)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(b) { 
                let cost = this.cost()
                let f = player.f.points
                let z = this.multInc().log10()
                let s = f.div("e1002").log10()
                let m = Decimal.tetrate(10,((hasUpgrade("e",186) && !inChallenge("ct",32))+0)*1.79e308).add(163)
                let max = f.div(1e18).max(10).log10().div(6).ceil().min(m)
                if (max.gte(m)) max = max.add(s.mul(2).add(6).mul(4).mul(z).add(z.pow(2)).add(144).pow(0.5).sub(z).sub(12).div(z.mul(2))).ceil()
                let diff = max.sub(player.f.d4).min(b)
                cost = Decimal.sub(1,Decimal.pow(1e6,max)).div(-999999).mul(1e18)
                if (tmp[this.layer].buyables[this.id].canAfford) { 
                    if (!hasMilestone("f",10)) player.f.points = player.f.points.sub(cost).max(0)	
                    player.f.d4 = player.f.d4.add(diff)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px'},
        },
        21: {
			title: "Fatality Dimension 5",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x=player.f.d5
                let cost = Decimal.pow(1e8, x).mul(1e21)
                let scale = x.sub(123)
                if (cost.gte(Decimal.pow(10,1e3)) && !(hasUpgrade("e",186) && !inChallenge("ct",32))) cost = cost.mul(this.multInc().pow(scale.mul(scale.add(1).max(1).div(2))))
                return cost.floor()
            },
            multInc() {
                return tmp.f.DimScaling
            },
            base() { 
                let base = tmp.f.multpd
                return base
            },
            gain(x=player[this.layer].buyables[this.id]) {
                let gain = this.effect().mul(x).div(10)
                return gain
            },
            total() {
                let total = getBuyableAmount("f", 21)
                return total
            },
            bought() {
                let bought = player.f.d5
                return bought
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].bought
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x).mul(tmp.f.fDimMult)
                if (hasFUpg(102) && !inChallenge("f",61) && !inChallenge("f",62)) eff = eff.mul(getFUpgEff(102))
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Dimensions") return 
                return "Produces Fatality Dimension 4.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" fatality\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total()) + "(" + formatWhole(this.bought()) + ")"
            },
            unlocked() { return hasMilestone("f", 6) }, 
            canAfford() {
                    return player.f.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",10)) player.f.points = player.f.points.sub(cost).max(0)
                    player.f.d5 = player.f.d5.add(1).max(1)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(b) { 
                let cost = this.cost()
                let f = player.f.points
                let z = this.multInc().log10()
                let s = f.div("e1005").log10()
                let m = Decimal.tetrate(10,((hasUpgrade("e",186) && !inChallenge("ct",32))+0)*1.79e308).add(122)
                let max = f.div(1e21).max(10).log10().div(8).ceil().min(m)
                if (max.gte(m)) max = max.add(s.mul(2).add(8).mul(4).mul(z).add(z.pow(2)).add(256).pow(0.5).sub(z).sub(16).div(z.mul(2))).ceil()
                let diff = max.sub(player.f.d5).min(b)
                cost = Decimal.sub(1,Decimal.pow(1e8,max)).div(-99999999).mul(1e21)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",10)) player.f.points = player.f.points.sub(cost).max(0)	
                    player.f.d5 = player.f.d5.add(diff)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px'},
        },
        22: {
			title: "Fatality Dimension 6",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x=player.f.d6
                let cost = Decimal.pow(1e10, x).mul(1e26)
                let scale = x.sub(98)
                if (cost.gte(Decimal.pow(10,1e3)) && !(hasUpgrade("e",186) && !inChallenge("ct",32))) cost = cost.mul(this.multInc().pow(scale.mul(scale.add(1).max(1).div(2))))
                return cost.floor()
            },
            multInc() {
                return tmp.f.DimScaling
            },
            base() { 
                let base = tmp.f.multpd
                return base
            },
            gain(x=player[this.layer].buyables[this.id]) {
                let gain = this.effect().mul(x).div(10)
                return gain
            },
            total() {
                let total = getBuyableAmount("f", 22)
                return total
            },
            bought() {
                let bought = player.f.d6
                return bought
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].bought
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x).mul(tmp.f.fDimMult)
                if (hasFUpg(101) && !inChallenge("f",61) && !inChallenge("f",62)) eff = eff.mul(getFUpgEff(101))
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Dimensions") return 
                return "Produces Fatality Dimension 5.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" fatality\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total()) + "(" + formatWhole(this.bought()) + ")"
            },
            unlocked() { return hasMilestone("f", 6) }, 
            canAfford() {
                    return player.f.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",10)) player.f.points = player.f.points.sub(cost).max(0)
                    player.f.d6 = player.f.d6.add(1).max(1)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(b) { 
                let cost = this.cost()
                let f = player.f.points
                let z = this.multInc().log10()
                let s = f.div("e1006").log10()
                let m = Decimal.tetrate(10,((hasUpgrade("e",186) && !inChallenge("ct",32))+0)*1.79e308).add(97)
                let max = f.div(1e26).max(10).log10().div(10).ceil().min(m)
                if (max.gte(m)) max = max.add(s.mul(2).add(10).mul(4).mul(z).add(z.pow(2)).add(400).pow(0.5).sub(z).sub(20).div(z.mul(2))).ceil()
                let diff = max.sub(player.f.d6).min(b)
                cost = Decimal.sub(1,Decimal.pow(1e10,max)).div(-9999999999).mul(1e26)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",10)) player.f.points = player.f.points.sub(cost).max(0)	
                    player.f.d6 = player.f.d6.add(diff)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px'},
        },
        23: {
			title: "Fatality Dimension 7",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x=player.f.d7
                let cost = Decimal.pow(1e12, x).mul("e435")
                let scale = x.sub(48)
                if (cost.gte(Decimal.pow(10,1e3)) && !(hasUpgrade("e",186) && !inChallenge("ct",32))) cost = cost.mul(this.multInc().pow(scale.mul(scale.add(1).max(1).div(2))))
                return cost.floor()
            },
            multInc() {
                return tmp.f.DimScaling
            },
            base() { 
                let base = tmp.f.multpd
                return base
            },
            gain(x=player[this.layer].buyables[this.id]) {
                let gain = this.effect().mul(x).div(10)
                return gain
            },
            total() {
                let total = getBuyableAmount("f", 23)
                return total
            },
            bought() {
                let bought = player.f.d7
                return bought
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].bought
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x).mul(tmp.f.fDimMult)
                if (hasFUpg(92) && !inChallenge("f",61) && !inChallenge("f",62)) eff = eff.mul(getFUpgEff(92))
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Dimensions") return 
                return "Produces Fatality Dimension 6.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" fatality\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total()) + "(" + formatWhole(this.bought()) + ")"
            },
            unlocked() { return player.f.buyables[32].gte(1) }, 
            canAfford() {
                    return player.f.points.gte(tmp[this.layer].buyables[this.id].cost) && !inChallenge("f",22)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",10)) player.f.points = player.f.points.sub(cost).max(0)
                    player.f.d7 = player.f.d7.add(1).max(1)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(b) { 
                let cost = this.cost()
                let f = player.f.points
                let z = this.multInc().log10()
                let s = f.div("e1011").log10()
                let m = Decimal.tetrate(10,((hasUpgrade("e",186) && !inChallenge("ct",32))+0)*1.79e308).add(47)
                let max = f.div("e435").max(10).log10().div(12).ceil().min(m)
                if (max.gte(m)) max = max.add(s.mul(2).add(12).mul(4).mul(z).add(z.pow(2)).add(576).pow(0.5).sub(z).sub(24).div(z.mul(2))).ceil()
                let diff = max.sub(player.f.d7).min(b)
                cost = Decimal.sub(1,Decimal.pow(1e12,max)).div(-1e12).mul("e435")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",10)) player.f.points = player.f.points.sub(cost).max(0)	
                    player.f.d7 = player.f.d7.add(diff)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px'},
        },
        24: {
			title: "Fatality Dimension 8",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x=player.f.d8
                let cost = Decimal.pow(1e15, x).mul("e560")
                let scale = x.sub(30)
                if (cost.gte(Decimal.pow(10,1e3)) && !(hasUpgrade("e",186) && !inChallenge("ct",32))) cost = cost.mul(this.multInc().pow(scale.mul(scale.add(1).max(1).div(2))))
                return cost.floor()
            },
            multInc() {
                return tmp.f.DimScaling
            },
            base() { 
                let base = tmp.f.multpd
                return base
            },
            gain(x=player[this.layer].buyables[this.id]) {
                let gain = this.effect().mul(x).div(10)
                return gain
            },
            total() {
                let total = getBuyableAmount("f", 24)
                return total
            },
            bought() {
                let bought = player.f.d8
                return bought
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].bought
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x).mul(tmp.f.fDimMult)
                if (hasFUpg(91) && !inChallenge("f",61) && !inChallenge("f",62)) eff = eff.mul(getFUpgEff(91))
                if (!inChallenge("f",61)) eff = eff.mul(tmp.f.clickables[13].effect)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Dimensions") return 
                return "Produces Fatality Dimension 7.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" fatality\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total()) + "(" + formatWhole(this.bought()) + ")"
            },
            unlocked() { return player.f.buyables[32].gte(2) }, 
            canAfford() {
                    return player.f.points.gte(tmp[this.layer].buyables[this.id].cost) && !inChallenge("f",22)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",10)) player.f.points = player.f.points.sub(cost).max(0)
                    player.f.d8 = player.f.d8.add(1).max(1)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(b) { 
                let cost = this.cost()
                let f = player.f.points
                let z = this.multInc().log10()
                let s = f.div("e1010").log10()
                let m = Decimal.tetrate(10,((hasUpgrade("e",186) && !inChallenge("ct",32))+0)*1.79e308).add(29)
                let max = f.div("e560").max(10).log10().div(15).ceil().min(m)
                if (max.gte(m)) max = max.add(s.mul(2).add(15).mul(4).mul(z).add(z.pow(2)).add(900).pow(0.5).sub(z).sub(30).div(z.mul(2))).ceil()
                let diff = max.sub(player.f.d8).min(b)
                cost = Decimal.sub(1,Decimal.pow(1e15,max)).div(-1e15).mul("e560")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",10)) player.f.points = player.f.points.sub(cost).max(0)	
                    player.f.d8 = player.f.d8.add(diff)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px'},
        },
        31: {
			title: "Fatality Dimension Multiplier",
			cost(x=player.f.mult) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(10, x).mul(1e45)
                let scale = x.sub(955)
                if (cost.gte(Decimal.pow(10,1e3)) && !(hasUpgrade("e",186) && !inChallenge("ct",32))) cost = cost.mul(this.multInc().pow(scale.mul(scale.add(1).max(1).div(2))))
                return cost.floor()
            },
            multInc() {
                return tmp.f.DimScaling
            },
            base() { 
                let base = new Decimal(1.1)
                if (hasFUpg(63)) base = base.add(getFUpgEff(63))
                if (hasFUpg(64)) base = base.add(getFUpgEff(64))
                base = base.mul(layers.f.buyables[33].effect())
                return base
            },
            gain(x=player[this.layer].buyables[this.id]) {
                let gain = this.effect().mul(x).div(10)
                return gain
            },
            total() {
                let total = getBuyableAmount("f", 31)
                return total
            },
            bought() {
                let bought = player.f.mult
                return bought
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].bought
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Dimensions") return 
                return "Multiply fatality dimensions by " + format(this.base()) + "\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" fatality\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total()) + "(" + formatWhole(this.bought()) + ")"
            },
            unlocked() { return hasMilestone("f", 8) }, 
            canAfford() {
                    return player.f.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",10)) player.f.points = player.f.points.sub(cost).max(0)
                    player.f.mult = player.f.mult.add(1).max(1)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(b) { 
                let cost = this.cost()
                let f = player.f.points
                let z = this.multInc().log10()
                let s = f.div(Decimal.pow(10,1e3)).log10()
                let m = Decimal.tetrate(10,((hasUpgrade("e",186) && !inChallenge("ct",32))+0)*1.79e308).add(954)
                let max = player.f.points.div(1e45).max(10).log10().ceil().min(m)
                if (max.gte(m)) max = max.add(s.mul(2).add(1).max(1).mul(4).mul(z).add(z.pow(2)).add(4).pow(0.5).sub(z).sub(2).div(z.mul(2))).ceil()
                let diff = max.sub(player.f.mult).min(b)
                cost = Decimal.sub(1,Decimal.pow(10,diff)).div(-9).mul(cost)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",10)) player.f.points = player.f.points.sub(cost).max(0)	
                    player.f.mult = player.f.mult.add(diff)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px'},
        },
        32: {
			title() {
                let dim = "Fatality Dimension Shift"
                if (tmp.f.buyables[32].total.gte(2)) dim = "Fatality Dimension Boost"
                return dim
            },
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(40)
                let x = tmp.f.buyables[32].total
                if (x.gte(1e18)) x = x.div(1e18).pow(2).mul(1e18)
                if (x.gte(1)) cost = decimalTen
                if (x.gte(2)) cost = Decimal.add(10,x.sub(2).mul(this.scale()))
                return cost.floor()
            },
            scale() {
                let scale = decimalFour
                if (hasFUpg(65)) scale = scale.sub(1)
                if (hasFUpg(74)) scale = scale.sub(0.5)
                if (hasFUpg(84)) scale = scale.sub(0.5)
                if (hasFUpg(122)) scale = scale.sub(0.5)
                if (hasFUpg(134)) scale = scale.sub(0.5)
                return scale
            },
            base() { 
                let base = decimalTen
                if (hasFUpg(72)) base = base.mul(2)
                if (hasFUpg(75)) base = base.mul(5)
                if (hasFUpg(93)) base = base.mul(5)
                if (hasFUpg(122)) base = base.mul(getFUpgEff(122))
                if (hasChallenge("f",61)) base = base.mul(challengeEffect("f",61))
                base = base.mul(tmp.e.deff)
                if (hasUpgrade("Up",54)) base = base.pow(tmp.Up.upgrades[54].effect)
                return base
            },
            total() {
                let total = getBuyableAmount("f", 32)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Dimensions") return 
                let req = Decimal.add(6,tmp.f.buyables[32].total).min(8)
                let dim = "Unlock a new Dimension, and multiply fatality dimensions by "
                if (tmp.f.buyables[32].total.gte(2)) dim = "Multiply fatality dimensions by "
                return dim + format(this.base()) +".\n\
                Requires: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Fatality Dimension " + formatWhole(req) + "\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(tmp.f.buyables[32].total)
            },
            unlocked() { return hasMilestone("f", 10) }, 
            canAfford() {
                let req = getBuyableAmount("f", 22)
                if (this.total().gte(2)) req = getBuyableAmount("f", 24)
                else if (this.total().gte(1)) req = getBuyableAmount("f", 23)
                return req.gte(tmp[this.layer].buyables[this.id].cost) && !inChallenge("f",22)},
            buy() { //x=(cost-10)/s+2
                let d6 = getBuyableAmount("f", 24)
                let max = d6.sub(10).div(this.scale()).add(3)
                if (max.gte(1e18)) max = max.div(1e18).pow(0.5).mul(1e18)
                let diff = max.floor().sub(this.total()).max(1)
                if (this.total().lt(2)) diff = decimalOne
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",14)) {
                    player.f.p = decimalZero
                    player.f.points = decimalZero
                    player.f.sac = decimalZero
                    player.f.d1 = decimalZero
                    player.f.d2 = decimalZero
                    player.f.d3 = decimalZero
                    player.f.d4 = decimalZero
                    player.f.d5 = decimalZero
                    player.f.d6 = decimalZero
                    player.f.d7 = decimalZero
                    player.f.d8 = decimalZero
                    player.f.mult = decimalZero
                    player.f.buyables[11] = decimalZero
                    player.f.buyables[12] = decimalZero
                    player.f.buyables[13] = decimalZero
                    player.f.buyables[14] = decimalZero
                    player.f.buyables[21] = decimalZero
                    player.f.buyables[22] = decimalZero
                    player.f.buyables[23] = decimalZero
                    player.f.buyables[24] = decimalZero
                    player.f.buyables[31] = decimalZero
                    }
                    if (hasMilestone("f",11)) player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                    else player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(b) { //x=(cost-10)/s+2
                let d6 = getBuyableAmount("f", 24)
                let max = d6.sub(10).div(this.scale()).add(3)
                if (max.gte(1e18)) max = max.div(1e18).pow(0.5).mul(1e18)
                let diff = max.floor().min(b).sub(this.total()).max(1)
                if (this.total().lt(2)) diff = decimalOne
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",14)) {
                        player.f.p = decimalZero
                        player.f.points = decimalZero
                        player.f.sac = decimalZero
                        player.f.d1 = decimalZero
                        player.f.d2 = decimalZero
                        player.f.d3 = decimalZero
                        player.f.d4 = decimalZero
                        player.f.d5 = decimalZero
                        player.f.d6 = decimalZero
                        player.f.d7 = decimalZero
                        player.f.d8 = decimalZero
                        player.f.mult = decimalZero
                        player.f.buyables[11] = decimalZero
                        player.f.buyables[12] = decimalZero
                        player.f.buyables[13] = decimalZero
                        player.f.buyables[14] = decimalZero
                        player.f.buyables[21] = decimalZero
                        player.f.buyables[22] = decimalZero
                        player.f.buyables[23] = decimalZero
                        player.f.buyables[24] = decimalZero
                        player.f.buyables[31] = decimalZero
                        }
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px'},
        },
        33: {
			title() {
                let dim = "Fatality Multiplier Boost"
                if (this.total().gte(this.distantStart())) dim = "Distant Fatality Multiplier Boost"
                if (this.total().gte(this.sStart())) dim = "Social Distant Multiplier Boost"
                return dim
            },
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(45)
                let x = player.f.buyables[33]
                let distant = this.distantStart()
                let ss = this.sStart()
                if (x.gte(ss)) x = Decimal.pow(this.sScale(),x.sub(ss)).mul(ss) 
                if (inChallenge("f",22)) cost = cost = new Decimal(100)
                cost = cost.add(x.mul(this.scale()))
                if (x.gte(distant)) cost = cost.add(x.sub(distant).pow(2).add(x).sub(distant).div(this.distantScale()))
                return cost.floor()
            },
            scale() {
                let scale = new Decimal(7)
                if (inChallenge("f",22)) scale = new Decimal(11)
                if (hasFUpg(111)) scale = scale.sub(1)
                if (hasFUpg(115)) scale = scale.sub(1)
                return scale
            },
            distantStart() {
                let distant = new Decimal(100)
                if (hasFUpg(133)) distant = distant.add(20)
                if (hasFUpg(145)) distant = distant.add(getFUpgEff(145))
                return distant.min(this.sStart())
            },
            distantScale() {
                let distant = decimalTen
                if (hasFUpg(185)) distant = distant.mul(tmp.f.upgrades[185].effect2)
                return distant
            },
            sStart() {
                let scale = new Decimal(10000)
                if (hasUpgrade("e",35)) scale = scale.add(upgradeEffect("e",35))
                return scale
            },
            sScale() {
                let scale = new Decimal(1.001)
                if (hasUpgrade("e",54)) scale = scale.root(upgradeEffect("e",54))
                if (hasUpgrade("e",55)) scale = scale.root(upgradeEffect("e",55))
                return scale
            },
            base() { 
                let base = new Decimal(1.032)
                if (hasFUpg(75)) base = base.pow(1.125)
                if (hasFUpg(112)) base = base.pow(1.3)
                if (hasFUpg(105)) base = base.pow(getFUpgEff(105))
                if (hasFUpg(172)) base = base.pow(getFUpgEff(172))
                if (hasFUpg(121)) base = base.pow(1.35)
                if (hasFUpg(132)) base = base.pow(tmp.f.upgrades[132].effect2)
                if (hasUpgrade("Up",52)) base = base.pow(tmp.Up.upgrades[52].effect)
                if (hasChallenge("f",51)) base = base.pow(1.2)
                if (inChallenge("f",22)) base = base.pow(1.5)
                if (inChallenge("f",32)) base = decimalOne
                return base
            },
            total() {
                let total = getBuyableAmount("f", 33)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = this.total().add(player.f.cboosts.mul(5))
                let base = this.base()
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Dimensions") return 
                let dim = "Reset Dimension Boosts, and multiply Fatality Dimension Multiplier base by "
                let req = "8"
                if (inChallenge("f",22)) req = "6"
                return dim + format(this.base()) +".\n\
                Requires: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Fatality Dimension " +req+"\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total())
            },
            unlocked() { return hasMilestone("f", 11) }, 
            canAfford() {
                let req = getBuyableAmount("f", 24)
                if (inChallenge("f",22)) req = getBuyableAmount("f", 22)
                return req.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { //cost = 45+sx+((x-y)^2+x-y)/10         cost-45 = sx+((x-y)^2+x-y)/10
                let d8 = getBuyableAmount("f", 24)
                let sub = new Decimal(45)
                let d = this.distantStart()
                let b = this.distantScale()
                let s = this.scale()
                let ss = this.sStart()
                if (inChallenge("f",22)) {
                    d8 = getBuyableAmount("f", 22)
                    sub = new Decimal(100)
                } 
                let max = d8.sub(sub).div(this.scale()).add(1).max(1).floor()
                if (max.gte(d)) max = b.pow(2).mul(s.pow(2)).add(d8.mul(2).sub(s.mul(2).mul(d)).add(s).sub(90).mul(b.mul(2))).add(1).max(1).pow(0.5).sub(b.mul(s)).add(d.mul(2)).sub(1).div(2).add(1).max(1).floor()
                if (max.gte(ss)) max = max.div(ss).log(this.sScale()).add(ss.add(1).max(1)).floor()
                let diff = max.sub(this.total()).max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",15)) {
                    player.f.p = decimalZero
                    player.f.points = decimalZero
                    player.f.sac = decimalZero
                    player.f.d1 = decimalZero
                    player.f.d2 = decimalZero
                    player.f.d3 = decimalZero
                    player.f.d4 = decimalZero
                    player.f.d5 = decimalZero
                    player.f.d6 = decimalZero
                    player.f.d7 = decimalZero
                    player.f.d8 = decimalZero
                    player.f.mult = decimalZero
                    player.f.buyables[11] = decimalZero
                    player.f.buyables[12] = decimalZero
                    player.f.buyables[13] = decimalZero
                    player.f.buyables[14] = decimalZero
                    player.f.buyables[21] = decimalZero
                    player.f.buyables[22] = decimalZero
                    player.f.buyables[23] = decimalZero
                    player.f.buyables[24] = decimalZero
                    player.f.buyables[31] = decimalZero
                    if (!hasMilestone("f",13)) player.f.buyables[32] = (hasFUpg(84) && !inChallenge("f", 22)) ? decimalTwo : decimalZero
                    }
                    if (hasMilestone("f",12)) player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                    else player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(m) { //(cost-45)/s = x
                let d8 = getBuyableAmount("f", 24)
                let sub = new Decimal(45)
                let d = this.distantStart()
                let b = this.distantScale()
                let s = this.scale()
                let ss = this.sStart()
                if (inChallenge("f",22)) {
                    d8 = getBuyableAmount("f", 22)
                    sub = new Decimal(100)
                }
                let max = d8.sub(sub).div(this.scale()).add(1).max(1).floor()
                if (max.gte(d)) max = b.pow(2).mul(s.pow(2)).add(d8.mul(2).sub(s.mul(2).mul(d)).add(s).sub(90).mul(b.mul(2))).add(1).max(1).pow(0.5).sub(b.mul(s)).add(d.mul(2)).sub(1).div(2).add(1).max(1).floor()
                if (max.gte(ss)) max = max.div(ss).log(this.sScale()).add(ss.add(1).max(1)).floor()
                max = max.min(m)
                let diff = max.sub(this.total()).max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",15)) {
                        player.f.p = decimalZero
                        player.f.points = decimalZero
                        player.f.sac = decimalZero
                        player.f.d1 = decimalZero
                        player.f.d2 = decimalZero
                        player.f.d3 = decimalZero
                        player.f.d4 = decimalZero
                        player.f.d5 = decimalZero
                        player.f.d6 = decimalZero
                        player.f.d7 = decimalZero
                        player.f.d8 = decimalZero
                        player.f.mult = decimalZero
                        player.f.buyables[11] = decimalZero
                        player.f.buyables[12] = decimalZero
                        player.f.buyables[13] = decimalZero
                        player.f.buyables[14] = decimalZero
                        player.f.buyables[21] = decimalZero
                        player.f.buyables[22] = decimalZero
                        player.f.buyables[23] = decimalZero
                        player.f.buyables[24] = decimalZero
                        player.f.buyables[31] = decimalZero
                        if (!hasMilestone("f",13)) player.f.buyables[32] = (hasFUpg(84) && !inChallenge("f", 22)) ? decimalTwo : decimalZero
                        }
                    if (hasMilestone("f",12)) player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px'},
        },
        34: {
			title() {
                let dis = ""
                let x=tmp[this.layer].buyables[this.id].total
                if (x.gte(1e35)) dis += "Distant "
                return dis + "Casualty Multiplier"
            },
            cost(x=tmp[this.layer].buyables[this.id].total) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(1e35)) x = x.div(1e35).pow(3).mul(1e35)
                let cost = Decimal.pow(10, x).mul(5)
                return cost.floor()
            },
            base() { 
                let base = decimalTwo
                if (hasFUpg(135)) base = base.add(0.1)
                if (hasFUpg(151)) base = base.add(getFUpgEff(151))
                if (hasFUpg(173)) base = base.add(getFUpgEff(173))
                return base
            },
            total() {
                let total = getBuyableAmount("f", 34)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Multiplier") return 
                return "Multiply Casualty gain by " + format(this.base()) + "\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total())
            },
            unlocked() { return hasMilestone("f", 8) }, 
            canAfford() {
                    return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",18)) player.f.casualty = player.f.casualty.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() { 
                let cost = this.cost()
                let f = player.f.casualty.max(1)
                let max = f.div(5).log10()
                if (max.gte(1e35)) max = max.div(1e35).pow(1/3).mul(1e35)
                let diff = max.ceil().sub(this.total())
                cost = Decimal.sub(1,Decimal.pow(10,diff)).div(-9).mul(cost)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",18)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[34].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        41: {
			title() {
                let dim = "Fatality Dimension 1 Autobuyer"
                return dim
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(2.8,x)
                return cost.floor()
            },
            on() {
                return player.f.d1auto
            },
            speedbase() { 
                let base = new Decimal(2.5)
                return base
            },
            bulkbase() { 
                let base = decimalTwo
                return base
            },
            total() {
                let total = getBuyableAmount("f", 41)
                return total
            },
			speed() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].speedbase
                return Decimal.pow(base, x).div(1.25).min(10);
            },
            bulk() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].bulkbase
                let eff = Decimal.pow(base, x)
                if (hasUpgrade("e",21)) eff = eff.mul(1e6)
                if (hasUpgrade("e",143)) eff = Decimal.tetrate(10,1.79e308)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Autobuyers") return 
                let dim = "Autobuys Fatality Dimension 1."
                if (this.total().gte(15)) dim += "(MAXED)"
                return dim + "\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Interval: " + formatTime(Decimal.div(1,this.speed()))+"\n\
                Bulk: " + formatWhole(this.bulk())
            },
            canAfford() {
                return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost) && this.total().lt(15)},
            unlocked() { return hasChallenge("f", 11) }, 
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[41].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        42: {
			title() {
                let dim = "Fatality Dimension 2 Autobuyer"
                return dim
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(2.8,x)
                return cost.floor()
            },
            on() {
                return player.f.d2auto
            },
            speedbase() { 
                let base = new Decimal(2.5)
                return base
            },
            bulkbase() { 
                let base = decimalTwo
                return base
            },
            total() {
                let total = getBuyableAmount("f", 42)
                return total
            },
			speed() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].speedbase
                return Decimal.pow(base, x).div(1.5).min(10);
            },
            bulk() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].bulkbase
                let eff = Decimal.pow(base, x)
                if (hasUpgrade("e",21)) eff = eff.mul(1e6)
                if (hasUpgrade("e",143)) eff = Decimal.tetrate(10,1.79e308)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Autobuyers") return 
                let dim = "Autobuys Fatality Dimension 2."
                if (this.total().gte(15)) dim += "(MAXED)"
                return dim + "\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Interval: " + formatTime(Decimal.div(1,this.speed()))+"\n\
                Bulk: " + formatWhole(this.bulk())
            },
            canAfford() {
                return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost) && this.total().lt(15)},
            unlocked() { return hasChallenge("f", 11) }, 
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[42].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        43: {
			title() {
                let dim = "Fatality Dimension 3 Autobuyer"
                return dim
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(2.8,x)
                return cost.floor()
            },
            on() {
                return player.f.d3auto
            },
            speedbase() { 
                let base = new Decimal(2.5)
                return base
            },
            bulkbase() { 
                let base = decimalTwo
                return base
            },
            total() {
                let total = getBuyableAmount("f", 43)
                return total
            },
			speed() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].speedbase
                return Decimal.pow(base, x).div(1.75).min(10);
            },
            bulk() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].bulkbase
                let eff = Decimal.pow(base, x)
                if (hasUpgrade("e",21)) eff = eff.mul(1e6)
                if (hasUpgrade("e",143)) eff = Decimal.tetrate(10,1.79e308)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Autobuyers") return 
                let dim = "Autobuys Fatality Dimension 3."
                if (this.total().gte(15)) dim += "(MAXED)"
                return dim + "\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Interval: " + formatTime(Decimal.div(1,this.speed()))+"\n\
                Bulk: " + formatWhole(this.bulk())
            },
            canAfford() {
                return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost) && this.total().lt(15)},
            unlocked() { return hasChallenge("f", 11) }, 
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[43].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        44: {
			title() {
                let dim = "Fatality Dimension 4 Autobuyer"
                return dim
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(2.8,x)
                return cost.floor()
            },
            on() {
                return player.f.d4auto
            },
            speedbase() { 
                let base = new Decimal(2.5)
                return base
            },
            bulkbase() { 
                let base = decimalTwo
                return base
            },
            total() {
                let total = getBuyableAmount("f", 44)
                return total
            },
			speed() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].speedbase
                return Decimal.pow(base, x).div(2).min(10);
            },
            bulk() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].bulkbase
                let eff = Decimal.pow(base, x)
                if (hasUpgrade("e",21)) eff = eff.mul(1e6)
                if (hasUpgrade("e",143)) eff = Decimal.tetrate(10,1.79e308)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Autobuyers") return 
                let dim = "Autobuys Fatality Dimension 4."
                if (this.total().gte(15)) dim += "(MAXED)"
                return dim + "\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Interval: " + formatTime(Decimal.div(1,this.speed()))+"\n\
                Bulk: " + formatWhole(this.bulk())
            },
            canAfford() {
                return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost) && this.total().lt(15)},
            unlocked() { return hasChallenge("f", 12) }, 
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[44].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        51: {
			title() {
                let dim = "Fatality Dimension 5 Autobuyer"
                return dim
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(2.8,x)
                return cost.floor()
            },
            on() {
                return player.f.d5auto
            },
            speedbase() { 
                let base = new Decimal(2.5)
                return base
            },
            bulkbase() { 
                let base = decimalTwo
                return base
            },
            total() {
                let total = getBuyableAmount("f", 51)
                return total
            },
			speed() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].speedbase
                return Decimal.pow(base, x).div(2.25).min(10);
            },
            bulk() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].bulkbase
                let eff = Decimal.pow(base, x)
                if (hasUpgrade("e",21)) eff = eff.mul(1e6)
                if (hasUpgrade("e",143)) eff = Decimal.tetrate(10,1.79e308)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Autobuyers") return 
                let dim = "Autobuys Fatality Dimension 5."
                if (this.total().gte(15)) dim += "(MAXED)"
                return dim + "\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Interval: " + formatTime(Decimal.div(1,this.speed()))+"\n\
                Bulk: " + formatWhole(this.bulk())
            },
            canAfford() {
                return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost) && this.total().lt(15)},
            unlocked() { return hasChallenge("f", 12) }, 
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[51].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        52: {
			title() {
                let dim = "Fatality Dimension 6 Autobuyer"
                return dim
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(2.8,x)
                return cost.floor()
            },
            on() {
                return player.f.d6auto
            },
            speedbase() { 
                let base = new Decimal(2.5)
                return base
            },
            bulkbase() { 
                let base = decimalTwo
                return base
            },
            total() {
                let total = getBuyableAmount("f", 52)
                return total
            },
			speed() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].speedbase
                return Decimal.pow(base, x).div(2.5).min(10);
            },
            bulk() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].bulkbase
                let eff = Decimal.pow(base, x)
                if (hasUpgrade("e",21)) eff = eff.mul(1e6)
                if (hasUpgrade("e",143)) eff = Decimal.tetrate(10,1.79e308)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Autobuyers") return 
                let dim = "Autobuys Fatality Dimension 6."
                if (this.total().gte(15)) dim += "(MAXED)"
                return dim + "\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Interval: " + formatTime(Decimal.div(1,this.speed()))+"\n\
                Bulk: " + formatWhole(this.bulk())
            },
            canAfford() {
                return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost) && this.total().lt(15)},
            unlocked() { return hasChallenge("f", 12) }, 
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[52].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        53: {
			title() {
                let dim = "Fatality Dimension 7 Autobuyer"
                return dim
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(2.8,x)
                return cost.floor()
            },
            on() {
                return player.f.d7auto
            },
            speedbase() { 
                let base = new Decimal(2.5)
                return base
            },
            bulkbase() { 
                let base = decimalTwo
                return base
            },
            total() {
                let total = getBuyableAmount("f", 53)
                return total
            },
			speed() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].speedbase
                return Decimal.pow(base, x).div(2.75).min(10);
            },
            bulk() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].bulkbase
                let eff = Decimal.pow(base, x)
                if (hasUpgrade("e",21)) eff = eff.mul(1e6)
                if (hasUpgrade("e",143)) eff = Decimal.tetrate(10,1.79e308)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Autobuyers") return 
                let dim = "Autobuys Fatality Dimension 7."
                if (this.total().gte(15)) dim += "(MAXED)"
                return dim + "\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Interval: " + formatTime(Decimal.div(1,this.speed()))+"\n\
                Bulk: " + formatWhole(this.bulk())
            },
            canAfford() {
                return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost) && this.total().lt(15)},
            unlocked() { return hasChallenge("f", 21) }, 
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[53].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        54: {
			title() {
                let dim = "Fatality Dimension 8 Autobuyer"
                return dim
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(2.8,x)
                return cost.floor()
            },
            on() {
                return player.f.d8auto
            },
            speedbase() { 
                let base = new Decimal(2.5)
                return base
            },
            bulkbase() { 
                let base = decimalTwo
                return base
            },
            total() {
                let total = getBuyableAmount("f", 54)
                return total
            },
			speed() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].speedbase
                return Decimal.pow(base, x).div(3).min(10);
            },
            bulk() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].bulkbase
                let eff = Decimal.pow(base, x)
                if (hasUpgrade("e",21)) eff = eff.mul(1e6)
                if (hasUpgrade("e",143)) eff = Decimal.tetrate(10,1.79e308)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Autobuyers") return 
                let dim = "Autobuys Fatality Dimension 8."
                if (this.total().gte(15)) dim += "(MAXED)"
                return dim + "\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Interval: " + formatTime(Decimal.div(1,this.speed()))+"\n\
                Bulk: " + formatWhole(this.bulk())
            },
            canAfford() {
                return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost) && this.total().lt(15)},
            unlocked() { return hasChallenge("f", 21) }, 
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[54].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        61: {
			title() {
                let dim = "Fatality Dimension Multiplier Autobuyer"
                return dim
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(2.8,x)
                return cost.floor()
            },
            on() {
                return player.f.multauto
            },
            speedbase() { 
                let base = new Decimal(2.5)
                return base
            },
            bulkbase() { 
                let base = decimalTwo
                return base
            },
            total() {
                let total = getBuyableAmount("f", 61)
                return total
            },
			speed() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].speedbase
                return Decimal.pow(base, x).div(1.5).min(10);
            },
            bulk() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].bulkbase
                let eff = Decimal.pow(base, x)
                if (hasUpgrade("e",21)) eff = eff.mul(1e6)
                if (hasUpgrade("e",143)) eff = Decimal.tetrate(10,1.79e308)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Autobuyers") return 
                let dim = "Autobuys Fatality Dimension Multiplier."
                if (this.total().gte(15)) dim += "(MAXED)"
                return dim + "\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Interval: " + formatTime(Decimal.div(1,this.speed()))+"\n\
                Bulk: " + formatWhole(this.bulk())
            },
            canAfford() {
                return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost) && this.total().lt(15)},
            unlocked() { return hasChallenge("f", 21) }, 
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[61].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        62: {
			title() {
                let dim = "Fatality Dimension Boost Autobuyer"
                return dim
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(3.5,x)
                return cost.floor()
            },
            on() {
                return player.f.boostauto
            },
            speedbase() { 
                let base = new Decimal(1.8)
                return base
            },
            total() {
                let total = getBuyableAmount("f", 62)
                return total
            },
			speed() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].speedbase
                return Decimal.pow(base, x).div(15).min(10);
            },
            bulk() { 
                return Decimal.tetrate(10, 1.79e308);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Autobuyers") return 
                let dim = "Autobuys Fatality Dimension Boost."
                if (this.speed().gte(10)) dim += "(MAXED)"
                return dim + "\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Interval: " + formatTime(Decimal.div(1,this.speed()))
            },
            canAfford() {
                return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost) && this.speed().lt(10)},
            unlocked() { return hasChallenge("f", 22) }, 
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[62].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        63: {
			title() {
                let dim = "Fatality Multiplier Boost Autobuyer"
                return dim
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(3.5,x)
                return cost.floor()
            },
            on() {
                return player.f.multbauto
            },
            speedbase() { 
                let base = new Decimal(1.7)
                return base
            },
            total() {
                let total = getBuyableAmount("f", 63)
                return total
            },
			speed() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].speedbase
                return Decimal.pow(base, x).div(60).min(10);
            },
            bulk() { 
                return Decimal.tetrate(10, 1.79e308);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Autobuyers") return 
                let dim = "Autobuys Fatality Multiplier Boost."
                if (this.speed().gte(10)) dim += "(MAXED)"
                return dim + "\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Interval: " + formatTime(Decimal.div(1,this.speed()))
            },
            canAfford() {
                return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost) && this.speed().lt(10)},
            unlocked() { return hasChallenge("f", 22) }, 
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[63].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        64: {
			title() {
                let dim = "Automatic Sacrifice"
                return dim
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(3.5,x)
                return cost.floor()
            },
            on() {
                return player.f.sacauto
            },
            speedbase() { 
                let base = new Decimal(1.7)
                return base
            },
            total() {
                let total = getBuyableAmount("f", 64)
                return total
            },
			speed() { 
                let x = tmp.f.buyables[this.id].total
                let base = tmp.f.buyables[this.id].speedbase
                return Decimal.pow(base, x).div(10).min(10);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Autobuyers") return 
                let dim = "Automatically Sacrifice at 100x."
                if (this.speed().gte(10)) dim += "(MAXED)"
                return dim + "\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Interval: " + formatTime(Decimal.div(1,this.speed()))
            },
            canAfford() {
                return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost) && this.speed().lt(10)},
            unlocked() { return hasMilestone("f", 13) }, 
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[64].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        71: {
			title: "Casualty Dimension 1",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x=player.f.cd[0]
                let cost = Decimal.pow(1e5, x).mul(1e14)
                return cost.floor()
            },
            base() { 
                let base = tmp.f.cmultpd.mul(15).pow(tmp.f.cmultExp)
                return base
            },
            gain(x=player[this.layer].buyables[this.id]) {
                let gain = this.effect().mul(x)
                return gain
            },
            total() {
                let total = getBuyableAmount("f", 71)
                return total
            },
            bought() {
                let bought = player.f.cd[0]
                return bought
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].bought
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x).mul(tmp.f.cDimMult)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Casualty Dimensions") return 
                return "Produces casualty power.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total()) + "(" + formatWhole(this.bought()) + ")"
            },
            unlocked() { return hasMilestone("f", 16) }, 
            canAfford() {
                    return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",19)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player.f.cd[0] = player.f.cd[0].add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(b) { 
                let cost = this.cost()
                let f = player.f.casualty.max(1)
                let max = f.div(1e14).log10().div(5).ceil()
                let diff = max.sub(player.f.cd[0]).min(b)
                cost = Decimal.sub(1,Decimal.pow(1e5,max)).div(-99999).mul(1e14)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",19)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player.f.cd[0] = player.f.cd[0].add(diff)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[71].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        72: {
			title: "Casualty Dimension 2",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x=player.f.cd[1]
                let cost = Decimal.pow(1e9, x).mul(1e16)
                return cost.floor()
            },
            base() { 
                let base = tmp.f.cmultpd.mul(10).pow(tmp.f.cmultExp)
                return base
            },
            gain(x=player[this.layer].buyables[this.id]) {
                let gain = this.effect().mul(x).div(10)
                return gain
            },
            total() {
                let total = getBuyableAmount("f", 72)
                return total
            },
            bought() {
                let bought = player.f.cd[1]
                return bought
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].bought
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x).mul(tmp.f.cDimMult)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Casualty Dimensions") return 
                return "Produces Casualty Dimension 1.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total()) + "(" + formatWhole(this.bought()) + ")"
            },
            unlocked() { return hasMilestone("f", 16) }, 
            canAfford() {
                    return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",19)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player.f.cd[1] = player.f.cd[1].add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(b) { 
                let cost = this.cost()
                let f = player.f.casualty.max(1)
                let max = f.div(1e16).log10().div(9).ceil()
                let diff = max.sub(player.f.cd[1]).min(b)
                cost = Decimal.sub(1,Decimal.pow(1e9,max)).div(-999999999).mul(1e16)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",19)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player.f.cd[1] = player.f.cd[1].add(diff)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[72].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        73: {
			title: "Casualty Dimension 3",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x=player.f.cd[2]
                let cost = Decimal.pow(1e13, x).mul(1e29)
                return cost.floor()
            },
            base() { 
                let base = tmp.f.cmultpd.mul(4).pow(tmp.f.cmultExp)
                return base
            },
            gain(x=player[this.layer].buyables[this.id]) {
                let gain = this.effect().mul(x).div(10)
                return gain
            },
            total() {
                let total = getBuyableAmount("f", 73)
                return total
            },
            bought() {
                let bought = player.f.cd[2]
                return bought
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].bought
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x).mul(tmp.f.cDimMult)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Casualty Dimensions") return 
                return "Produces Casualty Dimension 2.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total()) + "(" + formatWhole(this.bought()) + ")"
            },
            unlocked() { return player.f.best.gte("e120000") || getBuyableAmount("f", 74).gte(1) }, 
            canAfford() {
                    return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",19)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player.f.cd[2] = player.f.cd[2].add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(b) { 
                let cost = this.cost()
                let f = player.f.casualty.max(1)
                let max = f.div(1e29).log10().div(13).ceil()
                let diff = max.sub(player.f.cd[2]).min(b)
                cost = Decimal.sub(1,Decimal.pow(1e13,max)).div(-1e13).mul(1e29)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",19)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player.f.cd[2] = player.f.cd[2].add(diff)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[73].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        74: {
			title: "Casualty Dimension 4",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x=player.f.cd[3]
                let cost = Decimal.pow(1e17, x).mul(1e50)
                return cost.floor()
            },
            base() { 
                let base = tmp.f.cmultpd.mul(2).pow(tmp.f.cmultExp)
                return base
            },
            gain(x=player[this.layer].buyables[this.id]) {
                let gain = this.effect().mul(x).div(10)
                return gain
            },
            total() {
                let total = getBuyableAmount("f", 74)
                return total
            },
            bought() {
                let bought = player.f.cd[3]
                return bought
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].bought
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x).mul(tmp.f.cDimMult)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Casualty Dimensions") return 
                return "Produces Casualty Dimension 3.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total()) + "(" + formatWhole(this.bought()) + ")"
            },
            unlocked() { return player.f.best.gte("e300000") || getBuyableAmount("f", 74).gte(1) }, 
            canAfford() {
                    return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",19)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player.f.cd[3] = player.f.cd[3].add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(b) { 
                let cost = this.cost()
                let f = player.f.casualty.max(1)
                let max = f.div(1e50).log10().div(17).ceil()
                let diff = max.sub(player.f.cd[3]).min(b)
                cost = Decimal.sub(1,Decimal.pow(1e17,max)).div(-1e17).mul(1e50)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",19)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player.f.cd[3] = player.f.cd[3].add(diff)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[74].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        81: {
			title: "Casualty Dimension 5",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x=player.f.cd[4]
                let cost = Decimal.pow(1e20, x).mul("1e460")
                return cost.floor()
            },
            base() { 
                let base = tmp.f.cmultpd.pow(tmp.f.cmultExp)
                return base
            },
            gain(x=player[this.layer].buyables[this.id]) {
                let gain = this.effect().mul(x).div(10)
                return gain
            },
            total() {
                let total = getBuyableAmount("f", 81)
                return total
            },
            bought() {
                let bought = player.f.cd[4]
                return bought
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].bought
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x).mul(tmp.f.cDimMult)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Casualty Dimensions") return 
                return "Produces Casualty Dimension 4.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total()) + "(" + formatWhole(this.bought()) + ")"
            },
            unlocked() { return player.f.best.gte("e1600000") || getBuyableAmount("f", 81).gte(1) }, 
            canAfford() {
                    return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",19)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player.f.cd[4] = player.f.cd[4].add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(b) { 
                let cost = this.cost()
                let f = player.f.casualty.max(1)
                let max = f.div("1e460").log10().div(20).ceil()
                let diff = max.sub(player.f.cd[4]).min(b)
                cost = Decimal.sub(1,Decimal.pow(1e20,max)).div(-1e20).mul("1e460")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",19)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player.f.cd[4] = player.f.cd[4].add(diff)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[81].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        82: {
			title: "Casualty Dimension 6",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x=player.f.cd[5]
                let cost = Decimal.pow(1e25, x).mul("1e575")
                return cost.floor()
            },
            base() { 
                let base = tmp.f.cmultpd.pow(tmp.f.cmultExp)
                return base
            },
            gain(x=player[this.layer].buyables[this.id]) {
                let gain = this.effect().mul(x).div(10)
                return gain
            },
            total() {
                let total = getBuyableAmount("f", 82)
                return total
            },
            bought() {
                let bought = player.f.cd[5]
                return bought
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].bought
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x).mul(tmp.f.cDimMult)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Casualty Dimensions") return 
                return "Produces Casualty Dimension 5.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total()) + "(" + formatWhole(this.bought()) + ")"
            },
            unlocked() { return player.f.best.gte("e2000000") || getBuyableAmount("f", 82).gte(1) }, 
            canAfford() {
                    return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",19)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player.f.cd[5] = player.f.cd[5].add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(b) { 
                let cost = this.cost()
                let f = player.f.casualty.max(1)
                let max = f.div("1e575").log10().div(25).ceil()
                let diff = max.sub(player.f.cd[5]).min(b)
                cost = Decimal.sub(1,Decimal.pow(1e25,max)).div(-1e25).mul("1e575")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",19)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player.f.cd[5] = player.f.cd[5].add(diff)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[82].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        83: {
			title: "Casualty Dimension 7",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x=player.f.cd[6]
                let cost = Decimal.pow(1e30, x).mul("1e790")
                return cost.floor()
            },
            base() { 
                let base = tmp.f.cmultpd.pow(tmp.f.cmultExp)
                return base
            },
            gain(x=player[this.layer].buyables[this.id]) {
                let gain = this.effect().mul(x).div(10)
                return gain
            },
            total() {
                let total = getBuyableAmount("f", 83)
                return total
            },
            bought() {
                let bought = player.f.cd[6]
                return bought
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].bought
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x).mul(tmp.f.cDimMult)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Casualty Dimensions") return 
                return "Produces Casualty Dimension 6.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total()) + "(" + formatWhole(this.bought()) + ")"
            },
            unlocked() { return player.f.best.gte("e2830000") || getBuyableAmount("f", 83).gte(1) }, 
            canAfford() {
                    return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",19)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player.f.cd[6] = player.f.cd[6].add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(b) { 
                let cost = this.cost()
                let f = player.f.casualty.max(1)
                let max = f.div("1e790").log10().div(30).ceil()
                let diff = max.sub(player.f.cd[6]).min(b)
                cost = Decimal.sub(1,Decimal.pow(1e30,max)).div(-1e30).mul("1e790")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",19)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player.f.cd[6] = player.f.cd[6].add(diff)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[83].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        84: {
			title: "Casualty Dimension 8",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x=player.f.cd[7]
                let cost = Decimal.pow(1e40, x).mul("1e1905")
                return cost.floor()
            },
            base() { 
                let base = tmp.f.cmultpd.pow(tmp.f.cmultExp)
                return base
            },
            gain(x=player[this.layer].buyables[this.id]) {
                let gain = this.effect().mul(x).div(10)
                return gain
            },
            total() {
                let total = getBuyableAmount("f", 84)
                return total
            },
            bought() {
                let bought = player.f.cd[7]
                return bought
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].bought
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x).mul(tmp.f.cDimMult)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Casualty Dimensions") return 
                return "Produces Casualty Dimension 7.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total()) + "(" + formatWhole(this.bought()) + ")"
            },
            unlocked() { return player.f.best.gte("e6750000") || getBuyableAmount("f", 84).gte(1) }, 
            canAfford() {
                    return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",19)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player.f.cd[7] = player.f.cd[7].add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(b) { 
                let cost = this.cost()
                let f = player.f.casualty.max(1)
                let max = f.div("1e1905").log10().div(40).ceil()
                let diff = max.sub(player.f.cd[7]).min(b)
                cost = Decimal.sub(1,Decimal.pow(1e40,max)).div(-1e40).mul("1e1905")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("f",19)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player.f.cd[7] = player.f.cd[7].add(diff)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[84].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        91: {
			title: "Casual Replicate Multiplier",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1e25, x).mul("1e470")
                return cost.floor()
            },
            total() {
                let total = getBuyableAmount("f", 91)
                return total
            },
			base() { // Effects of owning x of the items, x is a decimal
                let x = this.total().div(20).add(1).max(1)
                return x;
            },
            effect() {
                let eff = this.base()
                if (hasFUpg(183)) eff = eff.pow(getFUpgEff(183))
                return eff
            },
            max() {
                let max = new Decimal(100)
                if (hasFUpg(183)) max = Decimal.tetrate(10,1.79e308)
                return max
            },
            display() { // Everything else displayed in the buyable button after the title
                let dis = "Increase the replicate multiplier."
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Casuals") return 
                if (this.total().gte(this.max())) dis += " (MAXED)"
                return dis + "\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(this.total())
            },
            unlocked() { return hasMilestone("f",17) }, 
            canAfford() {
                    return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost) && this.total().lt(this.max())},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasFUpg(183)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() { 
                let cost = this.cost()
                let f = player.f.casualty.max(1)
                let max = f.div("e470").log10().div(25).ceil()
                let diff = max.sub(this.total())
                cost = Decimal.sub(1,Decimal.pow(1e25,diff)).div(-1e25).mul(cost)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasFUpg(183)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[91].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        92: {
			title: "Casual Replicate Interval",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1e15, x).mul("1e475")
                if (x.gte(44)) cost = Decimal.pow(1e15,Decimal.pow(1.1,x.sub(44))).mul("e1120")
                return cost.floor()
            },
            max() {
                let max = new Decimal(0.02)
                if (hasFUpg(133)) max = max.div(20)
                if (hasFUpg(182)) max = Decimal.tetrate(10,1.79e308).pow(-1)
                if (hasMilestone("ct",0)) max = max.div(10)
                return max
            },
            total() {
                let total = getBuyableAmount("f", 92)
                return total
            },
            effect() {
                let x = this.total()
                let eff = Decimal.pow(0.9,x)
                if (hasFUpg(131)) eff = eff.div(getFUpgEff(131))
                if (hasFUpg(132)) eff = eff.div(getFUpgEff(132))
                if (hasMilestone("ct",0)) eff = eff.div(10)
                if (hasUpgrade("Up",73)) eff = eff.div(tmp.Up.upgrades[73].effect)
                return eff.max(this.max())
            },
			interval() { // Effects of owning x of the items, x is a decimal
                let eff = this.effect()
                return eff.mul(this.scale());
            },
            scale() {
                let scale = decimalOne
                let base = new Decimal(1.2)
                if (hasFUpg(184)) base = getFUpgEff(184)
                if (player.f.casuals.gte(Decimal.pow(10,tmp.f.int).mul(1.8))) scale = scale.mul(Decimal.pow(base,player.f.casuals.log10().sub(tmp.f.int).div(tmp.f.int))).mul(10)
                return scale
            },
            display() { // Everything else displayed in the buyable button after the title
                let dis = "Reduce the replicate interval."
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Casuals") return 
                if (this.effect().lte(this.max())) dis += " (MAXED)"
                return dis + "\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Interval: " + formatTimeLong(tmp[this.layer].buyables[this.id].interval)+"\n\
                Amount: " + formatWhole(this.total())
            },
            unlocked() { return hasMilestone("f",17) }, 
            canAfford() {
                    return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost) && this.effect().gt(this.max()) },
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() { 
                let cost = this.cost() // log1.1(log10(cost/e1120)/15)+44 =
                let f = player.f.casualty.max(1).max(10)
                let max = f.div("e470").log10().div(15).ceil().min(44)
                if (max.gte(44)) max = f.div("e1120").max(10).log10().div(15).log(1.1).add(45).floor()
                let diff = max.sub(this.total())
                cost = Decimal.sub(1,Decimal.pow(1e15,diff)).div(-1e15).mul(cost)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasFUpg(182)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[92].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        93: {
			title() {
                let x=player[this.layer].buyables[this.id]
                let dis = ""
                if (x.gte(600)) dis = "Distant "
                if (x.gte(100000)) dis = "Social Distant "
                dis += "Casual Replicated Boosts"
                return dis
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1e25, x).mul(Decimal.pow(1e5,(x.pow(2).add(x).div(2)))).mul("1e750")
                let s = x.sub(100)
                if (x.gte(1e5)) x = Decimal.pow(1.0001,x.sub(1e5)).mul(1e5)
                if (x.gte(100)) cost = Decimal.pow("e775", s).mul(Decimal.pow(1e55,(s.pow(2).add(s).div(2)))).mul("e28500")
                if (x.gte(600)) cost = Decimal.pow("e775",x.sub(600).pow(3)).mul("e7304750")
                return cost.floor()
            },
            total() {
                let total = getBuyableAmount("f", 93)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = this.total()
                let eff = x
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                let dis = "Increase the max Replicated Boosts."
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Casuals") return 
                return dis + "\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Max: " + formatWhole(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(this.total())
            },
            unlocked() { return hasMilestone("f",17) }, 
            canAfford() {
                    return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost) },
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",20)) player.f.casualty = player.f.casualty.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() { 
                let f = player.f.casualty.max(1)
                let max = f.log10().mul(8).sub(5395).mul(5).pow(0.5).sub(55).div(10).floor().add(1).max(1).min(100)
                if (max.gte(100)) max = f.log10().mul(440).sub(9963975).pow(0.5).sub(1605).div(110).floor().add(101).min(600)
                if (max.gte(600)) max = Decimal.log10(f.div("e7304750")).div(775).pow(Decimal.pow(3,-1)).floor().add(601)
                if (max.gte(1e5)) max = max.div(1e5).log(1.0001).add(100001).floor()
                let diff = max.sub(player.f.buyables[93])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[93].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        101: {
			title: "Virus Gain",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(10, x.pow(1.2)).mul(1e45)
                return cost.floor()
            },
            base() { 
                let base = decimalTen
                if (hasFUpg(177)) base = base.add(getFUpgEff(177))
                if (hasFUpg(186)) base = base.add(getFUpgEff(186))
                return base
            },
            extra() {
                let extra = decimalZero
                return extra
            },
            total() {
                let total = getBuyableAmount("f", 101).add(tmp[this.layer].buyables[this.id].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
			display() { // Everything else displayed in the buyable button after the title
                let extra = ""
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Casual Virus") return 
                return "Multiply Casual Virus gain by "+format(this.base())+".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" casual viruses\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("f",101)) + extra
            },
            unlocked() { return hasMilestone("f", 21) }, 
            canAfford() {
                    return player.f.virus.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",0)) player.f.virus = player.f.virus.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(max) {
                let c = player.f.virus
                let target = Decimal.log10(c.div(1e45)).pow(Decimal.pow(1.2,-1))
                target = target.ceil()
                let cost = Decimal.pow(10, target.sub(1).pow(1.2)).mul(1e45)
                let diff = target.sub(player.f.buyables[101])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",0)) player.f.virus = player.f.virus.sub(cost).max(0)
                    if (diff.gt(max)) diff = max
                    player.f.buyables[101] = player.f.buyables[101].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[101].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        102: {
			title: "Virus Exponent",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(30, x.pow(1.3)).mul(1e55)
                return cost.floor()
            },
            base() { 
                let base = new Decimal(0.15)
                if (hasFUpg(187)) base = base.add(getFUpgEff(187))
                return base
            },
            extra() {
                let extra = decimalZero
                return extra
            },
            total() {
                let total = getBuyableAmount("f", 102).add(tmp[this.layer].buyables[this.id].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.mul(base, x)
                let exp = new Decimal(0.2)
                if (hasUpgrade("e",76)) exp = exp.add(0.35)
                if (eff.gte(250)) eff = eff.div(250).pow(exp).mul(250)
                return eff;
            },
			display() { // Everything else displayed in the buyable button after the title
                let extra = ""
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Casual Virus") return 
                let dis =  format(tmp[this.layer].buyables[this.id].effect)
                if (this.effect().gte(250)) dis += " (softcapped)"
                return "Increase Casual Virus gain exponent by "+format(this.base()) + ".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" casual viruses\n\
                Effect: +" + dis +"\n\
                Amount: " + formatWhole(getBuyableAmount("f",102)) + extra
            },
            unlocked() { return hasFUpg(173) }, 
            canAfford() {
                    return player.f.virus.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",0)) player.f.virus = player.f.virus.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(max) {
                let c = player.f.virus
                let target = Decimal.log10(c.div(1e55)).div(Decimal.log10(30)).pow(Decimal.pow(1.3,-1))
                target = target.ceil()
                let cost = Decimal.pow(30, target.sub(1).pow(1.3)).mul(1e55)
                let diff = target.sub(player.f.buyables[102])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",0)) player.f.virus = player.f.virus.sub(cost).max(0)
                    if (diff.gt(max)) diff = max
                    player.f.buyables[102] = player.f.buyables[102].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[102].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
        103: {
			title: "Self Booster",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(this.scalebase(), x.pow(1.5)).mul(4e72)
                return cost.floor()
            },
            scalebase() {
                let base = new Decimal(1e6)
                if (hasUpgrade("e",34)) base = base.div(upgradeEffect("e",34))
                return base
            },
            base() { 
                let base = player.f.virus.add(10).max(10)
                base = base.log10().add(10).max(10)
                base = base.log10().div(10)
                return base
            },
            extra() {
                let extra = decimalZero
                return extra
            },
            total() {
                let total = getBuyableAmount("f", 103).add(tmp[this.layer].buyables[this.id].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let s = new Decimal(100)
                if (hasUpgrade("e",34)) s = s.add(400)
                if (hasUpgrade("e",56)) s = s.add(1000)
                if (x.gte(s) && !hasUpgrade("e",154)) x = x.div(s).pow(0.3).mul(s)
                return Decimal.mul(base, x).add(1).max(1);
            },
			display() { // Everything else displayed in the buyable button after the title
                let extra = ""
                if (player.tab != "f" || player.subtabs.f.mainTabs != "Casual Virus") return 
                let dis = format(tmp[this.layer].buyables[this.id].effect)
                let s = new Decimal(100)
                if (hasUpgrade("e",34)) s = s.add(400)
                if (hasUpgrade("e",56)) s = s.add(1000)
                if (this.total().gte(s) && !hasUpgrade("e",154)) dis += " (softcapped)"
                return "Raise 'Self Casual Boost' to (1+"+format(this.base())+"x) (based on Casual Viruses).\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" casual viruses\n\
                Effect: ^" + dis +"\n\
                Amount: " + formatWhole(getBuyableAmount("f",103)) + extra
            },
            unlocked() { return hasFUpg(176) }, 
            canAfford() {
                    return player.f.virus.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",0)) player.f.virus = player.f.virus.sub(cost).max(0)	
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(max) {
                let c = player.f.virus
                let target = Decimal.log10(c.div(4e72)).div(Decimal.log10(this.scalebase())).pow(Decimal.pow(1.5,-1))
                target = target.ceil()
                let cost = Decimal.pow(this.scalebase(), target.sub(1).pow(1.5)).mul(4e72)
                let diff = target.sub(player.f.buyables[103])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",0)) player.f.virus = player.f.virus.sub(cost).max(0)
                    if (diff.gt(max)) diff = max
                    player.f.buyables[103] = player.f.buyables[103].add(diff)
                }
            },
            style: {'height':'180px', 'width':'180px',
                "background-color"() {
                    let color = "#bf8f8f"
                    if (tmp.f.buyables[103].canAfford) color = "#3d2963"
                    return color
                }
            },
        },
    },
    upgrades: {
        rows: 18,
        cols: 7,
        11: {
            title: "Lethality",
            description: "Symptoms boost severity after softcap at reduced effect.",
            cost: decimalFour,
            effect() {
                let eff = Decimal.pow(10,tmp.s.effbase.pow(player.s.points).log10().pow(0.75))
                return eff
            },
            effectDisplay() {
                return format(getFUpgEff(11)) + "x"
            }
        },
        12: {
            title: "Deadliness",
            description: "Deaths boost fatality gain.",
            cost: new Decimal(25),
            effect() {
                let eff = player.d.points.add(10).max(10)
                eff = eff.log10().pow(0.2)
                return eff
            },
            effectDisplay() {
                return format(getFUpgEff(12)) + "x"
            },
            unlocked() {
                return hasFUpg(11)
            }
        },
        13: {
            title: "Mortality",
            description: "'Asymptomatic' reward is applied after softcap at reduced effect.",
            cost: new Decimal(200),
            effect() {
                let eff = challengeEffect("s", 11)
                eff = eff.pow(0.2)
                if (eff.gte("e5e12")) eff = Decimal.pow(10,eff.div("e5e12").log10().pow(0.9)).mul("e5e12")
                if (eff.gte("ee19")) eff = Decimal.pow(10,eff.div("ee19").log10().pow(0.9)).mul("ee19")
                if (eff.gte("ee24")) eff = Decimal.pow(10,eff.div("ee24").log10().pow(0.88)).mul("ee24")
                if (eff.gte("ee45")) eff = Decimal.pow(10,eff.div("ee45").log10().pow(0.85)).mul("ee45")
                if (eff.gte("ee200")) eff = Decimal.pow(10,eff.div("ee200").log10().pow(0.8)).mul("ee200")
                return eff
            },
            effectDisplay() {
                let dis = format(getFUpgEff(13)) + "x"
                if (this.effect().gte("e5e12")) dis += " (softcapped)"
                return dis
            },
            unlocked() {
                return hasFUpg(12)
            }
        },
        14: {
            title: "Fatally",
            description: "Cases boost fatality gain.",
            cost: new Decimal(500),
            effect() {
                let eff = player.points.add(10).max(10)
                eff = eff.log10().pow(0.075)
                if (hasFUpg(143)) eff = eff.tetrate(getFUpgEff(143))
                if (eff.gte(Decimal.pow(10,1e8))) eff = Decimal.pow(10,eff.div(Decimal.pow(10,1e8)).log10().pow(0.8)).mul(Decimal.pow(10,1e8))
                if (eff.gte("ee9")) eff = eff.log10().mul(10).pow(1e8)
                return eff
            },
            effectDisplay() {
                let dis = format(getFUpgEff(14)) + "x"
                if (this.effect().gte(Decimal.pow(10,1e8))) dis += " (softcapped)"
                return dis
            },
            unlocked() {
                return hasFUpg(13)
            }
        },
        15: {
            title: "Fatalness",
            description: "Fatality 1st effect is applied after softcap and is stronger based on deaths.",
            cost: new Decimal(2500),
            effect() {
                let eff = player.d.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(2.5)
                return eff
            },
            effectDisplay() {
                return "^"+format(getFUpgEff(15))
            },
            unlocked() {
                return hasFUpg(14)
            }
        },
        21: {
            title: "Severely",
            description: "Fatality boosts severity gain exponent and unlock 3 more symptom buyables.",
            cost: new Decimal(5000),
            effect() {
                let eff = player.f.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.25)
                return eff
            },
            effectDisplay() {
                return "^"+format(getFUpgEff(21))
            },
            unlocked() {
                return hasFUpg(15)
            }
        },
        22: {
            title: "Severer",
            description: "Severity boosts fatality gain.",
            cost: new Decimal(8000),
            effect() {
                let eff = player.s.severity.add(10).max(10)
                eff = eff.pow("3e-7")
                if (eff.gte(1e30)) eff = Decimal.pow(10,eff.div(1e30).log10().pow(0.4)).mul(1e30)
                if (eff.gte("e40000")) eff = Decimal.pow(10,eff.div("e40000").log10().pow(0.8)).mul("e40000")
                if (eff.gte("e100000")) eff = eff.log10().pow(2e4)
                return eff
            },
            effectDisplay() {
                let dis = format(getFUpgEff(22))+"x"
                if (getFUpgEff(22).gte(1e30)) dis += " (softcapped)"
                return dis
            },
            unlocked() {
                return hasFUpg(21)
            }
        },
        23: {
            title: "Deadlier",
            description: "Fatality boosts death gain.",
            cost: new Decimal(30000),
            effect() {
                let eff = player.f.points.add(1).max(1)
                eff = Decimal.pow(10,eff.log10().pow(1.75)).pow(15)
                return eff
            },
            effectDisplay() {
                return format(getFUpgEff(23))+"x"
            },
            unlocked() {
                return hasFUpg(22)
            }
        },
        24: {
            title: "Infectious",
            description: "Infectivity boosts fatality gain.",
            cost: new Decimal(55555),
            effect() {
                let eff = player.i.points.add(1).max(1)
                eff = Decimal.pow(10,eff.log10().pow(0.2)).pow(0.005)
                if (eff.gte(Decimal.pow(10,1e3))) eff = Decimal.pow(10,eff.div(Decimal.pow(10,1e3)).log10().pow(0.7)).mul(Decimal.pow(10,1e3))
                if (eff.gte("e30000")) eff = Decimal.pow(10,eff.div("e30000").log10().pow(0.8)).mul("e30000")
                if (eff.gte("e100000")) eff = eff.log10().pow(2e4)
                return eff
            },
            effectDisplay() {
                let dis = format(getFUpgEff(24))+"x"
                if (getFUpgEff(24).gte(Decimal.pow(10,1e3))) dis += " (softcapped)"
                return dis
            },
            unlocked() {
                return hasFUpg(23)
            }
        },
        25: {
            title: "More Fatal",
            description: "Add 1 to base fatality gain exponent and autobuy death buyables 100 per second.",
            cost: new Decimal(6e6),
            unlocked() {
                return hasFUpg(24)
            }
        },
        31: {
            title: "Fataler",
            description: "Infectivity boosts 'Fatal'.",
            cost: new Decimal(1e8),
            effect() {
                let eff = player.i.points.add(10).max(10)
                eff = eff.log10().pow(0.13)
                if (eff.gte(Decimal.pow(10,1e20))) eff = eff.div(Decimal.pow(10,1e20)).log10().pow(0.8).pow10().mul(Decimal.pow(10,1e20))
                if (eff.gte("ee24")) eff = eff.div("ee24").log10().pow(0.8).pow10().mul("ee24")
                return eff
            },
            effectDisplay() {
                return "^"+format(getFUpgEff(31))
            },
            unlocked() {
                return hasFUpg(25)
            }
        },
        32: {
            title: "Fatalest",
            description: "Cases add to the fatality exponent.",
            cost: new Decimal(1e9),
            effect() {
                let eff = player.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.175)
                return eff
            },
            effectDisplay() {
                return "+"+format(getFUpgEff(32))
            },
            unlocked() {
                return hasFUpg(31)
            }
        },
        33: {
            title: "Fatal Infection",
            description: "Fatality power boosts 'Infection'.",
            cost: new Decimal(3e13),
            effect() {
                let eff = player.f.p.max(0).add(10).max(10)
                eff = eff.log10().pow(0.75)
                return eff
            },
            effectDisplay() {
                return "^"+format(getFUpgEff(33))
            },
            unlocked() {
                return hasMilestone("f", 6)
            }
        },
        34: {
            title: "Powerful Fatalities",
            description: "Fatality boosts fatality power gain.",
            cost: new Decimal(2e14),
            effect() {
                let eff = player.f.points.add(1).max(1)
                eff = eff.pow(0.07)
                if (eff.gte("e15000")) eff = eff.div("e15000").pow(0.2).mul("e15000")
                if (eff.gte("ee50")) eff = Decimal.pow(10,eff.div("ee50").log10().pow(0.88)).mul("ee50")
                return eff
            },
            effectDisplay() {
                let dis = format(getFUpgEff(34))+"x"
                if (getFUpgEff(34).gte("e15000")) dis += " (softcapped)"
                return dis
            },
            unlocked() {
                return hasFUpg(33)
            }
        },
        35: {
            title: "Death Dimension",
            description: "Deaths boost fatality dimensions.",
            cost: new Decimal(4e16),
            effect() {
                let eff = player.d.points.add(10).max(10)
                eff = eff.log10().pow(0.13)
                return eff
            },
            effectDisplay() {
                return format(getFUpgEff(35))+"x"
            },
            unlocked() {
                return hasFUpg(34)
            }
        },
        41: {
            title: "Case Dimension",
            description: "Cases boost fatality dimensions.",
            cost: new Decimal(1e23),
            effect() {
                let eff = player.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10()
                return eff
            },
            effectDisplay() {
                return format(getFUpgEff(41))+"x"
            },
            unlocked() {
                return hasFUpg(35)
            }
        },
        42: {
            title: "Powerful Power",
            description: "Fatality power boosts fatality exponent.",
            cost: new Decimal(3.5e35),
            effect() {
                let eff = player.f.p.add(10).max(10)
                eff = eff.log10().pow(0.2)
                return eff
            },
            effectDisplay() {
                return "+"+format(getFUpgEff(42))
            },
            unlocked() {
                return hasFUpg(41)
            }
        },
        43: {
            title: "Powerful Cases",
            description: "Fatality power boosts cases gain.",
            cost: new Decimal(4e40),
            effect() {
                let eff = player.f.p.add(10).max(10)
                eff = eff.log10().pow(0.14)
                if (eff.gte(Decimal.pow(10,1e24))) eff = eff.log10().mul(10).pow(4e22)
                return eff
            },
            effectDisplay() {
                return "^"+format(getFUpgEff(43))
            },
            unlocked() {
                return hasFUpg(42)
            }
        },
        44: {
            title: "Fatal Fatalities",
            description: "Fatality boosts cases gain.",
            cost: new Decimal(5.05e50),
            effect() {
                let eff = player.f.points.add(10).max(10)
                eff = eff.log10().pow(0.2)
                if (eff.gte(Decimal.pow(10,1e24))) eff = eff.log10().mul(10).pow(4e22)
                return eff
            },
            effectDisplay() {
                return "^"+format(getFUpgEff(44))
            },
            unlocked() {
                return hasFUpg(43)
            }
        },
        45: {
            title: "Deadly Power",
            description: "Fatality power boosts death gain.",
            cost: new Decimal(6.06e60),
            effect() {
                let eff = player.f.p.add(1).max(1)
                eff = eff.pow(1000)
                return eff
            },
            effectDisplay() {
                return format(getFUpgEff(45))+"x"
            },
            unlocked() {
                return hasFUpg(44)
            }
        },
        51: {
            title: "Fatal Deaths",
            description: "Deaths add to the fatality exponent.",
            cost: new Decimal(7.07e70),
            effect() {
                let eff = player.d.points.add(1).max(1)
                eff = eff.log10().pow(0.197)
                if (eff.gte(1e6)) eff = eff.log10().add(4).pow(6)
                if (eff.gte(1e10)) eff = eff.log10().pow(10)
                return eff
            },
            effectDisplay() {
                return "+"+format(getFUpgEff(51))
            },
            unlocked() {
                return hasFUpg(45)
            }
        },
        52: {
            title: "Severity Dimension",
            description: "Severity boosts fatality dimensions.",
            cost: new Decimal(1.62e162),
            effect() {
                let eff = player.s.severity.add(10).max(10)
                eff = eff.log10().pow(0.6)
                return eff
            },
            effectDisplay() {
                return format(getFUpgEff(52))+"x"
            },
            unlocked() {
                return hasFUpg(51)
            }
        },
        53: {
            title: "Infected Dimension",
            description: "Infectivity increases multiplier per dimension.",
            cost: new Decimal(2.06e206),
            effect() {
                let eff = player.i.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.1).div(2)
                return eff
            },
            effectDisplay() {
                return "+"+format(getFUpgEff(53))
            },
            unlocked() {
                return hasFUpg(52)
            }
        },
        54: {
            title: "Uncoated Fatalities",
            description: "Fatality boosts uncoaters 1st effect.",
            cost: new Decimal(2.626e262),
            effect() {
                let eff = player.f.points.add(10).max(10)
                eff = eff.log10().pow(2.35)
                return eff
            },
            effectDisplay() {
                return "^"+format(getFUpgEff(54))
            },
            unlocked() {
                return hasFUpg(53)
            }
        },
        55: {
            title: "Uncoated Dimension",
            description: "Uncoaters boost fatality dimensions.",
            cost: new Decimal(2.75e275),
            effect() {
                let eff = player.u.points.add(1).max(1)
                eff = eff.pow(1.7)
                return eff
            },
            effectDisplay() {
                return format(getFUpgEff(55))+"x"
            },
            unlocked() {
                return hasFUpg(54)
            }
        },
        61: {
            title: "Replicated Dimension",
            description: "Replicators boost fatality dimensions.",
            cost: Decimal.pow(10,353).mul(3.535),
            effect() {
                let eff = player.r.points.add(1).max(1).pow(0.75)
                return eff
            },
            effectDisplay() {
                return format(getFUpgEff(61))+"x"
            },
            unlocked() {
                return hasFUpg(55)
            }
        },
        62: {
            title: "Replicated Power",
            description: "Replicators boost fatality power effect.",
            cost: Decimal.pow(10,505).mul(5.05),
            effect() {
                let eff = player.r.points.add(10).max(10).log10().div(7.45)
                if (eff.gte(1.2)) eff = eff.div(1.1).pow(0.5).mul(1.2)
                return eff.max(1)
            },
            effectDisplay() {
                return "^"+format(getFUpgEff(62))
            },
            unlocked() {
                return hasFUpg(61)
            }
        },
        63: {
            title: "Multiplied Fatalities",
            description: "Fatality adds to the Dimension Multiplier base.",
            cost: Decimal.pow(10,911).mul(9.111),
            effect() {
                let eff = player.f.points.add(10).max(10)
                eff = eff.log10().pow(0.05).div(50)
                return eff
            },
            effectDisplay() {
                return "+"+format(getFUpgEff(63))
            },
            unlocked() {
                return hasFUpg(62)
            }
        },
        64: {
            title: "Multiplied Cases",
            description: "Cases add to the Dimension Multiplier base.",
            cost: Decimal.pow(10,1158).mul(1.158),
            effect() {
                let eff = player.points.add(10).max(10)
                eff = eff.log10().pow(0.07).div(930)
                if (eff.gte(0.115)) eff = eff.div(0.115).pow(0.4).mul(0.115)
                if (eff.gte(0.3)) eff = eff.div(0.3).pow(0.1).mul(0.3)
                return eff.min(Decimal.pow(10,1e16))
            },
            effectDisplay() {
                return "+"+format(getFUpgEff(64))
            },
            unlocked() {
                return hasFUpg(63)
            }
        },
        65: {
            title: "Scaling Reduction",
            description: "Reduce the Dimension and Dimension Boost cost scaling by 1.",
            cost: Decimal.pow(10,1515).mul(1.515),
            unlocked() {
                return hasFUpg(64)
            }
        },
        71: {
            title: "8 Dimension Cases",
            description: "Fatality Dimension 8 gives 2 free 'Cases Boost'.",
            cost: Decimal.pow(10,1731).mul(1.731),
            effect() {
                let eff = getBuyableAmount("f",24).mul(2)
                if (eff.gte(1e5)) eff = eff.div(1e5).pow(0.33).mul(1e5)
                if (eff.gte(5e11) && inChallenge("ct",32)) eff = eff.div(5e11).pow(0.33).mul(5e11)
                if (eff.gte(1e60) && inChallenge("ct",32)) eff = eff.div(1e60).pow(0.75).mul(1e60)
                if (eff.gte(1e183) && inChallenge("ct",32)) eff = eff.div(1e183).pow(0.4).mul(1e183)
                if (eff.gte("e415") && inChallenge("ct",32)) eff = eff.log10().div(415).pow(0.7).mul(415).pow10()
                if (eff.gte("e967") && inChallenge("ct",32)) eff = eff.log10().div(967).pow(0.6).mul(967).pow10()
                if (eff.gte(Decimal.pow(10,2e5))) eff = eff.log10().div(2).pow(4e4)
                return eff.floor()
            },
            effectDisplay() {
                let dis = "+"+formatWhole(getFUpgEff(71))
                if (this.effect().gte(1e5)) dis += " (softcapped)"
                return dis
            },
            unlocked() {
                return hasFUpg(65)
            }
        },
        72: {
            title: "Boosted Boosts",
            description: "Multiply the Dimension Boost base by 2.",
            cost: Decimal.pow(10,2092).mul(2.092),
            unlocked() {
                return hasFUpg(71)
            }
        },
        73: {
            title: "BULK",
            description: "Reduce the Dimension cost scaling by 1 and autobuyers buy 1,000x more and 2x faster.",
            cost: Decimal.pow(10,2888).mul(2.888),
            unlocked() {
                return hasFUpg(72)
            }
        },
        74: {
            title: "Boost Scaling",
            description: "Reduce the Dimension Boost cost scaling by 0.5.",
            cost: Decimal.pow(10,3222).mul(3.222),
            unlocked() {
                return hasFUpg(73)
            }
        },
        75: {
            title: "Boost Boosters",
            description: "Multiply Dimension Boost base by 5 and Multiplier Boost is 1.125x stronger.",
            cost: Decimal.pow(10,4134).mul(4.134),
            unlocked() {
                return hasFUpg(74)
            }
        },
        81: {
            title: "Virus Dimension",
            description: "VP boosts fatality dimensions.",
            cost: decimalOne,
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.v.points.add(10).max(10)
                eff = eff.log10().pow(0.5)
                return eff
            },
            effectDisplay() {
                return format(getFUpgEff(81))+"x"
            },
            unlocked() {
                return hasMilestone("f",12)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(81)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(1)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        82: {
            title: "Stronger Dimensions",
            description: "Increase the multiplier per Dimension by +0.3.",
            cost: decimalOne,
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            unlocked() {
                return hasMilestone("f",12)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(82)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(1)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        91: {
            title: "Casualty 18",
            description: "Total casualty boosts Fatality Dimension 1 and 8.",
            cost: decimalOne,
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.f.casualtyTotal.add(1).max(1)
                eff = eff.pow(15)
                return eff.min(Decimal.pow(10,1e25))
            },
            effectDisplay() {
                return format(getFUpgEff(91))+"x"
            },
            unlocked() {
                return hasFUpg(81)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(91)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(1)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        92: {
            title: "Casualty 27",
            description: "Total casualty boosts Fatality Dimension 2 and 7.",
            cost: decimalOne,
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.f.casualtyTotal.add(1).max(1)
                eff = eff.pow(15)
                return eff.min(Decimal.pow(10,1e25))
            },
            effectDisplay() {
                return format(getFUpgEff(92))+"x"
            },
            unlocked() {
                return hasFUpg(82)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(92)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(1)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        101: {
            title: "Casualty 36",
            description: "Total casualty boosts Fatality Dimension 3 and 6.",
            cost: decimalOne,
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.f.casualtyTotal.add(1).max(1)
                eff = eff.pow(15)
                return eff.min(Decimal.pow(10,1e25))
            },
            effectDisplay() {
                return format(getFUpgEff(101))+"x"
            },
            unlocked() {
                return hasFUpg(91)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(101)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(1)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        102: {
            title: "Casualty 45",
            description: "Total casualty boosts Fatality Dimension 4 and 5.",
            cost: decimalOne,
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.f.casualtyTotal.add(1).max(1)
                eff = eff.pow(15)
                return eff.min(Decimal.pow(10,1e25))
            },
            effectDisplay() {
                return format(getFUpgEff(92))+"x"
            },
            unlocked() {
                return hasFUpg(92)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(102)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(1)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        111: {
            title: "Scaled Dimension",
            description: "Reduce the Dimension, and Multiplier Boost scaling by 1.",
            cost: decimalThree,
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            unlocked() {
                return hasFUpg(101)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(111)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(3)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        112: {
            title: "Stronger Multipliers",
            description: "Multiplier Boosts are 1.3x stronger.",
            cost: decimalThree,
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            unlocked() {
                return hasFUpg(102)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(112)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(3)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        83: {
            title: "Sacrificed Fatality",
            description: "Unlock Sacrifice.",
            cost: decimalFive,
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            unlocked() {
                return hasMilestone("f",12)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(83)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(5)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        93: {
            title: "Dimension 55555",
            description: "Multiply Dimension Boost base by 5.",
            cost: new Decimal(7),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            unlocked() {
                return hasFUpg(83)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(93)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(7)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        103: {
            title: "Casualty Boost",
            description: "Casualty boosts Fatality Dimensions.",
            cost: decimalTen,
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.f.casualty.add(1).max(1)
                eff = eff.pow(20)
                return eff.min(Decimal.pow(10,1e25))
            },
            effectDisplay() {
                return format(getFUpgEff(103))+"x"
            },
            unlocked() {
                return hasFUpg(93)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(103)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(10)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        113: {
            title: "Casualty Auto Gain",
            description: "Gain 50% of best casualty/min.",
            cost: new Decimal(15),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.f.cpm.mul(0.5)
                return eff
            },
            effectDisplay() {
                let dis = format(getFUpgEff(113))+"/s"
                if (getFUpgEff(113).lt(10)) dis = format(getFUpgEff(113).mul(60))+"/min"
                return dis
            },
            unlocked() {
                return hasFUpg(103)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(113)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(15)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        84: {
            title: "Scaled",
            description: "You start with 2 Dimension Shifts, Reduce Dimension scaling by 1, Dimension Boost scaling by 0.5.",
            cost: new Decimal(30),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            unlocked() {
                return hasMilestone("f",12)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(84)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(30)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        94: {
            title: "Powerful Casualties",
            description: "Fatality power boosts casualty gain.",
            cost: new Decimal(110),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.f.p.add(10).max(10)
                eff = eff.log10().pow(0.2)
                return eff
            },
            effectDisplay() {
                return format(getFUpgEff(94))+"x"
            },
            unlocked() {
                return hasFUpg(84)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(94)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(110)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        104: {
            title: "Casual Cases",
            description: "Cases boost casualty gain.",
            cost: new Decimal(2000),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.points.add(10).max(10)
                eff = eff.log10().pow(0.02)
                return eff
            },
            effectDisplay() {
                return format(getFUpgEff(104))+"x"
            },
            unlocked() {
                return hasFUpg(94)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(104)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(2000)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        114: {
            title: "Severe Casualties",
            description: "Severity boosts casualty gain.",
            cost: new Decimal(15e3),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.s.severity.add(10).max(10)
                eff = eff.log10().pow(0.1)
                return eff
            },
            effectDisplay() {
                return format(getFUpgEff(114))+"x"
            },
            unlocked() {
                return hasFUpg(104)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(114)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(15e3)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        85: {
            title: "Deadly Casualties",
            description: "Deaths boost casualty gain.",
            cost: new Decimal(5e6),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.d.points.add(10).max(10)
                eff = eff.log10().pow(0.15)
                return eff
            },
            effectDisplay() {
                return format(getFUpgEff(85))+"x"
            },
            unlocked() {
                return hasFUpg(114)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(85)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(5e6)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        95: {
            title: "Casual Casualties",
            description: "Casualty boosts cases gain.",
            cost: new Decimal(3e9),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.f.casualty.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(5)
                return eff
            },
            effectDisplay() {
                return "^"+format(getFUpgEff(95))
            },
            unlocked() {
                return hasFUpg(85)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(95)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(3e9)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        105: {
            title: "Casual Multipliers",
            description: "Casualty boosts Multiplier Boosts.",
            cost: new Decimal(8e9),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.f.casualty.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(1.2)
                if (eff.gte(1.7)) eff = eff.div(1.7).pow(0.3).mul(1.7)
                return eff
            },
            effectDisplay() {
                let dis = format(getFUpgEff(105))+"x"
                if (getFUpgEff(105).gte(1.7)) dis += " (softcapped)"
                return dis
            },
            unlocked() {
                return hasFUpg(95)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(105)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(8e9)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        115: {
            title: "Casual Scaling",
            description: "Reduce the Dimension, and Multiplier Boost scaling by 1.",
            cost: new Decimal(1e11),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            unlocked() {
                return hasFUpg(105)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(115)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(1e11)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        121: {
            title: "Stronger Casualties",
            description: "Multiplier Boosts are 1.35x stronger.",
            cost: new Decimal(2e19),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            unlocked() {
                return hasFUpg(115)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(121)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(2e19)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        122: {
            title: "Casual Boosts",
            description: "Casualty boosts Dimension Boost base, Reduce Dimension scaling by 1, Dimension Boost scaling by 0.5.",
            cost: new Decimal(2.828e28),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.f.casualty.add(10).max(10)
                eff = eff.log10()
                return eff
            },
            effectDisplay() {
                return format(getFUpgEff(122))+"x"
            },
            unlocked() {
                return hasFUpg(121)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(122)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(2.828e28)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        123: {
            title: "Case-ual Boosts",
            description: "Casualty gives free 'Cases Boost' and buyable autobuyers buy ^2 more.",
            cost: new Decimal(4.141e41),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.f.casualty.add(10).max(10)
                eff = eff.log10().pow(0.3).mul(400)
                if (eff.gte(2.5e8) && inChallenge("ct",32)) eff = eff.div(2.5e8).pow(0.15).mul(2.5e8)
                if (eff.gte(1e183) && inChallenge("ct",32)) eff = eff.div(1e183).pow(0.4).mul(1e183)
                if (eff.gte("e415") && inChallenge("ct",32)) eff = eff.log10().div(415).pow(0.7).mul(415).pow10()
                if (eff.gte("e967") && inChallenge("ct",32)) eff = eff.log10().div(967).pow(0.6).mul(967).pow10()
                if (eff.gte(Decimal.pow(10,2e5))) eff = eff.log10().div(2).pow(4e4)
                return eff.floor()
            },
            effectDisplay() {
                return "+"+formatWhole(getFUpgEff(123))
            },
            unlocked() {
                return hasFUpg(122)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(123)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(4.141e41)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        124: {
            title: "Fatal Casualties",
            description: "Casualty boosts fatality effect.",
            cost: new Decimal(9.393e93),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.f.casualty.add(10).max(10)
                eff = eff.log10().mul(50)
                return eff
            },
            effectDisplay() {
                return "^"+format(getFUpgEff(124))
            },
            unlocked() {
                return hasFUpg(123)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(124)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(9.393e93)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        125: {
            title: "Case PoWeR",
            description: "Casualty power boosts cases gain.",
            cost: Decimal.pow(10,369).mul(3.69),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.f.cp.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(5)
                return eff
            },
            effectDisplay() {
                return "^"+format(getFUpgEff(125))
            },
            unlocked() {
                return hasFUpg(124)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(125)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte("3.69e369")) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        131: {
            title: "Casual Replication",
            description: "Casualty reduces replicate interval.",
            cost: Decimal.pow(10,500).mul(5),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.f.casualty.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10()
                return eff
            },
            effectDisplay() {
                return format(getFUpgEff(131))+"x"
            },
            unlocked() {
                return hasMilestone("f",17)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(131)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte("5e500")) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        132: {
            title: "Replicated Replication",
            description: "Replicators reduce interval and boost Multiplier Boosts.",
            cost: Decimal.pow(10,606).mul(6.06),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.r.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(3)
                return eff
            },
            effect2() {
                let eff = player.r.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.5)
                return eff
            },
            effectDisplay() {
                return "Interval:" + format(this.effect())+"x, Boosts:" + format(this.effect2())+"x"
            },
            unlocked() {
                return hasFUpg(131)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(132)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte("6.06e606")) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        133: {
            title: "Distance",
            description: "Divide the max interval by 20 and Distant scaling starts 20 later.",
            cost: Decimal.pow(10,792).mul(7.92),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            unlocked() {
                return hasFUpg(132)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(133)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(Decimal.pow(10,792).mul(7.92))) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        134: {
            title: "Replicated Scaling",
            description: "Reduce the Dimension and Dimension Boost scaling by 0.5.",
            cost: Decimal.pow(10,1107).mul(1.107),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            unlocked() {
                return hasFUpg(133)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(134)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(Decimal.pow(10,1107).mul(1.107))) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        135: {
            title: "Casual Casual",
            description: "Increase the Casualty Multiplier base by +0.1.",
            cost: Decimal.pow(10,2100).mul(2.1),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            unlocked() {
                return hasFUpg(134)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(135)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte(Decimal.pow(10,2100).mul(2.1))) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        141: {
            title: "Cases MultiBoost",
            description: "Multiplier Boosts increase 'Cases Boost' base by +5e-7.",
            cost: new Decimal("2.395e2395"),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = getBuyableAmount("f",33).div(2e6)
                if (eff.gte(0.003)) eff = eff.div(0.003).pow(0.25).mul(0.003)
                return eff
            },
            effectDisplay() {
                let dis = "+"+format(getFUpgEff(141))
                if (getFUpgEff(141).gte(0.003)) dis += " (softcapped)"
                return dis
            },
            unlocked() {
                return hasFUpg(135)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(141)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte("2.395e2395")) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        142: {
            title: "Case Scaling",
            description: "Casualty reduces 'Cases Boost' scaling.",
            cost: new Decimal("2.787e2787"),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.f.casualty.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.03)
                return eff.min(1.006)
            },
            effectDisplay() {
                return format(getFUpgEff(142))+"x"
            },
            unlocked() {
                return hasFUpg(141)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(142)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte("2.787e2787")) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        143: {
            title: "Fatal Synergy",
            description: "Cases and 'Fatally' boost each other, buyable autobuyers buy ^10 more.",
            cost: new Decimal("3.958e3958"),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let p = player.points.add(1).max(1)
                let eff = slog(p).pow(0.47)
                return eff.min(2)
            },
            effect2() {
                let eff = getFUpgEff(14).add(10).max(10)
                eff = eff.log10().pow(0.15)
                if (eff.gte(Decimal.pow(10,1e24))) eff = eff.log10().mul(10).pow(4e22)
                return eff
            },
            effectDisplay() {
                let dis = "Fatally: ^^"+format(tmp.f.upgrades[143].effect)
                if (tmp.f.upgrades[143].effect.gte(2)) dis += " (hardcapped)"
                return dis + ", Cases: ^" + format(this.effect2())
            },
            unlocked() {
                return hasFUpg(142)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(143)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte("3.958e3958")) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        144: {
            title: "Fatal Cases",
            description: "Fatality boosts cases exponent.",
            cost: new Decimal("5.75e5750"),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.f.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.07)
                return eff
            },
            effectDisplay() {
                return "^"+format(getFUpgEff(144))
            },
            unlocked() {
                return hasFUpg(143)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(144)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte("5.75e5750")) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        145: {
            title: "Distant Fatalities",
            description: "Fatality makes Distant scaling start later.",
            cost: new Decimal("7.272e7272"),
            currencyDisplayName: "casualty",
            currencyInternalName: "casualty",
            currencyLayer: "f",
            effect() {
                let eff = player.f.points.add(10).max(10)
                eff = eff.log10().pow(0.2355)
                if (eff.gte(1000)) eff = eff.div(1e3).pow(0.3).mul(1e3)
                return eff
            },
            effectDisplay() {
                return "+"+format(getFUpgEff(145))
            },
            unlocked() {
                return hasFUpg(144)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(145)) {
                    let color = "#bf8f8f"
                    if (player.f.casualty.gte("7.272e7272")) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        151: {
            title: "MultiVirus",
            description: "Casual viruses add to Casualty Multiplier base.",
            cost: decimalOne,
            currencyDisplayName: "casual virus",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.f.virus.add(10).max(10)
                eff = eff.log10().pow(0.2).div(15)
                return eff
            },
            effectDisplay() {
                return "+"+format(getFUpgEff(151))
            },
            unlocked() {
                return hasMilestone("f",20)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(151)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(1)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        152: {
            title: "Boosted Virus",
            description: "Casual viruses add to 'Cases Boost' base.",
            cost: new Decimal(22650),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.f.virus.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.5).div(7e3)
                return eff
            },
            effectDisplay() {
                return "+"+format(getFUpgEff(152))
            },
            unlocked() {
                return hasFUpg(151)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(152)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(22650)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        153: {
            title: "Casual Vimension",
            description: "Casual viruses boost Casualty Dimensions.",
            cost: new Decimal(220300),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.f.virus.add(1).max(1)
                eff = eff.pow(17)
                return eff
            },
            effectDisplay() {
                return format(getFUpgEff(153))+"x"
            },
            unlocked() {
                return hasFUpg(152)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(153)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(220300)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        154: {
            title: "Scaled Virus",
            description: "Casual viruses reduce Dimension scaling.",
            cost: new Decimal(675200),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.f.virus.add(10).max(10)
                eff = eff.log10().pow(0.08).div(13)
                return eff.min(0.3)
            },
            effectDisplay() {
                return "-"+format(getFUpgEff(154))
            },
            unlocked() {
                return hasFUpg(153)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(154)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(675200)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        155: {
            title: "Case-ual Virus",
            description: "Cases boost casual virus gain.",
            cost: new Decimal(1926500),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.points.add(10).max(10)
                eff = eff.log10().pow(0.03)
                if (eff.gte(Decimal.pow(10,3e9))) eff = Decimal.pow(10,eff.div(Decimal.pow(10,3e9)).log10().pow(0.85)).mul(Decimal.pow(10,3e9))
                if (eff.gte(Decimal.pow(10,1.5e15))) eff = Decimal.pow(10,eff.div(Decimal.pow(10,1.5e15)).log10().pow(0.82)).mul(Decimal.pow(10,1.5e15))
                if (eff.gte(Decimal.pow(10,1.8e18))) eff = Decimal.pow(10,eff.div(Decimal.pow(10,1.8e18)).log10().pow(0.78)).mul(Decimal.pow(10,1.8e18))
                if (eff.gte(Decimal.pow(10,1e20))) eff = eff.log10().pow(5e18)
                return eff
            },
            effectDisplay() {
                let dis = format(getFUpgEff(155))+"x"
                if (getFUpgEff(155).gte(Decimal.pow(10,3e9))) dis += " (softcapped)" 
                return dis
            },
            unlocked() {
                return hasFUpg(154)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(155)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(1926500)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        156: {
            title: "Case-ual Upgrades",
            description: "Raise cases to ^1.2 per Casual Virus upgrade.",
            cost: new Decimal(2.599e9),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.f.upgrades.length-70
                eff = Decimal.pow(1.2,eff)
                return eff.max(1)
            },
            effectDisplay() {
                return "^"+format(getFUpgEff(156))
            },
            unlocked() {
                return hasFUpg(155)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(156)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(2.599e9)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        157: {
            title: "Self Casual Boost",
            description: "Casual viruses boost itself and cases gain.",
            cost: new Decimal(4.0874e9),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.f.virus.add(10).max(10)
                eff = eff.log10().pow(4)
                eff = eff.pow(tmp.f.buyables[103].effect)
                return eff.max(1)
            },
            effect2() {
                let eff = player.f.virus.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(4)
                eff = eff.pow(tmp.f.buyables[103].effect)
                if (eff.gte(Decimal.pow(10,Decimal.pow(10,1e46)))) eff = eff.log10().log10().mul(1e4).pow(2e44).pow10()
                return eff.max(1)
            },
            effectDisplay() {
                return format(tmp.f.upgrades[157].effect)+"x, ^"+format(tmp.f.upgrades[157].effect2)
            },
            unlocked() {
                return hasFUpg(156)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(157)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(4.0874e9)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        161: {
            title: "Powerful Viruses",
            description: "Casual viruses boost fatality power effect.",
            cost: new Decimal(8.2995e14),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.f.virus.add(10).max(10)
                eff = eff.log10().pow(0.6)
                return eff.max(1)
            },
            effectDisplay() {
                return "^"+format(getFUpgEff(161))
            },
            unlocked() {
                return hasFUpg(157)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(161)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(8.2995e14)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        162: {
            title: "Fatal Virus",
            description: "Fatality boosts casual virus gain.",
            cost: new Decimal(1.4627e15),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.f.points.add(10).max(10)
                eff = eff.log10().pow(0.6)
                return eff.max(1)
            },
            effectDisplay() {
                return format(getFUpgEff(162))+'x'
            },
            unlocked() {
                return hasFUpg(161)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(162)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(1.4627e15)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        163: {
            title: "Virus Virus",
            description: "Add 1 to base casual virus gain exponent.",
            cost: new Decimal(6.2435e20),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            unlocked() {
                return hasFUpg(162)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(163)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(6.2435e20)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        164: {
            title: "Infected Casual",
            description: "Infectivity adds to casual virus exponent.",
            cost: new Decimal(1.0085e26),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.i.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.3).div(4)
                return eff
            },
            effectDisplay() {
                return "+"+format(getFUpgEff(164))
            },
            unlocked() {
                return hasFUpg(163)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(164)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(1.0085e26)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        165: {
            title: "Severe Casual",
            description: "Severity adds to casual virus exponent.",
            cost: new Decimal(3.0174e31),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.s.severity.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.4).div(4)
                if (eff.gte(1e20)) eff = eff.div(1e20).pow(0.2).mul(1e20)
                return eff
            },
            effectDisplay() {
                return "+"+format(getFUpgEff(165))
            },
            unlocked() {
                return hasFUpg(164)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(165)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(3.0174e31)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        166: {
            title: "Replicated Casual",
            description: "Replicators add to casual virus exponent.",
            cost: new Decimal(2.7224e37),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.r.points.add(10).max(10)
                eff = eff.log10().pow(0.25).div(2)
                return eff
            },
            effectDisplay() {
                return "+"+format(getFUpgEff(166))
            },
            unlocked() {
                return hasFUpg(165)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(166)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(2.7224e37)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        167: {
            title: "Powerful Casuals",
            description: "Casual virus boosts casualty power effect.",
            cost: new Decimal(2.1969e44),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.f.virus.add(10).max(10)
                let exp = 0.403425
                if (inChallenge("ct",32)) exp = 0.05
                eff = eff.log10().pow(exp)
                return eff
            },
            effectDisplay() {
                return "^"+format(getFUpgEff(167))
            },
            unlocked() {
                return hasFUpg(166)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(167)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(2.1969e44)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        171: {
            title: "Fatal Casual",
            description: "Casual viruses boost fatality gain.",
            cost: new Decimal(3.111e48),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.f.virus.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.3)
                return eff
            },
            effectDisplay() {
                return "^"+format(getFUpgEff(171))
            },
            unlocked() {
                return hasFUpg(167)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(171)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(3.111e48)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        172: {
            title: "Casual MultiVoost",
            description: "Casual viruses boost Multiplier Boosts.",
            cost: new Decimal(1.2197e53),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.f.virus.add(10).max(10)
                let exp = 2 
                if (inChallenge("ct",32) && player.f.virus.gte(1)) exp = 0.3
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(exp)
                return eff
            },
            effectDisplay() {
                return format(getFUpgEff(172))+"x"
            },
            unlocked() {
                return hasFUpg(171)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(172)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(1.2197e53)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        173: {
            title: "Case-ual Multipliers",
            description: "Cases add to Casualty Multiplier base and unlock a buyable.",
            cost: new Decimal(5.98e54),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.1).div(10)
                return eff
            },
            effectDisplay() {
                return "+"+format(getFUpgEff(173))
            },
            unlocked() {
                return hasFUpg(172)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(173)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(5.98e54)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        174: {
            title: "Infected Softcaps",
            description: "Cases make 'Cases Boost' softcap start later.",
            cost: new Decimal(6.196e60),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.3).mul(100)
                return eff.floor()
            },
            effectDisplay() {
                return "+"+formatWhole(getFUpgEff(174))
            },
            unlocked() {
                return hasFUpg(173)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(174)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(6.196e60)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        175: {
            title: "Casual Softcaps",
            description: "Casual viruses make 'Cases Boost' softcap start later.",
            cost: new Decimal(1.533e66),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.f.virus.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(1.5).mul(200)
                return eff.floor()
            },
            effectDisplay() {
                return "+"+formatWhole(getFUpgEff(175))
            },
            unlocked() {
                return hasFUpg(174)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(175)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(1.533e66)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        176: {
            title: "Exponent Exponent",
            description: "Casual viruses boost cases exponent and unlock a buyable.",
            cost: new Decimal(7.316e69),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.f.virus.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.03)
                return eff
            },
            effectDisplay() {
                return "^"+format(getFUpgEff(176))
            },
            unlocked() {
                return hasFUpg(175)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(176)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(7.316e69)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        177: {
            title: "Casualer Virus",
            description: "Casualty adds to 'Virus Gain' base.",
            cost: new Decimal(1.02e88),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.f.casualty.add(10).max(10)
                eff = eff.log10().pow(0.1)
                return eff
            },
            effectDisplay() {
                return "+"+format(getFUpgEff(177))
            },
            unlocked() {
                return hasFUpg(176)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(177)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(1.02e88)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        181: {
            title: "Unlimited Casuals",
            description: "Remove cas. lim.,its form. is better,it boosts CV gain,RBs reset nothing.",
            cost: new Decimal(6.1248e150),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.f.casuals.add(1).max(1)
                eff = Decimal.pow(10,eff.log10().pow(0.305))
                if (hasUpgrade("e",24)) eff = eff.pow(upgradeEffect("e",24))
                return eff
            },
            effectDisplay() {
                return format(getFUpgEff(181))+"x"
            },
            unlocked() {
                return hasFUpg(177)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(181)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(6.1248e150)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        182: {
            title: "Unlimited Interval",
            description: "Remove the interval limit, and unlock autobuy interval.",
            cost: new Decimal(2.15e215),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            unlocked() {
                return hasFUpg(181)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(182)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(2.15e215)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        183: {
            title: "Unlimited Multiplier",
            description: "Remove the rep mult limit,unlock auto mult, and it boosts itself.",
            cost: new Decimal(2.48e248),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = tmp.f.buyables[91].base
                eff = eff.log10().pow(4.5).add(1).max(1)
                if (hasUpgrade("e",24)) eff = eff.pow(upgradeEffect("e",24))
                return eff
            },
            effectDisplay() {
                return "^"+format(getFUpgEff(183))
            },
            unlocked() {
                return hasFUpg(182)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(183)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(2.48e248)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        184: {
            title: "Faster Replication",
            description: "Casual viruses slow interval scaling.",
            cost: new Decimal(2.56e256),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.f.virus.add(1).max(1)
                let exp = 0.5
                if (inChallenge("ct",32)) exp = 0.07
                eff = eff.log10().pow(exp).div(10).add(1).max(1)
                eff = Decimal.div(0.2,eff).add(1).max(1)
                return eff.max(1.001)
            },
            effectDisplay() {
                return "1.2x -> "+format(getFUpgEff(184)) +'x'
            },
            unlocked() {
                return hasFUpg(183)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(184)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(2.56e256)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        185: {
            title: "Slow Scaling",
            description: "Cases reduce Dimension scaling and Distant scaling.",
            cost: new Decimal(1e286),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = player.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.1).div(7)
                return eff.min(0.4)
            },
            effect2() {
                let eff = player.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.15)
                return eff
            },
            effectDisplay() {
                return "-"+format(tmp.f.upgrades[185].effect) + ", "+format(tmp.f.upgrades[185].effect2)+"x"
            },
            unlocked() {
                return hasFUpg(184)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(185)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(1e286)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        186: {
            title: "Casualest Virus",
            description: "Each 'Virus Gain' adds 0.05 to its base.",
            cost: new Decimal(1.5e304),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = tmp.f.buyables[101].total.div(20)
                return eff
            },
            effectDisplay() {
                return "+"+format(getFUpgEff(186))
            },
            unlocked() {
                return hasFUpg(185)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(186)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte(1.5e304)) color = "#3d2963"
                    return color
                    }
                }
            }
        },
        187: {
            title: "More Exponenter",
            description: "Each SB adds 0.0033 to VE base and autobuy buyables once per second.",
            cost: new Decimal("e367"),
            currencyDisplayName: "casual viruses",
            currencyInternalName: "virus",
            currencyLayer: "f",
            effect() {
                let eff = tmp.f.buyables[103].total.mul(0.0033)
                return eff
            },
            effectDisplay() {
                return "+"+format(getFUpgEff(187))
            },
            unlocked() {
                return hasFUpg(186)
            },
            style: {
                "background-color"() {
                    if (!hasFUpg(187)) {
                    let color = "#bf8f8f"
                    if (player.f.virus.gte("e367")) color = "#3d2963"
                    return color
                    }
                }
            }
        },
    },
    challenges: { 
        rows: 6,
        cols: 2,
        11: {
            name: "Fatality Challenge 1",
            currencyDisplayName: "fatality",
            currencyInternalName: "points",
            currencyLayer: "f",
            challengeDescription: function() {
                let c11 = "Fatality power/1.8e308."
                if (inChallenge("f", 11)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("f", 11) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return new Decimal(Decimal.pow(10,5095).mul(5))
            },
            rewardDescription: "Unlock Fatality Dimension 1,2,3 Autobuyer.",
            onStart(testInput=false) { 
                if (testInput) {
                    startCChallenge(11)
                }
            },
            onComplete() {
                player.f.casualty = player.f.casualty.add(tmp.f.buyables[34].effect)
                player.f.casualtyTotal = player.f.casualtyTotal.add(tmp.f.buyables[34].effect)
            },
            unlocked(){
                return hasMilestone("f", 12)
            }
        },
        12: {
            name: "Fatality Challenge 2",
            currencyDisplayName: "fatality",
            currencyInternalName: "points",
            currencyLayer: "f",
            challengeDescription: function() {
                let c11 = "Multiplier per Fatality Dimension is 1."
                if (inChallenge("f", 12)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("f", 12) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return new Decimal(Decimal.pow(10,5095).mul(5))
            },
            rewardDescription: "Unlock Fatality Dimension 4,5,6 Autobuyer.",
            onStart(testInput=false) { 
                if (testInput) {
                    startCChallenge(12)
                }
            },
            onComplete() {
                player.f.casualty = player.f.casualty.add(tmp.f.buyables[34].effect)
                player.f.casualtyTotal = player.f.casualtyTotal.add(tmp.f.buyables[34].effect)
            },
            unlocked(){
                return hasMilestone("f", 12)
            }
        },
        21: {
            name: "Fatality Challenge 3",
            currencyDisplayName: "fatality",
            currencyInternalName: "points",
            currencyLayer: "f",
            challengeDescription: function() {
                let c11 = "Dimension cost scaling is 100x."
                if (inChallenge("f", 21)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("f", 21) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return new Decimal(Decimal.pow(10,5095).mul(5))
            },
            rewardDescription: "Unlock Fatality Dimension 7,8, Multiplier Autobuyer.",
            onStart(testInput=false) { 
                if (testInput) {
                    startCChallenge(21)
                }
            },
            onComplete() {
                player.f.casualty = player.f.casualty.add(tmp.f.buyables[34].effect)
                player.f.casualtyTotal = player.f.casualtyTotal.add(tmp.f.buyables[34].effect)
            },
            unlocked(){
                return hasMilestone("f", 12)
            }
        },
        22: {
            name: "Fatality Challenge 4",
            currencyDisplayName: "fatality",
            currencyInternalName: "points",
            currencyLayer: "f",
            challengeDescription: function() {
                let c11 = "You can't buy Dimension Boosts. Multiplier Boosts cost Fatality Dimension 6 and they are 1.5x stronger."
                if (inChallenge("f", 22)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("f", 22) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return new Decimal(Decimal.pow(10,5095).mul(5))
            },
            rewardDescription: "Unlock Dimension and Multiplier Boost Autobuyer.",
            onStart(testInput=false) { 
                if (testInput) {
                    startCChallenge(22)
                }
            },
            onComplete() {
                player.f.casualty = player.f.casualty.add(tmp.f.buyables[34].effect)
                player.f.casualtyTotal = player.f.casualtyTotal.add(tmp.f.buyables[34].effect)
            },
            unlocked(){
                return hasMilestone("f", 12)
            }
        },
        31: {
            name: "Casualty Challenge 1",
            currencyDisplayName: "fatality",
            currencyInternalName: "points",
            currencyLayer: "f",
            countsAs: [11,12,21,22],
            challengeDescription: function() {
                let c11 = "All Fatality Challenges are applied at once. You can't gain deaths. Fatality gain is gain from "+format("e10,450")+" deaths"
                if (inChallenge("f", 31)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("f", 31) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return new Decimal("e26000")
            },
            rewardDescription() {
                let des =  "Casualty boosts Casualty Dimensions."
                return des
            },
            rewardEffect() {
                 let c12 = player.f.casualty.add(10).max(10)
                 c12 = c12.log10().pow(1.5)
                 return c12
            },
            rewardDisplay() {return format(this.rewardEffect()) + 'x'},
            onStart(testInput=false) { 
                if (testInput) {
                    startCChallenge(31)
                }
            },
            onComplete() {
                player.f.casualty = player.f.casualty.add(tmp.f.buyables[34].effect)
                player.f.casualtyTotal = player.f.casualtyTotal.add(tmp.f.buyables[34].effect)
            },
            unlocked(){
                return player.f.best.gte("1e155000")
            },
            buttonColor: '#3d2963'
        },
        32: {
            name: "Casualty Challenge 2",
            currencyDisplayName: "fatality",
            currencyInternalName: "points",
            currencyLayer: "f",
            challengeDescription: function() {
                let c11 = "Multiplier Boosts are useless."
                if (inChallenge("f", 32)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("f", 32) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return new Decimal("e61000")
            },
            rewardDescription() {
                let des =  "More powerful Sacrifice."
                return des
            },
            onStart(testInput=false) { 
                if (testInput) {
                    startCChallenge(32)
                }
            },
            onComplete() {
                player.f.casualty = player.f.casualty.add(tmp.f.buyables[34].effect)
                player.f.casualtyTotal = player.f.casualtyTotal.add(tmp.f.buyables[34].effect)
            },
            unlocked(){
                return player.f.best.gte("1e177000")
            },
            buttonColor: '#3d2963'
        },
        41: {
            name: "Casualty Challenge 3",
            currencyDisplayName: "fatality",
            currencyInternalName: "points",
            currencyLayer: "f",
            challengeDescription: function() {
                let c11 = "Dimension scaling is 1.8e308x"
                if (inChallenge("f", 41)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("f", 41) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return new Decimal("e175500")
            },
            rewardDescription() {
                let des =  "Reduce the Dimension scaling by 1."
                return des
            },
            onStart(testInput=false) { 
                if (testInput) {
                    startCChallenge(41)
                }
            },
            onComplete() {
                player.f.casualty = player.f.casualty.add(tmp.f.buyables[34].effect)
                player.f.casualtyTotal = player.f.casualtyTotal.add(tmp.f.buyables[34].effect)
            },
            unlocked(){
                return player.f.best.gte("1e350000")
            },
            buttonColor: '#3d2963'
        },
        42: {
            name: "Casualty Challenge 4",
            currencyDisplayName: "fatality",
            currencyInternalName: "points",
            currencyLayer: "f",
            challengeDescription: function() {
                let c11 = "Fatality gain is ^0.1."
                if (inChallenge("f", 42)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("f", 42) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return new Decimal("e20000")
            },
            rewardDescription() {
                let des =  "Fatality gain is ^1.05 and casualty power effect is ^1.5."
                return des
            },
            onStart(testInput=false) { 
                if (testInput) {
                    startCChallenge(42)
                }
            },
            onComplete() {
                player.f.casualty = player.f.casualty.add(tmp.f.buyables[34].effect)
                player.f.casualtyTotal = player.f.casualtyTotal.add(tmp.f.buyables[34].effect)
            },
            unlocked(){
                return player.f.best.gte("1e410000")
            },
            buttonColor: '#3d2963'
        },
        51: {
            name: "Casualty Challenge 5",
            currencyDisplayName: "fatality",
            currencyInternalName: "points",
            currencyLayer: "f",
            challengeDescription: function() {
                let c11 = "Fatality gain exp is ^0.75."
                if (inChallenge("f", 51)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("f", 51) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return new Decimal("e11850")
            },
            rewardDescription() {
                let des =  "Multiplier Boosts are 1.2x stronger."
                return des
            },
            onStart(testInput=false) { 
                if (testInput) {
                    startCChallenge(51)
                }
            },
            onComplete() {
                player.f.casualty = player.f.casualty.add(tmp.f.buyables[34].effect)
                player.f.casualtyTotal = player.f.casualtyTotal.add(tmp.f.buyables[34].effect)
            },
            unlocked(){
                return player.f.best.gte("1e550000")
            },
            buttonColor: '#3d2963'
        },
        52: {
            name: "Casualty Challenge 6",
            currencyDisplayName: "fatality",
            currencyInternalName: "points",
            currencyLayer: "f",
            challengeDescription: function() {
                let c11 = "Fatality power is useless."
                if (inChallenge("f", 52)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("f", 52) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return new Decimal("e130000")
            },
            rewardDescription() {
                let des =  "Fatality Dimension Multiplier boosts Casualty Dimensions."
                return des
            },
            rewardEffect() {
                let c12 = tmp.f.buyables[31].effect
                c12 = c12.pow(2e-4)
                return c12
           },
           rewardDisplay() {return format(this.rewardEffect()) + 'x'},
            onStart(testInput=false) { 
                if (testInput) {
                    startCChallenge(52)
                }
            },
            onComplete() {
                player.f.casualty = player.f.casualty.add(tmp.f.buyables[34].effect)
                player.f.casualtyTotal = player.f.casualtyTotal.add(tmp.f.buyables[34].effect)
            },
            unlocked(){
                return player.f.best.gte("1e720000")
            },
            buttonColor: '#3d2963'
        },
        61: {
            name: "Casualty Challenge 7",
            currencyDisplayName: "fatality",
            currencyInternalName: "points",
            currencyLayer: "f",
            countsAs: [12],
            challengeDescription: function() {
                let c11 = "Dimension Boosts are the only thing that boosts dimensions."
                if (inChallenge("f", 61)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("f", 61) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return new Decimal("e157630")
            },
            rewardDescription() {
                let des =  "Fatality boosts Dimension Boosts."
                return des
            },
            rewardEffect() {
                let c12 = player.f.points.add(10).max(10)
                c12 = c12.log10().pow(0.7)
                return c12
           },
           rewardDisplay() {return format(this.rewardEffect()) + 'x'},
            onStart(testInput=false) { 
                if (testInput) {
                    startCChallenge(61)
                }
            },
            onComplete() {
                player.f.casualty = player.f.casualty.add(tmp.f.buyables[34].effect)
                player.f.casualtyTotal = player.f.casualtyTotal.add(tmp.f.buyables[34].effect)
            },
            unlocked(){
                return player.f.best.gte("1e800000")
            },
            buttonColor: '#3d2963'
        },
        62: {
            name: "Casualty Challenge 8",
            currencyDisplayName: "fatality",
            currencyInternalName: "points",
            currencyLayer: "f",
            countsAs: [12],
            challengeDescription: function() {
                let c11 = "Casualty power is the only thing that boosts dimensions."
                if (inChallenge("f", 62)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("f", 62) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return new Decimal("e360000")
            },
            rewardDescription() {
                let des =  "Fatality boosts casualty power effect."
                return des
            },
            rewardEffect() {
                let c12 = player.f.points.add(10).max(10)
                c12 = c12.log10().add(10).max(10)
                c12 = c12.log10().pow(0.1)
                return c12
           },
           rewardDisplay() {return "^"+format(this.rewardEffect())},
           onStart(testInput=false) { 
                if (testInput) {
                    startCChallenge(62)
                }
            },
            onComplete() {
                player.f.casualty = player.f.casualty.add(tmp.f.buyables[34].effect)
                player.f.casualtyTotal = player.f.casualtyTotal.add(tmp.f.buyables[34].effect)
            },
            unlocked(){
                return player.f.best.gte("1e1137000")
            },
            buttonColor: '#3d2963'
        },
    },
    bars: {
        NextCD: {
            direction: RIGHT,
            width: 700,
            height: 30,
            fillStyle: {'background-color' : "#3d2963"},
            req() {
                let req =tmp.f.buyables[84].unlocked ? new Decimal("10")
                :tmp.f.buyables[83].unlocked ? new Decimal("e6750000")
                :tmp.f.buyables[82].unlocked ? new Decimal("e2830000")
                :tmp.f.buyables[81].unlocked ? new Decimal("e2000000")  
                :tmp.f.buyables[74].unlocked ? new Decimal("e1600000") 
                :tmp.f.buyables[73].unlocked ? new Decimal("e300000")
                :new Decimal("e120000")
                return req
            },
            display() {
                let f = player.f.points.add(1).max(1)
                let r = "Get " + format(this.req()) + " fatality to unlock a new Dimension. (" + format(f.log10().div(this.req().log10()).mul(100).min(100)) + "%)"
                if (tmp.f.buyables[84].unlocked ) r = "All Dimensions Unlocked"
                return r
            },
            progress() { 
                let f = player.f.points.add(1).max(1)
                let p = tmp.f.buyables[84].unlocked ? 1 :f.log10().div(this.req().log10())
                return p
            },
        },
        NextCC: {
            direction: RIGHT,
            width: 700,
            height: 30,
            fillStyle: {'background-color' : "#3d2963"},
            req() {
                let req = tmp.f.challenges[62].unlocked ? new Decimal("10")
                :tmp.f.challenges[61].unlocked ? new Decimal("e1137000") 
                :tmp.f.challenges[52].unlocked ? new Decimal("e800000") 
                :tmp.f.challenges[51].unlocked ? new Decimal("e720000")
                :tmp.f.challenges[42].unlocked ? new Decimal("e550000") 
                :tmp.f.challenges[41].unlocked ? new Decimal("e410000")
                :tmp.f.challenges[32].unlocked ? new Decimal("e350000") 
                :tmp.f.challenges[31].unlocked ? new Decimal("e177000") 
                :new Decimal("e155000")
                return req
            },
            display() {
                let f = player.f.points.add(1).max(1)
                let r = "Get " + format(this.req()) + " fatality to unlock a new Challenge. (" + format(f.log10().div(this.req().log10()).mul(100).min(100)) + "%)"
                if (tmp.f.challenges[62].unlocked) r = "All Challenges Unlocked"
                return r
            },
            progress() { 
                let f = player.f.points.add(1).max(1)
                let p = tmp.f.challenges[62].unlocked ? 1 : f.log10().div(this.req().log10())
                return p
            },
        },
    }
})
addLayer("e", {
    name: "e",
    symbol: "IN",
    position: 1,
    startData() { 
        let l = [31,32]
                let b = {}
                for (j in l){
                        b[l[j]] = decimalZero
                }
        return {
            clickableAmounts: b,
        points: decimalZero,
        best: decimalZero,
        total: decimalZero,
        p: decimalZero,
        i: new Decimal(1000),
        in: decimalZero,
        ins: decimalZero,
        infections: decimalZero,
        diseases: decimalZero,
        spent: decimalZero,
        qt: decimalZero,
        qc: decimalZero,
        h: decimalZero,
        c: decimalZero,
        n: decimalZero,
        o: decimalZero,
        ph: decimalZero,
        at: decimalZero,
        ad: decimalZero,
        ur: decimalZero,
        gu: decimalZero,
        cy: decimalZero,
        rp: decimalZero,
        mrna: decimalZero,
        crna: decimalZero,
        mm: decimalZero,
        mu: decimalZero,
        mu2: decimalZero,
        unlocked: false,
        autob: false,
        autoq: false,
        autoi: false,
        autoa: false,
        autod: false,
        autom: false,
        automm: false,
        automm2: false,
        automax: false,
        path: 1,
        ct: 0,
        m: 0,
        Cr: decimalZero,
        c11: decimalZero,
        c12: decimalZero,
        rna: decimalZero,
        inC: false,
        upgg: [],
        virus: ["C","CO","COB","COV","COVA","COVE","COVO","COVI","COVIS","COVIR","COVIC","COVIP","COVIT","COVIM","COVID"],
    }},
    color: "#34c29a",
    nodeStyle() {return {
        "background-color": ((player.e.unlocked||canReset("e"))?"#34c29a":"#bf8f8f"),
    }},
    requires: new Decimal(1.7e32),
    resource: "infecters",
    resourceSingular: "infecter",
    baseResource: "uncoaters",
    baseSingular: "uncoater",
    baseAmount() { return player.u.points },
    type: "static",
    exponent: new Decimal(1.4),
    base: new Decimal(1e5),
    branches: ["u","s","d"],
    row: 3,
    position: 0,
    hotkeys: [
        {
            key:"n", description: "N:Reset for infecters", onPress() {
                if (canReset(this.layer))
                    doReset(this.layer)
            }
        },
    ],
    tooltip() {
        let s = player.e.points.gte(tet10(tmp.e.qStart))?" Quarantined":player.e.points.gte(tet10(tmp.e.scStart))?" Social Distant":""
        return formatWhole(player.e.points)+s+pluralize(player.e.points," infecter"," infecters",true)
      },
    doReset(resettingLayer) {
        let keep=[];
        if (resettingLayer=="ct" && !hasMilestone("ct", 2)) player.e.upgg=[]
        if (hasMilestone("ct", 1)) keep.push("milestones")
        if (hasMilestone("ct", 2)) {
            keep.push("upgrades")
            keep.push("challenges")
        }
        if (hasMilestone("ct", 7)) {
            keep.push("mu")
            keep.push("mu2")
        }
        if (layers[resettingLayer].row > this.row || resettingLayer == "Ud") layerDataReset(this.layer, keep)
        if (hasMilestone("ct", 1)) {
            if (!hasMilestone("ct", 2)) {
                player.e.upgg=[162]
                player.e.upgrades=[162]
            }
            player.e.autob= true
            player.e.autoq= true
            player.e.autoi= true
            player.e.autoa= true
            player.e.autod= true
            player.e.autom= true
            player.e.automm= true
            player.e.automm2= true
            player.e.automax= true
        }
        if (hasMilestone("ct", 2)) {
            player.e.c11=new Decimal(1e6)
            player.e.c12=new Decimal(1e6)
        }
    },
    milestones: {
        0: {
            requirementDescription: "6 infecters",
            effectDescription: "Unlock Buyables and Casual Virus buyables cost nothing.",
            done() { return player.e.points.gte(6) }
        },
        1: {
            requirementDescription: "13 infecters",
            effectDescription: "Unlock Infected Infections.",
            done() { return player.e.points.gte(13) },
            unlocked() {return hasMilestone("e",0) || player.ct.unlocked}
        },
        2: {
            requirementDescription: "18 infecters",
            effectDescription: "Unlock Infectious Diseases and autobuy buyables.",
            toggles: [["e","autob"]],
            done() { return player.e.points.gte(18) },
            unlocked() {return hasMilestone("e",1) || player.ct.unlocked}
        },
        3: {
            requirementDescription: "46 infecters",
            effectDescription: "Unlock Infection Challenges, buy max infecters, and buyables cost nothing.",
            done() { return player.e.points.gte(46) },
            unlocked() {return hasMilestone("e",2) || player.ct.unlocked}
        },
        4: {
            requirementDescription: "95 infecters",
            effectDescription: "Autobuy Quarantine buyables.",
            toggles: [["e","autoq"]],
            done() { return player.e.points.gte(95) },
            unlocked() {return hasMilestone("e",3) || player.ct.unlocked}
        },
        5: {
            requirementDescription: "300 infecters",
            effectDescription: "Autobuy Infecters and they reset nothing.",
            toggles: [["e","autoi"]],
            done() { return player.e.points.gte(300) },
            unlocked() {return hasMilestone("e",4) || player.ct.unlocked}
        },
        6: {
            requirementDescription: "600 infecters",
            effectDescription: "Autobuy RNA buyables and Atom RNAs and they cost nothing.",
            toggles: [["e","autoa"]],
            done() { return player.e.points.gte(600) },
            unlocked() {return hasMilestone("e",5) || player.ct.unlocked}
        },
        7: {
            requirementDescription: "20,000 infecters",
            effectDescription: "Autobuy Disease buyables.",
            toggles: [["e","autod"]],
            done() { return player.e.points.gte(2e4) },
            unlocked() {return hasMilestone("e",6) || player.ct.unlocked}
        },
        8: {
            requirementDescription: "30,000 infecters",
            effectDescription: "Autobuy mRNA buyables and they cost nothing.",
            toggles: [["e","autom"]],
            done() { return player.e.points.gte(3e4) },
            unlocked() {return hasMilestone("e",7) || player.ct.unlocked}
        },
        9: {
            requirementDescription: "50,000 infecters",
            effectDescription: "Autobuy 'MMNA Virus', shift buys 10x more, and it costs nothing.",
            toggles: [["e","automm"]],
            done() { return player.e.points.gte(5e4) },
            unlocked() {return hasMilestone("e",8) || player.ct.unlocked}
        },
        10: {
            requirementDescription: "4,000,000 infecters",
            effectDescription: "Autobuy MMNA buyables.",
            toggles: [["e","automm2"]],
            done() { return player.e.points.gte(4e6) },
            unlocked() {return hasMilestone("e",9) || player.ct.unlocked}
        },
        11: {
            requirementDescription: "10,000,000 infecters",
            effectDescription: "Autobuy 'Max Buyable'.",
            toggles: [["e","automax"]],
            done() { return player.e.points.gte(1e7) },
            unlocked() {return hasMilestone("e",10) || player.ct.unlocked}
        },
    },
    layerShown() {
        let shown = hasFUpg(181)
        if (player.e.unlocked) shown = true
        return shown && player.uv.tree == "normal"
    },
    infDiv() {
        let div = decimalOne
        if (hasUpgrade("Uu",23)) div = div.mul(2)
        if (hasUpgrade("ct",11)) div = div.mul(1.1)
        if (hasUpgrade("ct",12)) div = div.mul(upgradeEffect("ct",12))
        return div
    },
    i() {
        let i = new Decimal(1000)
        let div = tmp.e.buyables[13].effect
        if (hasUpgrade("e",13)) div = div.mul(upgradeEffect("e",13))
        if (hasUpgrade("e",14)) div = div.mul(tmp.e.upgrades[14].effect2)
        if (hasUpgrade("e",16)) div = div.mul(tmp.e.upgrades[16].effect)
        if (hasUpgrade("e",25)) div = div.mul(upgradeEffect("e",25))
        if (hasUpgrade("e",26)) div = div.mul(tmp.e.upgrades[26].effect)
        if (hasUpgrade("e",33)) div = div.mul(upgradeEffect("e",33))
        if (hasUpgrade("e",52)) div = div.mul(upgradeEffect("e",52))
        if (hasUpgrade("e",56)) div = div.mul(1.25)
        if (hasUpgrade("e",95)) div = div.mul(upgradeEffect("e",95))
        if (hasUpgrade("e",152)) div = div.mul(upgradeEffect("e",152))
        if (hasChallenge("e",12)) div = div.mul(challengeEffect("e",12))
        if (div.gte(tet10(7))) div = tet10(slog(div).sub(7).div(2).add(7))
        i = i.div(div.max(1))
        return i
    },
    iexp() {
        let exp = tmp.e.buyables[94].effect.mul(30)
        if (hasUpgrade("e",251)) exp = exp.mul(upgradeEffect("e",251))
        if (hasUpgrade("e",252)) exp = exp.mul(upgradeEffect("e",252))
        if (hasUpgrade("e",273)) exp = exp.mul(upgradeEffect("e",273))
        if (hasUpgrade("e",286)) exp = exp.mul(tmp.e.upgrades[286].effect2)
        if (hasUpgrade("e",313)) exp = exp.mul(upgradeEffect("e",313))
        if (hasUpgrade("e",363)) exp = exp.mul(upgradeEffect("e",363))
        if (hasUpgrade("e",366)) exp = exp.pow(upgradeEffect("e",366))
        if (hasUpgrade("e",371)) exp = exp.pow(upgradeEffect("e",371))
        if (hasUpgrade("e",406)) exp = exp.pow(1.2)
        if (hasUpgrade("e",392)) exp = exp.pow(1.15)
        if (hasUpgrade("e",382)) exp = exp.pow(1.1)
        if (hasUpgrade("e",391)) exp = exp.pow(1.1)
        if (hasUpgrade("e",394)) exp = exp.pow(1.1)
        if (hasUpgrade("e",383)) exp = exp.pow(1.05)
        if (hasUpgrade("e",385)) exp = exp.pow(1.05)
        if (hasUpgrade("e",386)) exp = exp.pow(upgradeEffect("e",386))
        if (hasUpgrade("e",402)) exp = exp.pow(upgradeEffect("e",386))
        if (hasUpgrade("e",395)) exp = powExp(exp,1.02)
        if (hasUpgrade("e",421)) exp = powExp(exp,1.02)
        if (hasUpgrade("e",404)) exp = powExp(exp,1.03)
        return exp
    },
    scStart() {
        let start = new Decimal(40)
        if (hasUpgrade("ct",276)) start = start.add(10)
        if (hasUpgrade("ct",331)) start = start.add(upgradeEffect("ct",331).sub(1))
        if (hasUpgrade("ct",351)) start = start.add(upgradeEffect("ct",351).sub(1))
        return start
    },
    qStart() {
        let start = new Decimal(2e7)
        if (hasUpgrade("ct",426)) start = start.mul(upgradeEffect("ct",426))
        if (hasUpgrade("ct",453)) start = start.mul(5)
        if (hasUpgrade("ct",555)) start = start.mul(2)
        if (hasUpgrade("ct",551) && player.ct.aBoost.gte("e549e6")) start = start.mul(1.57)
        return start
    },
    icap() {
        let i = player.e.i.pow(-1)
        if (i.gte(0.064)) i = i.div(0.064).pow(0.4).mul(0.064)
        i = Decimal.add(3.43,i).min(1.79769e308)
        if (i.gte(3.75)) i = i.div(3.75).pow(0.3).mul(3.75)
        if (i.gte(3.85)) i = i.div(3.85).pow(0.333).mul(3.85)
        if (i.gte(3.95)) i = i.div(3.95).pow(0.2).mul(3.95)
        if (i.gte(4)) i = i.add(6).log10().pow(1.3).add(3)
        if (i.gte(4.03)) i = i.div(4.03).pow(0.45).mul(4.03)
        if (i.gte(4.046)) i = i.div(4.046).pow(0.2).mul(4.046)
        if (i.gte(4.065)) i = i.div(4.065).pow(0.05).mul(4.065)
        if (hasUpgrade("e",95)) i = i.add(0.005)
        i = Decimal.tetrate(10,i)
        if (i.gte(Decimal.pow(10,Decimal.pow(10,1e16))) && hasUpgrade("e",101)) i = player.e.i.pow(-1).mul(1e3).log10().pow(tmp.e.iexp).div(1e60).pow10().pow10()
        if (hasUpgrade("ct",161)) i = tet10(10)
        return i//1.79769e308
    },
    effbase() {
        let eff = new Decimal(8)
        if (hasUpgrade("e",22)) eff = eff.add(upgradeEffect("e",22))
        if (hasUpgrade("e",26)) eff = eff.add(tmp.e.upgrades[26].effect2)
        if (hasUpgrade("e",66)) eff = eff.mul(upgradeEffect("e",66))
        if (hasUpgrade("e",73)) eff = eff.mul(upgradeEffect("e",73))
        if (hasMilestone("Uu",7)) eff = eff.mul(10)
        eff = eff.mul(tmp.e.buyables[12].effect)
        return eff
    },
    effect(){//IPgain
        let eff = player.e.points
        eff = Decimal.pow(this.effbase(),eff).sub(1)
        if (inChallenge("ct",32)) {
            eff = player.e.points
            if (hasUpgrade("Uu",21)) eff = eff.mul(tmp.Uu.upgrades[21].effect)
            if (hasUpgrade("Uu",22)) eff = eff.mul(tmp.Uu.upgrades[22].effect)
            if (hasUpgrade("Uu",41)) eff = eff.mul(tmp.Uu.upgrades[41].effect)
            if (hasMilestone("Uu",8)) eff = eff.mul(tmp.Uu.milestones[8].effect)
            if (hasMilestone("Uu",9)) eff = eff.mul(tmp.Uu.milestones[9].effect)
        }
        else {
        if (hasUpgrade("e",14)) eff = eff.mul(tmp.e.upgrades[14].effect)
        if (hasUpgrade("e",21)) eff = eff.mul(upgradeEffect("e",21))
        if (hasUpgrade("e",23)) eff = eff.mul(upgradeEffect("e",23))
        if (hasUpgrade("e",32)) eff = eff.mul(upgradeEffect("e",32))
        if (hasUpgrade("e",36)) eff = eff.mul(upgradeEffect("e",36))
        if (hasUpgrade("e",83)) eff = eff.mul(upgradeEffect("e",83))
        if (hasUpgrade("e",112)) eff = eff.mul(upgradeEffect("e",112))
        if (hasUpgrade("e",121)) eff = eff.mul(upgradeEffect("e",121))
        if (hasUpgrade("e",122)) eff = eff.mul(upgradeEffect("e",122))
        if (hasUpgrade("e",126)) eff = eff.mul(upgradeEffect("e",126))
        eff = eff.mul(tmp.e.buyables[11].effect).mul(tmp.ct.effect).mul(tmp.a.achievements[74].effect)
        if (eff.gte(Decimal.tetrate(10,7))) eff = tet10(slog(eff).sub(7).div(2).add(7))
        eff = eff.min(tet10(8))
        }
        return eff
    },
    peffect(){
        let eff = player.e.p.add(1).max(1)
        eff = Decimal.pow(10,eff.log10().pow(0.75)).max(1)
        if (hasUpgrade("e",31)) eff = eff.pow(upgradeEffect("e",31))
        if (hasUpgrade("e",135)) eff = eff.pow(upgradeEffect("e",135))
        if (hasUpgrade("e",106)) eff = Decimal.pow(10,eff.add(10).max(10).max(1).log10().pow(1.1))
        if (hasUpgrade("e",156)) eff = Decimal.pow(10,eff.add(10).max(10).max(1).log10().pow(upgradeEffect("e",156)))
        if (hasUpgrade("e",204)) eff = eff.pow(tmp.e.upgrades[204].effect)
        if (eff.gte("eee25")) eff = eff.log10().log10().pow(4e23).pow10()
        return eff
    },
    peffect2(){
        let eff = player.e.p.add(1).max(1)
        eff = eff.log10().pow(1.5).mul(30).floor()
        if (hasUpgrade("e",103)) eff = eff.pow(upgradeEffect("e",103))
        if (hasUpgrade("e",173)) eff = eff.pow(upgradeEffect("e",173))
        if (hasUpgrade("e",183)) eff = eff.pow(upgradeEffect("e",183))
        if (hasUpgrade("e",186)) eff = eff.pow(tmp.e.upgrades[186].effect2)
        if (hasUpgrade("e",204)) eff = eff.pow(tmp.e.upgrades[204].effect2)
        return eff
    },
    Heffect(){
        let eff = player.e.h.max(10).log10().pow(0.5)
        if (eff.gte(9)) eff = eff.div(9).pow(0.5).mul(9)
        if (hasUpgrade("e",242)) eff = eff.pow(upgradeEffect("e",242))
        if (hasUpgrade("e",266)) eff = eff.pow(tmp.e.upgrades[266].effect)
        if (hasUpgrade("e",284)) eff = eff.pow(tmp.e.upgrades[284].effect)
        if (hasUpgrade("e",312)) eff = eff.pow(tmp.e.upgrades[312].effect)
        if (hasUpgrade("Us",32)) eff = eff.pow(1.1)
        eff = eff.pow(tmp.e.Pheffect).sub(1).mul(tmp.e.Oeffect)
        if (eff.gte(5e3)) eff = eff.div(5).log10().pow(2).mul(5e3/9)
        if (eff.gte(Decimal.pow(10,1200))) eff = eff.div(Decimal.pow(10,1200)).pow(0.5).mul(Decimal.pow(10,1200))
        return eff
    },
    Ceffect(){
        let eff = player.e.c.max(10).log10().pow(1.2)
        if (eff.gte(5)) eff = eff.div(5).pow(0.3).mul(5)
        if (eff.gte(160)) eff = eff.div(160).pow(0.5).mul(160)
        if (hasUpgrade("e",242)) eff = eff.pow(upgradeEffect("e",242))
        if (hasUpgrade("e",266)) eff = eff.pow(tmp.e.upgrades[266].effect)
        if (hasUpgrade("e",284)) eff = eff.pow(tmp.e.upgrades[284].effect)
        if (hasUpgrade("e",312)) eff = eff.pow(tmp.e.upgrades[312].effect)
        return eff.pow(tmp.e.Pheffect).mul(tmp.e.Oeffect)
    },
    Neffect(){
        let eff = player.e.n.max(10).log10().pow(0.0333)
        if (hasUpgrade("e",242)) eff = eff.pow(upgradeEffect("e",242))
        if (hasUpgrade("e",266)) eff = eff.pow(tmp.e.upgrades[266].effect)
        if (hasUpgrade("e",284)) eff = eff.pow(tmp.e.upgrades[284].effect)
        if (hasUpgrade("e",312)) eff = eff.pow(tmp.e.upgrades[312].effect)
        if (hasUpgrade("Uu",55)) eff = eff.pow(4)
        if (hasUpgrade("Us",42)) eff = eff.pow(1.5)
        return eff.pow(tmp.e.Pheffect).sub(1).mul(tmp.e.Oeffect)
    },
    Oeffect(){
        let eff = player.e.o.max(10).log10().pow(0.1)
        if (hasUpgrade("e",242)) eff = eff.pow(upgradeEffect("e",242))
        if (hasUpgrade("e",266)) eff = eff.pow(tmp.e.upgrades[266].effect)
        if (hasUpgrade("e",284)) eff = eff.pow(tmp.e.upgrades[284].effect)
        if (hasUpgrade("e",312)) eff = eff.pow(tmp.e.upgrades[312].effect)
        return eff.pow(tmp.e.Pheffect)
    },
    Pheffect(){
        let eff = player.e.ph.max(10).log10().pow(0.1)
        if (hasUpgrade("e",242)) eff = eff.pow(upgradeEffect("e",242))
        if (hasUpgrade("e",266)) eff = eff.pow(tmp.e.upgrades[266].effect)
        if (hasUpgrade("e",284)) eff = eff.pow(tmp.e.upgrades[284].effect)
        if (hasUpgrade("e",312)) eff = eff.pow(tmp.e.upgrades[312].effect)
        if (hasUpgrade("Us",32)) eff = eff.pow(1.05)
        if (eff.gte(Decimal.pow(10,2e4))) eff = eff.log10().log10().div(4.30103).pow(0.15).mul(4.30103).pow10().pow10()
        if (inChallenge("ct",32)) eff = eff.pow(0.5)
        if (hasUpgrade("Us",23) && player.e.rna.gte("e10820")) eff = eff.pow(1.1)
        return eff
    },
    Aeffect(){
        let eff = player.e.at.add(1).max(1).pow(0.5).pow(tmp.e.Pheffect)
        return eff
    },
    mol(){
        if (inChallenge("ct",32)) return new Decimal(1e11)
        return decimalOne
    },
    Adeffect(){
        let eff = player.e.ad.add(10).div(2.2e9).div(tmp.e.mol).max(10).log10().pow(0.333)
        if (eff.gte(1.3)) eff = eff.div(1.3).pow(0.3333).mul(1.3)
        if (hasUpgrade("e",243)) eff = eff.pow(tmp.e.upgrades[243].effect)
        if (hasUpgrade("e",245)) eff = eff.pow(tmp.e.upgrades[245].effect)
        if (hasUpgrade("e",266)) eff = eff.pow(tmp.e.upgrades[266].effect)
        if (hasUpgrade("e",284)) eff = eff.pow(tmp.e.upgrades[284].effect)
        if (hasUpgrade("e",312)) eff = eff.pow(tmp.e.upgrades[312].effect)
        if (hasUpgrade("Us",24)) eff = eff.pow(tmp.Us.upgrades[24].effect)
        if (hasUpgrade("Us",22)) eff = eff.pow(2)
        if (hasUpgrade("Us",25)) eff = eff.pow(1.1)
        if (hasUpgrade("Us",22) && player.e.rna.gte("e4350")) eff = eff.pow(1.5)
        return eff.pow(tmp.e.Rpeffect)
    },
    Ureffect(){
        let eff = player.e.ur.add(10).div(4e9).div(tmp.e.mol).max(10).log10().pow(0.12)
        if (eff.gte(1.1)) eff = eff.div(1.1).pow(0.3333).mul(1.1)
        if (hasUpgrade("e",243)) eff = eff.pow(tmp.e.upgrades[243].effect)
        if (hasUpgrade("e",245)) eff = eff.pow(tmp.e.upgrades[245].effect2)
        if (hasUpgrade("e",266)) eff = eff.pow(tmp.e.upgrades[266].effect)
        if (hasUpgrade("e",284)) eff = eff.pow(tmp.e.upgrades[284].effect)
        if (hasUpgrade("e",312)) eff = eff.pow(tmp.e.upgrades[312].effect)
        if (hasUpgrade("Us",24)) eff = eff.pow(tmp.Us.upgrades[24].effect)
        return eff.pow(tmp.e.Rpeffect).sub(1)
    },
    Cyeffect(){
        let eff = player.e.cy.add(10).div(8e12).div(tmp.e.mol).max(10).log10().pow(0.07)
        if (eff.gte(1.07)) eff = eff.div(1.07).pow(0.3333).mul(1.07)
        if (hasUpgrade("e",246)) eff = eff.pow(tmp.e.upgrades[246].effect)
        if (hasUpgrade("e",254)) eff = eff.pow(tmp.e.upgrades[254].effect)
        if (hasUpgrade("e",266)) eff = eff.pow(tmp.e.upgrades[266].effect)
        if (hasUpgrade("e",284)) eff = eff.pow(tmp.e.upgrades[284].effect)
        if (hasUpgrade("e",312)) eff = eff.pow(tmp.e.upgrades[312].effect)
        if (hasUpgrade("e",323)) eff = eff.pow(tmp.e.upgrades[323].effect.pow(1.6))
        if (hasUpgrade("Us",15)) eff = eff.pow(2)
        if (hasUpgrade("Us",24)) eff = eff.pow(tmp.Us.upgrades[24].effect2)
        eff = eff.pow(tmp.e.Rpeffect).sub(1)
        if (inChallenge("ct",32)) {
            if (eff.gte(300)) eff = eff.div(300).pow(0.5).mul(300)
            if (eff.gte(1000)) eff = eff.div(1000).pow(0.35).mul(1000)
            if (eff.gte(6000)) eff = eff.div(6000).pow(0.5).mul(6000)
            if (eff.gte(1e24)) eff = eff.log10().div(24).pow(0.75).mul(24).pow10().div(1e24).pow(0.3).mul(1e24)
            if (eff.gte(1e110)) eff = eff.log10().div(110).pow(0.75).mul(110).pow10().div(1e110).pow(0.5).mul(1e110)
            if (eff.gte("e3000")) eff = eff.log10().div(3e3).pow(0.75).mul(3e3).pow10().div("e3000").pow(0.5).mul("e3000")
            if (eff.gte("e18500")) eff = eff.log10().div(18.5e3).pow(0.5).mul(18.5e3).pow10().div("e18500").pow(0.4).mul("e18500")
        }
        return eff
    },
    Gueffect(){
        let eff = player.e.gu.add(10).div(5e12).div(tmp.e.mol).max(10).log10().pow(0.15)
        if (eff.gte(1.15)) eff = eff.div(1.15).pow(0.3333).mul(1.15)
        if (hasUpgrade("e",246)) eff = eff.pow(tmp.e.upgrades[246].effect2)
        if (hasUpgrade("e",254)) eff = eff.pow(tmp.e.upgrades[254].effect)
        if (hasUpgrade("e",266)) eff = eff.pow(tmp.e.upgrades[266].effect)
        if (hasUpgrade("e",284)) eff = eff.pow(tmp.e.upgrades[284].effect)
        if (hasUpgrade("e",312)) eff = eff.pow(tmp.e.upgrades[312].effect)
        if (hasUpgrade("Us",21)) eff = eff.pow(2)
        if (hasUpgrade("Us",24)) eff = eff.pow(tmp.Us.upgrades[24].effect2)
        eff = eff.pow(tmp.e.Rpeffect).sub(1)
        if (inChallenge("ct",32)) {
            if (eff.gte(1e6)) eff = eff.div(1e6).pow(0.5).mul(1e6)
            if (eff.gte(1e9)) eff = eff.div(1e9).pow(0.5).mul(1e9)
            if (eff.gte(5e9)) eff = eff.div(5e9).pow(0.5).mul(5e9)
            if (eff.gte(1e63)) eff = eff.log10().div(63).pow(0.75).mul(63).pow10().div(1e63).pow(0.3).mul(1e63)
            if (eff.gte("e5e4")) eff = eff.log10().div(5e4).pow(0.75).mul(5e4).pow10().div("e5e4").pow(0.3).mul("e5e4")
            if (eff.gte("e45e4")) eff = eff.log10().div(45e4).pow(0.5).mul(45e4).pow10().div("e45e4").pow(0.25).mul("e45e4")
            if (eff.gte("ee40")) eff = eff.log10().div(1e40).pow(0.3).mul(1e40).pow10().div("ee40").pow(0.25).mul("ee40")
        }
        return eff
    },
    Rpeffect(){
        let eff = player.e.rp.add(10).div(1e19).div(tmp.e.mol).max(10).log10().pow(0.07)
        if (eff.gte(1.13)) eff = eff.div(1.13).pow(0.3333).mul(1.13)
        if (hasUpgrade("e",264)) eff = eff.pow(tmp.e.upgrades[264].effect)
        if (hasUpgrade("e",266)) eff = eff.pow(tmp.e.upgrades[266].effect)
        if (hasUpgrade("e",284)) eff = eff.pow(tmp.e.upgrades[284].effect)
        if (hasUpgrade("e",312)) eff = eff.pow(tmp.e.upgrades[312].effect)
        if (hasUpgrade("Us",32)) eff = eff.pow(2)
        if (hasUpgrade("Us",34)) eff = eff.pow(1.1)
        if (eff.gte(1e90)) eff = eff.log10().div(90).pow(0.33).mul(90).pow10()
        if (eff.gte(1e250)) eff = eff.log10().div(250).pow(0.1).mul(250).pow10()
        if (inChallenge("ct",32)) {
            eff = eff.pow(0.75).sub(1).div(5).add(1).div(2)
            if (eff.gte(1e10)) eff = eff.log10().div(10).pow(0.7).mul(10).pow10()
            if (eff.gte(1e21)) eff = eff.log10().div(21).pow(0.6).mul(21).pow10()
        }
        return eff
    },
    Again(){
        let eff = decimalOne
        if (inChallenge("ct",32)) {
            eff = eff.mul(tmp.Us.severityEff[1])
            if (hasUpgrade("Uu",53)) eff = eff.mul(tmp.Uu.upgrades[53].effect)
            if (hasUpgrade("Uu",54)) eff = eff.mul(tmp.Uu.upgrades[54].effect)
            if (hasUpgrade("Us",14)) eff = eff.mul(tmp.Us.upgrades[14].effect)
            if (hasMilestone("Us",5)) eff = eff.mul(tmp.Us.milestones[5].effect)
            if (hasUpgrade("ct",533)) eff = eff.mul(3)
            if (hasUpgrade("ct",536)) eff = eff.mul(tmp.ct.upgrades[536].effect)
        }
        else {
        if (hasUpgrade("e",232)) eff = eff.mul(tmp.e.upgrades[232].effect)
        if (hasUpgrade("e",235)) eff = eff.mul(tmp.e.upgrades[235].effect)
        if (hasUpgrade("e",241)) eff = eff.mul(tmp.e.upgrades[241].effect2)
        if (hasUpgrade("e",256)) eff = eff.mul(tmp.e.upgrades[256].effect)
        if (hasUpgrade("e",261)) eff = eff.mul(tmp.e.upgrades[261].effect)
        eff = eff.mul(tmp.e.mreff).mul(tmp.ct.effect)
        if (eff.gte(Decimal.tetrate(10,7))) eff = tet10(slog(eff).sub(7).div(2).add(7))
        eff = eff.min(tet10(8))
        }
        return eff
    },
    aExp() {
        let eff = decimalOne
        if (hasUpgrade("Us",11)) eff = eff.add(0.5)
        if (hasUpgrade("Uu",55)) eff = eff.add(0.2)
        if (hasAchievement("a",244)) eff = eff.add(0.05)
        return eff
    },
    buyCap(){
        let eff = Decimal.mul(1e6,tmp.e.buyables[31].effect)
        return eff.floor()
    },
    resetsNothing() { return hasMilestone("e", 5) },
    canBuyMax() {return hasMilestone("e",3)},
    autoPrestige() { return (hasMilestone("e", 5) && player.e.autoi) },
    dgain(){//Disgain
        let eff = player.e.p.add(10).max(10)
        eff = eff.log10().div(327)
        if (inChallenge("ct",32)) {
            if (hasMilestone("Uu",10)) eff = eff.mul(tmp.Uu.milestones[10].effect).pow(tmp.Uu.milestones[10].effect)
            if (hasUpgrade("Uu",34)) eff = eff.mul(tmp.Uu.upgrades[34].effect)
            if (hasUpgrade("Uu",61)) eff = eff.mul(tmp.Uu.upgrades[61].effect)
            if (hasMilestone("Uu",14)) eff = eff.mul(tmp.Uu.milestones[14].effect)
            let x = player.Uu.buyables[22]
            let base = tmp.Uu.buyables[22].base
            let exp =  Decimal.pow(base, x).max(10).log10().pow(0.3)
            if (hasMilestone("Us",15)) eff = eff.pow(tmp.Uu.buyables[22].effect.min(exp))
            else eff = eff.mul(tmp.Uu.buyables[22].effect)
        }
        else {
        if (hasUpgrade("e",151)) eff = eff.mul(upgradeEffect("e",151))
        if (hasUpgrade("e",211)) eff = eff.mul(tmp.e.upgrades[211].effect)
        eff = eff.mul(tmp.e.buyables[41].effect).pow(tmp.e.buyables[41].effect)
        if (hasUpgrade("e",113)) eff = eff.mul(upgradeEffect("e",113))
        if (hasUpgrade("e",116)) eff = eff.mul(upgradeEffect("e",116))
        if (hasUpgrade("e",124)) eff = eff.mul(upgradeEffect("e",124))
        if (hasUpgrade("e",142)) eff = eff.mul(upgradeEffect("e",142))
        if (hasUpgrade("e",85)) eff = eff.mul(upgradeEffect("e",85))
        eff = eff.mul(tmp.ct.effect).mul(tmp.a.achievements[74].effect)
        if (eff.gte(Decimal.tetrate(10,7))) eff = tet10(slog(eff).sub(7).div(2).add(7))
        eff = eff.min(tet10(8))
        }
        if (player.e.p.lt(Decimal.pow(10,327))) eff = decimalZero
        return eff
    },
    deff(){
        let eff = player.e.diseases.add(1).max(1).pow(1000)
        if (hasUpgrade("e",143)) eff = eff.pow(upgradeEffect("e",143))
        if (hasUpgrade("e",156)) eff = Decimal.pow(10,eff.add(10).max(10).max(1).log10().pow(upgradeEffect("e",156)))
        if (hasUpgrade("e",171)) eff = Decimal.pow(10,eff.add(10).max(10).max(1).log10().pow(upgradeEffect("e",171)))
        if (hasUpgrade("e",195)) eff = Decimal.pow(10,eff.add(10).max(10).max(1).log10().pow(upgradeEffect("e",195)))
        return eff
    },
    reff(){
        let eff = player.e.rna.add(1).max(1).pow(5)
        if (hasUpgrade("e",232)) eff = eff.pow(tmp.e.upgrades[232].effect2)
        if (hasUpgrade("e",243)) eff = eff.pow(tmp.e.upgrades[243].effect)
        if (hasUpgrade("e",275)) eff = eff.pow(tmp.e.upgrades[275].effect)
        if (hasUpgrade("e",304)) eff = eff.pow(tmp.e.upgrades[304].effect)
        return eff.pow(tmp.e.buyables[95].effect)
    },
    rnaReq() {
        if (inChallenge("ct",32)) {
            return new Decimal("ee20")
        }
        else {
            return new Decimal("e6644e8")
        }
    },
    rgain(){//RNAgain
        let exp = Decimal.add(5,tmp.e.buyables[72].effect).add(tmp.e.Heffect)
        let eff = player.e.p.log10().div(tmp.e.rnaReq.log10()).pow(exp)
        if (inChallenge("ct",32)) {
            exp = exp.div(3).mul(1)
            let base = player.e.p.log10().div(tmp.e.rnaReq.log10())
            if (base.gte(1e25)) base = base.log10().div(25).pow(0.75).mul(25).pow10()
            if (base.gte("ee21")) base = base.log10().div(1e21).pow(0.5).mul(1e21).pow10()
            if (base.gte("ee24")) base = base.log10().div(1e24).pow(0.5).mul(1e24).pow10()
            if (base.gte("ee140")) base = base.log10().div(1e140).pow(0.5).mul(1e140).pow10()
            eff = base.pow(exp).mul(tmp.Us.severityEff[0])
            if (hasMilestone("Uu",27)) eff = eff.mul(tmp.Uu.milestones[27].effect)
            if (hasUpgrade("Uu",92)) eff = eff.mul(tmp.Uu.upgrades[92].effect)
            if (hasUpgrade("Uu",95)) eff = eff.mul(tmp.Uu.upgrades[95].effect)
            if (hasUpgrade("Uu",53)) eff = eff.mul(tmp.Uu.upgrades[53].effect)
            if (hasUpgrade("ct",526)) eff = eff.mul(tmp.ct.upgrades[526].effect)
            if (hasUpgrade("Uu",93)) {
                let us13 = tmp.e.Ceffect.max(10).log10().max(10).log10().pow(0.5)
                if (hasUpgrade("Ud",34)) eff = eff.pow(tmp.Uu.upgrades[93].effect.min(slogadd(player.points.max(35e8),-4).pow(us13)))
                else eff = eff.mul(tmp.Uu.upgrades[93].effect)
            }
        }
        else {
        if (hasUpgrade("e",202)) eff = eff.mul(upgradeEffect("e",202))
        if (hasUpgrade("e",205)) eff = eff.mul(upgradeEffect("e",205))
        if (hasUpgrade("e",206)) eff = eff.mul(upgradeEffect("e",206))
        if (hasUpgrade("e",212)) eff = eff.mul(upgradeEffect("e",212))
        if (hasUpgrade("e",214)) eff = eff.mul(upgradeEffect("e",214))
        if (hasUpgrade("e",215)) eff = eff.mul(upgradeEffect("e",215))
        if (hasUpgrade("e",225)) eff = eff.mul(upgradeEffect("e",225))
        if (hasUpgrade("e",233)) eff = eff.mul(upgradeEffect("e",233))
        if (hasUpgrade("e",236)) eff = eff.mul(upgradeEffect("e",236))
        if (hasUpgrade("e",244)) eff = eff.mul(upgradeEffect("e",244))
        if (hasUpgrade("e",272)) eff = eff.mul(upgradeEffect("e",272))
        eff = eff.mul(tmp.e.buyables[71].effect).mul(tmp.e.Aeffect).mul(tmp.ct.effect)
        if (eff.gte(Decimal.tetrate(10,7))) eff = tet10(slog(eff).sub(7).div(2).add(7))
        eff = eff.min(tet10(8))
        }
        if (player.e.p.lt(tmp.e.rnaReq)) eff = decimalZero
        return eff
    },
    reff2(){
        let eff = player.e.rna.add(1).max(1).pow(0.1).max(1)
        if (hasUpgrade("e",232)) eff = eff.pow(tmp.e.upgrades[232].effect2)
        if (hasUpgrade("e",243)) eff = eff.pow(tmp.e.upgrades[243].effect)
        if (hasUpgrade("e",275)) eff = eff.pow(tmp.e.upgrades[275].effect)
        if (hasUpgrade("e",304)) eff = eff.pow(tmp.e.upgrades[304].effect)
        eff = eff.pow(tmp.e.buyables[95].effect)
        let start = new Decimal(1e160)
        let exp = new Decimal(0.6)
        if (hasUpgrade("e",306)) {
            start = start.mul(Decimal.pow(10,840))
            exp = exp.add(0.02)
        }
        if (hasUpgrade("e",406)) exp = exp.add(0.18)
        if (eff.gte(start)) eff = eff.div(start).log10().pow(exp).pow10().mul(start)
        return eff
    },
    infScale() {
        let scale = new Decimal(2e4)
        if (hasUpgrade("e",325)) scale = scale.add(tmp.e.upgrades[325].effect2)
        return scale.add(tmp.e.mueff.e4)
    },
    mrnaReq() {
        if (inChallenge("ct",32)) return [new Decimal(4e214), new Decimal(9.5e208), new Decimal(1.9e209), new Decimal(1.9e209), new Decimal(1e164)]
        return [new Decimal(1.1e76), new Decimal(1.75e76), new Decimal(1.75e76), new Decimal(1.1e76), new Decimal(1.831e55)]
    },
    mrgain(){//mrnagain
        let exp = Decimal.add(0.1,tmp.e.mueff.e1)
        if (hasUpgrade("e",292)) exp = exp.add(upgradeEffect("e",292))
        if (hasUpgrade("e",315)) exp = exp.add(upgradeEffect("e",315))
        if (hasUpgrade("e",321)) exp = exp.add(upgradeEffect("e",321))
        if (inChallenge("ct",32)) {
            exp = exp.div(5)
            if (hasUpgrade("ct",543)) exp = exp.mul(1.3)
        }
        let eff = player.e.ad.div(tmp.e.mrnaReq[0].div(10)).max(10).log10().mul(player.e.ur.div(tmp.e.mrnaReq[1].div(10)).max(10).log10()).mul(player.e.cy.div(tmp.e.mrnaReq[2].div(10)).max(10).log10()).mul(player.e.gu.div(tmp.e.mrnaReq[3].div(10)).max(10).log10()).mul(player.e.rp.div(tmp.e.mrnaReq[4].div(10)).max(10).log10())
        .sub(1).pow(exp).div(10)
        if (inChallenge("ct",32)) {
            eff = eff.div(5).mul(tmp.Us.trnaEff)
            if (hasUpgrade("Us",41)) eff = eff.mul(tmp.Us.upgrades[41].effect)
            if (hasUpgrade("Us",42)) eff = eff.mul(tmp.Us.upgrades[42].effect)
            if (hasUpgrade("Us",44)) eff = eff.mul(tmp.Us.upgrades[44].effect)
            if (hasMilestone("Us",8)) eff = eff.mul(tmp.Us.milestones[8].effect)
            if (hasMilestone("Us",11)) eff = eff.mul(tmp.Us.milestones[11].effect)
            if (hasMilestone("Us",17)) eff = eff.mul(tmp.Us.milestones[17].effect)
            if (hasMilestone("Us",28)) eff = eff.mul(tmp.Us.milestones[28].effect)
            if (hasUpgrade("ct",543)) eff = eff.mul(5)
            if (hasUpgrade("ct",544)) eff = eff.mul(tmp.ct.upgrades[544].effect)
        }
        else {
        if (hasUpgrade("e",271)) eff = eff.mul(upgradeEffect("e",271))
        if (hasUpgrade("e",274)) eff = eff.mul(upgradeEffect("e",274))
        if (hasUpgrade("e",281)) eff = eff.mul(upgradeEffect("e",281))
        if (hasUpgrade("e",301)) eff = eff.mul(upgradeEffect("e",301))
        if (hasUpgrade("e",305)) eff = eff.mul(upgradeEffect("e",305))
        if (hasUpgrade("e",341)) eff = eff.mul(upgradeEffect("e",341))
        if (hasUpgrade("e",286)) eff = eff.mul(tmp.e.upgrades[286].effect)
        if (player.e.ad.lt(tmp.e.mrnaReq[0]) || player.e.ur.lt(tmp.e.mrnaReq[1]) || player.e.cy.lt(tmp.e.mrnaReq[2]) || player.e.gu.lt(tmp.e.mrnaReq[3]) || player.e.rp.lt(tmp.e.mrnaReq[4])) return decimalZero
        eff = eff.mul(tmp.e.buyables[93].effect).mul(tmp.e.mmeff).mul(tmp.e.buyables[105].effect.pow(player.e.buyables[102])).mul(tmp.ct.effect)
        if (eff.gte(Decimal.tetrate(10,6))) eff = tet10(slog(eff).sub(6).div(2).add(6))
        eff = eff.min(tet10(7))
        }
        return eff
    },
    mreff(){
        let eff = player.e.mrna.add(10).log10().pow(10)
        if (hasUpgrade("e",285)) eff = eff.pow(upgradeEffect("e",285))
        if (hasUpgrade("e",291)) eff = eff.pow(upgradeEffect("e",291))
        if (hasUpgrade("e",302)) eff = eff.pow(upgradeEffect("e",302))
        if (hasUpgrade("e",311)) eff = powExp(eff,1.1)
        if (hasUpgrade("e",333)) eff = powExp(eff,1.125)
        if (hasUpgrade("e",316)) eff = powExp(eff,upgradeEffect("e",316))
        if (eff.gte(Decimal.pow(10,4e8))) eff = eff.log10().log10().div(Decimal.log10(4e8)).pow(0.3).mul(Decimal.log10(4e8)).pow10().pow10()
        if (eff.gte(Decimal.pow(10,1e9))) eff = eff.log10().log10().div(9).pow(0.5).mul(9).pow10().pow10()
        if (eff.gte("eee5")) eff = eff.log10().log10().log10().div(5).pow(0.3).mul(5).pow10().pow10().pow10()
        if (eff.gte("eee6")) eff = eff.log10().log10().log10().div(6).pow(0.01).mul(6).pow10().pow10().pow10()
        if (hasMilestone("Us",12)) eff = eff.pow(1.5)
        if (hasMilestone("Us",44)) eff = eff.pow(tmp.Us.milestones[44].effect)
        if (hasUpgrade("Us",61)) eff = eff.pow(upgradeEffect("Us",61))
        return eff
    },
    mmeff(){
        let eff = player.e.mm
        eff = eff.add(1).pow(5)
        if (hasUpgrade("e",326)) eff = eff.pow(upgradeEffect("e",326).pow(2.5))
        if (hasUpgrade("e",331)) eff = eff.pow(upgradeEffect("e",331))
        if (hasUpgrade("e",336)) eff = eff.pow(1.25)
        if (hasUpgrade("e",352)) eff = eff.pow(upgradeEffect("e",352))
        if (hasUpgrade("e",371)) eff = eff.pow(upgradeEffect("e",371))
        if (hasUpgrade("e",375)) eff = eff.pow(upgradeEffect("e",375))
        if (hasUpgrade("e",386)) eff = eff.pow(upgradeEffect("e",386))
        if (hasUpgrade("e",396)) eff = eff.pow(tmp.e.mueff.e6)
        if (hasUpgrade("e",392)) eff = powExp(eff,1.01)
        if (hasUpgrade("e",393)) eff = powExp(eff,1.02)
        if (eff.gte(Decimal.pow(10,1e12))) eff = eff.log10().log10().div(12).pow(0.5).mul(12).pow10().pow10()
        if (hasUpgrade("ct",31)) eff = eff.pow(upgradeEffect("ct",31))
        if (hasUpgrade("ct",34)) eff = eff.pow(upgradeEffect("ct",34))
        if (hasUpgrade("ct",41)) eff = eff.pow(upgradeEffect("ct",41))
        eff = eff.pow(tmp.ct.buyables[21].effect)
        if (hasUpgrade("ct",45)) eff = powExp(eff,1.05)
        if (hasUpgrade("ct",46)) eff = powExp(eff,1.05)
        if (hasUpgrade("ct",51)) eff = powExp(eff,1.1)
        if (hasUpgrade("ct",81)) eff = powExp(eff,upgradeEffect("ct",81))
        if (hasUpgrade("ct",74)) eff = powExp2(eff,1.01)
        if (hasUpgrade("ct",55)) eff = powExp2(eff,1.05)
        if (hasUpgrade("ct",56)) eff = powExp2(eff,1.1)
        if (inChallenge("ct",32)) {
            if (eff.gte("ee40")) eff = eff.log10().div(1e40).pow(0.5).mul(1e40).pow10()
            if (eff.gte("ee51")) eff = eff.log10().div(1e51).pow(0.5).mul(1e51).pow10()
        }
        if (hasUpgrade("uv",52) && player.e.mm.gte(183e7)) eff = eff.pow(1.5)
        if (hasUpgrade("ct",546)) {
            if (player.ct.bestBoost.gte("e216e6")) eff = eff.pow(1.5)
            if (player.ct.bestBoost.gte("e326e6")) eff = eff.pow(2.25)
        }
        if (hasUpgrade("uv",54)) eff = eff.pow(1.4)
        if (hasMilestone("Us",27)) eff = eff.pow(1.3)
        if (hasMilestone("Us",30)) eff = eff.pow(2)
        if (hasUpgrade("Ud",33)) eff = eff.pow(tmp.Us.upgrades[41].effect2)
        if (hasUpgrade("Ud",35)) eff = eff.pow(tmp.Us.trnaEff2)
        if (hasMilestone("uv",14) && player.e.mm.gte(1e120)) eff = eff.pow(1.5)
        if (hasUpgrade("Us",92)) eff = eff.pow(tmp.Us.upgrades[92].effect)
        return eff
    },
    mueff(){
        let mu = player.e.mu.add(tmp.e.mueff2.e1)
        if (hasUpgrade("e",402)) mu = mu.mul(1.3)
        if (hasMilestone("Us",21)) mu = mu.mul(1.02)
        mu = mu.mul(tmp.Us.trnaMutEff)
        let eff = mu.pow(0.8).div(7)
        if (hasUpgrade("e",332)) eff = eff.add(1).pow(upgradeEffect("e",332)).sub(1)
        if (hasUpgrade("e",385)) eff = eff.add(1).pow(upgradeEffect("e",385)).sub(1)
        if (eff.gte(15e5)) eff = eff.div(15e5).pow(0.2).mul(15e5)
        if (hasUpgrade("Us",53)) eff = eff.mul(3)
        if (inChallenge("ct",32)) {
            if (eff.gte(1e4)) eff = eff.div(1e4).pow(0.7).mul(1e4).sub(1e4).div(2).add(1e4)
        }
        let eff2 = mu.add(1).pow(0.75)
        if (hasUpgrade("e",332)) eff2 = eff2.pow(upgradeEffect("e",332))
        if (hasUpgrade("e",342)) eff2 = eff2.pow(upgradeEffect("e",342))
        if (hasUpgrade("e",355)) eff2 = eff2.pow(upgradeEffect("e",355))
        if (hasUpgrade("e",375)) eff2 = eff2.pow(upgradeEffect("e",375))
        if (hasUpgrade("e",404)) eff2 = powExp(eff2,1.03)
        if (hasUpgrade("e",414)) eff2 = powExp(eff2,1.02)
        let eff3 = mu.sub(19).max(0).pow(1.5).mul(2)
        if (eff3.gte(25)) eff3 = eff3.div(25).pow(0.3).mul(25)
        if (hasUpgrade("e",343)) eff3 = eff3.mul(upgradeEffect("e",343))
        let eff4 = mu.sub(39).max(0).mul(1e3)
        let eff5 = mu.max(10).log10().pow(0.6)
        if (hasUpgrade("e",356)) eff5 = eff5.pow(upgradeEffect("e",356))
        if (hasUpgrade("e",381)) eff5 = eff5.pow(1.2)
        if (inChallenge("ct",32)) {
            if (eff5.gte(750)) eff5 = eff5.div(750).pow(0.7).mul(750).sub(750).div(2).add(750)
            if (eff5.gte(3e4)) eff5 = eff5.div(3e4).pow(0.7).mul(3e4).sub(3e4).div(2).add(3e4)
            if (eff5.gte(75e4)) eff5 = eff5.div(75e4).pow(0.5).mul(75e4).sub(75e4).div(2).add(75e4)
        }
        let eff6 = mu.pow(1/3).div(20).add(1)
        return {e1:eff,e2:eff2,e3:eff3.floor(),e4:eff4,e5:eff5.sub(1),e6:eff6}
    },
    mueff2(){
        let mu = player.e.mu2
        if (inChallenge("ct",32)) mu = mu.div(5)
        if (hasUpgrade("e",403)) mu = mu.add(1)
        if (hasUpgrade("e",411)) mu = mu.add(upgradeEffect("e",411))
        if (hasUpgrade("e",412)) mu = mu.add(upgradeEffect("e",412))
        if (hasUpgrade("e",376)) mu = mu.mul(1.5)
        mu = mu.mul(tmp.Us.sarsMutEff)
        let eff = mu.pow(1.5).mul(10)
        if (eff.gte(147)) eff = eff.div(147).pow(1.5).mul(147)
        let eff2 = mu.pow(1.5)
        if (hasUpgrade("e",396)) eff2 = eff2.mul(upgradeEffect("e",396))
        if (hasUpgrade("e",406)) eff2 = eff2.mul(upgradeEffect("e",406))
        let eff3 = Decimal.pow(100,mu)
        if (eff3.gte(1e9)) eff3 = eff3.log10().div(9).pow(1.75).mul(9).pow10()
        if (hasUpgrade("e",416)) eff3 = eff3.pow(3)
        if (hasUpgrade("e",421)) eff3 = eff3.pow(2)
        if (hasMilestone("Us",37)) eff3 = eff3.pow(player.e.mrna.gte("e642300")?3:2)
        let eff4 = mu.div(100).add(1)
        return {e1:eff,e2:eff2,e3:eff3,e4:eff4}
    },
    mmlim(){
        let eff = tmp.e.mueff.e2.mul(10).mul(tmp.e.buyables[104].effect).mul(tmp.e.mueff2.e3)
        if (hasUpgrade("e",323)) eff = eff.mul(upgradeEffect("e",323))
        if (hasUpgrade("e",326)) eff = eff.mul(upgradeEffect("e",326))
        if (hasUpgrade("e",334)) eff = eff.mul(upgradeEffect("e",334))
        if (hasUpgrade("e",416)) eff = eff.pow(1.2)
        if (hasUpgrade("e",424)) eff = eff.pow(1.2)
        if (hasUpgrade("e",426)) eff = eff.pow(tmp.e.upgrades[426].effect2)
        if (hasUpgrade("ct",14)) eff = eff.pow(tmp.ct.upgrades[14].effect)
        if (hasUpgrade("ct",24)) eff = eff.pow(tmp.ct.upgrades[24].effect)
        if (hasUpgrade("ct",23)) eff = eff.pow(1.5)
        if (hasUpgrade("ct",33)) eff = powExp(eff,1.05)
        if (hasUpgrade("ct",34)) eff = powExp(eff,1.05)
        if (hasUpgrade("ct",53)) eff = powExp2(eff,1.15)
        if (hasMilestone("ct",12)) eff = powExp(eff,1.1)
        eff = eff.mul(tmp.ct.effect)
        if (hasUpgrade("ct",83)) eff = powExp2(eff,1.05)
        if (hasUpgrade("ct",93)) eff = powExp2(eff,1.1)
        if (hasUpgrade("ct",103)) eff = powExp2(eff,1.4)
        if (hasUpgrade("ct",61)) eff = powExp2(eff,2)
        if (hasUpgrade("ct",65)) eff = powExp2(eff,3)
        if (hasMilestone("ct",15)) eff = powExp2(eff,1.1)
        if (hasUpgrade("ct",66)) eff = powExp3(eff,1.2)
        if (inChallenge("ct",32)) {
            eff = new Decimal(100)
            if (hasUpgrade("Us",52)) eff = eff.mul(tmp.Us.upgrades[52].effect)
            if (hasUpgrade("Us",81)) eff = eff.mul(2)
            if (hasUpgrade("Us",53)) eff = eff.mul(4)
            if (hasUpgrade("Us",83)) eff = eff.mul(5)
            if (hasUpgrade("Us",92)) eff = eff.mul(5)
            if (hasUpgrade("Us",91)) eff = eff.mul(tmp.Us.upgrades[91].effect)
            if (hasUpgrade("uv",52)) eff = eff.mul(1.5)
            if (hasUpgrade("uv",53)) eff = eff.mul(1.5)
            if (hasUpgrade("uv",71)) eff = eff.mul(tmp.uv.upgrades[71].effect)
            if (hasUpgrade("ct",552)) eff = eff.mul(tmp.ct.upgrades[552].effect)
            if (hasMilestone("Us",18)) eff = eff.mul(tmp.Us.milestones[18].effect)
            if (hasMilestone("Us",26)) eff = eff.mul(tmp.Us.milestones[26].effect)
            if (hasMilestone("Us",27)) eff = eff.mul(tmp.Us.milestones[27].effect)
            if (hasUpgrade("Ud",21)) eff = eff.mul(tmp.Ud.upgrades[21].effect)
            if (hasChallenge("Ud",22)) eff = eff.pow(tmp.Ud.challenges[22].rewardEffect)
        }
        return eff.min(tet10(7))
    },
    creff(){
        let eff = player.e.crna.add(1).pow(player.e.crna.add(10).max(10).log10().pow(1.5)).pow(3).pow(tmp.ct.buyables[22].effect)
        if (hasUpgrade("ct",45)) eff = eff.pow(upgradeEffect("ct",45))
        if (hasUpgrade("ct",93)) eff = powExp2(eff,1.1)
        if (inChallenge("ct",32)) {
            if (eff.gte("ee7")) eff = eff.log10().div(1e7).pow(0.4).mul(1e7).pow10()
        }
        return eff
    },
    crgain(){
        let st = inChallenge("ct",32)?1e3:309
        let eff = powExp(player.e.mm,0.4).root(Decimal.pow(st,0.4)).div(10).pow(20)
        if (inChallenge("ct",32)) {
            if (hasUpgrade("uv",74)) eff = eff.mul(tmp.uv.upgrades[74].effect)
            if (hasUpgrade("uv",76)) eff = eff.mul(tmp.uv.upgrades[76].effect)
            if (hasUpgrade("uv",82)) eff = eff.mul(tmp.uv.upgrades[82].effect)
            eff = eff.mul(tmp.Ud.effect)
        }
        else {
        if (eff.gte(Decimal.pow(10,3e6))) eff = eff.log10().div(3e6).pow(0.3).mul(3e6).pow10()
        if (eff.gte(Decimal.pow(10,1e12))) eff = powExp(eff.log10().div(100),2).pow(1e10)
        eff = eff.mul(tmp.e.buyables[111].effect).mul(tmp.e.buyables[112].effect).mul(tmp.e.buyables[113].effect).mul(tmp.ct.effect)
        }
        if (player.e.mm.lt(Decimal.pow(10,st))) eff = decimalZero
        return eff
    },
    qExp(){
        let exp = decimalHalf
        if (hasUpgrade("e",96)) exp = exp.mul(upgradeEffect("e",96))
        if (hasUpgrade("e",104)) exp = exp.mul(upgradeEffect("e",104))
        if (hasUpgrade("e",164)) exp = exp.mul(upgradeEffect("e",164))
        exp = exp.mul(tmp.e.buyables[62].effect)
        return exp
    },
    ucGain(){
        let exp = Decimal.add(0.7,tmp.e.buyables[53].effect)
        let eff = player.e.qt.pow(exp)
        if (inChallenge("ct",32)) {
            exp = tmp.Uu.buyables[63].effect.add(1)
            eff = player.e.qt.pow(exp).mul(tmp.Uu.buyables[61].effect)
            if (hasUpgrade("ct",522)) eff = eff.mul(10)
            if (hasUpgrade("ct",524)) eff = eff.mul(10)
            if (hasUpgrade("Uu",82)) eff = eff.mul(tmp.Uu.upgrades[82].effect)
            if (hasMilestone("Uu",26)) eff = eff.mul(tmp.Uu.milestones[26].effect)
        }
        else {
        eff = eff.mul(tmp.e.buyables[51].effect)
        if (hasUpgrade("e",81)) eff = eff.mul(upgradeEffect("e",81))
        if (hasUpgrade("e",84)) eff = eff.mul(upgradeEffect("e",84))
        if (hasUpgrade("e",86)) eff = eff.mul(upgradeEffect("e",86))
        if (hasUpgrade("e",91)) eff = eff.mul(upgradeEffect("e",91))
        if (hasUpgrade("e",101)) eff = eff.mul(upgradeEffect("e",101))
        if (hasUpgrade("e",186)) eff = eff.mul(tmp.e.upgrades[186].effect)
        if (hasUpgrade("e",201)) eff = eff.mul(upgradeEffect("e",201))
        eff = eff.mul(tmp.ct.effect)
        if (eff.gte(Decimal.tetrate(10,7))) eff = tet10(slog(eff).sub(7).div(2).add(7))
        eff = eff.min(tet10(8))
        }
        return eff
    },
    mmgain(){
        let eff = new Decimal(0.15)
        if (inChallenge("ct",32)) {
            if (!hasUpgrade("uv",51)) eff = eff.div(3)
            if (hasUpgrade("uv",52)) eff = eff.mul(2)
            if (hasUpgrade("uv",53)) eff = eff.mul(2)
            if (hasUpgrade("Us",52)) eff = eff.mul(tmp.Us.upgrades[52].effect)
            if (hasUpgrade("uv",55)) eff = eff.mul(3)
            if (hasUpgrade("uv",72)) eff = eff.mul(3)
            if (hasUpgrade("uv",71)) eff = eff.mul(tmp.uv.upgrades[71].effect)
            if (hasUpgrade("Us",81)) eff = eff.mul(2)
            if (hasUpgrade("ct",545)) eff = eff.mul(2)
            if (hasUpgrade("ct",546)) {
                if (player.ct.bestBoost.gte("e216e6")) eff = eff.mul(3)
                if (player.ct.bestBoost.gte("e326e6")) eff = eff.mul(9)
            }
            if (hasUpgrade("ct",552)) eff = eff.mul(tmp.ct.upgrades[552].effect)
            if (hasMilestone("Us",18)) eff = eff.mul(tmp.Us.milestones[18].effect)
            if (hasMilestone("Us",26)) eff = eff.mul(tmp.Us.milestones[26].effect)
            if (hasMilestone("Us",27)) eff = eff.mul(tmp.Us.milestones[27].effect)
            if (hasMilestone("Us",37)) eff = eff.mul(tmp.Us.milestones[37].effect)
            if (hasMilestone("Us",38)) eff = eff.mul(tmp.Us.milestones[38].effect)
            if (hasMilestone("Us",52)) eff = eff.mul(tmp.Us.milestones[52].effect)
            if (hasUpgrade("Us",105)) eff = eff.mul(tmp.Us.rrnaEff[0])
        }
        else {
        if (hasUpgrade("e",324)) eff = eff.mul(tmp.e.upgrades[324].effect2)
        eff = eff.mul(tmp.e.buyables[104].effect).mul(tmp.e.mueff2.e3).mul(tmp.e.creff).mul(tmp.ct.effect)
        }
        return eff
    },
    mm() {
        let eff = tmp.e.buyables[102].effect
        if (eff.gte(tet10(6))) eff = tet10(slog(eff).sub(6).div(2).add(6))
        return eff.min(tet10(7))
    },
    uiMult() {
        let eff = tmp.e.buyables[52].effect
        if (hasUpgrade("e",163)) eff = eff.mul(upgradeEffect("e",163))
        if (hasUpgrade("e",172)) eff = eff.mul(upgradeEffect("e",172))
        return eff.mul(tmp.ct.effect)
    },
    freeMBuy() {
        let x = tmp.e.buyables[101].total.mul(tmp.e.buyables[101].base2)
        return x
    },
    effectDescription() {
        return "which "+pluralize(player.e.points,'produces','produce')+" "+layerText("h2", "e", format(tmp.e.effect)) + " infection power per second."
    },
    crg(){
        let eff = player.e.Cr
        return eff
    },
    crx(){
        let eff = decimalOne
        if (hasUpgrade("ct",53)) eff = eff.add(upgradeEffect("ct",53))
        if (hasUpgrade("ct",92)) eff = eff.add(5)
        if (hasUpgrade("ct",104)) eff = eff.add(1e3)
        return eff
    },
    crexp(){
        let eff = decimalThree
        if (inChallenge("ct",32)) {
            if (hasUpgrade("uv",74)) eff= eff.add(0.5)
            if (hasUpgrade("ct",553)) eff= eff.add(0.5)
            if (hasUpgrade("Us",124)) eff= eff.add(tmp.Us.upgrades[124].effect)
            if (hasUpgrade("Us",125)) eff= eff.add(0.1)
            if (hasUpgrade("Us",131)) eff= eff.add(0.05)
            if (hasUpgrade("Us",133)) eff= eff.add(0.05)
            eff = eff.add(tmp.Ud.buyables[11].effect)
            if (hasMilestone("Ud",6)) eff = eff.add(tmp.Ud.milestones[6].effect)
        }
        else {
        eff = eff.add(tmp.ct.buyables[11].effect).add(tmp.ct.crex)
        let x = player.ct.milestones.length*player.ct.upgrades.length
        if (hasUpgrade("e",406)) eff= eff.add(0.1)
        if (hasUpgrade("e",425)) eff= eff.add(0.1)
        if (hasUpgrade("e",411)) eff= eff.add(0.15)
        if (hasUpgrade("e",423)) eff= eff.add(0.2)
        if (hasUpgrade("e",426)) eff= eff.add(0.2)
        if (hasUpgrade("e",414)) eff= eff.add(upgradeEffect("e",414))
        if (hasUpgrade("e",416)) eff= eff.add(upgradeEffect("e",416))
        if (hasUpgrade("e",424)) eff= eff.add(upgradeEffect("e",424))
        if (hasMilestone("ct",3)) eff= eff.add(0.2)
        if (hasMilestone("ct",6)) eff= eff.add(x*0.02)
        if (hasMilestone("ct",7)) eff= eff.add(x*0.02)
        if (hasMilestone("ct",8)) eff= eff.add(x*0.03)
        if (hasMilestone("ct",9)) eff= eff.add(x*0.03)
        if (hasMilestone("ct",10)) eff= eff.add(x*0.03)
        if (hasMilestone("ct",11)) eff= eff.add(x*0.03)
        if (hasMilestone("ct",12)) eff= eff.add(x*0.05)
        if (hasMilestone("ct",12)) eff= eff.add(x*0.1)
        if (hasUpgrade("ct",15)) eff= eff.add(upgradeEffect("ct",15))
        if (hasUpgrade("ct",33)) eff= eff.add(upgradeEffect("ct",33))
        if (hasUpgrade("ct",35)) eff= eff.add(upgradeEffect("ct",35))
        if (hasUpgrade("ct",82)) eff= eff.mul(tmp.ct.buyables[11].effect)
        if (hasUpgrade("ct",94)) eff= eff.mul(upgradeEffect("ct",23).log10())
        }
        return eff.max(3)
    },
    crmexp(){
        let eff = tmp.e.crme
        return tmp.e.crexp.pow(eff)
    },
    crme(){
        let eff = decimalZero
        if (inChallenge("ct",32)) {

        }
        else {
            eff = tmp.ct.buyables[13].effect.add(tmp.ct.buyables[32].effect2).add(tmp.ct.buyables[33].effect)
            let s = 0.3
            if (hasUpgrade("ct",84)) s+=1/30
            if (hasMilestone("ct",19)) s+=1/15
            if (hasUpgrade("ct",22)) eff= eff.add(0.2)
            if (hasUpgrade("ct",32)) eff= eff.add(0.1)
            if (hasUpgrade("ct",43)) eff= eff.add(upgradeEffect("ct",43))
            if (eff.gte(2.9)) eff = eff.div(2.9).pow(s).mul(2.9)
            if (hasUpgrade("ct",101)) eff= eff.mul(2)
            if (eff.gte(1e70)) eff = eff.log10().div(70).pow(s).mul(70).pow10()
        }
        return eff
    },
    UIgain() {
        let eff = decimalZero
        if (inChallenge("ct",32)) {

        }
        else {
        eff = getPointGen().root(tmp.d.buyables[13].effect).log10().log10().pow(tmp.e.qExp).div(920000).pow(tmp.e.clickables[11].exp).mul(100).mul(tmp.e.uiMult).max(0)
        if (eff.gte(Decimal.tetrate(10,7))) eff = tet10(slog(eff).sub(7).div(2).add(7))
        eff = eff.min(tet10(8))
        }
        return eff
    },
    crlog(){
        let eff = tmp.e.crsub
        if (inChallenge("ct",32)) eff = eff.add(0.5)
        return eff.add(1)
    },
    crsub(){
        let eff = decimalZero.sub(tmp.ct.buyables[12].effect).sub(tmp.ct.buyables[31].effect).sub(tmp.ct.buyables[32].effect)
        let x = decimalOne.add(tmp.ct.buyables[31].effect).add(tmp.ct.buyables[32].effect)
        let ex = 0
        if (hasMilestone("ct",18)) ex+=1
        if (hasUpgrade("e",413)) eff= eff.sub(0.01)
        if (hasUpgrade("e",414)) eff= eff.sub(0.01)
        if (hasUpgrade("e",424)) eff= eff.sub(0.02)
        if (hasUpgrade("e",415)) eff= eff.sub(0.03)
        if (hasUpgrade("e",426)) eff= eff.sub(0.04)
        if (hasUpgrade("e",421)) eff= eff.sub(upgradeEffect("e",421))
        if (hasUpgrade("e",425)) eff= eff.sub(upgradeEffect("e",425))
        if (hasUpgrade("ct",15)) eff= eff.sub(0.02)
        if (hasUpgrade("ct",16)) eff= eff.sub(upgradeEffect("ct",16))
        if (hasUpgrade("ct",24)) eff= eff.sub(0.05)
        if (hasUpgrade("ct",46)) eff= eff.sub(0.05)
        if (hasMilestone("ct",5)) eff= eff.sub(0.05)
        if (eff.lte(-x+0.25)) eff = Decimal.sub(x,Decimal.div(0.25,eff.neg().div(x-0.25).log(2).add(1).pow(1.5))).neg()
        if (eff.lte(-0.98)) eff = eff.neg().div(0.098).log10().pow(ex+0.7).mul(-0.98)
        if (eff.lte(-1.013)) eff = eff.neg().div(0.1013).log10().pow(ex+0.6).mul(-1.013)
        return eff
    },
    crMult(){
        let eff = decimalOne
        if (inChallenge("ct",32)) {
            if (hasUpgrade("uv",75)) eff = eff.mul(tmp.uv.upgrades[75].effect)
            if (hasUpgrade("Ud",14)) eff = eff.mul(tmp.Ud.upgrades[14].effect)
        }
        else {
        if (hasUpgrade("e",426)) eff= eff.mul(upgradeEffect("e",426))
        if (hasUpgrade("ct",13)) eff= eff.mul(upgradeEffect("ct",13))
        if (hasUpgrade("ct",23)) eff= eff.mul(upgradeEffect("ct",23))
        eff = eff.mul(tmp.e.buyables[121].effect).mul(tmp.e.buyables[122].effect).mul(tmp.e.buyables[123].effect)
        }
        return eff
    },
    update(diff) {
        if (player.e.unlocked) player.e.p = player.e.p.add(tmp.e.effect.times(diff)).min(tmp.e.effect.mul(1000))
        if (hasMilestone("e",2)) player.e.diseases = player.e.diseases.add(tmp.e.dgain.times(diff))
        if (hasUpgrade("e",46)) player.e.qc = player.e.qc.add(tmp.e.ucGain.times(diff))
        if (hasUpgrade("e",196)) player.e.rna = player.e.rna.add(tmp.e.rgain.times(diff))
        if (hasUpgrade("e",316)) player.e.mm = player.e.mm.add(tmp.e.mm.times(diff)).min(tmp.e.mmlim)
        if (hasUpgrade("e",226)) {
            if (inChallenge("ct",32)) {
                player.e.h = getLogisticAmount(player.e.h, tmp.e.buyables[81].effect, tmp.Us.recoveryEff2, diff)
                player.e.c = getLogisticAmount(player.e.c, tmp.e.buyables[82].effect, tmp.Us.recoveryEff2, diff)
                player.e.n = getLogisticAmount(player.e.n, tmp.e.buyables[83].effect, tmp.Us.recoveryEff2, diff)
                player.e.o = getLogisticAmount(player.e.o, tmp.e.buyables[91].effect, tmp.Us.recoveryEff2, diff)
                player.e.ph = getLogisticAmount(player.e.ph, tmp.e.buyables[92].effect, tmp.Us.recoveryEff2, diff)
            }
            else {
            player.e.h = player.e.h.add(tmp.e.buyables[81].effect.times(diff))
            player.e.c = player.e.c.add(tmp.e.buyables[82].effect.times(diff))
            player.e.n = player.e.n.add(tmp.e.buyables[83].effect.times(diff))
            player.e.o = player.e.o.add(tmp.e.buyables[91].effect.times(diff))
            player.e.ph = player.e.ph.add(tmp.e.buyables[92].effect.times(diff))
            }
        }
        if (hasUpgrade("e",266)) {
            player.e.ad = player.e.ad.add(player.e.h.div(5).min(player.e.c.div(5)).min(player.e.n.div(5)).times(diff))
            player.e.ur = player.e.ur.add(player.e.h.div(4).min(player.e.c.div(4)).min(player.e.n.div(2)).min(player.e.o.div(2)).times(diff))
            player.e.cy = player.e.cy.add(player.e.h.div(5).min(player.e.c.div(4)).min(player.e.n.div(3)).min(player.e.o).times(diff))
            player.e.gu = player.e.gu.add(player.e.h.div(5).min(player.e.c.div(5)).min(player.e.n.div(5)).min(player.e.o).times(diff))
            player.e.rp = player.e.rp.add(player.e.h.div(11).min(player.e.c.div(5)).min(player.e.o.div(8)).min(player.e.ph).times(diff))
            player.e.mrna = player.e.mrna.add(tmp.e.mrgain.times(diff))
        }
        if (player.e.inC) {
            if ((hasUpgrade("e",162)) && hasAchievement("a",83)) player.e.inC=false
        }
        player.e.i = tmp.e.i
        player.e.at = player.e.h.add(1).max(1).mul(player.e.c.add(1).max(1)).mul(player.e.n.add(1).max(1)).mul(player.e.o.add(1).max(1)).mul(player.e.ph.add(1).max(1)).sub(1).pow(tmp.Us.buyables[31].effect.add(1))
        if (hasUpgrade("e",46)) player.e.ins = player.e.ins.add(upgradeEffect("e",46).times(diff))
        player.e.in = tmp.e.buyables[11].total.add(tmp.e.buyables[12].total).add(tmp.e.buyables[13].total).add(tmp.e.buyables[21].total.mul(10)).add(tmp.e.buyables[22].total.mul(10)).add(tmp.e.buyables[23].total.mul(10)).add(player.e.ins).add(upgradeEffect("e",44).mul(hasUpgrade("e",44)+0))
        player.e.infections = player.e.in.sub(player.e.spent)
        let gain = tmp.e.UIgain
        if (hasUpgrade("e",162) && hasUpgrade("e",46)) player.e.qt = player.e.qt.max(gain)
        if (player.e.autob) {
            if (hasMilestone("e",3)) {
                player.e.buyables[11] = player.e.buyables[11].add(Decimal.log10(player.e.p.div(4e14).max(1)).div(Decimal.log10(5)).root(1.4).ceil().sub(player.e.buyables[11])).min(tmp.e.buyCap).max(player.e.buyables[11]).max(0)
                player.e.buyables[12] = player.e.buyables[12].add(Decimal.log10(player.e.p.div(1e16).max(1)).div(Decimal.log10(100)).root(1.4).ceil().sub(player.e.buyables[12])).min(tmp.e.buyCap).max(player.e.buyables[12]).max(0)
                player.e.buyables[13] = player.e.buyables[13].add(Decimal.log10(player.e.p.div(1e24).max(1)).div(Decimal.log10(1e5)).root(1.49).ceil().sub(player.e.buyables[13])).min(tmp.e.buyCap).max(player.e.buyables[13]).max(0)
                if (hasUpgrade("e",146)) {
                    player.e.buyables[21] = player.e.buyables[21].add(Decimal.log10(player.e.p.div(Decimal.pow(10,48054).mul(3)).max(1)).div(Decimal.log10(1e50)).root(1.45).ceil().sub(player.e.buyables[21])).min(tmp.e.buyCap).max(player.e.buyables[21]).max(0)
                    player.e.buyables[22] = player.e.buyables[22].add(Decimal.log10(player.e.p.div(Decimal.pow(10,55618)).max(1)).div(Decimal.log10(1e120)).root(1.45).ceil().sub(player.e.buyables[22])).min(tmp.e.buyCap).max(player.e.buyables[22]).max(0)
                    player.e.buyables[23] = player.e.buyables[23].add(Decimal.log10(player.e.p.div(Decimal.pow(10,74304).mul(1.337)).max(1)).div(Decimal.log10(1e250)).root(1.53).ceil().sub(player.e.buyables[23])).min(tmp.e.buyCap).max(player.e.buyables[23]).max(0)
                }
            } else {
            layers.e.buyables[11].buyMax()
            layers.e.buyables[12].buyMax()
            layers.e.buyables[13].buyMax()
            if (hasUpgrade("e",146)) {
            layers.e.buyables[21].buyMax()
            layers.e.buyables[22].buyMax()
            layers.e.buyables[23].buyMax()
            }
        }
        }
        if (player.e.autoq) {
            layers.e.buyables[51].buyMax()
            layers.e.buyables[52].buyMax()
            layers.e.buyables[53].buyMax()
            if (hasUpgrade("e",106)) {
            layers.e.buyables[61].buyMax()
            layers.e.buyables[62].buyMax()
            layers.e.buyables[63].buyMax()
            }
        }
        if (player.e.autoa) {
            layers.e.buyables[71].buyMax()
            layers.e.buyables[72].buyMax()
            if (hasUpgrade("e",226)) {
            layers.e.buyables[81].buyMax()
            layers.e.buyables[82].buyMax()
            layers.e.buyables[83].buyMax()
            layers.e.buyables[91].buyMax()
            if (hasUpgrade("e",253)) layers.e.buyables[92].buyMax()
            }
        }
        if (player.e.autod) {
            layers.e.buyables[41].buyMax()
            layers.e.buyables[42].buyMax()
        }
        if (player.e.autom) {
            layers.e.buyables[93].buyMax()
            if (hasUpgrade("e",293)) layers.e.buyables[94].buyMax()
            if (hasUpgrade("e",305)) layers.e.buyables[95].buyMax()
            if (hasUpgrade("e",313)) layers.e.buyables[101].buyMax()
        }
        if (player.e.automm) {
            layers.e.buyables[102].buyMax()
        }
        if (player.e.automm2) {
            layers.e.buyables[103].buyMax()
            layers.e.buyables[104].buyMax()
            layers.e.buyables[105].buyMax()
        }
        if (player.e.automax) {
            layers.e.buyables[31].buyMax()
        }
        if (player.ct.autoc) {
            layers.e.buyables[111].buyMax()
            layers.e.buyables[112].buyMax()
            layers.e.buyables[113].buyMax()
            layers.e.buyables[121].buyMax()
            layers.e.buyables[122].buyMax()
            layers.e.buyables[123].buyMax()
        }
        if (player.ct.autom && !inChallenge("ct",32)) {
            layers.e.clickables[31].onClick(true)
            layers.e.clickables[32].onClick(true)
        }
        let t = 0.1
        if (hasUpgrade("e",46)) t = 0.33
        if (player.e.ct < t && (inChallenge("e", 11) || inChallenge("e", 12) || player.e.inC))player.e.ct += diff
        if (player.e.ct >= t) {
            player.v.upgrades = [11,12,13,21,22,23,31,32,33]
        }
    if (hasUpgrade("e",403)) { 
        let c = player.e.crna.div(tmp.e.crMult.pow(tmp.e.crmexp)).root(tmp.e.crexp)
        let cg = slogadd(slogadd(c,tmp.e.crlog).add(tmp.e.crgain.times(diff)),tmp.e.crlog.neg()).pow(tmp.e.crexp).mul(tmp.e.crMult.pow(tmp.e.crmexp))
        if (player.e.crna.gte(tet10(4))) player.e.Cr = cg.div(Decimal.max(diff,0.001))
        else player.e.Cr = cg.sub(player.e.crna).div(Decimal.max(diff,0.001))
        player.e.crna = cg
    }
    },
    microtabs: {
        mRNAupg: {
            "Upgrades": {
                content: [
                    function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.mRNAupg == "Upgrades") return ["upgrades",[27,28,29,30,31,32,33]]},
                ],
                buttonStyle: {"border-color": "#00AA55"},
            },
            "Upgrades2": {
                content: [
                    function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.mRNAupg == "Upgrades2") return ["upgrades",[34,35,36,37,38,39,40]]},
                ],
                buttonStyle: {"border-color": "#00AA55"},
                unlocked() {return hasUpgrade("e",336)}
            },
            "Upgrades3": {
                content: [
                    function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.mRNAupg == "Upgrades3") return ["upgrades",[41,42]]},
                ],
                buttonStyle: {"border-color": "#00AA55"},
                unlocked() {return hasUpgrade("e",406)}
            },
            "Buyables": {
                content: [
                    function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.mRNAupg == "Buyables") return ["row",[["buyable",93],["buyable",94],["buyable",95]]]},
                    function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.mRNAupg == "Buyables") return ["buyable",101]},
                ],
                buttonStyle: {"border-color": "#00AA55"},
            }
        },
        stuff: {
            "Upgrades": {
                content: [
                    function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.stuff == "Upgrades") return ["upgrades",[20,21,22,23,24,25,26]]},
                    function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.stuff == "Upgrades") return ["buyables",[7]]},
                ],
                buttonStyle: {"border-color": "#0066cc"},
            },
            "Atoms": {
                content: [
                    ["raw-html", 
                    function () {
                        if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.stuff == "Atoms") {
                        let a = "You have <h2 style='color:#A00000;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.h) + "</h2> Hydrogen, which increases RNA gain exp by " + format(tmp.e.Heffect)+"<br>"
                        let b = "You have <h2 style='color:#00A000;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.c) + "</h2> Carbon, which boosts cases exp and 'Nucleotides' by ^" + format(tmp.e.Ceffect)+"<br>"
                        let c = "You have <h2 style='color:#00A0A0;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.n) + "</h2> Nitrogen, which increases 'Max Buyable' base by " + format(tmp.e.Neffect)+"<br>"
                        let d = "You have <h2 style='color:#0000A0;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.o) + "</h2> Oxygen, which boosts previous Atom effects by " + format(tmp.e.Oeffect)+"<br>"
                        let e = hasUpgrade("e",253)?"You have <h2 style='color:#BB5500;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.ph) + "</h2> Phosphorus, which boosts previous Atom and Atomic RNA effects by ^" + format(tmp.e.Pheffect)+"<br>":""
                        let f = "You have <h2 style='color:#A0A000;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.at) + "</h2> Atomic RNA, which boosts RNA gain by " + format(tmp.e.Aeffect)
                        return a+b+c+d+e+f
                        }
                    }],
                    function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.stuff == "Atoms") return ["row",[["buyable",81],["buyable",82],["buyable",83],["buyable",91],["buyable",92]]]},
                ],
                buttonStyle: {"border-color": "#0066cc"},
                shouldNotify() {return (tmp.e.buyables[81].canAfford || tmp.e.buyables[82].canAfford || tmp.e.buyables[83].canAfford || tmp.e.buyables[91].canAfford || tmp.e.buyables[92].canAfford) && !player.e.autoa},
                unlocked() {return hasUpgrade("e",226)}
            },
            "Molecules": {
                content: [
                    ["raw-html", 
                    function () {
                        if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.stuff == "Molecules") {
                        let a = "You have <h2 style='color:#A00000;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.h) + "</h2> Hydrogen<br>"
                        let b = "You have <h2 style='color:#00A000;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.c) + "</h2> Carbon<br>"
                        let c = "You have <h2 style='color:#00A0A0;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.n) + "</h2> Nitrogen<br>"
                        let d = "You have <h2 style='color:#0000A0;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.o) + "</h2> Oxygen<br>"
                        let e = hasUpgrade("e",253)?"You have <h2 style='color:#BB5500;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.ph) + "</h2> Phosphorus<br>":""
                        let f = "You have <h2 style='color:#A000A0;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.ad) + "</h2> Adenine (starts at "+format(Decimal.mul(2.2e10,tmp.e.mol))+"), which boosts Self RNA by ^" + format(tmp.e.Adeffect)+"<br>"
                        let g = "You have <h2 style='color:#A0A000;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.ur) + "</h2> Uracil (starts at "+format(Decimal.mul(4e10,tmp.e.mol))+"), which increases 'RNA Boost' base by " + format(tmp.e.Ureffect)+"<br>"
                        let h = hasUpgrade("e",244)?"You have <h2 style='color:#A0A0A0;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.cy) + "</h2> Cytosine (starts at "+format(Decimal.mul(8e13,tmp.e.mol))+"), which increases 'Protein Synthesis' base by " + format(tmp.e.Cyeffect)+"<br>":""
                        let i = hasUpgrade("e",244)?"You have <h2 style='color:#A05000;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.gu) + "</h2> Guanine (starts at "+format(Decimal.mul(5e13,tmp.e.mol))+"), which increases AP base by " + format(tmp.e.Gueffect)+"<br>":""
                        let j = hasUpgrade("e",256)?"You have <h2 style='color:#0055AA;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.rp) + "</h2> Ribose-Phosphate (starts at "+format(Decimal.mul(1e20,tmp.e.mol))+"), which boosts previous Molecules by ^" + format(tmp.e.Rpeffect):""
                        return a+b+c+d+e+f+g+h+i+j
                        }
                    }],
                    ["clickable",12],
                    function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.stuff == "Molecules") return ["clickables",[2]]},
                ],
                buttonStyle: {"border-color": "#0066cc"},
                unlocked() {return hasUpgrade("e",242)}
            },
            "mRNA": {
                content: [
                    ["raw-html", 
                    function () {
                        if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.stuff == "mRNA") {
                        let a = "You have <h2 style='color:#A000A0;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.ad) + "</h2> Adenine<br>"
                        let b = "You have <h2 style='color:#A0A000;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.ur) + "</h2> Uracil<br>"
                        let c = "You have <h2 style='color:#A0A0A0;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.cy) + "</h2> Cytosine<br>"
                        let d = "You have <h2 style='color:#A05000;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.gu) + "</h2> Guanine<br>"
                        let e = "You have <h2 style='color:#0055AA;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.rp) + "</h2> Ribose-Phosphate<br>"
                        let f = "You have <h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.mrna) + "</h2> mRNA, which boosts atom gain by " + format(tmp.e.mreff)+"<br>"
                        let g = "You are gaining <h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + format(tmp.e.mrgain) + "</h2> mRNA per second (starts at "+format(tmp.e.mrnaReq[0])+" AD, "+format(tmp.e.mrnaReq[1])+" UR, "+format(tmp.e.mrnaReq[2])+" CY, "+format(tmp.e.mrnaReq[3])+" GU, "+format(tmp.e.mrnaReq[4])+" R5P)<br>"
                        return a+b+c+d+e+f+g
                        }
                    }],
                    ["microtabs", "mRNAupg"],
                ],
                buttonStyle: {"border-color": "#0066cc"},
                unlocked() {return hasUpgrade("e",266)}
            },
            "MMNA": {
                content: [
                    ["raw-html", 
                    function () {
                        if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.stuff == "MMNA") {
                        let a = "You have <h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.mrna) + "</h2> mRNA, which boosts atom gain by " + format(tmp.e.mreff)+"<br>"
                        let b = "You are gaining <h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + format(tmp.e.mrgain) + "</h2> mRNA per second<br>"
                        let c ="You have <h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.mm) + "</h2> MMNA (Limit: "+formatWhole(tmp.e.mmlim)+"), which boosts mRNA gain by " + format(tmp.e.mmeff)+"<br>"
                        let d = "Attempt amount:"+formatWhole(tmp.e.clickables.getAttemptAmount.mul(player.Us.mutPer).max(1))+"x ("+formatWhole(layers.e.clickables.getAttemptAmount(true))+" max)"
                        return a+b+c+d
                        }
                    }],
                    function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.stuff == "MMNA") return ["row",[["buyable",102],["buyable",103],["buyable",104],["buyable",105]]]},
                    function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.stuff == "MMNA") return ["clickables",[3]]},
                    "blank",
                ],
                buttonStyle: {"border-color": "#0066cc"},
                unlocked() {return hasUpgrade("e",316)}
            },
            "Rewards": {
                content: [
                    ["raw-html", 
                    function () {
                        if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.stuff == "Rewards") {
                        let a = "You have <h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.mu) + "</h2> "+pluralize(player.e.mu,'Mutation','Mutations',true)+", which "+pluralize(player.e.mu,'gives','give',true)+":<br>"
                        let b = "+"+format(tmp.e.mueff.e1)+" mRNA exponent<br>"
                        let c = format(tmp.e.mueff.e2)+"x MMNA limit<br>"
                        let d = player.e.mu.gte(20)?formatWhole(tmp.e.mueff.e3)+" free 'mRNA Gain'<br>":""
                        let e = player.e.mu.gte(40)?formatWhole(tmp.e.mueff.e4)+" later 20,000 Infecter scaling <br>":""
                        let e2 = hasUpgrade("e",346)?"+"+format(tmp.e.mueff.e5)+" Max Buyable exp<br>":""
                        let e3 = hasUpgrade("e",346)?"^"+format(tmp.e.mueff.e6)+" MMNA effect and base MMNA gain<br>":""
                        let f = "You have <h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.mu2) + "</h2> Corona "+pluralize(player.e.mu2,'Mutation','Mutations',true)+", which "+pluralize(player.e.mu2,'gives','give',true)+":<br>"
                        let g = player.e.mu2.gte(1)?format(tmp.e.mueff2.e1)+" effective Mutations<br>":""
                        let h = player.e.mu2.gte(1)?format(tmp.e.mueff2.e2)+" free 'mRNA Booster'<br>":""
                        let i = player.e.mu2.gte(1)?format(tmp.e.mueff2.e3)+"x MMNA gain and limit<br>":""
                        let j = player.e.mu2.gte(5)?"/"+format(tmp.e.mueff2.e4)+" MMNA buyables scaling<br>":""
                        return a+b+c+d+e+e2+e3+"<br>"+f+g+h+i+j
                        }
                    }],
                ],
                buttonStyle: {"border-color": "#0066cc"},
                unlocked() {return hasUpgrade("e",316)}
            },
            "CRNA": {
                content: [
                    ["raw-html", 
                    function () {
                        if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.stuff == "CRNA") {
                        let a = "You have <h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.mrna) + "</h2> mRNA, which boosts atom gain by " + format(tmp.e.mreff)+"<br>"
                        let b = "You are gaining <h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + format(tmp.e.mrgain) + "</h2> mRNA per second<br>"
                        let c ="You have <h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.mm) + "</h2> MMNA (Limit: "+formatWhole(tmp.e.mmlim)+"), which boosts mRNA gain by " + format(tmp.e.mmeff)+"<br>"
                        let d = "You are gaining <h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + format(tmp.e.buyables[102].effect) + "</h2> MMNA per second<br>"
                        let e ="You have <h2 style='color:#AA55AA;text-shadow:0px 0px 10px;'>" + format(player.e.crna) + "</h2> CRNA, which boosts MMNA gain by " + format(tmp.e.creff)+" (hold shift to see gain formula)<br>"
                        let e2= shiftDown?"Gain: log<sup>"+format(tmp.e.crlog)+"</sup>10(x)^"+format(tmp.e.crexp)+"*"+format(tmp.e.crMult)+(hasUpgrade("ct",22)?"^"+format(tmp.e.crmexp):"")+"<br>":""
                        let f = "You are gaining <h2 style='color:#AA55AA;text-shadow:0px 0px 10px;'>" + format(player.e.Cr.max(0)) + "</h2> CRNA per second (Base Gain: <h2 style='color:#AA55AA;text-shadow:0px 0px 10px;'>"+ format(tmp.e.crgain)+"</h2>) (starts at "+format(inChallenge("ct",32)?"e1000":"e309")+" MMNA)<br>"
                        return a+b+c+d+e+e2+f
                        }
                    }],
                    function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.stuff == "CRNA") return ["buyables",[11,12]]},
                    "blank",
                ],
                buttonStyle: {"border-color": "#0066cc"},
                unlocked() {return hasUpgrade("e",403)}
            },
        },
    },
    tabFormat:{
        "Main": {
            content: [
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "Main") return "main-display"},
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "Main") return "prestige-button"},
                "blank",
                ["raw-html", 
                function () {
                    if (player.tab == "e" && player.subtabs.e.mainTabs == "Main") {
                    let a = "You have " + layerText("h2", "e", format(player.e.p)) +  ' infection power, which boosts cases gain by ^' + layerText("h2", "e", format(tmp.e.peffect)) + ", and  makes 'Cases Boost' softcap start +" + layerText("h2", "e", formatWhole(tmp.e.peffect2)) + " later.<br>"
                    let b = player.points.gte(Decimal.pow(10,Decimal.pow(10,498).mul(3)))? "You have " + layerText("h2", "e", format(player.e.i)) +  ' immunity, which makes cases gain (hardcapped) at ' + layerText("h2", "e", format(tmp.e.icap))+"<br><br>":""
                    return a+b
                    }
                }],
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "Main") return ["upgrades",[1,2,3,4,19]]},
            ],
        },
        "Milestones": {
            content: [
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "Milestones") return "main-display"},
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "Milestones") return "prestige-button"},
                "blank",
                ["raw-html", 
                function () {
                    if (player.tab == "e" && player.subtabs.e.mainTabs == "Milestones") {
                    let a = "You have " + layerText("h2", "e", format(player.e.p)) +  ' infection power, which boosts cases gain by ^' + layerText("h2", "e", format(tmp.e.peffect)) + ", and  makes 'Cases Boost' softcap start +" + layerText("h2", "e", formatWhole(tmp.e.peffect2)) + " later.<br>"
                    let b = player.points.gte(Decimal.pow(10,Decimal.pow(10,498).mul(3)))? "You have " + layerText("h2", "e", format(player.e.i)) +  ' immunity, which makes cases gain (hardcapped) at ' + layerText("h2", "e", format(tmp.e.icap))+"<br><br>":""
                    return a+b
                    }
                }],
                function () {if (player.tab == "e") return "milestones"},
            ],
        },
        "Buyables": {
            content: [
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "Buyables") return "main-display"},
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "Buyables") return "prestige-button"},
                "blank",
                ["raw-html", 
                function () {
                    if (player.tab == "e" && player.subtabs.e.mainTabs == "Buyables") {
                    let a = "You have " + layerText("h2", "e", format(player.e.p)) +  ' infection power, which boosts cases gain by ^' + layerText("h2", "e", format(tmp.e.peffect)) + ", and  makes 'Cases Boost' softcap start +" + layerText("h2", "e", formatWhole(tmp.e.peffect2)) + " later.<br>"
                    let b = player.points.gte(Decimal.pow(10,Decimal.pow(10,498).mul(3)))? "You have " + layerText("h2", "e", format(player.e.i)) +  ' immunity, which makes cases gain (hardcapped) at ' + layerText("h2", "e", format(tmp.e.icap))+"<br><br>":""
                    let c =(hasMilestone("e",1))?"You have " + layerText("h2", "e", formatWhole(player.e.infections)) +  ' infected '+pluralize(player.e.infections,'infection','infections',true)+' ('+layerText("h2", "e", formatWhole(player.e.in))+" total)":""
                    return a+b+c
                    }
                }],
                ["display-text", "Buyables give free levels to left buyables."],
                ["display-text", function () {if (hasMilestone("e",1)) return "Each buyable gives 1 infected infection."}],
                ["display-text", function () {if (hasUpgrade("e",146)) return "Each Row 2 buyable gives 10 infected infections."}],
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "Buyables") return ["buyables",[1,2]]},
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "Buyables") return ["buyable",31]},
            ],
            shouldNotify() {return tmp.e.buyables[31].canAfford && !player.e.automax},
            unlocked() {return hasMilestone("e",0)}
        },
        "Infections": {
            content: [
                function () {if (player.tab == "e") return "main-display"},
                function () {if (player.tab == "e") return "prestige-button"},
                "blank",
                ["raw-html", 
                function () {
                    if (player.tab == "e" && player.subtabs.e.mainTabs == "Infections") {
                    let a = "You have " + layerText("h2", "e", format(player.e.p)) +  ' infection power, which boosts cases gain by ^' + layerText("h2", "e", format(tmp.e.peffect)) + ", and  makes 'Cases Boost' softcap start +" + layerText("h2", "e", formatWhole(tmp.e.peffect2)) + " later.<br>"
                    let b = player.points.gte(Decimal.pow(10,Decimal.pow(10,498).mul(3)))? "You have " + layerText("h2", "e", format(player.e.i)) +  ' immunity, which makes cases gain (hardcapped) at ' + layerText("h2", "e", format(tmp.e.icap))+"<br><br>":""
                    let c ="You have " + layerText("h2", "e", formatWhole(player.e.infections)) +  ' infected '+pluralize(player.e.infections,'infection','infections',true)+' ('+layerText("h2", "e", formatWhole(player.e.in))+" total)"
                    return a+b+c
                    }
                }],
                "blank",
                "respec-button",
                ["upgrade",51],
                ["row",[["upgrade",52],["upgrade",53]]],
                ["row",[["upgrade",54],["upgrade",55]]],
                ["upgrade",56],
                ["upgrade",61],
                ["row",[["upgrade",62],["upgrade",65],["upgrade",72]]],
                ["row",[["upgrade",63],["upgrade",66],["upgrade",73]]],
                ["row",[["upgrade",64],["upgrade",71],["upgrade",74]]],
                ["upgrade",75],
                ["upgrade",76],
            ],
            unlocked() {return hasMilestone("e",1)}
        },
        "Diseases": {
            content: [
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "Diseases") return "main-display"},
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "Diseases") return "prestige-button"},
                "blank",
                ["raw-html", 
                function () {
                    if (player.tab == "e" && player.subtabs.e.mainTabs == "Diseases") {
                    let a = "You have " + layerText("h2", "e", format(player.e.p)) +  ' infection power, which boosts cases gain by ^' + layerText("h2", "e", format(tmp.e.peffect)) + ", and  makes 'Cases Boost' softcap start +" + layerText("h2", "e", formatWhole(tmp.e.peffect2)) + " later.<br>"
                    let b = player.points.gte(Decimal.pow(10,Decimal.pow(10,498).mul(3)))? "You have " + layerText("h2", "e", format(player.e.i)) +  ' immunity, which makes cases gain (hardcapped) at ' + layerText("h2", "e", format(tmp.e.icap))+"<br>":""
                    let c = "You have " + layerText("h2", "e", format(player.e.diseases)) +  ' infectious '+pluralize(player.e.diseases,'disease','diseases')+', which '+pluralize(player.e.diseases,'boosts','boost')+' Dimension Boosts by '+ layerText("h2", "e", format(tmp.e.deff))+"<br>"
                    let d = "You are gaining " + layerText("h2", "e", format(tmp.e.dgain)) +  ' infectious '+pluralize(player.e.diseases,'disease','diseases')+' per second (starts at '+format("1e327")+' infection power)'
                    return a+b+c+d
                    }
                }],
                "blank",
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "Diseases") return ["upgrades",[11,12,13,14,15]]},
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "Diseases") return ["buyables",[4]]},
            ],
            shouldNotify() {return (tmp.e.buyables[41].canAfford || tmp.e.buyables[42].canAfford) && !player.e.autod},
            unlocked() {return hasMilestone("e",2)}
        },
        "Challenges": {
            content: [
                function () {if (player.tab == "e") return "main-display"},
                function () {if (player.tab == "e") return "prestige-button"},
                "blank",
                ["raw-html", 
                    function () {
                        if (player.tab == "e" && player.subtabs.e.mainTabs == "Challenges") {
                        let a = "You have " + layerText("h2", "e", format(player.e.p)) +  ' infection power, which boosts cases gain by ^' + layerText("h2", "e", format(tmp.e.peffect)) + ", and  makes 'Cases Boost' softcap start +" + layerText("h2", "e", formatWhole(tmp.e.peffect2)) + " later.<br>"
                        let b = player.points.gte(Decimal.pow(10,Decimal.pow(10,498).mul(3)))? "You have " + layerText("h2", "e", format(player.e.i)) +  ' immunity, which makes cases gain (hardcapped) at ' + layerText("h2", "e", format(tmp.e.icap))+"<br>":""
                        return a+b
                        }
                    }],
                "blank",
                function () {if (player.tab == "e") return "challenges"},
            ],
            unlocked() {return hasMilestone("e",3)}
        },
        "Quarantine": {
            content: [
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "Quarantine") return "main-display"},
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "Quarantine") return "prestige-button"},
                "blank",
                ["raw-html", 
                    function () {
                        if (player.tab == "e" && player.subtabs.e.mainTabs == "Quarantine") {
                        let a = "You have " + layerText("h2", "e", format(player.e.p)) +  ' infection power, which boosts cases gain by ^' + layerText("h2", "e", format(tmp.e.peffect)) + ", and  makes 'Cases Boost' softcap start +" + layerText("h2", "e", formatWhole(tmp.e.peffect2)) + " later.<br>"
                        let b = player.points.gte(Decimal.pow(10,Decimal.pow(10,498).mul(3)))? "You have " + layerText("h2", "e", format(player.e.i)) +  ' immunity, which makes cases gain (hardcapped) at ' + layerText("h2", "e", format(tmp.e.icap))+"<br><br>":""
                        let c = "You have " + layerText("h2", "e", formatWhole(player.e.infections)) +  ' infected '+pluralize(player.e.infections,'infection','infections',true)+' ('+layerText("h2", "e", formatWhole(player.e.in))+" total)<br>"
                        let d = "You are gaining " + layerText("h2", "e", format(upgradeEffect("e",46))) +  ' infected '+pluralize(upgradeEffect("e",46),'infection','infections')+' per second.<br><br>'
                        let e = "You have " + layerText("h2", "e", formatWhole(player.e.qt)) + " Unquarantined "+pluralize(player.e.qt,'Infection','Infections',true)+", which produce " + layerText("h2", "e", format(tmp.e.ucGain)) + " Unquarantined Cases per second<br>"
                        let f = "You have " + layerText("h2", "e", formatWhole(player.e.qc)) + " Unquarantined "+pluralize(player.e.qc,'Case','Cases',true)+"<br>"
                        return a+b+c+d+e+f
                        }
                    }],
                "blank",
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "Quarantine" && (!hasUpgrade("e",162)) || !hasAchievement("a",83)) return ["clickable",11]},
                "blank",
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "Quarantine") return ["buyables",[5]]},
                function () {if (player.tab == "e" && hasUpgrade("e",106) && player.subtabs.e.mainTabs == "Quarantine") return ["buyables",[6]]},
                "blank",
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "Quarantine") return ["upgrades",[8,9,10,16,17,18]]},
            ],
            unlocked() {return hasUpgrade("e",46)}
        },
        "RNA": {
            content: [
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA") return "main-display"},
                function () {if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA") return "prestige-button"},
                "blank",
                ["raw-html", 
                    function () {
                        if (player.tab == "e" && player.subtabs.e.mainTabs == "RNA") {
                        let a = "You have " + layerText("h2", "e", format(player.e.p)) +  ' infection power, which boosts cases gain by ^' + layerText("h2", "e", format(tmp.e.peffect)) + ", and  makes 'Cases Boost' softcap start +" + layerText("h2", "e", formatWhole(tmp.e.peffect2)) + " later.<br>"
                        let b = player.points.gte(Decimal.pow(10,Decimal.pow(10,498).mul(3)))? "You have " + layerText("h2", "e", format(player.e.i)) +  ' immunity, which makes cases gain (hardcapped) at ' + layerText("h2", "e", format(tmp.e.icap))+"<br>":""
                        let c = "You have " + layerText("h2", "e", formatWhole(player.e.rna)) +  ' RNA, which boosts II gain by ' + layerText("h2", "e", format(tmp.e.reff)) + ", and DNA by ^" + layerText("h2", "e", format(tmp.e.reff2))+"<br>"
                        let d = "You are gaining " + layerText("h2", "e", format(tmp.e.rgain)) +  ' RNA per second (starts at '+format(tmp.e.rnaReq)+' IP).'
                        return a+b+c+d
                        }
                    }],
                "blank",
                ["microtabs", "stuff"],
            ],
            unlocked() {return hasUpgrade("e",196)}
        },
    },
    clickables: {
        getAttemptAmount(force = false){
            let ret = decimalOne
            if (!shiftDown && !force) return ret
            if (inChallenge("ct",32)) {
                if (hasUpgrade("Us",82)) {
                    ret = ret.mul(5)
                    if (player.e.mrna.gte("e1966")) ret = ret.mul(5)
                }
                if (hasUpgrade("Us",53)) ret = ret.mul(4)
                if (hasUpgrade("uv",52)) ret = ret.mul(5)
                if (hasUpgrade("uv",53)) ret = ret.mul(2)
                if (hasUpgrade("uv",55)) ret = ret.mul(3)
                if (hasUpgrade("Us",83)) ret = ret.mul(tmp.Us.upgrades[83].effect)
            }
            else {
            if (hasUpgrade("e",324)) ret = ret.times(10)
            if (hasUpgrade("e",332)) ret = ret.times(100)
            if (hasUpgrade("e",336)) ret = ret.times(10)
            if (hasUpgrade("e",361)) ret = ret.times(1e4)
            if (hasUpgrade("e",382)) ret = ret.times(1e12)
            if (hasUpgrade("e",413)) ret = ret.times(tmp.e.creff)
            if (hasUpgrade("e",363)) ret = ret.times(upgradeEffect("e",363))
            if (hasUpgrade("e",383)) ret = ret.times(tmp.e.upgrades[383].effect2)
            if (hasMilestone("e",9)) ret = ret.times(10)
            if (hasMilestone("ct",0)) ret = ret.times(100)
            }
            return ret 
    },
    getChargeComsumption(){
        let mu = player.e.mu2
        let e = 1
        if (hasMilestone("Us",49)) e /= 1.7 
        if (hasMilestone("Us",51)) e /= 1.26
        if (hasMilestone("Us",52) && player.e.mm.gte("e1285")) e /= 1.11
        if (hasMilestone("Us",53) && player.e.mm.gte("e2216")) e /= 1.11
        if (hasMilestone("Us",56)) e /= 1.11
        mu = mu.sub(5).mul(e).add(5)
        if (inChallenge("ct",32)) mu = mu.pow(4/3)
        if (mu.gte(10)) mu = mu.div(10).pow(mu.div(10).add(0.3)).mul(10)
        if (mu.gte(9)) mu = mu.div(9).pow(1.7).mul(9)
        if (mu.gte(7)) mu = mu.div(7).pow(1.25).mul(7)
        if (mu.gte(2)) mu = mu.div(2).pow(1.5).mul(2)
        if (hasUpgrade("e",423)) mu = mu.root(upgradeEffect("e",423))
        if (hasUpgrade("e",425)) mu = mu.root(1.02)
        if (hasMilestone("ct",6)) mu = mu.root(1.1)
        if (hasMilestone("Us",36)) mu = mu.div(1.15)
        let ret = Decimal.pow(1e9,mu.pow(1.5))
        if (inChallenge("ct",32)) ret = ret.mul(30)
        return ret.floor()
    }, 
    chance() {
        let m = player.e.mu2
        let x = player.e.mu.sub(m.mul(m.add(1)).div(2).add(m.mul(4)).mul(10))
        if (x.gte(3) && inChallenge("ct",32)) x = x.sub(3).mul(5).add(3)
        let exp = m.sub(6).pow(2).div(10).add(1.5)
        let exp2 = m.sub(5).pow(1.75).div(10).add(1.5)
        if (hasUpgrade("e",413)) exp = exp.root(upgradeEffect("e",413))
        if (hasUpgrade("e",422)) exp = exp.root(upgradeEffect("e",422))
        if (hasUpgrade("e",415)) exp = exp.root(2)
        if (hasUpgrade("e",421)) exp = exp.root(3)
        if (hasUpgrade("e",424)) {
            exp = exp.root(1.05)
            exp2 = exp2.root(1.05)
        }
        if (hasUpgrade("e",426)) exp2 = exp2.root(1.05)
        if (hasMilestone("ct",5)) exp2 = exp2.root(1.1)
        if (x.gte(100) && m.gte(7)) x = x.div(100).pow(exp).mul(100)
        if (x.gte(50) && m.gte(6)) x = x.div(50).pow(exp2).mul(50)
        if (m.gte(7)) m = m.div(7).pow(1.75).mul(7)
        if (m.gte(4)) m = m.div(4).pow(1.75).mul(4)
        if (m.gte(2)) x = x.add(m.mul(23))
        if (hasUpgrade("e",356)) x = x.div(1.1)
        if (hasUpgrade("e",392)) x = x.div(1.075)
        if (hasUpgrade("e",396)) x = x.div(1.05)
        if (hasUpgrade("e",372)) x = x.div(1.05)
        if (hasUpgrade("e",386)) x = x.div(1.025)
        if (hasUpgrade("e",361)) x = x.div(upgradeEffect("e",361))
        if (hasUpgrade("e",362)) x = x.div(upgradeEffect("e",362))
        if (hasUpgrade("e",364)) x = x.div(upgradeEffect("e",364))
        if (hasUpgrade("e",373)) x = x.div(upgradeEffect("e",373))
        if (hasUpgrade("e",383)) x = x.div(upgradeEffect("e",383))
        if (hasUpgrade("e",381)) x = x.div(tmp.e.buyables[103].effect.pow(0.15))
        if (x.gte(30)) x = x.div(30).pow(3).mul(30)
        if (x.gte(5) && m.gte(1)) x = x.div(5).pow(1.7).mul(5)
        if (player.e.mu2.gte(9)) x = x.pow(player.e.mu2.div(35).add(1))
        if (hasUpgrade("e",412)) x = x.pow(0.75)
        if (hasUpgrade("e",422)) x = x.pow(0.8)
        if (hasUpgrade("e",424)) x = x.pow(0.8)
        let scale = Decimal.pow(0.82,m.pow(2).add(1))
        let c = Decimal.pow(scale,x).div(Decimal.pow(1e5,m))
        if (hasUpgrade("e",334)) c = c.mul(upgradeEffect("e",334))
        if (hasUpgrade("e",363)) c = c.mul(upgradeEffect("e",363))
        if (inChallenge("ct",32)) {
            let mut = player.e.mu
            let co = player.e.mu2
            let n = mut.sub(co.mul(co.add(1)).div(2).add(co.mul(4)).mul(10))
            if (hasUpgrade("Us",84) && player.Us.trna.gte("e1664")) {
                c = c.mul(1000)
                mut = mut.div(1.3)
            }
            if (hasUpgrade("Us",55)) {
                mut = mut.div(1.1)
            }
            c = c.div(100)
            if (hasUpgrade("Us",82)) {
                c = c.mul(5)
                if (player.e.mrna.gte("e1966")) c = c.mul(5)
            }
            if (hasUpgrade("Us",83)) c = c.mul(tmp.Us.upgrades[83].effect)
            if (player.e.mu.gte(4)) {
                if (player.e.mu.gte(40)) mut = mut.div(40).pow(1.25).mul(40).sub(40).mul(2).add(40)
                if (player.e.mu.gte(180)) mut = mut.div(180).pow(1.25).mul(180).sub(180).mul(2).add(180)
                if (player.e.mu.gte(275)) mut = mut.sub(260).mul(1.2).add(400)
                if (player.e.mu.gte(350)) mut = mut.sub(350).mul(1.35).add(350)
                if (player.e.mu.gte(450)) mut = mut.sub(450).mul(1.35).add(450)
                if (player.e.mu.gte(680)) mut = mut.sub(2000).mul(1.55)
                c = c.div(Decimal.pow(2,mut.sub(4)))
            }
            if (hasMilestone("Us",54) && player.e.mm.gte("e3010")) n = n.div(1.1)
            if (co.gte(9)) {
                let cexp = 1.9
                if (co.gte(12)) cexp = 2
                if (co.gte(14)) cexp = 2.1
                c = c.div(Decimal.pow(co,n.mul(co.div(9).pow(cexp+0.1)).pow(cexp)))
            }
        }
        return c.mul(tmp.e.buyables[105].effect).min(1)
    },
    chance2() {
        let x = player.e.mu2
        if (x.gte(6)) x = x.div(6).pow(2.5).mul(6)
        if (hasUpgrade("e",393)) x = x.div(1.2)
        if (hasUpgrade("e",404)) x = x.div(1.1)
        if (hasUpgrade("e",401)) x = x.div(upgradeEffect("e",401))
        let c = Decimal.pow(0.1,x.pow(1.5))
        return c.min(1)
    },
        rows: 3,
        cols: 5,
        11: {
            display() {
                let dis = "'Boostless' and 'Logarithm' are applied. Cases gain exponent is ^" + format(tmp.e.qExp) + "."
                if (player.e.inC) dis += "(IN)"
                dis += "<br>Get "+format("e92e4")+" cases per second<br>" 
                if (player.e.inC) dis += "+<h3>" + formatWhole(tmp.e.clickables[11].gain)+"</h3> Unquarantined Infections<br>"
                if (tmp.e.clickables[11].gain.lt(1e6)) dis += "Next at " + formatWhole(tmp.e.clickables[11].next)
                return dis
            },
            g() {
                let gain = getPointGen().max(1).log10().div(920000).pow(tmp.e.clickables[11].exp).mul(100).mul(tmp.e.uiMult).max(0)
                if (getPointGen().max(1).log10().lt(920000)) gain = decimalZero
                return gain.floor()
            },
            gain() {
                let gain = getPointGen().max(1).log10().div(920000).pow(tmp.e.clickables[11].exp).mul(100).mul(tmp.e.uiMult).sub(player.e.qt).max(0)
                if (getPointGen().max(1).log10().lt(920000)) gain = decimalZero
                return gain.floor()
            },
            exp() {
                let exp = decimalTwo
                if (hasUpgrade("e",92)) exp = exp.add(upgradeEffect("e",92))
                if (hasUpgrade("e",94)) exp = exp.add(upgradeEffect("e",94))
                exp = exp.add(tmp.e.buyables[61].effect)
                return exp
            },
            next() {
                let gain = tmp.e.clickables[11].g
                let next = gain.max(player.e.qt).add(1).max(1)
                next = next.div(tmp.e.uiMult).div(100).root(tmp.e.clickables[11].exp).mul(920000).max(920000).pow10()
                return next
            },
            canClick() {return true},
            onClick() {
                if (player.e.inC) player.e.qt = player.e.qt.add(tmp.e.clickables[11].gain).max(player.e.qt)
                player.e.inC = player.e.inC ? false : true
                if (player.e.inC) startIChallenge(11)
            },
            style: {'height':'160px', 'width':'215px', 'font-size':'13px', 'background-color': "#006633"
            }
        },
        12: {
            display() {
                let d = ["1%","10%","50%","100%"]
                let dis = d[player.e.m % 4]
                return dis
            },
            canClick() {return true},
            onClick() {
                player.e.m ++
            },
            style: {'height':'70px', 'min-height':'70px', 'width':'70px', 'font-size':'13px', 'background-color': "#0066cc"
            }
        },
        21: {
            title: "<h3>Adenine</h3><br><span style='color:#00A000;font-size:20px'>C5</span><span style='color:#A00000;font-size:20px'>H5</span><span style='color:#00A0A0;font-size:20px'>N5</span><br>",
            display() {
                let m = [0.01,0.1,0.5,1]
                let a = player.e.h.div(5).min(player.e.c.div(5)).min(player.e.n.div(5)).mul(m[player.e.m % 4]).floor()
                let dis = "<span style = 'font-size:13px'>Purchase Adenine (" + formatWhole(a) + ")</span>"
                return dis
            },
            canClick() {return player.e.h.gte(5) && player.e.c.gte(5) && player.e.n.gte(5)},
            onClick() {
                let m = [0.01,0.1,0.5,1]
                let a = player.e.h.div(5).min(player.e.c.div(5)).min(player.e.n.div(5)).mul(m[player.e.m % 4]).floor()
                player.e.h = player.e.h.sub(a.mul(5)).max(0)
                player.e.c = player.e.c.sub(a.mul(5)).max(0)
                player.e.n = player.e.n.sub(a.mul(5)).max(0)
                player.e.ad = player.e.ad.add(a)
            },
            style: {"width":"150px","height":"150px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.clickables[21].canClick) color = "#0066cc"
                return color
            }
        }
        },
        22: {
            title: "<h3>Uracil</h3><br><span style='color:#00A000;font-size:20px'>C4</span><span style='color:#A00000;font-size:20px'>H4</span><span style='color:#00A0A0;font-size:20px'>N2</span></span><span style='color:#0000A0;font-size:20px'>O2</span><br>",
            display() {
                let m = [0.01,0.1,0.5,1]
                let a = player.e.h.div(4).min(player.e.c.div(4)).min(player.e.n.div(2)).min(player.e.o.div(2)).mul(m[player.e.m % 4]).floor()
                let dis = "<span style = 'font-size:13px'>Purchase Uracil (" + formatWhole(a) + ")</span>"
                return dis
            },
            canClick() {return player.e.h.gte(4) && player.e.c.gte(4) && player.e.n.gte(2) && player.e.o.gte(2)},
            onClick() {
                let m = [0.01,0.1,0.5,1]
                let a = player.e.h.div(4).min(player.e.c.div(4)).min(player.e.n.div(2)).min(player.e.o.div(2)).mul(m[player.e.m % 4]).floor()
                player.e.h = player.e.h.sub(a.mul(4)).max(0)
                player.e.c = player.e.c.sub(a.mul(4)).max(0)
                player.e.n = player.e.n.sub(a.mul(2)).max(0)
                player.e.o = player.e.o.sub(a.mul(2)).max(0)
                player.e.ur = player.e.ur.add(a)
            },
            style: {"width":"150px","height":"150px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.clickables[22].canClick) color = "#0066cc"
                return color
            }
        }
        },
        23: {
            title: "<h3>Cytosine</h3><br><span style='color:#00A000;font-size:20px'>C4</span><span style='color:#A00000;font-size:20px'>H5</span><span style='color:#00A0A0;font-size:20px'>N3</span></span><span style='color:#0000A0;font-size:20px'>O</span><br>",
            display() {
                let m = [0.01,0.1,0.5,1]
                let a = player.e.h.div(5).min(player.e.c.div(4)).min(player.e.n.div(3)).min(player.e.o).mul(m[player.e.m % 4]).floor()
                let dis = "<span style = 'font-size:13px'>Purchase Cytosine (" + formatWhole(a) + ")</span>"
                return dis
            },
            canClick() {return player.e.h.gte(5) && player.e.c.gte(3) && player.e.n.gte(3) && player.e.o.gte(1)},
            onClick() {
                let m = [0.01,0.1,0.5,1]
                let a = player.e.h.div(5).min(player.e.c.div(4)).min(player.e.n.div(3)).min(player.e.o).mul(m[player.e.m % 4]).floor()
                player.e.h = player.e.h.sub(a.mul(5)).max(0)
                player.e.c = player.e.c.sub(a.mul(4)).max(0)
                player.e.n = player.e.n.sub(a.mul(3)).max(0)
                player.e.o = player.e.o.sub(a).max(0)
                player.e.cy = player.e.cy.add(a)
            },
            unlocked() {return hasUpgrade("e",244)},
            style: {"width":"150px","height":"150px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.clickables[23].canClick) color = "#0066cc"
                return color
            }
        }
        },
        24: {
            title: "<h3>Guanine</h3><br><span style='color:#00A000;font-size:20px'>C5</span><span style='color:#A00000;font-size:20px'>H5</span><span style='color:#00A0A0;font-size:20px'>N5</span></span><span style='color:#0000A0;font-size:20px'>O</span><br>",
            display() {
                let m = [0.01,0.1,0.5,1]
                let a = player.e.h.div(5).min(player.e.c.div(5)).min(player.e.n.div(5)).min(player.e.o).mul(m[player.e.m % 4]).floor()
                let dis = "<span style = 'font-size:13px'>Purchase Guanine (" + formatWhole(a) + ")</span>"
                return dis
            },
            canClick() {return player.e.h.gte(5) && player.e.c.gte(5) && player.e.n.gte(5) && player.e.o.gte(1)},
            onClick() {
                let m = [0.01,0.1,0.5,1]
                let a = player.e.h.div(5).min(player.e.c.div(5)).min(player.e.n.div(5)).min(player.e.o).mul(m[player.e.m % 4]).floor()
                player.e.h = player.e.h.sub(a.mul(5)).max(0)
                player.e.c = player.e.c.sub(a.mul(5)).max(0)
                player.e.n = player.e.n.sub(a.mul(5)).max(0)
                player.e.o = player.e.o.sub(a).max(0)
                player.e.gu = player.e.gu.add(a)
            },
            unlocked() {return hasUpgrade("e",244)},
            style: {"width":"150px","height":"150px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.clickables[24].canClick) color = "#0066cc"
                return color
            }
        }
        },
        25: {
            title: "<h3>Ribose-Phosphate</h3><br><span style='color:#00A000;font-size:20px'>C5</span><span style='color:#A00000;font-size:20px'>H11</span><span style='color:#0000A0;font-size:20px'>O8</span></span><span style='color:#BB5500;font-size:20px'>P</span><br>",
            display() {
                let m = [0.01,0.1,0.5,1]
                let a = player.e.h.div(11).min(player.e.c.div(5)).min(player.e.o.div(8)).min(player.e.ph).mul(m[player.e.m % 4]).floor()
                let dis = "<span style = 'font-size:13px'>Purchase Ribose-Phosphate (" + formatWhole(a) + ")</span>"
                return dis
            },
            canClick() {return player.e.h.gte(11) && player.e.c.gte(5) && player.e.o.gte(8) && player.e.ph.gte(1)},
            onClick() {
                let m = [0.01,0.1,0.5,1]
                let a = player.e.h.div(11).min(player.e.c.div(5)).min(player.e.o.div(8)).min(player.e.ph).mul(m[player.e.m % 4]).floor()
                player.e.h = player.e.h.sub(a.mul(11)).max(0)
                player.e.c = player.e.c.sub(a.mul(5)).max(0)
                player.e.o = player.e.o.sub(a.mul(8)).max(0)
                player.e.ph = player.e.ph.sub(a).max(0)
                player.e.rp = player.e.rp.add(a)
            },
            unlocked() {return hasUpgrade("e",256)},
            style: {"width":"150px","height":"150px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.clickables[25].canClick) color = "#0066cc"
                return color
            }
        }
        },
        31: {
            title: "Mutation",
            display() {
                let m = player.e.mu2
                let num = player.e.mu.div(10).sub(m.mul(m.add(1)).div(2).add(m.mul(4)))
                let mmna = hasMilestone("ct",12) && !inChallenge("ct",32)?"":formatWhole(tmp.e.clickables.getChargeComsumption)+" MMNA<br>"
                let dis = "Virus Number:"+format((num),1) +"<br>Cost:"+ formatWhole(tmp.e.clickables[31].cost)
                dis += " mRNA<br>"+mmna+"Chance: "+ format(tmp.e.clickables.chance.mul(100))+"%"
                return dis
            },
            cost() {
                let x = player.e.mu
                let m = player.e.mu2
                if (inChallenge("ct",32)) {
                    m = m.mul(3.55)
                    let sc = decimalOne
                    if (hasMilestone("Us",40)) {
                        sc = sc.div(1.1)
                        if (player.e.mrna.gte("e122e4")) sc = sc.div(1.1)
                        if (player.e.mrna.gte("e1405e3")) sc = sc.div(1.21)
                    }
                    if (hasMilestone("Us",42)) {
                        sc = sc.div(1.1)
                    }
                    if (hasMilestone("Us",44)) {
                        sc = sc.div(1.1)
                        if (player.e.mrna.gte("e7733e3")) sc = sc.div(1.1)
                        if (player.e.mrna.gte("e88e5")) sc = sc.div(1.1)
                        if (player.e.mrna.gte("e95e5")) sc = sc.div(1.1)
                    }
                    x = x.sub(180).mul(sc).add(180)
                    if (x.gte(180)) x = x.div(180).pow(1.2).mul(180).sub(180).mul(1.4).add(200)
                    if (x.gte(60)) x = x.div(60).pow(1.2).mul(60).sub(60).mul(1.4).add(60)
                }
                if (x.gte(1240)) x = x.div(1240).pow(m.div(20).add(0.75)).mul(1240)
                if (m.gte(9)) m = m.div(9).pow(1.5).mul(1.9)
                if (x.gte(810)) x = x.div(810).pow(1.5).mul(810)
                if (x.gte(560)) x = x.div(560).pow(1.5).mul(560)
                if (x.gte(450)) x = x.div(450).pow(2).mul(450)
                if (x.gte(350)) x = x.div(350).pow(2).mul(350)
                if (x.gte(115)) x = x.div(115).pow(3).mul(115)
                if (inChallenge("ct",32) && x.gte(3)) x = x.sub(3).mul(3).add(3)
                x = x.add(m.pow(2.75).mul(2)).div(tmp.e.buyables[103].effect)
                if (hasUpgrade("e",322)) x = x.mul(0.85)
                if (hasUpgrade("e",324)) x = x.div(tmp.e.upgrades[324].effect)
                if (hasUpgrade("e",333)) x = x.div(tmp.e.upgrades[333].effect.pow(0.07))
                if (hasUpgrade("e",373)) x = x.div(upgradeEffect("e",373).pow(2))
                if (hasUpgrade("e",383)) x = x.div(upgradeEffect("e",383).pow(1.65))
                if (hasUpgrade("e",386)) x = x.div(1.5)
                if (hasUpgrade("e",424)) x = x.pow(0.8)
                if (hasUpgrade("Us",82)) {
                    x = x.div(1.25)
                    if (player.e.mrna.gte("e1966")) x = x.div(1.25**0.5)
                }
                if (hasMilestone("Us",20)) x = x.div(1.1)
                let cost = Decimal.pow(1e55,Decimal.pow(inChallenge("ct",32)?1.7:1.23,x.mul(m.sub(8).max(1)))).mul(Decimal.pow(10,inChallenge("ct",32)?1046:1012)).mul(5)
                if (hasUpgrade("Us",81)) cost = cost.div(100)
                return cost
            },
            canClick() {
                let m = player.e.mu2
                let num = player.e.mu.div(10).sub(m.mul(m.add(1)).div(2).add(m.mul(4)))
                return player.e.mrna.gte(tmp.e.clickables[31].cost) && (player.e.mm.gte(tmp.e.clickables.getChargeComsumption) || (hasMilestone("ct",12) && !inChallenge("ct",32))) && num.lt(m.add(5))
            },
            onClick(force = false){
                let b = 0
                let remaining = layers.e.clickables.getAttemptAmount(force).mul(player.Us.mutPer).max(1)
                let data = player.e
                let id = 31
                        while (b < 1000 && !(hasMilestone("ct",12) && !inChallenge("ct",32))){
                                b ++ 
                                if (!this.canClick()) break 
                                let chance = layers.e.clickables.chance(data.clickableAmounts[id])
                                let cc = tmp.e.clickables.getChargeComsumption
                                let cost = this.cost()

                                let times = !hasMilestone("ct",7)||inChallenge("ct",32)?getTimesRequired(chance):decimalOne
                                // the random chance factor
                                let m = data.mm.div(cc)
                                let maxMMNA = m.mul(player.Us.mutPer).max(1).floor().min(m.floor())
                                // max num at current MMNA
                                let m2 = data.mrna.div(cost)
                                let maxMu = m2.mul(player.Us.mutPer).max(1).floor().min(m2.floor())
                                //max num at current mu

                                let target = Decimal.min(times, maxMMNA)
                                if (hasMilestone("ct",12) && !inChallenge("ct",32)) {
                                    target = times
                                }
                                target = target.min(maxMu).min(remaining)
                                //max num overall
                                
                                remaining = remaining.minus(target) //how many bulks left
                                if (!hasMilestone("ct",3) || inChallenge("ct",32)){
                                data.mrna = data.mrna.sub(cost.times(target)).max(0)
                                data.mm = data.mm.minus(cc.times(target)).max(0)
                                }
                                //remove MMNA

                                if (target != times) break
                                //didnt do it enough times
                                
                                //if did do enough, add one
                                data.clickableAmounts[id] = data.clickableAmounts[id].plus(1)
                                data.mu = data.mu.plus(1)
                        } 
            },
            unlocked() {return hasUpgrade("e",316)},
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.clickables[31].canClick) color = "#00AA55"
                return color
            }
        }
        },
        32: {
            title: "Corona Mutations",
            display() {
                let m = player.e.mu2
                let virus = player.e.virus[m.min(14)]
                if (m.gte(15)) virus+="<sup>"+formatWhole(m.sub(13))+"</sup>"
                if (m.gte(100)) virus="CORVID"+"<sup>"+formatWhole(m.sub(99))+"</sup>"
                if (m.gte(3e4)) virus="VOCID"+"<sup>"+formatWhole(m.sub(29999))+"</sup>"
                let mmna = hasMilestone("ct",12) && !inChallenge("ct",32)?"":formatWhole(tmp.e.clickables[32].MMcost)+" MMNA<br>"
                let sub = m.mul(m.add(1)).div(2).add(m.mul(4))
                let num = player.e.mu.div(10).sub(sub)
                let dis = "Virus Name:"+virus+"-" +format((num),1) +"<br>Cost:"+ formatWhole(tmp.e.clickables[32].cost)
                dis += " mRNA<br>"+formatWhole(m.add(5))+" Virus Number<br>"+mmna+"Chance: "+ format(tmp.e.clickables.chance2.mul(100))+"%"
                return dis
            },
            div() {
                let x = decimalOne
                if (hasUpgrade("e",393)) x = x.mul(1.2)
                if (hasUpgrade("e",404)) x = x.mul(1.1)
                if (hasUpgrade("e",405)) x = x.mul(1.05)
                if (hasUpgrade("e",406)) x = x.mul(1.05)
                if (hasUpgrade("e",422)) x = x.mul(1.05)
                if (hasMilestone("ct",5)) x = x.mul(1.1)
                if (hasMilestone("ct",7)) x = x.mul(1.1)
                if (hasUpgrade("e",401)) x = x.mul(upgradeEffect("e",401))
                if (hasUpgrade("Us",114)) x = x.mul(1.1)
                if (player.e.mu2.gte(9) && inChallenge("ct",32)) x = x.div(1.05)
                return x
            },
            Vdiv() {
                let x = decimalOne
                if (hasUpgrade("ct",95)) x = x.mul(3)
                if (hasUpgrade("ct",61)) x = x.mul(10)
                if (hasUpgrade("ct",64)) x = x.mul(10)
                return x
            },
            cost() {
                let x = player.e.mu2
                if (x.gte(3e4)) x = Decimal.pow(1.001,x.sub(3e4).div(tmp.e.clickables[32].Vdiv)).mul(3e4)
                if (x.gte(70)) x = x.div(70).pow(5).mul(70)
                x = x.div(tmp.e.clickables[32].div)
                let cost = Decimal.pow(1e100,Decimal.pow(inChallenge("ct",32)?37.83:15.95,x).mul(100)).mul(Decimal.pow(10,inChallenge("ct",32)?1730:-394))
                return cost
            },
            MMcost () {
                let m = player.e.mu2
                let s = 1
                if (hasMilestone("Us",55)) s /= 1.5
                m = m.sub(9).mul(s).add(9)
                if (m.gte(9)) m = m.div(9).pow(m.div(5).add(0.2)).mul(9)
                if (m.gte(7)) m = m.div(7).pow(1.6).mul(7)
                if (inChallenge("ct",32)) {
                    m = m.mul(1.79)
                    if (player.e.mu2.gte(3)) m = m.mul(1.515)
                    if (player.e.mu2.gte(4)) m = m.mul(1.145)
                    if (player.e.mu2.gte(6)) m = m.mul(1.2)
                    if (player.e.mu2.gte(7)) m = m.mul(1.3)
                    if (player.e.mu2.gte(9)) m = m.mul(1.5)
                }
                let div = decimalOne
                if (hasUpgrade("e",393)) div = div.mul(1.2)
                if (hasUpgrade("e",404)) div = div.mul(1.1)
                if (hasUpgrade("e",422)) div = div.mul(1.2)
                if (hasUpgrade("e",401)) div = div.mul(upgradeEffect("e",401))
                if (hasMilestone("Us",36)) div = div.mul(1.15)
                if (hasUpgrade("e",423)) m = m.root(upgradeEffect("e",423))
                if (hasUpgrade("e",425)) m = m.root(1.02)
                if (hasMilestone("ct",5)) m = m.root(1.1)
                if (hasMilestone("ct",6)) m = m.root(1.1)
                if (hasMilestone("ct",7)) m = m.root(1.1)
                let cost = Decimal.pow(inChallenge("ct",32)?1.15e15:1e6,m.div(div).pow(2.2).add(1))
                return cost.mul(tmp.e.clickables.getChargeComsumption.root(div))
            },
            canClick() {
                let m = player.e.mu2
                let mlim = 14
                if (inChallenge("ct",32)) {

                }
                else {
                if (hasMilestone("ct",5)) mlim +=10
                if (hasMilestone("ct",8)) mlim +=10
                if (hasMilestone("ct",9)) mlim +=10
                if (hasMilestone("ct",10)) mlim +=20
                if (hasMilestone("ct",12)) mlim +=136
                if (hasUpgrade("ct",53)) mlim +=300
                if (hasUpgrade("ct",54)) mlim = Decimal.tetrate(10,1.79e308)
                }
                let sub = m.mul(m.add(1)).div(2).add(m.mul(4))
                let num = player.e.mu.div(10).sub(sub)
                let mm = hasMilestone("ct",12) && !inChallenge("ct",32)
                return player.e.mrna.gte(tmp.e.clickables[32].cost) && (player.e.mm.gte(tmp.e.clickables[32].MMcost) || (mm)) && (num.gte(m.add(5)) || mm) && m.lt(mlim)
            },
            onClick(force = false){
                let b = 0
                let remaining = layers.e.clickables.getAttemptAmount(force).mul(player.Us.mutPer).max(1)
                let data = player.e
                let id = 32
                if (hasMilestone("ct",12) && !inChallenge("ct",32)) {
                    if (this.canClick()) {
                    let x = data.mrna.mul(Decimal.pow(10,inChallenge("ct",32)?-1730:394)).log10().div(1e4).log(inChallenge("ct",32)?37.83:15.95).mul(tmp.e.clickables[32].div)
                    if (x.gte(70)) x = x.div(70).pow(0.2).mul(70)
                    if (x.gte(3e4)) x = x.div(3e4).log(1.001).mul(tmp.e.clickables[32].Vdiv).add(3e4)
                    x = x.floor().add(1)
                    data.mu2 = x.max(data.mu2)
                    let m = data.mu2.add(1)
                    data.mu = m.mul(m.add(1)).div(2).add(m.mul(4)).mul(10).max(data.mu)
                    }
                }
                else {
                        while (b < 1000){
                                b ++ 
                                if (!this.canClick()) break 
                                let chance = layers.e.clickables.chance2(data.clickableAmounts[id])
                                let cc = tmp.e.clickables[32].MMcost
                                let cost = this.cost()

                                let times = !hasMilestone("ct",7)||inChallenge("ct",32)?getTimesRequired(chance):decimalOne
                                // the random chance factor
                                let m = data.mm.div(cc)
                                let maxMMNA = m.mul(player.Us.mutPer).max(1).floor().min(m.floor())
                                // max num at current MMNA
                                let m2 = data.mrna.div(cost)
                                let maxMu = m2.mul(player.Us.mutPer).max(1).floor().min(m2.floor())
                                //max num at current mu

                                let target = Decimal.min(times, maxMMNA)
                                if (hasMilestone("ct",12) && !inChallenge("ct",32)) {
                                    target = times
                                }
                                target = target.min(maxMu).min(remaining)
                                //max num overall
                                
                                remaining = remaining.minus(target) //how many bulks left
                                if (!hasMilestone("ct",3) || inChallenge("ct",32)){
                                    data.mrna = data.mrna.sub(cost.times(target)).max(0)
                                    data.mm = data.mm.minus(cc.times(target)).max(0)
                                }
                                //remove MMNA

                                if (target != times) break
                                //didnt do it enough times
                                
                                //if did do enough, add one
                                data.clickableAmounts[id] = data.clickableAmounts[id].plus(1)
                                data.mu2 = data.mu2.plus(1)
                                if (hasMilestone("ct",12) && !inChallenge("ct",32)) data.mu = data.mu.add(data.mu2.plus(5).mul(10))
                        } 
                    }
            },
            unlocked() {return hasUpgrade("e",336)},
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.clickables[32].canClick) color = "#00AA55"
                return color
            }
        }
        },
    },
    buyables: {
        respec() {
            player.e.upgg = player.e.upgg.filter(number => number<50 || number>80)
            player.e.upgrades = player.e.upgg
            player.e.spent = decimalZero
            player.e.p = decimalTen
            player.e.path = hasUpgrade("e",145) ? 3 : hasUpgrade("e",131) ? 2 : 1
            startCChallenge(0)
            doReset(this.layer, true)
            
		},
        showRespec() { return player.subtabs.e.mainTabs=="Infections"},
        respecText:() => "Respec Infections",
		rows: 10,
        cols: 5,
        11: {
			title: "Power Gain",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(5, x.pow(1.4)).mul(4e14)
                return cost.floor()
            },
            base() { 
                let base = decimalFour
                if (hasUpgrade("e",51)) base = base.add(1).max(1)
                if (hasUpgrade("e",62)) base = base.add(upgradeEffect("e",62))
                if (hasUpgrade("e",65)) base = base.add(upgradeEffect("e",65))
                if (hasUpgrade("e",72)) base = base.add(upgradeEffect("e",72))
                base = base.add(tmp.e.buyables[21].effect)
                if (hasUpgrade("e",75)) base = base.mul(upgradeEffect("e",75))
                return base
            },
            extra() {
                let x = tmp.e.buyables[12].total.add(tmp.e.buyables[13].total)
                return x
            },
            total() {
                let total = getBuyableAmount("e", 11).add(tmp[this.layer].buyables[this.id].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "Buyables") return
                let extra = ""
                let dis = "Multiply infection power gain by "+format(this.base())
                if (player.e.buyables[11].gte(tmp.e.buyCap)) dis += " (MAXED)"
                if (player.e.buyables[12].gte(1)) extra = "+"+formatWhole(tmp[this.layer].buyables[this.id].extra)
                return dis + ".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" infection power\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("e", 11)) + extra
            },
            unlocked() { return hasMilestone("e", 0) }, 
            canAfford() {
                    return player.e.p.gte(tmp[this.layer].buyables[this.id].cost) && player.e.buyables[11].lt(tmp.e.buyCap)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",3)) player.e.p = player.e.p.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.p
                let target = Decimal.log10(s.div(4e14)).div(Decimal.log10(5)).root(1.4)
                target = target.ceil().min(tmp.e.buyCap)
                let cost = Decimal.pow(5, target.sub(1).pow(1.4)).mul(4e14)
                let diff = target.sub(player.e.buyables[11])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",3))player.e.p = player.e.p.sub(cost).max(0)
                    player.e.buyables[11] = player.e.buyables[11].add(diff)
                }
            },
            style: {"width":"150px","height":"150px"}
        },
        12: {
			title: "Infecter Base",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(100, x.pow(1.4)).mul(1e16)
                return cost.floor()
            },
            base() { 
                let base = new Decimal(1.4)
                if (hasUpgrade("e",63)) base = base.add(0.05)
                if (hasUpgrade("e",114)) base = base.add(0.05)
                base = base.add(tmp.e.buyables[22].effect)
                return base
            },
            extra() {
                let x = tmp.e.buyables[13].total
                return x
            },
            total() {
                let total = getBuyableAmount("e", 12).add(tmp[this.layer].buyables[this.id].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "Buyables") return
                let extra = ""
                let dis = "Multiply infecter base by "+format(this.base())
                if (player.e.buyables[12].gte(tmp.e.buyCap)) dis += " (MAXED)"
                if (player.e.buyables[13].gte(1)) extra = "+"+formatWhole(tmp[this.layer].buyables[this.id].extra)
                return dis + ".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" infection power\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("e", 12)) + extra
            },
            unlocked() { return hasMilestone("e", 0) }, 
            canAfford() {
                    return player.e.p.gte(tmp[this.layer].buyables[this.id].cost) && player.e.buyables[12].lt(tmp.e.buyCap)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",3))player.e.p = player.e.p.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.p
                let target = Decimal.log10(s.div(1e16)).div(Decimal.log10(100)).root(1.4)
                target = target.ceil().min(tmp.e.buyCap)
                let cost = Decimal.pow(100, target.sub(1).pow(1.4)).mul(1e16)
                let diff = target.sub(player.e.buyables[12])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",3))player.e.p = player.e.p.sub(cost).max(0)
                    player.e.buyables[12] = player.e.buyables[12].add(diff)
                }
            },
            style: {"width":"150px","height":"150px"}
        },
        13: {
			title: "Immunity Divider",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1e5, x.pow(1.49)).mul(1e24)
                return cost.floor()
            },
            base() { 
                let base = new Decimal(1.05)
                if (hasUpgrade("e",53)) base = base.add(0.01)
                if (hasUpgrade("e",136)) base = base.add(upgradeEffect("e",136))
                base = base.add(tmp.e.buyables[23].effect)
                return base
            },
            total() {
                let total = getBuyableAmount("e", 13)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                if (x.gte(10)) x = x.div(10).pow(0.5).mul(10)
                if (x.gte(900)) x = Decimal.pow(10,x.div(900).log10().add(1).max(1).pow(0.3)).mul(90)
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "Buyables") return
                let extra = ""
                let disp = "Divide immunity by "+format(this.base())
                if (player.e.buyables[13].gte(tmp.e.buyCap)) disp += " (MAXED)"
                let dis = format(tmp[this.layer].buyables[this.id].effect)
                if (this.total().gte(10)) dis += " (softcapped)"
                return disp +".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" infection power\n\
                Effect: /" + dis +"\n\
                Amount: " + formatWhole(getBuyableAmount("e", 13)) + extra
            },
            unlocked() { return hasMilestone("e", 0) }, 
            canAfford() {
                    return player.e.p.gte(tmp[this.layer].buyables[this.id].cost) && player.e.buyables[13].lt(tmp.e.buyCap)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",3))player.e.p = player.e.p.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.p
                let target = Decimal.log10(s.div(1e24)).div(Decimal.log10(1e5)).root(1.49)
                target = target.ceil().min(tmp.e.buyCap)
                let cost = Decimal.pow(1e5, target.sub(1).pow(1.49)).mul(1e24)
                let diff = target.sub(player.e.buyables[13])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",3))player.e.p = player.e.p.sub(cost).max(0)
                    player.e.buyables[13] = player.e.buyables[13].add(diff)
                }
            },
            style: {"width":"150px","height":"150px"}
        },
        21: {
			title: "Power Base",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1e50, x.pow(1.45)).mul("3e48054")
                return cost.floor()
            },
            base() { 
                let base = decimalFive
                if (hasUpgrade("e",41)) base = base.add(upgradeEffect("e",41))
                if (hasUpgrade("e",226)) base = base.mul(upgradeEffect("e",226))
                if (hasUpgrade("e",231)) base = base.mul(upgradeEffect("e",231))
                return base
            },
            extra() {
                let x = tmp.e.buyables[22].total.add(tmp.e.buyables[23].total)
                return x
            },
            total() {
                let total = getBuyableAmount("e", 21).add(tmp[this.layer].buyables[this.id].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "Buyables") return
                let extra = ""
                let disp = "Increase 'Power Gain' base by "+format(this.base())
                if (player.e.buyables[21].gte(tmp.e.buyCap)) disp += " (MAXED)"
                if (player.e.buyables[22].gte(1)) extra = "+"+formatWhole(tmp[this.layer].buyables[this.id].extra)
                let dis = format(tmp[this.layer].buyables[this.id].effect)
                return disp +".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" infection power\n\
                Effect: +" + dis +"\n\
                Amount: " + formatWhole(getBuyableAmount("e", 21)) + extra
            },
            unlocked() { return hasUpgrade("e", 146) }, 
            canAfford() {
                    return player.e.p.gte(tmp[this.layer].buyables[this.id].cost) && player.e.buyables[21].lt(tmp.e.buyCap)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",3))player.e.p = player.e.p.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.p
                let target = Decimal.log10(s.div("3e48054")).div(Decimal.log10(1e50)).root(1.45)
                target = target.ceil().min(tmp.e.buyCap)
                let cost = Decimal.pow(1e50, target.sub(1).pow(1.45)).mul("3e48054")
                let diff = target.sub(player.e.buyables[21])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",3))player.e.p = player.e.p.sub(cost).max(0)
                    player.e.buyables[21] = player.e.buyables[21].add(diff)
                }
            },
            style: {"width":"150px","height":"150px"}
        },
        22: {
			title: "Infecter Base^2",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1e120, x.pow(1.45)).mul("e55618")
                return cost.floor()
            },
            base() { 
                let base = new Decimal(0.002)
                if (hasUpgrade("e",226)) base = base.mul(upgradeEffect("e",226))
                if (hasUpgrade("e",231)) base = base.mul(upgradeEffect("e",231))
                return base
            },
            extra() {
                let x = tmp.e.buyables[23].total
                return x
            },
            total() {
                let total = getBuyableAmount("e", 22).add(tmp[this.layer].buyables[this.id].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "Buyables") return
                let extra = ""
                let disp = "Increase 'Infecter Base' base by "+format(this.base())
                if (player.e.buyables[22].gte(tmp.e.buyCap)) disp += " (MAXED)"
                if (player.e.buyables[23].gte(1)) extra = "+"+formatWhole(tmp[this.layer].buyables[this.id].extra)
                let dis = format(tmp[this.layer].buyables[this.id].effect)
                return disp+".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" infection power\n\
                Effect: +" + dis +"\n\
                Amount: " + formatWhole(getBuyableAmount("e", 22)) + extra
            },
            unlocked() { return hasUpgrade("e", 146) }, 
            canAfford() {
                    return player.e.p.gte(tmp[this.layer].buyables[this.id].cost) && player.e.buyables[22].lt(tmp.e.buyCap)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",3))player.e.p = player.e.p.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.p
                let target = Decimal.log10(s.div("e55618")).div(Decimal.log10(1e120)).root(1.45)
                target = target.ceil().min(tmp.e.buyCap)
                let cost = Decimal.pow(1e120, target.sub(1).pow(1.45)).mul("e55618")
                let diff = target.sub(player.e.buyables[22])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",3))player.e.p = player.e.p.sub(cost).max(0)
                    player.e.buyables[22] = player.e.buyables[22].add(diff)
                }
            },
            style: {"width":"150px","height":"150px"}
        },
        23: {
			title: "Immunity Base",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1e250, x.pow(1.53)).mul("1.337e74304")
                return cost.floor()
            },
            base() { 
                let base = new Decimal(0.0005)
                if (hasUpgrade("e",226)) base = base.mul(upgradeEffect("e",226))
                if (hasUpgrade("e",231)) base = base.mul(upgradeEffect("e",231))
                return base
            },
            total() {
                let total = getBuyableAmount("e", 23)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "Buyables") return
                let extra = ""
                let disp = "Increase 'Immunity Divider' base by "+format(this.base())
                if (player.e.buyables[23].gte(tmp.e.buyCap)) disp += " (MAXED)"
                let dis = format(tmp[this.layer].buyables[this.id].effect)
                return disp+".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" infection power\n\
                Effect: +" + dis +"\n\
                Amount: " + formatWhole(getBuyableAmount("e", 23)) + extra
            },
            unlocked() { return hasUpgrade("e", 146) }, 
            canAfford() {
                    return player.e.p.gte(tmp[this.layer].buyables[this.id].cost) && player.e.buyables[23].lt(tmp.e.buyCap)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",3)) player.e.p = player.e.p.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.p
                let target = Decimal.log10(s.div("1.337e74304")).div(Decimal.log10("1e250")).root(1.53)
                target = target.ceil().min(tmp.e.buyCap)
                let cost = Decimal.pow(1e250, target.sub(1).pow(1.53)).mul("1.337e74304")
                let diff = target.sub(player.e.buyables[23])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",3)) player.e.p = player.e.p.sub(cost).max(0)
                    player.e.buyables[23] = player.e.buyables[23].add(diff)
                }
            },
            style: {"width":"150px","height":"150px"}
        },
        31: {
			title: "Max Buyable",
            cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (inChallenge("ct",32) && x.gte(1e15)) x = x.log10().div(15).pow(1.75).mul(15).pow10()
                if (x.gte(3e3)) x = x.div(3e3).pow(3).mul(3e3)
                x = x.div(tmp.e.buyables[31].div)
                if (x.gte(6)) x = x.div(6).pow(4).mul(6)
                let b = Decimal.sub(3.1,hasUpgrade("e",246)*0.5+hasUpgrade("e",255)+hasUpgrade("e",296)*0.35)
                let cost = Decimal.pow(10,Decimal.pow(b,x).mul(1e9)).mul(Decimal.pow(10,10786e7))
                return cost.floor()
            },// logb(log10(c/e)/1e9) = x
            base() { 
                let base = player.e.qc.add(10).max(10).log10().pow(0.09).div(3).max(1)
                if (base.gte(1.35)) base = base.div(1.35).pow(0.2).mul(1.35)
                base = base.add(tmp.e.Neffect)
                if (inChallenge("ct",32)) {
                    base = player.e.qc.add(10).max(10).log10().div(87.5).max(1).pow(3)
                    if (base.gte(2.5)) base = base.div(2.5).log10().pow(1.1).add(2.5).div(2.5).pow(0.6).mul(2.5)
                    base = base.add(tmp.e.Neffect)
                }
                return base
            },
            div() {
                let div = decimalOne
                if (hasUpgrade("e",345)) div = div.mul(upgradeEffect("e",345))
                if (hasUpgrade("e",373)) div = div.mul(upgradeEffect("e",373))
                return div
            },
            total() {
                let total = getBuyableAmount("e", 31).add(tmp.e.buyables[31].extra)
                return total
            },
            extra() {
                let e = decimalZero
                if (hasUpgrade("Uu",51)) e = e.add(player.Uu.upgrades.filter(x=>x>50&&x<60).length)
                if (hasUpgrade("Us",42)) e = e.add(5)
                if (hasMilestone("Us",12)) e = e.add(tmp.Us.milestones[4].effect[1])
                return e
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x.pow(tmp.e.buyables[31].exp));
            },
            exp () {
                let exp = new Decimal(1.5)
                if (hasUpgrade("e",346)) exp = exp.add(tmp.e.mueff.e5)
                if (inChallenge("ct",32)) {
                    exp = exp.pow(0.35).div(1.7)
                    if (hasUpgrade("Uu",51)) exp = exp.add(0.05)
                    if (hasUpgrade("Uu",52)) exp = exp.add(0.05)
                    if (hasUpgrade("Uu",55)) exp = exp.mul(1.1)
                    if (hasUpgrade("Us",34)) exp = exp.mul(1.1)
                    if (hasUpgrade("Us",42)) exp = exp.mul(1.05)
                    if (exp.gte(1.155)) exp = exp.sub(1.155).div(5).add(1.155)
                    if (exp.gte(2.7)) exp = exp.sub(2.7).div(3).add(2.7)
                    if (exp.gte(8)) exp = exp.div(8).pow(0.45).mul(3).add(5)
                }
                return exp
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "Buyables") return
                let ex = tmp[this.layer].buyables[this.id].extra
                let extra = ex.gt(0)?"+"+formatWhole(ex):""
                let disp = "Multiply max buyable level by "+format(this.base())+"^x^"+format(tmp.e.buyables[31].exp)+" (based on UC)"
                if (player.e.buyables[31].gte(tmp.e.buyCap)) disp += " (MAXED)"
                let dis = format(tmp[this.layer].buyables[this.id].effect)
                return disp+".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" infection power\n\
                Effect: " + dis +"x\n\
                Amount: " + formatWhole(getBuyableAmount("e", 31)) + extra
            },
            unlocked() { return hasUpgrade("e", 194) }, 
            canAfford() {
                    return player.e.p.gte(tmp[this.layer].buyables[this.id].cost) && player.e.buyables[31].lt(tmp.e.buyCap)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",3)) player.e.p = player.e.p.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() { // logb(log10(c/e)/1e9) = x
                let s = player.e.p
                let b = Decimal.sub(3.1,hasUpgrade("e",246)*0.5+hasUpgrade("e",255)+hasUpgrade("e",296)*0.35)
                let target = s.div(Decimal.pow(10,10786e7)).log10().div(1e9).log(b)
                if (target.gte(6)) target = target.div(6).pow(0.25).mul(6)
                target = target.mul(tmp.e.buyables[31].div)
                if (target.gte(3e3)) target = target.div(3e3).pow(1/3).mul(3e3)
                if (inChallenge("ct",32) && target.gte(1e15)) target = target.log10().div(15).root(1.75).mul(15).pow10()
                target = target.ceil().min(tmp.e.buyCap)
                let cost = Decimal.pow(1e250, target.sub(1).pow(1.53)).mul(Decimal.pow(10,10786e7))
                let diff = target.sub(player.e.buyables[31])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",3)) player.e.p = player.e.p.sub(cost).max(0)
                    player.e.buyables[31] = player.e.buyables[31].add(diff)
                }
            },
            style: {"width":"150px","height":"150px"}
        },
        41: {
			title: "Disease Gain",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let scale = tmp.e.buyables[41].scale
                x = x.mul(scale)
                if (x.gte(600)) x = x.div(600).pow(5).mul(600)
                if (x.gte(30)) x = x.div(30).pow(2).mul(30)
                let cost = Decimal.pow(2, Decimal.pow(1.5, x)).mul(5)
                return cost.floor()
            },
            scale() {
                let s = new Decimal(1)
                if (hasUpgrade("Us",45)) s = s.div(15)
                return s
            },
            base() { 
                let base = new Decimal(1.25)
                if (hasUpgrade("e",115)) base = base.add(0.025)
                if (hasUpgrade("e",134)) base = base.add(upgradeEffect("e",134))
                if (hasUpgrade("e",166)) base = base.add(upgradeEffect("e",166))
                base = base.mul(tmp.e.buyables[42].effect).pow(tmp.e.buyables[42].effect)
                if (hasMilestone("Uu",15)) base = base.pow(1.05)
                return base
            },
            total() {
                let total = getBuyableAmount("e", 41).add(tmp[this.layer].buyables[this.id].extra)
                return total
            },
            extra() {
                let e = decimalZero
                if (hasMilestone("Uu",10)) e = e.add(5)
                if (hasMilestone("Uu",11)) e = e.add(tmp.Uu.milestones[11].effect)
                if (hasUpgrade("Uu",34)) e = e.add(2)
                if (hasUpgrade("Uu",35)) e = e.add(2)
                if (hasUpgrade("Uu",41)) e = e.add(player.Uu.upgrades.filter(x=>x>40&&x<50).length)
                return e
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = base.pow(x)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "Diseases") return
                let ex = tmp[this.layer].buyables[this.id].extra
                let extra = ex.gt(0)?"+"+formatWhole(ex):""
                let dis = format(tmp[this.layer].buyables[this.id].effect)
                return "Multiply and raise base disease gain by "+format(this.base())+".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" infectious diseases\n\
                Effect: " + dis + "x, ^" + dis+"\n\
                Amount: " + formatWhole(getBuyableAmount("e", 41)) + extra
            },
            unlocked() { return hasMilestone("e", 2) }, 
            canAfford() {
                    return player.e.diseases.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",7)) player.e.diseases = player.e.diseases.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.diseases//log1.5(log2(c/5))=x
                let scale = tmp.e.buyables[41].scale
                let target = s.div(5).log(2).log(1.5)
                if (target.gte(30)) target = target.div(30).pow(0.5).mul(30)
                if (target.gte(600)) target = target.div(600).pow(0.2).mul(600)
                target = target.div(scale).ceil()
                let cost = Decimal.pow(2, Decimal.pow(scale, target.sub(1))).mul(5)
                let diff = target.sub(player.e.buyables[41])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",7)) player.e.diseases = player.e.diseases.sub(cost).max(0)
                    player.e.buyables[41] = player.e.buyables[41].add(diff)
                }
            },
            style: {"width":"150px","height":"150px"}
        },
        42: {
			title: "Disease Boost",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(1.5e4)) x = x.div(1.5e4).pow(4).mul(1.5e4)
                let cost = Decimal.pow(2, Decimal.pow(2, Decimal.pow(tmp.e.buyables[42].scale, x.add(12)))).mul(Decimal.pow(10,36974))
                return cost.floor()
            },
            scale() {
                let s = new Decimal(1.2)
                if (hasUpgrade("e",185)) s = s.root(upgradeEffect("e",185))
                if (hasUpgrade("Uu",92)) s = s.root(1.1)
                return s
            },
            base() { 
                let base = new Decimal(1.002)
                if (hasUpgrade("e",45)) base = base.add(0.005)
                if (hasUpgrade("e",105)) base = base.add(0.003)
                if (hasUpgrade("e",236)) base = base.add(0.002)
                if (hasUpgrade("e",293)) base = base.add(0.003)
                if (hasUpgrade("e",314)) base = base.add(0.005)
                if (hasUpgrade("e",382)) base = base.add(0.005)
                if (inChallenge("ct",32)) {
                    base = base.pow(0.075)
                    if (hasUpgrade("Uu",75)) base = base.add(0.0005)
                    if (hasUpgrade("Uu",81)) base = base.add(0.00075)
                    if (hasMilestone("Uu",23)) base = base.add(0.0025)
                    if (hasUpgrade("Uu",82)) base = base.add(0.0025)
                    if (hasUpgrade("Uu",83)) base = base.add(0.0025)
                    if (hasUpgrade("Uu",84)) base = base.add(0.0025)
                    if (hasUpgrade("Uu",85)) base = base.add(0.0025)
                    if (hasUpgrade("Uu",52)) base = base.add(0.0025)
                    if (hasUpgrade("Uu",53)) base = base.add(0.0025)
                    if (hasMilestone("Us",14)) base = base.add(tmp.Us.milestones[14].effect)
                    if (hasMilestone("Us",9)) base = base.pow(1.1)
                    if (hasUpgrade("Us",45) && player.Us.severity.gte("e14940")) base = base.pow(1.1)
                }
                return base
            },
            total() {
                let total = getBuyableAmount("e", 42).add(tmp[this.layer].buyables[this.id].extra)
                return total
            },
            extra() {
                let e = decimalZero
                if (hasUpgrade("Uu",75)) e = e.add(10)
                if (hasMilestone("Uu",23)) e = e.add(10)
                if (hasMilestone("Us",4)) e = e.add(tmp.Us.milestones[4].effect[1])
                if (hasUpgrade("Uu",51)) e = e.add(player.Uu.upgrades.filter(x=>x>50&&x<60).length)
                return e
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = base.pow(x)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "Diseases") return
                let ex = tmp[this.layer].buyables[this.id].extra
                let extra = ex.gt(0)?"+"+formatWhole(ex):""
                let dis = format(tmp[this.layer].buyables[this.id].effect)
                return "Multiply and raise 'Disease Gain' base by "+format(this.base(),4)+".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" infectious diseases\n\
                Effect: " + dis + "x, ^" + dis+"\n\
                Amount: " + formatWhole(getBuyableAmount("e", 42)) + extra
            },
            unlocked() { return hasUpgrade("e",152) }, 
            canAfford() {
                    return player.e.diseases.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",7)) player.e.diseases = player.e.diseases.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.diseases
                let target = s.div(Decimal.pow(10,36974)).log(2).log(2).log(tmp.e.buyables[42].scale).sub(12)
                if (target.gte(1.5e4)) target = target.div(1.5e4).pow(0.25).mul(1.5e4)
                target = target.ceil()
                let cost = Decimal.pow(2, Decimal.pow(1.5, target.sub(1))).mul(5)
                let diff = target.sub(player.e.buyables[42])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",7)) player.e.diseases = player.e.diseases.sub(cost).max(0)
                    player.e.buyables[42] = player.e.buyables[42].add(diff)
                }
            },
            style: {"width":"150px","height":"150px"}
        },
        51: {
			title: "UC Gain",
            cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(600)) x = x.div(600).pow(1.5).mul(600)
                let cost = Decimal.pow(15, x).mul(300)
                return cost.floor()
            },
            base() { 
                let base = new Decimal(2.5)
                if (hasUpgrade("e",161)) base = base.add(upgradeEffect("e",161))
                if (hasUpgrade("e",182)) base = base.add(upgradeEffect("e",182))
                if (hasUpgrade("e",192)) base = base.add(upgradeEffect("e",192))
                return base
            },
            total() {
                let total = getBuyableAmount("e", 51)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = base.pow(x)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "Quarantine") return
                let extra = ""
                let dis = format(tmp[this.layer].buyables[this.id].effect)
                return "Multiply UC gain by "+format(this.base())+".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" Unquarantined Cases\n\
                Multiplier: " + dis + "x"+"\n\
                Amount: " + formatWhole(getBuyableAmount("e", 51)) + extra
            },
            unlocked() { return hasUpgrade("e",46) }, 
            canAfford() {
                    return player.e.qc.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("e",96)) player.e.qc = player.e.qc.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.qc
                let target = Decimal.log10(s.div(300)).div(Decimal.log10(15))
                if (target.gte(600)) target = target.div(600).root(1.5).mul(600)
                target = target.ceil()
                let cost = Decimal.pow(15, target.sub(1)).mul(300)
                let diff = target.sub(player.e.buyables[51])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("e",96)) player.e.p = player.e.p.sub(cost).max(0)
                    player.e.buyables[51] = player.e.buyables[51].add(diff)
                }
            },
            style: {"width":"170px","height":"170px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[51].canAfford) color = "#006633"
                return color
            }
        }
        },
        52: {
			title: "UI Gain",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player[this.layer].buyables[this.id]
                if (x.gte(15)) x = x.div(15).pow(1.5).mul(15)
                if (x.gte(12e4)) x = x.div(12e4).pow(2).mul(12e4)
                let cost = Decimal.pow(50, x).mul(5e4)
                return cost.floor()
            },
            base() { 
                let base = decimalFour
                if (hasUpgrade("e",165)) base = base.add(upgradeEffect("e",165))
                return base
            },
            total() {
                let total = getBuyableAmount("e", 52)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = base.pow(x)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "Quarantine") return
                let extra = ""
                let dis = format(tmp[this.layer].buyables[this.id].effect)
                return "Multiply UI gain by "+format(this.base())+".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" Unquarantined Cases\n\
                Multiplier: " + dis + "x"+"\n\
                Amount: " + formatWhole(getBuyableAmount("e", 52)) + extra
            },
            unlocked() { return hasUpgrade("e",46) }, 
            canAfford() {
                    return player.e.qc.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("e",96)) player.e.qc = player.e.qc.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.qc
                let target = Decimal.log10(s.div(5e4)).div(Decimal.log10(50))
                if (target.gte(15)) target = target.div(15).root(1.5).mul(15)
                if (target.gte(6e3)) target = target.div(6e3).root(2).mul(6e3)
                target = target.ceil()
                let cost = Decimal.pow(50, target.sub(1)).mul(5e4)
                let diff = target.sub(player.e.buyables[52])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("e",96)) player.e.p = player.e.p.sub(cost).max(0)
                    player.e.buyables[52] = player.e.buyables[52].add(diff)
                }
            },
            style: {"width":"170px","height":"170px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[52].canAfford) color = "#006633"
                return color
            }
        }
        },
        53: {
			title: "UC Boost",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player[this.layer].buyables[this.id]
                if (x.gte(5)) x = x.div(5).pow(1.7).mul(5)
                let cost = Decimal.pow(1e4, x.pow(1.5)).mul(5e5)
                return cost.floor()
            },
            base() { 
                let base = new Decimal(0.2)
                if (hasUpgrade("e",176)) base = base.add(tmp.e.upgrades[176].effect2)
                return base
            },
            extra() {
                return player.e.buyables[63]
            },
            total() {
                let total = getBuyableAmount("e", 53).add(tmp.e.buyables[53].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = base.mul(x)
                if (eff.gte(4e3)) eff = eff.div(4e3).pow(0.5).mul(4e3)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "Quarantine") return
                let extra = ""
                if (player.e.buyables[63].gte(1)) extra = "+" + formatWhole(tmp.e.buyables[53].extra)
                let dis = format(tmp[this.layer].buyables[this.id].effect)
                return "Increase UI to UC exponent by "+format(this.base())+".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" Unquarantined Cases\n\
                Effect: +" + dis +"\n\
                Amount: " + formatWhole(getBuyableAmount("e", 53)) + extra
            },
            unlocked() { return hasUpgrade("e",46) }, 
            canAfford() {
                    return player.e.qc.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("e",96)) player.e.qc = player.e.qc.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.qc
                let target = Decimal.log10(s.div(5e5)).div(Decimal.log10(1e4)).root(1.5)
                if (target.gte(5)) target = target.div(5).root(1.7).mul(5)
                target = target.ceil()
                let cost = Decimal.pow(1e4, target.sub(1).pow(1.5)).mul(5e5)
                let diff = target.sub(player.e.buyables[53])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("e",96)) player.e.p = player.e.p.sub(cost).max(0)
                    player.e.buyables[53] = player.e.buyables[53].add(diff)
                }
            },
            style: {"width":"170px","height":"170px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[53].canAfford) color = "#006633"
                return color
            }
        }
        },
        61: {
			title: "UI Boost",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player[this.layer].buyables[this.id]
                if (x.gte(666)) x = x.div(666).pow(2).mul(666)
                let cost = Decimal.pow(1e15, x.pow(2)).mul("e720")
                return cost.floor()
            },
            base() { 
                let base = decimalHalf
                return base
            },
            extra() {
                return player.e.buyables[63]
            },
            total() {
                let total = getBuyableAmount("e", 61).add(tmp.e.buyables[61].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = base.mul(x)
                if (eff.gte(500)) eff = eff.div(500).pow(0.25).mul(500)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "Quarantine") return
                let extra = ""
                if (player.e.buyables[63].gte(1)) extra = "+" + formatWhole(tmp.e.buyables[61].extra)
                let dis = format(tmp[this.layer].buyables[this.id].effect)
                return "Increase UI gain exponent by "+format(this.base())+".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" Unquarantined Cases\n\
                Effect: +" + dis +"\n\
                Amount: " + formatWhole(getBuyableAmount("e", 61)) + extra
            },
            unlocked() { return hasUpgrade("e",106) }, 
            canAfford() {
                    return player.e.qc.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("e",96)) player.e.qc = player.e.qc.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.qc
                let target = Decimal.log10(s.div("e720")).div(Decimal.log10(1e15)).root(2)
                if (target.gte(666)) target = target.div(666).pow(0.5).mul(666)
                target = target.ceil()
                let cost = Decimal.pow(1e15, target.sub(1).pow(2)).mul("e720")
                let diff = target.sub(player.e.buyables[61])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("e",96)) player.e.p = player.e.p.sub(cost).max(0)
                    player.e.buyables[61] = player.e.buyables[61].add(diff)
                }
            },
            style: {"width":"170px","height":"170px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[61].canAfford) color = "#006633"
                return color
            }
        }
        },
        62: {
			title: "Quarantine Boost",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player[this.layer].buyables[this.id]
                if (x.gte(1200)) x = x.div(1200).pow(3).mul(1200)
                let cost = Decimal.pow(1e20, x.pow(2.2)).mul("e842")
                return cost.floor()
            },
            base() { 
                let base = new Decimal(1.04)
                if (hasUpgrade("e",193)) base = base.add(upgradeEffect("e",193))
                return base
            },
            extra() {
                return player.e.buyables[63]
            },
            total() {
                let total = getBuyableAmount("e", 62).add(tmp.e.buyables[62].extra)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = base.pow(x.pow(0.5))
                if (eff.gte(1e3)) eff = eff.log10().mul(1e3/3)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "Quarantine") return
                let extra = ""
                if (player.e.buyables[63].gte(1)) extra = "+" + formatWhole(tmp.e.buyables[62].extra)
                let dis = format(tmp[this.layer].buyables[this.id].effect)
                return "Multiply Quarantine exponent by "+format(tmp.e.buyables[62].base)+"^sqrt(x).\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" Unquarantined Cases\n\
                Effect: " + dis +"x\n\
                Amount: " + formatWhole(getBuyableAmount("e", 62)) + extra
            },
            unlocked() { return hasUpgrade("e",106) }, 
            canAfford() {
                    return player.e.qc.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp.e.buyables[62].canAfford) {
                    if (!hasUpgrade("e",96)) player.e.qc = player.e.qc.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.qc
                let target = Decimal.log10(s.div("e842")).div(Decimal.log10(1e20)).root(2.2)
                if (target.gte(1200)) target = target.div(1200).pow(1/3).mul(1200)
                target = target.ceil()
                let cost = Decimal.pow(1e20, target.sub(1).pow(2.2)).mul("e842")
                let diff = target.sub(player.e.buyables[62])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("e",96)) player.e.p = player.e.p.sub(cost).max(0)
                    player.e.buyables[62] = player.e.buyables[62].add(diff)
                }
            },
            style: {"width":"170px","height":"170px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[62].canAfford) color = "#006633"
                return color
            }
        }
        },
        63: {
			title: "Cases Base",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player[this.layer].buyables[this.id]
                let cost = Decimal.pow(Decimal.pow(10,1e3), Decimal.pow(tmp.e.buyables[63].scale,x)).mul("3.172e2172")
                return cost.floor()
            },
            scale() {
                let s = new Decimal(1.5)
                if (hasUpgrade("e",184)) s = s.root(upgradeEffect("e",184))
                if (hasUpgrade("e",216)) s = s.root(tmp.e.upgrades[216].effect2)
                return s
            },
            base() { 
                let base = new Decimal(1.75)
                if (hasUpgrade("e",176)) base = base.add(tmp.e.upgrades[176].effect)
                if (hasUpgrade("e",192)) base = base.add(upgradeEffect("e",192))
                if (hasUpgrade("e",216)) base = base.mul(tmp.e.upgrades[216].effect)
                return base
            },
            total() {
                let total = getBuyableAmount("e", 63)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = base.pow(x)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "Quarantine") return
                let extra = ""
                let dis = format(tmp[this.layer].buyables[this.id].effect)
                return "Multiply 'Cases Boost' base by "+format(this.base())+", and get 1 free UC Boost, UI Boost, and Quarantine Boost.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" Unquarantined Cases\n\
                Effect: " + dis +"x\n\
                Amount: " + formatWhole(getBuyableAmount("e", 63)) + extra
            },
            unlocked() { return hasUpgrade("e",106) }, 
            canAfford() {
                    return player.e.qc.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("e",96)) player.e.qc = player.e.qc.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.qc
                let target = Decimal.log10(s.div("3.172e2172")).div(1000).log(tmp.e.buyables[63].scale)
                target = target.ceil()
                let cost = Decimal.pow(Decimal.pow(10,1e3), Decimal.pow(tmp.e.buyables[63].scale,target.sub(1))).mul("3.172e2172")
                let diff = target.sub(player.e.buyables[63])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("e",96)) player.e.p = player.e.p.sub(cost).max(0)
                    player.e.buyables[63] = player.e.buyables[63].add(diff)
                }
            },
            style: {"width":"170px","height":"170px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[63].canAfford) color = "#006633"
                return color
            }
        }
        },
        71: {
			title: "RNA Gain",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(4, x.pow(1.5)).mul(5e20)
                return cost.floor()
            },
            base() { 
                let base = Decimal.add(3,tmp.e.buyables[72].effect)
                return base
            },
            total() {
                let total = getBuyableAmount("e", 71)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "RNA" || player.subtabs.e.stuff != "Upgrades") return
                let extra = ""
                let dis = "Multiply RNA gain by "+format(this.base())
                return dis + ".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" RNA\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("e", 71)) + extra
            },
            unlocked() { return hasUpgrade("e", 216) }, 
            canAfford() {
                    return player.e.rna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",6)) player.e.rna = player.e.rna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.rna
                let target = Decimal.log10(s.div(5e20)).div(Decimal.log10(4)).root(1.5)
                target = target.ceil()
                let cost = Decimal.pow(4, target.sub(1).pow(1.5)).mul(5e20)
                let diff = target.sub(player.e.buyables[71])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",6)) player.e.rna = player.e.rna.sub(cost).max(0)
                    player.e.buyables[71] = player.e.buyables[71].add(diff)
                }
            },
            style: {"width":"170px","height":"170px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[71].canAfford) color = "#0066cc"
                return color
            }
        }
        },
        72: {
			title: "RNA Boost",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (inChallenge("ct",32)) {
                    if (x.gte(2e3)) x = x.div(2e3).pow(1.15).mul(4e3).sub(2e3)
                }
                let cost = Decimal.pow(50, x.pow(1.5)).mul(1e45)
                return cost.floor()
            },
            base() { 
                let base = new Decimal(0.25)
                if (hasUpgrade("Uu",94)) base = base.add(0.25)
                if (hasUpgrade("Uu",95) && player.e.rna.gte(5e73)) base = base.add(0.1)
                if (hasUpgrade("Us",11)) base = base.add(0.05)
                return base.add(tmp.e.Ureffect)
            },
            total() {
                let total = getBuyableAmount("e", 72)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.mul(base, x)
                if (eff.gte(3e6)) eff = eff.div(30).log10().mul(2).pow(6).mul(3)
                if (eff.gte(5e14) && inChallenge("ct",32)) eff = eff.div(5e14).pow(0.3).mul(5e14)
                if (eff.gte(2.5e15) && inChallenge("ct",32)) eff = eff.div(2.5e15).pow(0.2).mul(2.5e15)
                if (eff.gte(1e30)) eff = eff.div(1e30).pow(0.3).mul(1e30)
                if (eff.gte(1e170)) eff = eff.log10().div(170).pow(0.5).mul(170).pow10()
                if (eff.gte(1e200)) eff = eff.log10().log10().div(Decimal.log10(200)).pow(0.2).mul(Decimal.log10(200)).pow10().pow10()
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "RNA" || player.subtabs.e.stuff != "Upgrades") return
                let extra = ""
                let dis = "Increase 'RNA Gain' base and RNA gain exponent by "+format(this.base())
                let eff = format(tmp[this.layer].buyables[this.id].effect)
                if (tmp.e.buyables[72].effect.gte(3e6)) eff = eff += " (softcapped)"
                return dis + ".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" RNA\n\
                Effect: +" + eff +"\n\
                Amount: " + formatWhole(getBuyableAmount("e", 72)) + extra
            },
            unlocked() { return hasUpgrade("e", 224) }, 
            canAfford() {
                    return player.e.rna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",6)) player.e.rna = player.e.rna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.rna
                let target = Decimal.log10(s.div(1e45)).div(Decimal.log10(50)).root(1.5)
                if (inChallenge("ct",32)) {
                    if (target.gte(2e3)) target = target.add(2e3).div(4e3).root(1.15).mul(2e3)
                }
                target = target.ceil()
                let cost = Decimal.pow(50, target.sub(1).pow(1.5)).mul(1e45)
                let diff = target.sub(player.e.buyables[72])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",6)) player.e.rna = player.e.rna.sub(cost).max(0)
                    player.e.buyables[72] = player.e.buyables[72].add(diff)
                }
            },
            style: {"width":"170px","height":"170px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[72].canAfford) color = "#0066cc"
                return color
            }
        }
        },
        81: {
			title: "Hydrogen RNA",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(100, x.pow(1.2)).mul(1e68)
                return cost.floor()
            },
            base() { 
                let base = tmp.e.Again
                return base
            },
            total() {
                let total = getBuyableAmount("e", 81)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total.pow(tmp.e.aExp.add(tmp.Us.buyables[12].effect))
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "RNA" || player.subtabs.e.stuff != "Atoms") return
                let extra = ""
                let dis = "Gain "+format(this.base())
                return dis + " H/s.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" RNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+" H/s\n\
                Amount: " + formatWhole(getBuyableAmount("e", 81)) + extra
            },
            unlocked() { return hasUpgrade("e", 226) }, 
            canAfford() {
                    return player.e.rna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",6)) player.e.rna = player.e.rna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.rna
                let target = Decimal.log10(s.div(1e68)).div(Decimal.log10(100)).root(1.2)
                target = target.ceil()
                let cost = Decimal.pow(100, target.sub(1).pow(1.2)).mul(1e68)
                let diff = target.sub(player.e.buyables[81])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",6)) player.e.rna = player.e.rna.sub(cost).max(0)
                    player.e.buyables[81] = player.e.buyables[81].add(diff)
                }
            },
            style: {"width":"170px","height":"170px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[81].canAfford) color = "#A00000"
                return color
            }
        }
        },
        82: {
			title: "Carbon RNA",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1000, x.pow(1.2)).mul(1e90)
                return cost.floor()
            },
            base() { 
                let base = tmp.e.Again
                return base
            },
            total() {
                let total = getBuyableAmount("e", 82)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total.pow(tmp.e.aExp.add(tmp.Us.buyables[13].effect))
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "RNA" || player.subtabs.e.stuff != "Atoms") return
                let extra = ""
                let dis = "Gain "+format(this.base())
                return dis + " C/s.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" RNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+" C/s\n\
                Amount: " + formatWhole(getBuyableAmount("e", 82)) + extra
            },
            unlocked() { return hasUpgrade("e", 226) }, 
            canAfford() {
                    return player.e.rna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",6)) player.e.rna = player.e.rna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.rna
                let target = Decimal.log10(s.div(1e90)).div(Decimal.log10(1000)).root(1.2)
                target = target.ceil()
                let cost = Decimal.pow(1000, target.sub(1).pow(1.2)).mul(1e90)
                let diff = target.sub(player.e.buyables[82])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",6)) player.e.rna = player.e.rna.sub(cost).max(0)
                    player.e.buyables[82] = player.e.buyables[82].add(diff)
                }
            },
            style: {"width":"170px","height":"170px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[82].canAfford) color = "#00A000"
                return color
            }
        }
        },
        83: {
			title: "Nitrogen RNA",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1e4, x.pow(1.2)).mul(1e133)
                return cost.floor()
            },
            base() { 
                let base = tmp.e.Again
                return base
            },
            total() {
                let total = getBuyableAmount("e", 83)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total.pow(tmp.e.aExp.add(tmp.Us.buyables[21].effect))
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "RNA" || player.subtabs.e.stuff != "Atoms") return
                let extra = ""
                let dis = "Gain "+format(this.base())
                return dis + " N/s.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" RNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+" N/s\n\
                Amount: " + formatWhole(getBuyableAmount("e", 83)) + extra
            },
            unlocked() { return hasUpgrade("e", 226) }, 
            canAfford() {
                    return player.e.rna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",6)) player.e.rna = player.e.rna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.rna
                let target = Decimal.log10(s.div(1e133)).div(Decimal.log10(1e4)).root(1.2)
                target = target.ceil()
                let cost = Decimal.pow(1e4, target.sub(1).pow(1.2)).mul(1e133)
                let diff = target.sub(player.e.buyables[83])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",6)) player.e.rna = player.e.rna.sub(cost).max(0)
                    player.e.buyables[83] = player.e.buyables[83].add(diff)
                }
            },
            style: {"width":"170px","height":"170px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[83].canAfford) color = "#00A0A0"
                return color
            }
        }
        },
        91: {
			title: "Oxygen RNA",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1e5, x.pow(1.2)).mul(1e171)
                return cost.floor()
            },
            base() { 
                let base = tmp.e.Again
                return base
            },
            total() {
                let total = getBuyableAmount("e", 91)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total.pow(tmp.e.aExp.add(tmp.Us.buyables[22].effect))
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "RNA" || player.subtabs.e.stuff != "Atoms") return
                let extra = ""
                let dis = "Gain "+format(this.base())
                return dis + " O/s.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" RNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+" O/s\n\
                Amount: " + formatWhole(getBuyableAmount("e", 91)) + extra
            },
            unlocked() { return hasUpgrade("e", 226) }, 
            canAfford() {
                    return player.e.rna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",6)) player.e.rna = player.e.rna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.rna
                let target = Decimal.log10(s.div(1e171)).div(Decimal.log10(1e5)).root(1.2)
                target = target.ceil()
                let cost = Decimal.pow(1e5, target.sub(1).pow(1.2)).mul(1e171)
                let diff = target.sub(player.e.buyables[91])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",6)) player.e.rna = player.e.rna.sub(cost).max(0)
                    player.e.buyables[91] = player.e.buyables[91].add(diff)
                }
            },
            style: {"width":"170px","height":"170px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[91].canAfford) color = "#0000A0"
                return color
            }
        }
        },
        92: {
			title: "Phosphorus RNA",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1e10, x.pow(1.25)).mul("e2270")
                return cost.floor()
            },
            base() { 
                let base = tmp.e.Again.div(1e21)
                return base
            },
            total() {
                let total = getBuyableAmount("e", 92)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total.pow(tmp.e.aExp.add(tmp.Us.buyables[23].effect))
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "RNA" || player.subtabs.e.stuff != "Atoms") return
                let extra = ""
                let dis = "Gain "+format(this.base())
                return dis + " P/s.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" RNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+" P/s\n\
                Amount: " + formatWhole(getBuyableAmount("e", 92)) + extra
            },
            unlocked() { return hasUpgrade("e", 253) }, 
            canAfford() {
                    return player.e.rna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",6)) player.e.rna = player.e.rna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.rna
                let target = Decimal.log10(s.div("e2270")).div(10).root(1.25)
                target = target.ceil()
                let cost = Decimal.pow(1e10, target.sub(1).pow(1.25)).mul("e2270")
                let diff = target.sub(player.e.buyables[92])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",6)) player.e.rna = player.e.rna.sub(cost).max(0)
                    player.e.buyables[92] = player.e.buyables[92].add(diff)
                }
            },
            style: {"width":"170px","height":"170px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[92].canAfford) color = "#BB5500"
                return color
            }
        }
        },
        93: {
			title: "mRNA Gain",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(5, x.pow(1.5)).mul(5e9)
                return cost.floor()
            },
            base() { 
                let base = player.e.infections.max(10).log10().max(10).log10()
                .pow(0.1)
                return base.add(tmp.e.buyables[101].effect)
            },
            total() {
                let total = getBuyableAmount("e", 93).add(tmp.e.buyables[94].total).add(tmp.e.freeMBuy).add(tmp.e.mueff.e3)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let exp = player.e.upgrades.filter(number => number>270).length
                if (hasUpgrade("e",314)) exp = Decimal.pow(exp,upgradeEffect("e",314))
                if (hasUpgrade("e",391)) exp = Decimal.pow(exp,1.1)
                if (hasUpgrade("e",405)) exp = Decimal.pow(exp,1.25)
                let sc = new Decimal(500)
                let ss = new Decimal(0.4)
                if (hasUpgrade("e",391)) ss = ss.root(upgradeEffect("e",391))
                if (hasUpgrade("e",392)) ss = ss.root(upgradeEffect("e",392))
                if (hasUpgrade("e",415)) ss = ss.root(upgradeEffect("e",415))
                if (hasUpgrade("ct",24)) ss = ss.root(1.1)
                if (hasUpgrade("ct",26)) ss = ss.root(1.2)
                if (hasUpgrade("e",343)) sc = sc.add(50)
                if (hasUpgrade("e",384)) sc = sc.add(upgradeEffect("e",384))
                if (x.gte(sc)) x = x.div(sc).pow(ss).mul(sc)
                return Decimal.pow(base, x).pow(exp);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "RNA" || player.subtabs.e.stuff != "mRNA" || player.subtabs.e.mRNAupg != "Buyables") return
                let extra = "+" + formatWhole(tmp.e.buyables[94].total.add(tmp.e.freeMBuy).add(tmp.e.mueff.e3))
                let sc = new Decimal(500)
                if (hasUpgrade("e",343)) sc = sc.add(50)
                if (hasUpgrade("e",384)) sc = sc.add(upgradeEffect("e",384))
                let eff = format(tmp[this.layer].buyables[this.id].effect)+"x"
                if (tmp.e.buyables[93].total.gte(sc)) eff+=" (softcapped)"
                if (player.e.buyables[94].lt(1)) extra = ""
                let dis = "Multiply mRNA gain by "+format(this.base())
                return dis + " per mRNA upgrade (based on II).\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" mRNA\n\
                Effect: " + eff+"\n\
                Amount: " + formatWhole(getBuyableAmount("e", 93)) + extra
            },
            unlocked() { return hasUpgrade("e", 286) }, 
            canAfford() {
                    return player.e.mrna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",8)) player.e.mrna = player.e.mrna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.mrna
                let target = Decimal.log10(s.div(5e9)).div(Decimal.log10(5)).root(1.5)
                target = target.ceil()
                let cost = Decimal.pow(5, target.sub(1).pow(1.5)).mul(5e9)
                let diff = target.sub(player.e.buyables[93])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",8)) player.e.rna = player.e.rna.sub(cost).max(0)
                    player.e.buyables[93] = player.e.buyables[93].add(diff)
                }
            },
            style: {"width":"170px","height":"170px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[93].canAfford) color = "#00AA55"
                return color
            }
        }
        },
        94: {
			title: "Immunity Boost",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1000, x.pow(1.5)).mul(25e23)
                return cost.floor()
            },
            base() { 
                let base = player.e.mrna.max(10).log10().max(10).log10().pow(0.2)
                return base.add(tmp.e.buyables[101].effect)
            },
            total() {
                let total = getBuyableAmount("e", 94).add(tmp.e.buyables[95].total).add(tmp.e.freeMBuy)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                sc = decimalOne
                let ss = new Decimal(0.7)
                if (hasUpgrade("e",391)) ss = ss.root(upgradeEffect("e",391))
                if (hasUpgrade("e",392)) ss = ss.root(upgradeEffect("e",392))
                if (hasUpgrade("e",415)) ss = ss.root(upgradeEffect("e",415))
                if (hasUpgrade("e",396)) ss = ss.root(1.1)
                if (hasUpgrade("ct",24)) ss = ss.root(1.1)
                if (hasUpgrade("ct",26)) ss = ss.root(1.2)
                if (hasUpgrade("e",375)) sc = sc.mul(1.05)
                if (x.gte(500)) x = x.div(500).pow(sc.mul(ss)).mul(500)
                if (x.gte(200)) x = x.div(200).pow(sc.mul(ss)).mul(200)
                if (x.gte(60)) x = x.div(60).pow(sc.mul(ss.div(7/3))).mul(60)
                let eff = Decimal.pow(base, x)
                if (eff.gte(15)) eff = eff.div(15).pow(0.2).mul(15)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "RNA" || player.subtabs.e.stuff != "mRNA" || player.subtabs.e.mRNAupg != "Buyables") return
                let extra = "+" + formatWhole(tmp.e.buyables[95].total.add(tmp.e.freeMBuy))
                if (player.e.buyables[95].lt(1)) extra = ""
                let dis = "Multiply immunity exponent by "+format(this.base())
                let efs = format(tmp[this.layer].buyables[this.id].effect)+"x"
                if (tmp.e.buyables[94].effect.gte(15)) efs += " (softcapped)"
                return dis + " (based on mRNA).\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" mRNA\n\
                Effect: " + efs +"\n\
                Amount: " + formatWhole(getBuyableAmount("e", 94)) + extra
            },
            unlocked() { return hasUpgrade("e", 293) }, 
            canAfford() {
                    return player.e.mrna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",8)) player.e.mrna = player.e.mrna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.mrna
                let target = Decimal.log10(s.div(25e23)).div(3).root(1.5)
                target = target.ceil()
                let cost = Decimal.pow(1e3, target.sub(1).pow(1.5)).mul(25e23)
                let diff = target.sub(player.e.buyables[94])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",8)) player.e.rna = player.e.rna.sub(cost).max(0)
                    player.e.buyables[94] = player.e.buyables[94].add(diff)
                }
            },
            style: {"width":"170px","height":"170px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[94].canAfford) color = "#00AA55"
                return color
            }
        }
        },
        95: {
			title: "RNA Booster",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1e7, x.pow(1.6)).mul(3e157)
                return cost.floor()
            },
            base() { 
                let base = player.points.add(10).max(10).log10().add(10).max(10).log10()
                .add(10).max(10).log10().add(10).max(10).log10().pow(0.15)
                return base.add(tmp.e.buyables[101].effect)
            },
            total() {
                let total = getBuyableAmount("e", 95).add(tmp.e.freeMBuy)
                return total
            },
            sc() {
                let sc = new Decimal(8)
                if (hasUpgrade("e",336)) sc = sc.add(2)
                if (hasUpgrade("e",372)) sc = sc.add(upgradeEffect("e",372))
                if (hasUpgrade("e",386)) sc = sc.add(5)
                return sc
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let sc = tmp.e.buyables[95].sc
                let ss = new Decimal(0.3)
                if (hasUpgrade("e",391)) ss = ss.root(upgradeEffect("e",391))
                if (hasUpgrade("e",392)) ss = ss.root(upgradeEffect("e",392))
                if (hasUpgrade("e",415)) ss = ss.root(upgradeEffect("e",415))
                if (hasUpgrade("ct",24)) ss = ss.root(1.1)
                if (hasUpgrade("ct",26)) ss = ss.root(1.2)
                if (x.gte(sc)) x = x.div(sc).pow(ss).mul(sc)
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "RNA" || player.subtabs.e.stuff != "mRNA" || player.subtabs.e.mRNAupg != "Buyables") return
                let extra = "+" + formatWhole(tmp.e.freeMBuy)
                if (player.e.buyables[101].lt(1)) extra = ""
                let dis = "Raise RNA eff to "+format(this.base())
                let efs = format(tmp[this.layer].buyables[this.id].effect)
                if (tmp.e.buyables[95].total.gte(tmp.e.buyables[95].sc)) efs += " (softcapped)"
                return dis + " (based on cases).\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" mRNA\n\
                Effect: ^" + efs +"\n\
                Amount: " + formatWhole(getBuyableAmount("e", 95)) + extra
            },
            unlocked() { return hasUpgrade("e", 305) }, 
            canAfford() {
                    return player.e.mrna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",8)) player.e.mrna = player.e.mrna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.mrna
                let target = Decimal.log10(s.div(3e157)).div(7).root(1.6)
                target = target.ceil()
                let cost = Decimal.pow(1e7, target.sub(1).pow(1.5)).mul(3e157)
                let diff = target.sub(player.e.buyables[95])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",8)) player.e.rna = player.e.rna.sub(cost).max(0)
                    player.e.buyables[95] = player.e.buyables[95].add(diff)
                }
            },
            style: {"width":"170px","height":"170px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[95].canAfford) color = "#00AA55"
                return color
            }
        }
        },
        101: {
			title: "mRNA Booster",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x=player[this.layer].buyables[this.id].div(tmp.e.buyables[101].scaleDiv)
                if (x.gte(80)) x = x.div(80).pow(2.5).mul(80)
                let cost = Decimal.pow(1e50, x.pow(2)).mul(Decimal.pow(10,330))
                return cost.floor()
            },
            scaleDiv() {
                let div = decimalOne
                if (hasUpgrade("ct",22)) div = div.mul(upgradeEffect("ct",22))
                if (hasUpgrade("Us",53)) div = div.mul(tmp.Us.upgrades[53].effect)
                if (hasUpgrade("Us",112)) div = div.mul(tmp.Us.upgrades[112].effect)
                if (hasMilestone("Us",18)) div = div.mul(2)
                if (hasMilestone("Us",46)) {
                    if (player.e.mm.gte("e314")) div = div.mul(2)
                    if (player.e.mm.gte("3.48e348")) div = div.mul(1.5)
                }
                return div
            },
            base() { 
                let base = player.e.rna.add(10).max(10).log10().add(10).max(10).log10().pow(0.05).div(100)
                if (hasUpgrade("e",344)) base = base.add(upgradeEffect("e",344))
                if (hasUpgrade("e",394)) base = base.add(upgradeEffect("e",394))
                if (hasUpgrade("e",403)) base = base.add(upgradeEffect("e",403))
                if (hasUpgrade("e",404)) base = base.add(upgradeEffect("e",404))
                if (hasUpgrade("e",423)) base = base.mul(1.2)
                return base
            },
            base2() { 
                let base = decimalOne
                if (hasUpgrade("e",395)) base = base.add(upgradeEffect("e",395))
                if (hasUpgrade("e",405)) base = base.add(upgradeEffect("e",405))
                if (hasUpgrade("e",423)) base = base.pow(1.3)
                return base
            },
            total() {
                let total = getBuyableAmount("e", 101).add(tmp.e.mueff2.e2)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.mul(base, x)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "RNA" || player.subtabs.e.stuff != "mRNA" || player.subtabs.e.mRNAupg != "Buyables") return
                let extra = "+" + formatWhole(tmp.e.mueff2.e2)
                if (player.e.mu2.lt(1)) extra = ""
                let dis = "Increases previous buyable bases by "+format(this.base())
                let dis2 = format(tmp.e.buyables[101].base2) + " free levels."
                if (tmp.e.buyables[101].base2) + " free levels."
                return dis + " (based on RNA) and gives "+dis2+"\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" mRNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("e", 101)) + extra
            },
            unlocked() { return hasUpgrade("e", 313) }, 
            canAfford() {
                    return player.e.mrna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",8)) player.e.mrna = player.e.mrna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.mrna
                let target = Decimal.log10(s.div(Decimal.pow(10,330))).div(50).root(2)
                if (target.gte(80)) target = target.div(80).pow(0.4).mul(80)
                target = target.mul(tmp.e.buyables[101].scaleDiv).ceil()
                let cost = Decimal.pow(1e50, target.sub(1).pow(2)).mul(Decimal.pow(10,330))
                let diff = target.sub(player.e.buyables[101])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",8)) player.e.rna = player.e.rna.sub(cost).max(0)
                    player.e.buyables[101] = player.e.buyables[101].add(diff)
                }
            },
            style: {"width":"170px","height":"170px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[101].canAfford) color = "#00AA55"
                return color
            }
        }
        },
        102: {
			title: "MMNA Virus",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(3e4)) x = x.div(3e4).pow(3).mul(3e4)
                let cost = Decimal.pow(1e5, x.div(tmp.e.buyables[102].scaleDiv).pow(2)).mul(Decimal.pow(10,inChallenge("ct",32)?1076:1063))
                return cost.floor()
            },
            base() { 
                let base = tmp.e.mmgain
                return base
            },
            total() {
                let total = getBuyableAmount("e", 102)
                return total
            },
            scaleDiv() {
                let div = decimalOne
                if (hasUpgrade("e",333)) div = div.mul(upgradeEffect("e",333))
                if (hasUpgrade("e",361)) div = div.mul(upgradeEffect("e",361))
                if (hasUpgrade("e",382)) div = div.mul(upgradeEffect("e",382))
                if (player.e.mu2.gte(5)) div = div.mul(tmp.e.mueff2.e4)
                if (inChallenge("ct",32)) div = div.div(2)
                if (hasMilestone("Us",30)) div = div.mul(1.5)
                if (hasUpgrade("Us",115)) div = div.mul(tmp.Us.upgrades[115].effect)
                if (hasMilestone("Us",44) && player.e.mrna.gte("e4873e3")) div = div.mul(1.5)
                return div
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.mul(base, x)
                if (inChallenge("ct",32)) {
                    if (hasMilestone("Us",30)) x = x.pow(1.2)
                    if (hasMilestone("Us",33)) {
                        x = x.pow(1.2)
                        if (player.e.mu.gte(160)) x = x.pow(1.1)
                    }
                    if (hasMilestone("Us",43)) x = x.pow(1.2)
                    eff = Decimal.mul(base, x)
                }
                else {
                if (hasUpgrade("e",334)) x = x.pow(1.25)
                if (hasUpgrade("e",384)) x = x.pow(1.25)
                if (hasUpgrade("e",396)) x = x.pow(tmp.e.mueff.e6)
                eff = Decimal.mul(base, x)
                if (hasUpgrade("e",342)) eff = eff.pow(1.2)
                if (hasUpgrade("e",401)) eff = eff.pow(1.15)
                if (hasUpgrade("e",353)) eff = eff.pow(1.1)
                if (hasUpgrade("e",392)) eff = eff.pow(1.1)
                if (hasUpgrade("e",385)) eff = eff.pow(1.05)
                }
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                let mu = player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.stuff == "MMNA"
                mu = mu || (player.tab == "Us" && player.subtabs.Us.mainTabs == "Mutations")
                if (!mu) return
                let extra = ""
                let dis = "Gain "+format(this.base())
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp.e.buyables[105].effect
                let eff2 = Decimal.pow(base,x)
                let disp = dis + " MMNA/s."
                let disp2 = ", "+format(eff2)+"x"
                if (player.e.buyables[105].gte(1)) disp += " and multiply mRNA gain by "+format(base)
                if (player.e.buyables[105].lt(1)) disp2 = ""
                return disp+"\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" mRNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+disp2+"\n\
                Amount: " + formatWhole(getBuyableAmount("e", 102)) + extra
            },
            unlocked() { return hasUpgrade("e", 316) }, 
            canAfford() {
                    return player.e.mrna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",9)) player.e.mrna = player.e.mrna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.mrna
                let target = Decimal.log10(s.div(Decimal.pow(10,inChallenge("ct",32)?1076:1063))).div(5).root(2).mul(tmp.e.buyables[102].scaleDiv)
                if (target.gte(3e4)) target = target.div(3e4).pow(1/3).mul(3e4)
                target = target.ceil()
                let cost = Decimal.pow(1e5, target.sub(1).pow(2)).mul(Decimal.pow(10,inChallenge("ct",32)?1076:1063))
                let diff = target.sub(player.e.buyables[102])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",9)) player.e.mrna = player.e.mrna.sub(cost).max(0)
                    player.e.buyables[102] = player.e.buyables[102].add(diff)
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[102].canAfford) color = "#00AA55"
                return color
            }
        }
        },
        103: {
			title: "Mutation Scaling",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(250)) x = x.div(250).pow(2).mul(250)
                if (x.gte(28)) x = x.div(28).pow(3).mul(28)
                x =  x.div(tmp.e.buyables[103].scaleDiv)
                let cost = Decimal.pow(1e100, x.pow(2)).mul(Decimal.pow(10,inChallenge("ct",32)?3980:3721))
                return cost.floor()
            },
            scaleDiv() {
                let div = decimalOne
                if (hasUpgrade("e",376)) div = div.mul(upgradeEffect("e",376))
                if (hasUpgrade("e",382)) div = div.mul(upgradeEffect("e",382))
                if (player.e.mu2.gte(5)) div = div.mul(tmp.e.mueff2.e4)
                if (hasMilestone("Us",31)) {
                    div = div.mul(1.5)
                    if (player.e.mrna.gte("e93960")) div = div.mul(1.5**0.5)
                    if (player.e.mrna.gte("e95781")) div = div.mul(1.5**0.5)
                }
                if (hasMilestone("Us",32)) {
                    if (player.e.mrna.gte("e123123")) div = div.mul(1.2)
                }
                if (hasMilestone("Us",39)) {
                    div = div.mul(1.5)
                    if (player.e.mrna.gte("e953500")) div = div.mul(1.5)
                    if (player.e.mrna.gte("e978800")) div = div.mul(1.5)
                }
                if (hasMilestone("Us",53) && player.e.mm.gte("e2216")) {
                    div = div.mul(1.35)
                }
                if (hasUpgrade("Us",123)) div = div.mul(tmp.Us.upgrades[123].effect)
                return div
            },
            base() { 
                let base = new Decimal(1.05)
                if (hasUpgrade("e",346)) base = base.add(upgradeEffect("e",346))
                if (hasUpgrade("e",365)) base = base.add(upgradeEffect("e",365))
                if (hasUpgrade("e",381)) base = base.add(upgradeEffect("e",381))
                if (hasUpgrade("e",393)) base = base.add(upgradeEffect("e",393).div(10))
                if (inChallenge("ct",32)) base = base.pow(0.5)
                if (hasMilestone("Us",29)) {
                    base = base.add(0.01)
                    if (player.e.mrna.gte("e56911")) base = base.add(0.01)
                    if (player.e.mrna.gte("e59242")) base = base.add(0.01)
                }
                if (hasMilestone("Us",30)) {
                    base = base.add(0.031)
                }
                if (hasMilestone("Us",52)) base = base.mul(1.01)
                if (hasMilestone("Us",53)) base = base.mul(1.05)
                return base
            },
            total() {
                let total = getBuyableAmount("e", 103)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x.pow(2/3))
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                let mu = player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.stuff == "MMNA"
                mu = mu || (player.tab == "Us" && player.subtabs.Us.mainTabs == "Mutations")
                if (!mu) return
                let extra = ""
                let dis = "Reduce scaling by "+format(this.base())
                return dis + "^x<sup>2/3</sup>.\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" mRNA\n\
                Effect: /" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("e", 103)) + extra
            },
            unlocked() { return hasUpgrade("e", 326) }, 
            canAfford() {
                    return player.e.mrna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",10)) player.e.mrna = player.e.mrna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.mrna
                let target = Decimal.log10(s.div(Decimal.pow(10,inChallenge("ct",32)?3980:3721))).div(100).root(2).mul(tmp.e.buyables[103].scaleDiv)
                if (target.gte(28)) target = target.div(28).pow(1/3).mul(28)
                if (target.gte(250)) target = target.div(250).pow(1/2).mul(250)
                target = target.ceil()
                let cost = Decimal.pow(1e100, target.sub(1).pow(2)).mul(Decimal.pow(10,inChallenge("ct",32)?3980:3721))
                let diff = target.sub(player.e.buyables[103])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",10)) player.e.mrna = player.e.mrna.sub(cost).max(0)
                    player.e.buyables[103] = player.e.buyables[103].add(diff)
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[103].canAfford) color = "#00AA55"
                return color
            }
        }
        },
        104: {
			title: "MMNA Boost",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(165)) x = x.div(165).pow(3).mul(165)
                x = x.div(tmp.e.buyables[104].scaleDiv)
                let cost = Decimal.pow(1e5, x.pow(2.75)).mul(Decimal.pow(10,inChallenge("ct",32)?18915:3740))
                return cost.floor()
            },
            scaleDiv() {
                let div = decimalOne
                if (hasUpgrade("e",356)) div = div.mul(1.1)
                if (hasUpgrade("e",361)) div = div.mul(upgradeEffect("e",361))
                if (player.e.mu2.gte(5)) div = div.mul(tmp.e.mueff2.e4)
                if (inChallenge("ct",32)) div = div.div(5)
                if (hasUpgrade("Us",115)) div = div.mul(tmp.Us.upgrades[115].effect)
                if (hasMilestone("Us",40)) {
                    div = div.mul(1.2)
                }
                if (hasMilestone("Us",41)) {
                    div = div.mul(1.15)
                }
                return div
            },
            base() { 
                let base = new Decimal(1.2)
                if (hasUpgrade("e",336)) base = base.add(upgradeEffect("e",336))
                if (hasUpgrade("e",393)) base = base.add(upgradeEffect("e",393))
                if (hasUpgrade("e",351)) base = base.add(tmp.e.upgrades[351].effect2)
                if (hasUpgrade("e",403)) base = base.add(tmp.e.upgrades[403].effect2)
                if (inChallenge("ct",32)) {
                    if (base.gte(1e200)) base = base.log10().div(200).pow(0.6).mul(200).pow10()
                }
                return base
            },
            total() {
                let total = getBuyableAmount("e", 104)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                if (x.gte(1e50)) x = x.log10().div(50).pow(0.2).mul(50).pow10()
                if (x.gte(Decimal.pow(10,1e70))) x = x.log10().log10().div(70).pow(0.1).mul(70).pow10().pow10()
                let eff = Decimal.pow(base, x)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                let mu = player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.stuff == "MMNA"
                mu = mu || (player.tab == "Us" && player.subtabs.Us.mainTabs == "Mutations")
                if (!mu) return
                let extra = ""
                let dis = "Multiply MMNA gain and limit by "+format(this.base())
                return dis + ".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" mRNA\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("e", 104)) + extra
            },
            unlocked() { return hasUpgrade("e", 326) }, 
            canAfford() {
                    return player.e.mrna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",10))player.e.mrna = player.e.mrna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.mrna
                let target = Decimal.log10(s.div(Decimal.pow(10,inChallenge("ct",32)?18915:3740))).div(5).root(2.75).mul(tmp.e.buyables[104].scaleDiv)
                if (target.gte(165)) target = target.div(165).pow(1/3).mul(165)
                target = target.ceil()
                let cost = Decimal.pow(1e5, target.sub(1).pow(2.75)).mul(Decimal.pow(10,inChallenge("ct",32)?18915:3740))
                let diff = target.sub(player.e.buyables[104])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",10)) player.e.mrna = player.e.mrna.sub(cost).max(0)
                    player.e.buyables[104] = player.e.buyables[104].add(diff)
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[104].canAfford) color = "#00AA55"
                return color
            }
        }
        },
        105: {
			title: "Chance Boost",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(50)) x = x.div(50).pow(2.5).mul(50)
                x = x.div(tmp.e.buyables[105].scaleDiv)
                let cost = Decimal.pow(1e10, x.pow(3)).mul(Decimal.pow(10,inChallenge("ct",32)?33675:4184))
                return cost.floor()
            },
            scaleDiv() {
                let div = decimalOne
                if (hasUpgrade("e",354)) div = div.mul(upgradeEffect("e",354))
                if (hasUpgrade("e",361)) div = div.mul(upgradeEffect("e",361))
                if (hasUpgrade("e",373)) div = div.mul(upgradeEffect("e",373))
                if (hasUpgrade("e",376)) div = div.mul(upgradeEffect("e",376))
                if (hasMilestone("Us",34)) div = div.mul(1.2)
                if (hasMilestone("Us",54)) div = div.mul(3)
                if (hasUpgrade("Us",113)) div = div.mul(tmp.Us.upgrades[113].effect)
                if (player.e.mu2.gte(5)) div = div.mul(tmp.e.mueff2.e4)
                if (inChallenge("ct",32)) div = div.div(5)
                return div
            },
            base() { 
                let base = decimalTwo
                if (hasUpgrade("e",335)) base = base.add(upgradeEffect("e",335))
                if (hasUpgrade("e",352)) base = base.add(tmp.e.upgrades[352].effect2)
                if (hasUpgrade("e",353)) base = base.add(upgradeEffect("e",353))
                if (hasUpgrade("e",363)) base = base.add(tmp.e.upgrades[363].effect2)
                if (hasUpgrade("e",374)) base = base.mul(tmp.e.upgrades[374].effect)
                if (hasUpgrade("e",386)) base = base.mul(1.5)
                return base
            },
            total() {
                let total = getBuyableAmount("e", 105)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                let mu = player.tab == "e" && player.subtabs.e.mainTabs == "RNA" && player.subtabs.e.stuff == "MMNA"
                mu = mu || (player.tab == "Us" && player.subtabs.Us.mainTabs == "Mutations")
                if (!mu) return
                let extra = ""
                let dis = "Multiply mRNA gain per 'MMNA Virus' and Mutate chance by "+format(this.base())
                return dis + ".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" mRNA\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("e", 105)) + extra
            },
            unlocked() { return hasUpgrade("e", 326) }, 
            canAfford() {
                    return player.e.mrna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",10)) player.e.mrna = player.e.mrna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.mrna
                let target = Decimal.log10(s.div(Decimal.pow(10,inChallenge("ct",32)?33675:4184))).div(10).root(3).mul(tmp.e.buyables[105].scaleDiv)
                if (target.gte(50)) target = target.div(50).pow(0.4).mul(50)
                target = target.ceil()
                let cost = Decimal.pow(1e10, target.sub(1).pow(3)).mul(Decimal.pow(10,inChallenge("ct",32)?33675:4184))
                let diff = target.sub(player.e.buyables[105])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",10)) player.e.mrna = player.e.mrna.sub(cost).max(0)
                    player.e.buyables[105] = player.e.buyables[105].add(diff)
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[105].canAfford) color = "#00AA55"
                return color
            }
        }
        },
        111: {
			title: "CRCR",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                x = x.div(tmp.e.buyables[111].scaleDiv)
                if (x.gte(tet10(4))) x = tet10(slog(x).sub(4).mul(2).add(4))
                if (x.gte(Decimal.pow(10,Decimal.pow(10,2e4)))) x = x.log10().log10().div(2e4).pow(4).mul(2e4).pow10().pow10()
                if (x.gte(1e19)) x = x.log10().div(19).pow(4).mul(19).pow10()
                let cost = Decimal.pow(1.5, x.pow(1.5)).mul(10)
                return cost
            },
            scaleDiv() {
                let div = decimalOne
                return div
            },
            base() { 
                let base = player.e.crna.add(1).log10().pow(0.5).add(1.5)
                return base
            },
            total() {
                let total = getBuyableAmount("e", 111)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "RNA" || player.subtabs.e.stuff != "CRNA") return
                let extra = ""
                let dis = "Multiply base CRNA gain by "+format(this.base())
                return dis + " (based on CRNA).\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" CRNA\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("e", 111)) + extra
            },
            unlocked() { return hasUpgrade("e", 403) }, 
            canAfford() {
                    return player.e.crna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.e.crna = player.e.crna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.crna
                let target = Decimal.log10(s.div(10)).div(Decimal.log10(1.5)).root(1.5).mul(tmp.e.buyables[111].scaleDiv)
                if (target.gte(1e19)) target=target.log10().div(19).pow(0.25).mul(19).pow10()
                if (target.gte(Decimal.pow(10,Decimal.pow(10,2e4)))) target = target.log10().log10().div(2e4).pow(0.25).mul(2e4).pow10().pow10()
                if (target.gte(tet10(4))) target = tet10(slog(target).sub(4).div(2).add(4))
                target = target.ceil()
                let cost = Decimal.pow(1.5, target.sub(1).pow(1.5)).mul(10)
                let diff = target.sub(player.e.buyables[111])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",4)) player.e.crna = player.e.crna.sub(cost).max(0)
                    player.e.buyables[111] = player.e.buyables[111].add(diff)
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[111].canAfford) color = "#AA55AA"
                return color
            }
        }
        },
        112: {
			title: "CRIN",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                x = x.div(tmp.e.buyables[112].scaleDiv)
                if (x.gte(tet10(4))) x = tet10(slog(x).sub(4).mul(2).add(4))
                if (x.gte(Decimal.pow(10,Decimal.pow(10,2e4)))) x = x.log10().log10().div(2e4).pow(4).mul(2e4).pow10().pow10()
                if (x.gte(1e19)) x = x.log10().div(19).pow(4).mul(19).pow10()
                let cost = Decimal.pow(1.7, x.pow(1.5)).mul(350)
                return cost
            },
            scaleDiv() {
                let div = decimalOne
                return div
            },
            base() { 
                let base = player.e.points.add(1).pow(1/3).div(100).add(1)
                return base
            },
            total() {
                let total = getBuyableAmount("e", 112)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "RNA" || player.subtabs.e.stuff != "CRNA") return
                let extra = ""
                let dis = "Multiply base CRNA gain by "+format(this.base())
                return dis + " (based on infecters).\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" CRNA\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("e", 112)) + extra
            },
            unlocked() { return hasUpgrade("e", 404) }, 
            canAfford() {
                    return player.e.crna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.e.crna = player.e.crna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.crna
                let target = Decimal.log10(s.div(350)).div(Decimal.log10(1.7)).root(1.5).mul(tmp.e.buyables[112].scaleDiv)
                if (target.gte(1e19)) target=target.log10().div(19).pow(0.25).mul(19).pow10()
                if (target.gte(Decimal.pow(10,Decimal.pow(10,2e4)))) target = target.log10().log10().div(2e4).pow(0.25).mul(2e4).pow10().pow10()
                if (target.gte(tet10(4))) target = tet10(slog(target).sub(4).div(2).add(4))
                target = target.ceil()
                let cost = Decimal.pow(1.7, target.sub(1).pow(1.5)).mul(350)
                let diff = target.sub(player.e.buyables[112])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",4)) player.e.crna = player.e.crna.sub(cost).max(0)
                    player.e.buyables[112] = player.e.buyables[112].add(diff)
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[112].canAfford) color = "#AA55AA"
                return color
            }
        }
        },
        113: {
			title: "CRMU",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                x = x.div(tmp.e.buyables[113].scaleDiv)
                if (x.gte(tet10(4))) x = tet10(slog(x).sub(4).mul(2).add(4))
                if (x.gte(Decimal.pow(10,Decimal.pow(10,2e4)))) x = x.log10().log10().div(2e4).pow(4).mul(2e4).pow10().pow10()
                if (x.gte(1e19)) x = x.log10().div(19).pow(4).mul(19).pow10()
                let cost = Decimal.pow(2, x.pow(1.5)).mul(4e3)
                return cost
            },
            scaleDiv() {
                let div = decimalOne
                return div
            },
            base() { 
                let base = player.e.mu.add(1).pow(0.85).div(15).add(1)
                return base
            },
            total() {
                let total = getBuyableAmount("e", 113)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "RNA" || player.subtabs.e.stuff != "CRNA") return
                let extra = ""
                let dis = "Multiply base CRNA gain by "+format(this.base())
                return dis + " (based on mutations).\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" CRNA\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("e", 113)) + extra
            },
            unlocked() { return hasUpgrade("e", 406) }, 
            canAfford() {
                    return player.e.crna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.e.crna = player.e.crna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.crna
                let target = Decimal.log10(s.div(4e3)).div(Decimal.log10(2)).root(1.5).mul(tmp.e.buyables[113].scaleDiv)
                if (target.gte(1e19)) target=target.log10().div(19).pow(0.25).mul(19).pow10()
                if (target.gte(Decimal.pow(10,Decimal.pow(10,2e4)))) target = target.log10().log10().div(2e4).pow(0.25).mul(2e4).pow10().pow10()
                if (target.gte(tet10(4))) target = tet10(slog(target).sub(4).div(2).add(4))
                target = target.ceil()
                let cost = Decimal.pow(2, target.sub(1).pow(1.5)).mul(4e3)
                let diff = target.sub(player.e.buyables[113])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",4)) player.e.crna = player.e.crna.sub(cost).max(0)
                    player.e.buyables[113] = player.e.buyables[113].add(diff)
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[113].canAfford) color = "#AA55AA"
                return color
            }
        }
        },
        121: {
			title: "CGCR",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                x = x.div(tmp.e.buyables[121].scaleDiv)
                if (x.gte(tet10(4))) x = tet10(slog(x).sub(4).mul(2).add(4))
                if (x.gte(Decimal.pow(10,Decimal.pow(10,2e4)))) x = x.log10().log10().div(2e4).pow(4).mul(2e4).pow10().pow10()
                if (x.gte(1e10)) x = x.log10().div(10).pow(4).mul(10).pow10()
                if (x.gte(2e5)) x = x.div(2e5).pow(2).mul(2e5)
                let cost = Decimal.pow(2, x.pow(1.7)).mul(47500)
                return cost
            },
            scaleDiv() {
                let div = decimalOne
                return div
            },
            base() { 
                let base = player.e.crna.max(10).log10().pow(0.25).add(0.5)
                return base
            },
            total() {
                let total = getBuyableAmount("e", 121)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "RNA" || player.subtabs.e.stuff != "CRNA") return
                let extra = ""
                let dis = "Multiply CRNA gain after log by "+format(this.base())
                return dis + " (based on CRNA).\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" CRNA\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("e", 121)) + extra
            },
            unlocked() { return hasUpgrade("e", 412) }, 
            canAfford() {
                    return player.e.crna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.e.crna = player.e.crna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.crna
                let target = Decimal.log10(s.div(47500)).div(Decimal.log10(2)).root(1.7).mul(tmp.e.buyables[121].scaleDiv)
                if (target.gte(2e5)) target=target.div(2e5).pow(0.5).mul(2e5)
                if (target.gte(1e10)) target=target.log10().div(10).pow(0.25).mul(10).pow10()
                if (target.gte(Decimal.pow(10,Decimal.pow(10,2e4)))) target = target.log10().log10().div(2e4).pow(0.25).mul(2e4).pow10().pow10()
                if (target.gte(tet10(4))) target = tet10(slog(target).sub(4).div(2).add(4))
                target = target.ceil()
                let cost = Decimal.pow(2, target.sub(1).pow(1.7)).mul(47500)
                let diff = target.sub(player.e.buyables[121])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",4)) player.e.crna = player.e.crna.sub(cost).max(0)
                    player.e.buyables[121] = player.e.buyables[121].add(diff)
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[121].canAfford) color = "#AA55AA"
                return color
            }
        }
        },
        122: {
			title: "CGMM",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                x = x.div(tmp.e.buyables[122].scaleDiv)
                if (x.gte(tet10(4))) x = tet10(slog(x).sub(4).mul(2).add(4))
                if (x.gte(Decimal.pow(10,Decimal.pow(10,2e4)))) x = x.log10().log10().div(2e4).pow(4).mul(2e4).pow10().pow10()
                if (x.gte(1e10)) x = x.log10().div(10).pow(4).mul(10).pow10()
                if (x.gte(2e5)) x = x.div(2e5).pow(2).mul(2e5)
                let cost = Decimal.pow(3, x.pow(1.7)).mul(65e7)
                return cost
            },
            scaleDiv() {
                let div = decimalOne
                return div
            },
            base() { 
                let base = player.e.mm.max(10).log10().max(10).log10().pow(0.33).add(0.5)
                return base
            },
            total() {
                let total = getBuyableAmount("e", 122)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "RNA" || player.subtabs.e.stuff != "CRNA") return
                let extra = ""
                let dis = "Multiply CRNA gain after log by "+format(this.base())
                return dis + " (based on MMNA).\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" CRNA\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("e", 122)) + extra
            },
            unlocked() { return hasUpgrade("e", 416) }, 
            canAfford() {
                    return player.e.crna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.e.crna = player.e.crna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.crna
                let target = Decimal.log10(s.div(65e7)).div(Decimal.log10(3)).root(1.7).mul(tmp.e.buyables[122].scaleDiv)
                if (target.gte(2e5)) target=target.div(2e5).pow(0.5).mul(2e5)
                if (target.gte(1e10)) target=target.log10().div(10).pow(0.25).mul(10).pow10()
                if (target.gte(Decimal.pow(10,Decimal.pow(10,2e4)))) target = target.log10().log10().div(2e4).pow(0.25).mul(2e4).pow10().pow10()
                if (target.gte(tet10(4))) target = tet10(slog(target).sub(4).div(2).add(4))
                target = target.ceil()
                let cost = Decimal.pow(3, target.sub(1).pow(1.7)).mul(65e7)
                let diff = target.sub(player.e.buyables[122])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",4)) player.e.crna = player.e.crna.sub(cost).max(0)
                    player.e.buyables[122] = player.e.buyables[122].add(diff)
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[122].canAfford) color = "#AA55AA"
                return color
            }
        }
        },
        123: {
			title: "CGMR",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                x = x.div(tmp.e.buyables[123].scaleDiv)
                if (x.gte(tet10(4))) x = tet10(slog(x).sub(4).mul(2).add(4))
                if (x.gte(Decimal.pow(10,Decimal.pow(10,2e4)))) x = x.log10().log10().div(2e4).pow(4).mul(2e4).pow10().pow10()
                if (x.gte(1e10)) x = x.log10().div(10).pow(4).mul(10).pow10()
                if (x.gte(2e5)) x = x.div(2e5).pow(2).mul(2e5)
                let cost = Decimal.pow(3.5, x.pow(1.7)).mul(29e10)
                return cost
            },
            scaleDiv() {
                let div = decimalOne
                return div
            },
            base() { 
                let base = player.e.mrna.max(10).log10().max(10).log10().pow(0.25).add(0.5)
                return base
            },
            total() {
                let total = getBuyableAmount("e", 123)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "e" || player.subtabs.e.mainTabs != "RNA" || player.subtabs.e.stuff != "CRNA") return
                let extra = ""
                let dis = "Multiply CRNA gain after log by "+format(this.base())
                return dis + " (based on mRNA).\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" CRNA\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("e", 123)) + extra
            },
            unlocked() { return hasUpgrade("e", 422) }, 
            canAfford() {
                    return player.e.crna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.e.crna = player.e.crna.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.e.crna
                let target = Decimal.log10(s.div(29e10)).div(Decimal.log10(3.5)).root(1.7).mul(tmp.e.buyables[123].scaleDiv)
                if (target.gte(2e5)) target=target.div(2e5).pow(0.5).mul(2e5)
                if (target.gte(1e10)) target=target.log10().div(10).pow(0.25).mul(10).pow10()
                if (target.gte(Decimal.pow(10,Decimal.pow(10,2e4)))) target = target.log10().log10().div(2e4).pow(0.25).mul(2e4).pow10().pow10()
                if (target.gte(tet10(4))) target = tet10(slog(target).sub(4).div(2).add(4))
                target = target.ceil()
                let cost = Decimal.pow(3.5, target.sub(1).pow(1.7)).mul(29e10)
                let diff = target.sub(player.e.buyables[123])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("e",4)) player.e.crna = player.e.crna.sub(cost).max(0)
                    player.e.buyables[123] = player.e.buyables[123].add(diff)
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.e.buyables[123].canAfford) color = "#AA55AA"
                return color
            }
        }
        },
    },
    upgrades: {
        rows: 11,
        cols: 6,
        11: {
            title: "Infected",
            description: "Infection power boosts 'Infection' after softcap.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal(200),
            effect(){
                let eff = player.e.p.add(10).max(10).log10().pow(150)
                return eff
            },
            canAfford() {
                return player.e.p.gte(200)
            },
            pay() {
                player.e.p = player.e.p.sub(200)
                player.e.upgg.push(11)
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",11))
            },
        },
        12: {
            title: "Infected Virus",
            description: "IN power boost CV gain and 'More Exponenter' buys 10x more and 2x faster.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal(250),
            effect(){
                let eff = player.e.p.add(1).max(1).pow(20)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",12))+"x"
            },
            canAfford() {
                return player.e.p.gte(250)
            },
            pay() {
                player.e.p = player.e.p.sub(250)
                player.e.upgg.push(12)
            },
            unlocked() {
                return hasUpgrade("e",11)
            }
        },
        13: {
            title: "Infected Immunity",
            description: "Infection power divides immunity.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal(2000),
            effect(){
                let eff = player.e.p.add(1).max(1)
                eff = slog(eff).pow(3)
                return eff
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",13))
            },
            canAfford() {
                return player.e.p.gte(2000)
            },
            pay() {
                player.e.p = player.e.p.sub(2e3)
                player.e.upgg.push(13)
            },
            unlocked() {
                return hasUpgrade("e",12)
            }
        },
        14: {
            title: "Infected Cases",
            description: "Cases boost infection power gain and divide immunity.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal(3000),
            effect(){
                let eff = player.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(2)
                if (hasUpgrade("e",64)) eff = eff.pow(upgradeEffect("e",64))
                return eff
            },
            effect2(){
                let eff = player.points.add(1).max(1)
                eff = slog(eff).pow(1.4)
                return eff.max(1)
            },
            canAfford() {
                return player.e.p.gte(3000)
            },
            pay() {
                player.e.p = player.e.p.sub(3e3)
                player.e.upgg.push(14)
            },
            effectDisplay(){
                return format(tmp.e.upgrades[14].effect)+"x, /"+format(tmp.e.upgrades[14].effect2)+"x"
            },
            unlocked() {
                return hasUpgrade("e",13)
            }
        },
        15: {
            title: "Infected Boost",
            description: "Infecters add to 'Cases Boost' base, S and D autobuyers buy max.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal(15000),
            effect(){
                let eff = player.e.points.div(2000)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",15))
            },
            canAfford() {
                return player.e.p.gte(15e3)
            },
            pay() {
                player.e.p = player.e.p.sub(15e3)
                player.e.upgg.push(15)
            },
            unlocked() {
                return hasUpgrade("e",14)
            }
        },
        16: {
            title: "Infect Infect",
            description: "Infectivity divides immunity and boosts 'Infection' after softcap.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal(20000),
            effect(){
                let eff = player.i.points.add(10).max(10)
                eff = slog(eff).pow(0.5)
                return eff.max(1)
            },
            effect2(){
                let eff = player.i.points.add(10).max(10)
                eff = eff.log10().pow(0.08)
                if (eff.gte("ee21")) eff = Decimal.pow(10,eff.div("ee21").log10().pow(0.8)).mul("ee21")
                return eff.max(1)
            },
            effectDisplay(){
                return "/"+format(tmp.e.upgrades[16].effect) + ", ^"+format(tmp.e.upgrades[16].effect2)
            },
            canAfford() {
                return player.e.p.gte(2e4)
            },
            pay() {
                player.e.p = player.e.p.sub(2e4)
                player.e.upgg.push(16)
            },
            unlocked() {
                return hasUpgrade("e",15)
            }
        },
        21: {
            title: "Infected Infectivity",
            description: "Infectivity boosts IN power gain and dimension autobuyers buy 1,000,000x more.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal(30000),
            effect(){
                let eff = player.i.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.3)
                if (hasUpgrade("e",42)) eff = eff.pow(upgradeEffect("e",42))
                if (eff.gte("ee10")) eff = Decimal.pow(10,eff.div("ee10").log10().pow(0.85)).mul("ee10")
                return eff
            },
            effectDisplay(){
                let dis = format(upgradeEffect("e",21))+"x"
                if (upgradeEffect("e",21).gte("ee10")) dis += ' (softcapped)'
                return dis
            },
            canAfford() {
                return player.e.p.gte(3e4)
            },
            pay() {
                player.e.p = player.e.p.sub(3e4)
                player.e.upgg.push(21)
            },
            unlocked() {
                return hasUpgrade("e",16)
            }
        },
        22: {
            title: "Infected Infecters",
            description: "Infection power adds to infecter base.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal(400000),
            effect(){
                let eff = player.e.p.add(10).max(10)
                eff = eff.log10()
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",22))
            },
            canAfford() {
                return player.e.p.gte(4e5)
            },
            pay() {
                player.e.p = player.e.p.sub(4e5)
                player.e.upgg.push(22)
            },
            unlocked() {
                return hasUpgrade("e",21)
            }
        },
        23: {
            title: "Infected Casuals",
            description: "Casuals boost IN power gain and 'More Exponenter' buys 100x more and 2x faster.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal(1000000),
            effect(){
                let eff = player.f.casuals.add(10).max(10)
                eff = eff.log10().pow(0.2)
                if (hasUpgrade("e",74)) eff = eff.pow(upgradeEffect("e",74))
                if (eff.gte("ee26")) eff = eff.log10().div(10).pow(4e24)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",23))+"x"
            },
            canAfford() {
                return player.e.p.gte(1e6)
            },
            pay() {
                player.e.p = player.e.p.sub(1e6)
                player.e.upgg.push(23)
            },
            unlocked() {
                return hasUpgrade("e",22)
            }
        },
        24: {
            title: "Casualer Infection",
            description: "IN power boosts 'Unlimited Casuals' and 'Unlimited Multiplier'.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal(4e9),
            effect(){
                let eff = player.e.p.add(10).max(10)
                eff = eff.log10().pow(0.8)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",24))
            },
            canAfford() {
                return player.e.p.gte(4e9)
            },
            pay() {
                player.e.p = player.e.p.sub(4e9)
                player.e.upgg.push(24)
            },
            unlocked() {
                return hasUpgrade("e",23)
            }
        },
        25: {
            title: "Casual Immunity",
            description: "Casuals divide immunity.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal(7e9),
            effect(){
                let eff = player.f.casuals.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().div(4)
                return eff.min(2)
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",25))
            },
            canAfford() {
                return player.e.p.gte(7e9)
            },
            pay() {
                player.e.p = player.e.p.sub(7e9)
                player.e.upgg.push(25)
            },
            unlocked() {
                return hasUpgrade("e",24)
            }
        },
        26: {
            title: "Infected Casualty",
            description: "Casualty divides immunity and adds to infecter base.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal(3e11),
            effect(){
                let eff = player.f.casualty.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.5).div(2)
                return eff.min(2)
            },
            effect2(){
                let eff = player.f.casualty.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(2).div(5)
                return eff
            },
            effectDisplay(){
                return "/"+format(tmp.e.upgrades[26].effect)+", +"+format(tmp.e.upgrades[26].effect2)
            },
            canAfford() {
                return player.e.p.gte(3e11)
            },
            pay() {
                player.e.p = player.e.p.sub(3e11)
                player.e.upgg.push(26)
            },
            unlocked() {
                return hasUpgrade("e",25)
            }
        },
        31: {
            title: "Powerful Infection",
            description: "Casuals boost infection power 1st effect.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal(1.313e13),
            effect(){
                let eff = player.f.casuals.add(10).max(10)
                eff = eff.log10().pow(0.253)
                return eff.max(1)
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",31))
            },
            canAfford() {
                return player.e.p.gte(1.313e13)
            },
            pay() {
                player.e.p = player.e.p.sub(1.313e13)
                player.e.upgg.push(31)
            },
            unlocked() {
                return hasUpgrade("e",26)
            }
        },
        32: {
            title: "Multiplied Infection",
            description: "Multiplier Boosts boost infection power gain.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal(8.585e85),
            effect(){
                let eff = player.f.buyables[33]
                eff = Decimal.pow(1.001,eff)
                return eff.max(1)
            },
            effectDisplay(){
                return format(upgradeEffect("e",32))+"x"
            },
            canAfford() {
                return player.e.p.gte(8.585e85)
            },
            pay() {
                player.e.p = player.e.p.sub(8.585e85)
                player.e.upgg.push(32)
            },
            unlocked() {
                return hasUpgrade("e",31)
            }
        },
        33: {
            title: "MultiDivide Immunity",
            description: "Multiplier Boosts divide immunity.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal(1.09e109),
            effect(){
                let eff = player.f.buyables[33]
                eff = Decimal.pow(1.00001,eff)
                if (eff.gte(1.5)) eff = eff.div(1.5).pow(0.1).mul(1.5)
                if (eff.gte(2)) eff = eff.log(2).pow(0.2).mul(2)
                if (eff.gte(3)) eff = slog(eff.add(7)).add(2)
                return eff.max(1)
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",33))
            },
            canAfford() {
                return player.e.p.gte(1.09e109)
            },
            pay() {
                player.e.p = player.e.p.sub(3e94)
                player.e.upgg.push(33)
            },
            unlocked() {
                return hasUpgrade("e",32)
            }
        },
        34: {
            title: "Self Voost",
            description: "Infection power divides 'Self Booster' scaling base and its softcap starts 400 later.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal(4e109),
            effect(){
                let eff = player.e.p.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(18)
                if (inChallenge("ct",32)) return eff.min(5e5)
                return eff.min(900000)
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",34))
            },
            canAfford() {
                return player.e.p.gte(4e109)
            },
            pay() {
                player.e.p = player.e.p.sub(4e109)
                player.e.upgg.push(34)
            },
            unlocked() {
                return hasUpgrade("e",33)
            }
        },
        35: {
            title: "Distant Distancing",
            description: "Infection power makes Social Distant scaling start later and Dimension scaling is ^0.05.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal(1.1e110),
            effect(){
                let eff = player.e.p.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(5).mul(150)
                if (eff.gte(1e4)) eff = eff.div(1e4).pow(0.25).mul(1e4)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",35))
            },
            canAfford() {
                return player.e.p.gte(1.1e110)
            },
            pay() {
                player.e.p = player.e.p.sub(1.1e110)
                player.e.upgg.push(35)
            },
            unlocked() {
                return hasUpgrade("e",34)
            }
        },
        36: {
            title: "Fataler Infection",
            description: "Fatality power boosts infection power gain.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal(1.3e130),
            effect(){
                let eff = player.f.p.add(1).max(1)
                eff = Decimal.pow(10,eff.log10().pow(0.1)).pow(0.35)
                if (eff.gte("ee11")) eff = Decimal.pow(10,eff.div("ee11").log10().pow(0.8)).mul("ee11")
                if (eff.gte("e2e16")) eff = Decimal.pow(10,eff.div("e2e16").log10().pow(0.8)).mul("e2e16")
                if (eff.gte("ee18")) eff = eff.log10().mul(100).pow(5e16)
                return eff
            },
            effectDisplay(){
                let dis = format(upgradeEffect("e",36))+"x"
                if (upgradeEffect("e",36).gte("ee11")) dis += ' (softcapped)'
                return dis
            },
            canAfford() {
                return player.e.p.gte(1.3e130)
            },
            pay() {
                player.e.p = player.e.p.sub(1.3e130)
                player.e.upgg.push(36)
            },
            unlocked() {
                return hasUpgrade("e",35)
            }
        },
        41: {
            title: "Fatal Base",
            description: "Fatality power adds to 'Power Base' base.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal("3e537694"),
            effect(){
                let eff = player.f.p.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.4)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",41))
            },
            canAfford() {
                return player.e.p.gte("3e537694")
            },
            pay() {
                player.e.p = player.e.p.sub("3e537694")
                player.e.upgg.push(41)
            },
            unlocked() {
                return hasUpgrade("e",156)
            }
        },
        42: {
            title: "Self Infection",
            description: "'Infected Infectivity' boosts itself.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal("e583805"),
            effect(){
                let eff = upgradeEffect("e",21).add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(5.75)
                if (hasUpgrade("e",102)) eff = eff.pow(upgradeEffect("e",102))
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",42))
            },
            canAfford() {
                return player.e.p.gte("e583805")
            },
            pay() {
                player.e.p = player.e.p.sub("e583805")
                player.e.upgg.push(42)
            },
            unlocked() {
                return hasUpgrade("e",41)
            }
        },
        43: {
            title: "Self Exponent",
            description: "Cases boost its exponent.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal("6.942e688497"),
            effect(){
                let eff = player.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.03)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",43))
            },
            canAfford() {
                return player.e.p.gte("6.942e688497")
            },
            pay() {
                player.e.p = player.e.p.sub("6.942e688497")
                player.e.upgg.push(43)
            },
            unlocked() {
                return hasUpgrade("e",42)
            }
        },
        44: {
            title: "Infected Diseaser",
            description: "Infectious diseases give infected infections.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal("4.2e735005"),
            effect(){
                let eff = player.e.diseases.add(10).max(10)
                eff = eff.log10().pow(0.75)
                if (hasMilestone("Uu",20)) eff = eff.mul(tmp.Uu.milestones[20].effect)
                if (inChallenge("ct",32)) {
                    if (eff.gte(1e15)) eff = eff.div(1e15).pow(0.5).mul(1e15)
                    if (eff.gte("e1500")) eff = eff.log10().div(1500).pow(0.5).mul(1500).pow10().div("e1500").pow(0.5).mul("e1500")
                }
                return eff.floor()
            },
            effectDisplay(){
                let dis = "+"+formatWhole(upgradeEffect("e",44))
                if (inChallenge("ct",32) && upgradeEffect("e",44).gte(1e15)) dis += " (softcapped)"
                return dis
            },
            canAfford() {
                return player.e.p.gte("4.2e735005")
            },
            pay() {
                player.e.p = player.e.p.sub("4.2e735005")
                player.e.upgg.push(44)
            },
            unlocked() {
                return hasUpgrade("e",43)
            }
        },
        45: {
            title: "Diseaser Boost",
            description: "Add 0.005 to 'Disease Boost' base.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal("1.5e761214"),
            canAfford() {
                return player.e.p.gte("1.5e761214")
            },
            pay() {
                player.e.p = player.e.p.sub("1.5e761214")
                player.e.upgg.push(45)
            },
            unlocked() {
                return hasUpgrade("e",44)
            }
        },
        46: {
            title: "PROduction",
            description: "Cases produce infected infections and unlock Quarantine.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal("2.69e989588"),
            effect(){
                let eff = decimalZero 
                if (inChallenge("ct",32)) {

                }
                else {
                eff = player.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(1.5).sub(1)
                if (hasUpgrade("e",82)) eff = eff.mul(upgradeEffect("e",82))
                eff = eff.mul(tmp.e.reff).mul(tmp.ct.effect)
                if (eff.gte(Decimal.tetrate(10,7))) eff = tet10(slog(eff).sub(7).div(2).add(7))
                eff = eff.min(tet10(8))
                }
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",46))+"/s"
            },
            canAfford() {
                return player.e.p.gte("2.69e989588")
            },
            pay() {
                player.e.p = player.e.p.sub("2.69e989588")
                player.e.upgg.push(46)
            },
            unlocked() {
                return hasUpgrade("e",45)
            }
        },
        51: {
            title: "11",
            description: "Add 1 to 'Power Gain' base.",
            currencyDisplayName: "infected infections",
            currencyInternalName: "infections",
            currencyLayer: "e",
            cost: new Decimal(100),
            pay() {
                player.e.spent = player.e.spent.add(100)
            },
            unlocked() {
                return hasMilestone("e",1)
            }
        },
        52: {
            title: "21",
            description: "Fatality divides immunity.",
            currencyDisplayName: "infected infections",
            currencyInternalName: "infections",
            currencyLayer: "e",
            cost: new Decimal(50),
            effect(){
                let eff = player.f.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.04)
                if (hasUpgrade("e",123)) eff = eff.pow(5)
                return eff.min(3)
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",52))
            },
            canAfford() {
                return hasUpgrade("e",51) && player.e.infections.gte(50)
            },
            pay() {
                player.e.spent = player.e.spent.add(50)
            },
            unlocked() {
                return hasMilestone("e",1)
            }
        },
        53: {
            title: "22",
            description: "Add 0.01 to 'Immunity Divider' base.",
            currencyDisplayName: "infected infections",
            currencyInternalName: "infections",
            currencyLayer: "e",
            cost: new Decimal(50),
            canAfford() {
                return hasUpgrade("e",51) && player.e.infections.gte(50)
            },
            pay() {
                player.e.spent = player.e.spent.add(50)
            },
            unlocked() {
                return hasMilestone("e",1)
            }
        },
        54: {
            title: "31",
            description: "Fatality makes Social Distant scaling weaker.",
            currencyDisplayName: "infected infections",
            currencyInternalName: "infections",
            currencyLayer: "e",
            cost: decimalTen,
            effect(){
                let eff = player.f.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.5)
                return eff.min(4.7)
            },
            effectDisplay(){
                return format(upgradeEffect("e",54))+"x"
            },
            canAfford() {
                return hasUpgrade("e",52) && player.e.infections.gte(10)
            },
            pay() {
                player.e.spent = player.e.spent.add(10).max(10)
            },
            unlocked() {
                return hasMilestone("e",1)
            }
        },
        55: {
            title: "32",
            description: "Infection power makes Social Distant scaling weaker.",
            currencyDisplayName: "infected infections",
            currencyInternalName: "infections",
            currencyLayer: "e",
            cost: new Decimal(30),
            effect(){
                let eff = player.e.p.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(1.8)
                return eff.min(7.7)
            },
            effectDisplay(){
                return format(upgradeEffect("e",55))+"x"
            },
            canAfford() {
                return hasUpgrade("e",53) && player.e.infections.gte(30)
            },
            pay() {
                player.e.spent = player.e.spent.add(30)
            },
            unlocked() {
                return hasMilestone("e",1)
            }
        },
        56: {
            title: "41",
            description: "Divide immunity by 1.25, and 'Self Booster' softcap starts 1,000 later.",
            currencyDisplayName: "infected infections",
            currencyInternalName: "infections",
            currencyLayer: "e",
            cost: new Decimal(16),
            canAfford() {
                return (hasUpgrade("e",54) || hasUpgrade("e",55)) && player.e.infections.gte(16)
            },
            pay() {
                player.e.spent = player.e.spent.add(16)
            },
            unlocked() {
                return hasMilestone("e",1)
            }
        },
        61: {
            title: "51",
            description: "'More Infections' is applied after softcap at reduced rate.",
            currencyDisplayName: "infected infections",
            currencyInternalName: "infections",
            currencyLayer: "e",
            cost: new Decimal(15),
            effect(){
                let eff = Decimal.add(getVUpgEff(23),1)
                eff = eff.log10().pow(238)
                if (eff.gte("ee31")) eff = eff.div("ee31").log10().pow(0.9).pow10().mul("ee31")
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",61))
            },
            canAfford() {
                return hasUpgrade("e",56) && player.e.infections.gte(15)
            },
            pay() {
                player.e.spent = player.e.spent.add(15)
            },
            unlocked() {
                return hasMilestone("e",1)
            }
        },
        62: {
            title: "61",
            description: "Infection power adds to 'Power Gain' base.",
            currencyDisplayName: "infected infections",
            currencyInternalName: "infections",
            currencyLayer: "e",
            cost: new Decimal(100),
            effect(){
                let eff = player.e.p.add(10).max(10)
                eff = eff.log10().pow(0.25)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",62))
            },
            canAfford() {
                return hasUpgrade("e",61) && player.e.path>=1 && player.e.infections.gte(100)
            },
            pay() {
                player.e.spent = player.e.spent.add(100)
                player.e.path -=1
            },
            unlocked() {
                return hasMilestone("e",1)
            }
        },
        63: {
            title: "71",
            description: "Add 0.05 to 'Infecter Base' base.",
            currencyDisplayName: "infected infections",
            currencyInternalName: "infections",
            currencyLayer: "e",
            cost: new Decimal(150),
            canAfford() {
                return hasUpgrade("e",62) && player.e.infections.gte(150)
            },
            pay() {
                player.e.spent = player.e.spent.add(150)
            },
            unlocked() {
                return hasMilestone("e",1)
            }
        },
        64: {
            title: "81",
            description: "IN power boosts 'Infected Cases'.",
            currencyDisplayName: "infected infections",
            currencyInternalName: "infections",
            currencyLayer: "e",
            cost: new Decimal(200),
            effect(){
                let eff = player.e.p.add(10).max(10)
                eff = eff.log10().pow(0.603)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",64))
            },
            canAfford() {
                return hasUpgrade("e",63) && player.e.infections.gte(200)
            },
            pay() {
                player.e.spent = player.e.spent.add(200)
            },
            unlocked() {
                return hasMilestone("e",1)
            }
        },
        65: {
            title: "62",
            description: "Infectious diseases add to 'Power Gain' base.",
            currencyDisplayName: "infected infections",
            currencyInternalName: "infections",
            currencyLayer: "e",
            cost: new Decimal(170),
            effect(){
                let eff = player.e.diseases.add(10).max(10)
                eff = eff.log10().pow(0.55)
                return eff.min(1e3)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",65))
            },
            canAfford() {
                return hasUpgrade("e",61) && player.e.path>=1 &&  player.e.infections.gte(170)
            },
            pay() {
                player.e.spent = player.e.spent.add(170)
                player.e.path -=1
            },
            unlocked() {
                return hasMilestone("e",1)
            }
        },
        66: {
            title: "72",
            description: "Infectious diseases boost infecter base.",
            currencyDisplayName: "infected infections",
            currencyInternalName: "infections",
            currencyLayer: "e",
            cost: new Decimal(220),
            effect(){
                let eff = player.e.diseases.add(10).max(10)
                eff = eff.log10().pow(2)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",66))+"x"
            },
            canAfford() {
                return hasUpgrade("e",65) &&  player.e.infections.gte(220)
            },
            pay() {
                player.e.spent = player.e.spent.add(220)
            },
            unlocked() {
                return hasMilestone("e",1)
            }
        },
        71: {
            title: "82",
            description: "IN power boosts 'Disease Power'.",
            currencyDisplayName: "infected infections",
            currencyInternalName: "infections",
            currencyLayer: "e",
            cost: new Decimal(280),
            effect(){
                let eff = player.e.p.add(10).max(10)
                eff = eff.log10().pow(0.4)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",71))
            },
            canAfford() {
                return hasUpgrade("e",66) && player.e.infections.gte(280)
            },
            pay() {
                player.e.spent = player.e.spent.add(280)
            },
            unlocked() {
                return hasMilestone("e",1)
            }
        },
        72: {
            title: "63",
            description: "Casual viruses add to 'Power Gain' base.",
            currencyDisplayName: "infected infections",
            currencyInternalName: "infections",
            currencyLayer: "e",
            cost: new Decimal(170),
            effect(){
                let eff = player.f.virus.add(10).max(10)
                eff = eff.log10().pow(0.175)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",72))
            },
            canAfford() {
                return hasUpgrade("e",61) && player.e.path>=1 && player.e.infections.gte(170)
            },
            pay() {
                player.e.spent = player.e.spent.add(170)
                player.e.path -=1
            },
            unlocked() {
                return hasMilestone("e",1)
            }
        },
        73: {
            title: "73",
            description: "Casual viruses boost infecter base.",
            currencyDisplayName: "infected infections",
            currencyInternalName: "infections",
            currencyLayer: "e",
            cost: new Decimal(220),
            effect(){
                let eff = player.f.virus.add(10).max(10)
                eff = eff.log10().pow(0.65)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",73))+"x"
            },
            canAfford() {
                return hasUpgrade("e",72) && player.e.infections.gte(220)
            },
            pay() {
                player.e.spent = player.e.spent.add(220)
            },
            unlocked() {
                return hasMilestone("e",1)
            }
        },
        74: {
            title: "83",
            description: "Casual viruses boost 'Infected Casuals'.",
            currencyDisplayName: "infected infections",
            currencyInternalName: "infections",
            currencyLayer: "e",
            cost: new Decimal(280),
            effect(){
                let eff = player.f.virus.add(10).max(10)
                eff = eff.log10().pow(0.35)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",74))
            },
            canAfford() {
                return hasUpgrade("e",73) && player.e.infections.gte(280)
            },
            pay() {
                player.e.spent = player.e.spent.add(280)
            },
            unlocked() {
                return hasMilestone("e",1)
            }
        },
        75: {
            title: "91",
            description: "Total infected infections boost 'Power Gain' base.",
            currencyDisplayName: "infected infections",
            currencyInternalName: "infections",
            currencyLayer: "e",
            cost: new Decimal(800),
            effect(){
                let eff = player.e.in.div(200).add(1).max(1)
                if (eff.gte("e1400")) eff = eff.div("e1400").log10().pow(0.5).pow10().mul("e1400")
                return eff
            },
            effectDisplay(){
                let dis = format(upgradeEffect("e",75))+"x"
                if (upgradeEffect("e",75).gte("e1400")) dis += " (softcapped)"
                return dis
            },
            canAfford() {
                return (hasUpgrade("e",64) || hasUpgrade("e",71) || hasUpgrade("e",74)) && player.e.infections.gte(800)
            },
            pay() {
                player.e.spent = player.e.spent.add(800)
            },
            unlocked() {
                return hasMilestone("e",1)
            }
        },
        76: {
            title: "101",
            description: "'Virus Exponent' softcap is weaker.",
            currencyDisplayName: "infected infections",
            currencyInternalName: "infections",
            currencyLayer: "e",
            cost: new Decimal(800),
            canAfford() {
                return (hasUpgrade("e",75)) && player.e.infections.gte(800)
            },
            pay() {
                player.e.spent = player.e.spent.add(800)
            },
            unlocked() {
                return hasMilestone("e",1)
            }
        },
        81: {
            title: "Infectious Quarantine",
            description: "Infectious diseases boosts UC gain and 'More Exponenter' buys ^10 more.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal(1e4),
            effect(){
                let eff = player.e.diseases.add(10).max(10)
                eff = eff.log10().pow(0.15)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",81))+"x"
            },
            canAfford() {
                return player.e.qc.gte(1e4)
            },
            pay() {
                player.e.qc = player.e.qc.sub(1e4)
                player.e.upgg.push(81)
            },
            unlocked() {
                return hasUpgrade("e",46)
            }
        },
        82: {
            title: "Unquarantined Infection",
            description: "UI boosts infected infection gain.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal(3e5),
            effect(){
                let eff = player.e.qt.add(1).max(1).pow(0.15)
                if (eff.gte("e1300")) eff = eff.div("e1300").log10().pow(0.5).pow10().mul("e1300")
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",82))+"x"
            },
            canAfford() {
                return player.e.qc.gte(3e5)
            },
            pay() {
                player.e.qc = player.e.qc.sub(3e5)
                player.e.upgg.push(82)
            },
            unlocked() {
                return hasUpgrade("e",81)
            }
        },
        83: {
            title: "Unquarantined Power",
            description: "UC boosts infection power gain.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal(44444444),
            effect(){
                let eff = player.e.qc.add(1).max(1).pow(5000)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",83))+"x"
            },
            canAfford() {
                return player.e.qc.gte(44444444)
            },
            pay() {
                player.e.qc = player.e.qc.sub(44444444)
                player.e.upgg.push(83)
            },
            unlocked() {
                return hasUpgrade("e",82)
            }
        },
        84: {
            title: "Infected Quarantine",
            description: "Infected infections boost UC gain.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal(333333333),
            effect(){
                let eff = player.e.infections.add(1).max(1).pow(0.2)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",84))+"x"
            },
            canAfford() {
                return player.e.qc.gte(333333333)
            },
            pay() {
                player.e.qc = player.e.qc.sub(333333333)
                player.e.upgg.push(84)
            },
            unlocked() {
                return hasUpgrade("e",83)
            }
        },
        85: {
            title: "Unquarantined Disease",
            description: "UC boost infectious disease gain.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal(5e15),
            effect(){
                let eff = player.e.qc.add(1).max(1).pow(2000)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",85))+"x"
            },
            canAfford() {
                return player.e.qc.gte(5e15)
            },
            pay() {
                player.e.qc = player.e.qc.sub(5e15)
                player.e.upgg.push(85)
            },
            unlocked() {
                return hasUpgrade("e",84)
            }
        },
        86: {
            title: "Quarantine Power",
            description: "Infection power boosts UC gain.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal(8e15),
            effect(){
                let eff = player.e.p.add(10).max(10)
                eff = eff.log10().pow(0.2)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",86))+"x"
            },
            canAfford() {
                return player.e.qc.gte(8e15)
            },
            pay() {
                player.e.qc = player.e.qc.sub(8e15)
                player.e.upgg.push(86)
            },
            unlocked() {
                return hasUpgrade("e",85)
            }
        },
        91: {
            title: "Cased Quarantine",
            description: "Cases boost UC gain.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal(1.5e49),
            effect(){
                let eff = player.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.1)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",91))+"x"
            },
            canAfford() {
                return player.e.qc.gte(1.5e49)
            },
            pay() {
                player.e.qc = player.e.qc.sub(1.5e49)
                player.e.upgg.push(91)
            },
            unlocked() {
                return hasUpgrade("e",86)
            }
        },
        92: {
            title: "Infected Quarantine",
            description: "Infected infections add to UI gain exponent.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal(6.565e65),
            effect(){
                let eff = player.e.infections.add(10).max(10)
                eff = eff.log10().pow(2).div(50)
                if (eff.gte(2)) eff = eff.div(2).pow(0.3).mul(2)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",92))
            },
            canAfford() {
                return player.e.qc.gte(6.565e65)
            },
            pay() {
                player.e.qc = player.e.qc.sub(6.565e65)
                player.e.upgg.push(92)
            },
            unlocked() {
                return hasUpgrade("e",91)
            }
        },
        93: {
            title: "Unquarantined Boost",
            description: "Infected infections add to 'Cases Boost' base.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal(1e72),
            effect(){
                let eff = player.e.infections.add(10).max(10)
                eff = eff.log10().div(100)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",93))
            },
            canAfford() {
                return player.e.qc.gte(1e72)
            },
            pay() {
                player.e.qc = player.e.qc.sub(1e72)
                player.e.upgg.push(93)
            },
            unlocked() {
                return hasUpgrade("e",92)
            }
        },
        94: {
            title: "Quarantine Infecter",
            description: "Infecters add to UI gain exponent.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal(7.575e75),
            effect(){
                let eff = player.e.points.add(1).max(1).div(50)
                if (hasUpgrade("e",174)) eff = eff.pow(upgradeEffect("e",174))
                if (eff.gte(450)) eff = eff.div(450).pow(0.1).mul(450)
                if (eff.gte(1e13)) eff = eff.log10().sub(3).pow(13)
                if (eff.gte(1e25)) eff = eff.log10().mul(4).pow(12.5)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",94))
            },
            canAfford() {
                return player.e.qc.gte(7.575e75)
            },
            pay() {
                player.e.qc = player.e.qc.sub(7.575e75)
                player.e.upgg.push(94)
            },
            unlocked() {
                return hasUpgrade("e",93)
            }
        },
        95: {
            title: "Unquarantined Immunity",
            description: "UC divides immunity.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal(6.969e106),
            effect(){
                let eff = Decimal.pow(10,player.e.qc.add(10).max(10).log10().pow(2/3))
                if (eff.gte("e5000")) eff = eff.div("e5000").log10().pow(0.7).pow10().mul("e5000")
                if (eff.gte("e15000")) eff = eff.div("e15000").log10().pow(0.7).pow10().mul("e15000")
                return eff
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",95))
            },
            canAfford() {
                return player.e.qc.gte(6.969e106)
            },
            pay() {
                player.e.qc = player.e.qc.sub(6.969e106)
                player.e.upgg.push(95)
            },
            unlocked() {
                return hasUpgrade("e",94)
            }
        },
        96: {
            title: "UnQuarantine",
            description: "UC boosts Quarantine exponent and Quarantine buyables cost nothing.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal(2.222e110),
            effect(){
                let eff = player.e.qc.add(10).max(10).log10()
                eff = eff.add(10).max(10).log10().pow(0.1)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",96))+"x"
            },
            canAfford() {
                return player.e.qc.gte(2.222e110)
            },
            pay() {
                player.e.qc = player.e.qc.sub(2.222e110)
                player.e.upgg.push(96)
            },
            unlocked() {
                return hasUpgrade("e",95)
            }
        },
        101: {
            title: "Self Unquarantine",
            description() { return "UC boosts itself, imm. eff. is stronger at "+format("eee16")+" eff."},
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal(1e248),
            effect(){
                let eff = player.e.qc.add(10).max(10).log10().pow(3)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",101))+"x"
            },
            canAfford() {
                return player.e.qc.gte(1e248)
            },
            pay() {
                player.e.qc = player.e.qc.sub(1e248)
                player.e.upgg.push(101)
            },
            unlocked() {
                return hasUpgrade("e",96)
            }
        },
        102: {
            title: "Infected Self",
            description: "Infected infections boost 'Self Infection'.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("3.16e316"),
            effect(){
                let eff = player.e.infections.add(10).max(10).log10().add(10).max(10).log10().pow(0.7)
                if (eff.gte(1.8)) eff = eff.div(1.8).pow(0.2).mul(1.8)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(upgradeEffect("e",102))
                if (upgradeEffect("e",102).gte(1.8)) dis += ' (softcapped)'
                return dis
            },
            canAfford() {
                return player.e.qc.gte("3.16e316")
            },
            pay() {
                player.e.qc = player.e.qc.sub("3.16e316")
                player.e.upgg.push(102)
            },
            unlocked() {
                return hasUpgrade("e",101)
            }
        },
        103: {
            title: "InBoofecsted Power",
            description: "Infected infections boost IN power 2nd effect.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("3.28e328"),
            effect(){
                let eff = player.e.infections.add(10).max(10).log10().add(10).max(10).log10().add(10).max(10).log10().pow(0.6)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",103))
            },
            canAfford() {
                return player.e.qc.gte("3.28e328")
            },
            pay() {
                player.e.qc = player.e.qc.sub("3.28e328")
                player.e.upgg.push(103)
            },
            unlocked() {
                return hasUpgrade("e",102)
            }
        },
        104: {
            title: "Diseased Quarantine",
            description: "Infectious diseases boost Quarantine exponent.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("e409"),
            effect(){
                let eff = player.e.diseases.add(10).max(10).log10().add(10).max(10).log10().add(10).max(10).log10().pow(0.5)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",104))+"x"
            },
            canAfford() {
                return player.e.qc.gte("e409")
            },
            pay() {
                player.e.qc = player.e.qc.sub("e409")
                player.e.upgg.push(104)
            },
            unlocked() {
                return hasUpgrade("e",103)
            }
        },
        105: {
            title: "Diseasest Boost",
            description: "Add 0.003 to 'Disease Boost' base.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("6.08e608"),
            canAfford() {
                return player.e.qc.gte("6.08e608")
            },
            pay() {
                player.e.qc = player.e.qc.sub("6.08e608")
                player.e.upgg.push(105)
            },
            unlocked() {
                return hasUpgrade("e",104)
            }
        },
        106: {
            title: "Infected Expower",
            description: "Raise IP exponent to 1.1 and unlock a row of Quarantine buyables.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("6.969e690"),
            canAfford() {
                return player.e.qc.gte("6.969e690")
            },
            pay() {
                player.e.qc = player.e.qc.sub("6.969e690")
                player.e.upgg.push(106)
            },
            unlocked() {
                return hasUpgrade("e",105)
            }
        },
        111: {
            title: "Infected Disease",
            description: "'Disease' boosts 'Infection' after softcap.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal(50000),
            effect(){
                let eff = Decimal.add(getVUpgEff(31),1)
                eff = eff.log10().pow(10)
                if (eff.gte("ee18")) eff = Decimal.pow(10,eff.div("ee18").log10().pow(0.85)).mul("ee18")
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(upgradeEffect("e",111))
                if (upgradeEffect("e",111).gte("ee18")) dis += " (softcapped)"
                return dis
            },
            canAfford() {
                return player.e.diseases.gte(5e4)
            },
            pay() {
                player.e.diseases = player.e.diseases.sub(5e4)
                player.e.upgg.push(111)
            },
            unlocked() {
                return hasMilestone("e",2)
            }
        },
        112: {
            title: "Disease Power",
            description: "Infectious diseases boost infection power gain.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal(100000),
            effect(){
                let eff = player.e.diseases.add(10).max(10)
                eff = eff.log10().pow(10)
                if (hasUpgrade("e",71)) eff = eff.pow(upgradeEffect("e",71))
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",112))+"x"
            },
            canAfford() {
                return player.e.diseases.gte(1e5)
            },
            pay() {
                player.e.diseases = player.e.diseases.sub(1e5)
                player.e.upgg.push(112)
            },
            unlocked() {
                return hasUpgrade("e",111)
            }
        },
        113: {
            title: "Infectious Power",
            description: "Infection power boosts infectious disease gain.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal(1.5e7),
            effect(){
                let eff = player.e.p.add(10).max(10)
                eff = eff.log10().pow(1.2)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",113))+"x"
            },
            canAfford() {
                return player.e.diseases.gte(1.5e7)
            },
            pay() {
                player.e.diseases = player.e.diseases.sub(1.5e7)
                player.e.upgg.push(113)
            },
            unlocked() {
                return hasUpgrade("e",112)
            }
        },
        114: {
            title: "Infectious Infecters",
            description: "Add 0.05 to 'Infecter Base' base.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal(2.424e24),
            canAfford() {
                return player.e.diseases.gte(2.424e24)
            },
            pay() {
                player.e.diseases = player.e.diseases.sub(2.424e24)
                player.e.upgg.push(114)
            },
            unlocked() {
                return hasUpgrade("e",113)
            }
        },
        115: {
            title: "Diseaser",
            description: "Add 0.025 to 'Disease Gain' base.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal(3.434e34),
            canAfford() {
                return player.e.diseases.gte(3.434e34)
            },
            pay() {
                player.e.diseases = player.e.diseases.sub(3.434e34)
                player.e.upgg.push(115)
            },
            unlocked() {
                return hasUpgrade("e",114)
            }
        },
        116: {
            title: "Disease Immunity",
            description: "Immunity boosts infectious disease gain.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal(5.757e57),
            effect(){
                let eff = player.e.i.pow(-1).mul(1e3)
                eff = eff.pow(5)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",116))+"x"
            },
            canAfford() {
                return player.e.diseases.gte(5.757e57)
            },
            pay() {
                player.e.diseases = player.e.diseases.sub(5.757e57)
                player.e.upgg.push(116)
            },
            unlocked() {
                return hasUpgrade("e",115)
            }
        },
        121: {
            title: "Infected Power",
            description: "Unspent infected infections boost infection power gain.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal(5e117),
            effect(){
                let eff = hasUpgrade("e",132) ? player.e.in.add(1).max(1) : player.e.infections.add(1).max(1)
                eff = Decimal.pow(1.7,eff)
                if (eff.gte("ee5")) eff = eff.log10().pow(2e4)
                return eff
            },
            effectDisplay(){
                let dis = format(upgradeEffect("e",121))+"x"
                if (upgradeEffect("e",121).gte("ee5")) dis += " (softcapped)"
                return dis
            },
            canAfford() {
                return player.e.diseases.gte(5e117)
            },
            pay() {
                player.e.diseases = player.e.diseases.sub(5e117)
                player.e.upgg.push(121)
            },
            unlocked() {
                return hasUpgrade("e",116)
            }
        },
        122: {
            title: "Immunity Power",
            description: "Immunity boosts infection power gain",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal(4e128),
            effect(){
                let eff = player.e.i.pow(-1).mul(1e3)
                eff = eff.pow(31.5)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",122))+"x"
            },
            canAfford() {
                return player.e.diseases.gte(4e128)
            },
            pay() {
                player.e.diseases = player.e.diseases.sub(4e128)
                player.e.upgg.push(122)
            },
            unlocked() {
                return hasUpgrade("e",121)
            }
        },
        123: {
            title: "21 Bulck",
            description: "Infection 21 effect is ^5 and 'More Exponenter' buys 1000x more and 2x faster.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal(1.3e130),
            canAfford() {
                return player.e.diseases.gte(1.3e130)
            },
            pay() {
                player.e.diseases = player.e.diseases.sub(1.3e130)
                player.e.upgg.push(123)
            },
            unlocked() {
                return hasUpgrade("e",122)
            }
        },
        124: {
            title: "Infected Infectious",
            description: "Unspent infected infections boost infectious disease gain.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal(1.82e182),
            effect(){
                let eff = hasUpgrade("e",132) ? player.e.in.add(1).max(1) : player.e.infections.add(1).max(1)
                eff = Decimal.pow(1.07,eff)
                if (eff.gte("ee5")) eff = eff.log10().pow(2e4)
                return eff
            },
            effectDisplay(){
                let dis = format(upgradeEffect("e",124))+"x"
                if (upgradeEffect("e",124).gte("ee5")) dis += " (softcapped)"
                return dis
            },
            canAfford() {
                return player.e.diseases.gte(1.82e182)
            },
            pay() {
                player.e.diseases = player.e.diseases.sub(1.82e182)
                player.e.upgg.push(124)
            },
            unlocked() {
                return hasUpgrade("e",123)
            }
        },
        125: {
            title: "Casual Disease",
            description: "Infectious diseases boost casual virus gain.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal(2.89e289),
            effect(){
                let eff = player.e.diseases.add(1).max(1)
                eff = Decimal.pow(10,eff.log10().pow(0.75)).pow(2e4)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",125))+"x"
            },
            canAfford() {
                return player.e.diseases.gte(2.89e289)
            },
            pay() {
                player.e.diseases = player.e.diseases.sub(2.89e289)
                player.e.upgg.push(125)
            },
            unlocked() {
                return hasUpgrade("e",124)
            }
        },
        126: {
            title: "Virus Power",
            description: "Casual viruses boost infection power gain.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal(5e289),
            effect(){
                let eff = player.f.virus.add(1).max(1)
                eff = Decimal.pow(10,eff.log10().pow(0.75)).pow(0.0011)
                if (eff.gte(Decimal.pow(10,1e14))) eff = eff.div(Decimal.pow(10,1e14)).log10().pow(0.1).mul(Decimal.pow(10,1e14))
                if (player.e.diseases.gte("ee18")) eff = eff.div(Decimal.pow(10,1e14)).pow10().mul(Decimal.pow(10,1e14))
                if (eff.gte(Decimal.pow(10,1e41))) eff = eff.log10().div(10).pow(2.5e39)
                return eff
            },
            effectDisplay(){
                let dis = format(upgradeEffect("e",126))+"x"
                if (upgradeEffect("e",126).gte(Decimal.pow(10,1e14))) dis += " (softcapped)"
                return dis
            },
            canAfford() {
                return player.e.diseases.gte(5e289)
            },
            pay() {
                player.e.diseases = player.e.diseases.sub(5e289)
                player.e.upgg.push(126)
            },
            unlocked() {
                return hasUpgrade("e",125)
            }
        },
        131: {
            title: "Ininfection",
            description: "You can pick another path in the 3 way split.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal("e367"),
            canAfford() {
                return player.e.diseases.gte("e367")
            },
            pay() {
                player.e.diseases = player.e.diseases.sub("e367")
                player.e.upgg.push(131)
                player.e.path ++
            },
            unlocked() {
                return hasUpgrade("e",126)
            }
        },
        132: {
            title: "Totally Infected",
            description: "Upgrades based on unspent infected infections are based on total.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal("4.06e406"),
            canAfford() {
                return player.e.diseases.gte("4.06e406")
            },
            pay() {
                player.e.diseases = player.e.diseases.sub("4.06e406")
                player.e.upgg.push(132)
            },
            unlocked() {
                return hasUpgrade("e",131)
            }
        },
        133: {
            title: "Infectious Cases",
            description: "Infectious diseases boost cases exponent.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal("5.41e541"),
            effect(){
                let eff = player.e.diseases.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.1)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",133))
            },
            canAfford() {
                return player.e.diseases.gte("5.41e541")
            },
            pay() {
                player.e.diseases = player.e.diseases.sub("5.41e541")
                player.e.upgg.push(133)
            },
            unlocked() {
                return hasUpgrade("e",132)
            }
        },
        134: {
            title: "Disfectease",
            description: "Infection power adds to 'Disease Gain' base.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal("5.49e549"),
            effect(){
                let eff = player.e.p.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.15).div(32.91)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",134))
            },
            canAfford() {
                return player.e.diseases.gte("5.49e549")
            },
            pay() {
                player.e.diseases = player.e.diseases.sub("5.49e549")
                player.e.upgg.push(134)
            },
            unlocked() {
                return hasUpgrade("e",133)
            }
        },
        135: {
            title: "Powerful Disease",
            description: "Infectious diseases boost infection power 1st effect.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal("e1984"),
            effect(){
                let eff = player.e.diseases.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(2)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",135))
            },
            canAfford() {
                return player.e.diseases.gte("e1984")
            },
            pay() {
                player.e.diseases = player.e.diseases.sub("e1984")
                player.e.upgg.push(135)
            },
            unlocked() {
                return hasUpgrade("e",134)
            }
        },
        136: {
            title: "Divided Disease",
            description: "Infectious diseases add to 'Immunity Divider' base.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal("e1993"),
            effect(){
                let eff = player.e.diseases.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.1).div(200)
                if (eff.gte(0.1)) eff = slog(eff.mul(100)).div(10)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",136))
            },
            canAfford() {
                return player.e.diseases.gte("e1993")
            },
            pay() {
                player.e.diseases = player.e.diseases.sub("e1993")
                player.e.upgg.push(136)
            },
            unlocked() {
                return hasUpgrade("e",135)
            }
        },
        141: {
            title: "Softer Power",
            description: "Fatality power softcap is weaker.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal("e2003"),
            canAfford() {
                return player.e.diseases.gte("e2003")
            },
            pay() {
                player.e.diseases = player.e.diseases.sub("e2003")
                player.e.upgg.push(141)
            },
            unlocked() {
                return hasUpgrade("e",136)
            }
        },
        142: {
            title: "Fatal Disease",
            description: "Fatality boosts infectious disease gain.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal("2.004e2004"),
            effect(){
                let eff = player.f.points.add(1).max(1)
                eff = Decimal.pow(10,eff.log10().pow(0.3)).pow(2e-5)
                if (eff.gte("e8e4")) eff = Decimal.pow(10,eff.div("e8e4").log10().pow(0.7)).mul("e8e4")
                if (eff.gte("ee12")) eff = Decimal.pow(10,eff.div("ee12").log10().pow(0.8)).mul("ee12")
                if (eff.gte("ee18")) eff = Decimal.pow(10,eff.div("ee18").log10().pow(0.8)).mul("ee18")
                if (eff.gte("ee26")) eff = eff.log10().div(10).pow(4e24)
                return eff
            },
            effectDisplay(){
                let dis = format(upgradeEffect("e",142))+"x"
                if (upgradeEffect("e",142).gte("e8e4")) dis += " (softcapped)"
                return dis
            },
            canAfford() {
                return player.e.diseases.gte("2.004e2004")
            },
            pay() {
                player.e.diseases = player.e.diseases.sub("2.004e2004")
                player.e.upgg.push(142)
            },
            unlocked() {
                return hasUpgrade("e",141)
            }
        },
        143: {
            title: "Fataler Disease",
            description: "Fatality boosts infectious disease effect and dimension autobuyers buy max.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal("2.994e2994"),
            effect(){
                let eff = player.f.points.add(10).max(10)
                eff = eff.log10().pow(0.15)
                if (eff.gte(Decimal.pow(10,1000))) eff = eff.log10().pow(1e3/3)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",143))
            },
            canAfford() {
                return player.e.diseases.gte("2.994e2994")
            },
            pay() {
                player.e.diseases = player.e.diseases.sub("2.994e2994")
                player.e.upgg.push(143)
            },
            unlocked() {
                return hasUpgrade("e",142)
            }
        },
        144: {
            title: "Fatalest Disease",
            description: "Infectious diseases boost fatality power effect.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal("3.266e3266"),
            effect(){
                let eff = player.e.diseases.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10()
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",144))
            },
            canAfford() {
                return player.e.diseases.gte("3.266e3266")
            },
            pay() {
                player.e.diseases = player.e.diseases.sub("3.266e3266")
                player.e.upgg.push(144)
            },
            unlocked() {
                return hasUpgrade("e",143)
            }
        },
        145: {
            title: "Infrection",
            description: "You can pick all paths in the 3 way split.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal("6.574e6574"),
            canAfford() {
                return player.e.diseases.gte("6.574e6574")
            },
            pay() {
                player.e.diseases = player.e.diseases.sub("6.574e6574")
                player.e.upgg.push(145)
                player.e.path ++
            },
            unlocked() {
                return hasUpgrade("e",144)
            }
        },
        146: {
            title: "Released Diseases",
            description: "Infectious diseases boost 'Release' and unlock a row of buyables.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal("7.04e7040"),
            effect(){
                let eff = player.e.diseases.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(3.5)
                if (eff.gte(2.3) && inChallenge("ct",32)) eff = eff.div(2.3).pow(0.15).mul(2.3)
                if (eff.gte(2.5)) eff = eff.div(2.5).pow(0.25).mul(2.5)
                if (eff.gte(2.7)) eff = eff.div(2.7).pow(0.15).mul(2.7)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",146))
            },
            canAfford() {
                return player.e.diseases.gte("7.04e7040")
            },
            pay() {
                player.e.diseases = player.e.diseases.sub("7.04e7040")
                player.e.upgg.push(146)
            },
            unlocked() {
                return hasUpgrade("e",145)
            }
        },
        151: {
            title: "Case Base",
            description: "Cases boost base infectious disease gain.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal("6.942e22801"),
            effect(){
                let eff = player.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.2)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",151))+"x"
            },
            canAfford() {
                return player.e.diseases.gte("6.942e22801")
            },
            pay() {
                player.e.diseases = player.e.diseases.sub("6.942e22801")
                player.e.upgg.push(151)
            },
            unlocked() {
                return hasUpgrade("e",146)
            }
        },
        152: {
            title: "Diseased",
            description: "Infectious diseases divide immnunity and unlock a disease buyable.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal("3e36166"),
            effect(){
                let eff = player.e.diseases.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(4)
                return eff
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",152))
            },
            canAfford() {
                return player.e.diseases.gte("3e36166")
            },
            pay() {
                player.e.diseases = player.e.diseases.sub("3e36166")
                player.e.upgg.push(152)
            },
            unlocked() {
                return hasUpgrade("e",151)
            }
        },
        153: {
            title: "Immune Cases",
            description: "Immunity boosts cases exponent.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal("4e84721"),
            effect(){
                let eff = player.e.i.pow(-1).mul(1e3)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.3)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",153))
            },
            canAfford() {
                return player.e.diseases.gte("4e84721")
            },
            pay() {
                player.e.diseases = player.e.diseases.sub("4e84721")
                player.e.upgg.push(153)
            },
            unlocked() {
                return hasUpgrade("e",152)
            }
        },
        154: {
            title: "{Self Capped}",
            description: "Remove 'Self Booster' softcap.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal("2e104143"),
            canAfford() {
                return player.e.diseases.gte("2e104143")
            },
            pay() {
                player.e.diseases = player.e.diseases.sub("2e104143")
                player.e.upgg.push(154)
            },
            unlocked() {
                return hasUpgrade("e",153)
            }
        },
        155: {
            title: "Infected Scales",
            description: "Cases slow interval scaling.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal("e125760"),
            effect(){
                let eff = player.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.15)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",155))+"x"
            },
            canAfford() {
                return player.e.diseases.gte("e125760")
            },
            pay() {
                player.e.diseases = player.e.diseases.sub("e125760")
                player.e.upgg.push(155)
            },
            unlocked() {
                return hasUpgrade("e",154)
            }
        },
        156: {
            title: "Powered Powers",
            description: "Cases boost IP and ID effect exponent and unlock a row of IP upgrades.",
            currencyDisplayName: "infectious diseases",
            currencyInternalName: "diseases",
            currencyLayer: "e",
            cost: new Decimal("e171717"),
            effect(){
                let eff = player.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.08)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",156))
            },
            canAfford() {
                return player.e.diseases.gte("e171717")
            },
            pay() {
                player.e.diseases = player.e.diseases.sub("e171717")
                player.e.upgg.push(156)
            },
            unlocked() {
                return hasUpgrade("e",155)
            }
        },
        161: {
            title: "DiseasedTine",
            description: "Infectious diseases add to 'UC Gain' base.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("1.142e1142"),
            effect(){
                let eff = player.e.diseases.add(10).max(10).log10().pow(0.1).div(20)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",161))
            },
            canAfford() {
                return player.e.qc.gte("1.142e1142")
            },
            pay() {
                player.e.qc = player.e.qc.sub("1.142e1142")
                player.e.upgg.push(161)
            },
            unlocked() {
                return hasUpgrade("e",106)
            }
        },
        162: {
            title: "'UN'Quarantine",
            description: "You can gain UI out of Quarantine.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("1.346e1346"),
            canAfford() {
                return player.e.qc.gte("1.346e1346")
            },
            pay() {
                player.e.qc = player.e.qc.sub("1.346e1346")
                player.e.upgg.push(162)
            },
            unlocked() {
                return hasUpgrade("e",161) || hasMilestone("ct",1)
            }
        },
        163: {
            title: "Unquarantined Infrection",
            description: "UC boosts UI gain.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("1.662e1662"),
            effect(){
                let eff = player.e.qc.add(10).max(10).log10()
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",163))+"x"
            },
            canAfford() {
                return player.e.qc.gte("1.662e1662")
            },
            pay() {
                player.e.qc = player.e.qc.sub("1.662e1662")
                player.e.upgg.push(163)
            },
            unlocked() {
                return hasUpgrade("e",162)
            }
        },
        164: {
            title: "Powered Quarantine",
            description: "IP boosts Quarantine exponent.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("1.736e1736"),
            effect(){
                let eff = player.e.p.add(10).max(10).log10().add(10).max(10).log10().add(10).max(10).log10().pow(0.5)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",164))+"x"
            },
            canAfford() {
                return player.e.qc.gte("1.736e1736")
            },
            pay() {
                player.e.qc = player.e.qc.sub("1.736e1736")
                player.e.upgg.push(164)
            },
            unlocked() {
                return hasUpgrade("e",163)
            }
        },
        165: {
            title: "Unquarantined Base",
            description: "Each 'UC Boost' adds 0.005 to 'UI Gain' base.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("e12100"),
            effect(){
                let eff = tmp.e.buyables[53].total.div(200)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",165))
            },
            canAfford() {
                return player.e.qc.gte("e12100")
            },
            pay() {
                player.e.qc = player.e.qc.sub("e12100")
                player.e.upgg.push(165)
            },
            unlocked() {
                return hasUpgrade("e",164)
            }
        },
        166: {
            title: "Fataler Disease",
            description: "Fatality adds to 'Disease Gain' base.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("e17535"),
            effect(){
                let eff = player.f.points.add(10).max(10).log10().add(10).max(10).log10().pow(0.5).div(90)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",166))
            },
            canAfford() {
                return player.e.qc.gte("e17535")
            },
            pay() {
                player.e.qc = player.e.qc.sub("e17535")
                player.e.upgg.push(166)
            },
            unlocked() {
                return hasUpgrade("e",165)
            }
        },
        171: {
            title: "Powerful Unquarantine",
            description: "UC boosts ID effect exponent.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("e23100"),
            effect(){
                let eff = player.e.qc.add(10).max(10).log10().add(10).max(10).log10().add(10).max(10).log10().pow(0.8)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",171))
            },
            canAfford() {
                return player.e.qc.gte("e23100")
            },
            pay() {
                player.e.qc = player.e.qc.sub("e23100")
                player.e.upgg.push(171)
            },
            unlocked() {
                return hasUpgrade("e",166)
            }
        },
        172: {
            title: "Fatal Unquarantine",
            description: "Fatality boosts UI gain.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("e25095"),
            effect(){
                let eff = player.f.points.add(10).max(10).log10().pow(0.5)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",172))+"x"
            },
            canAfford() {
                return player.e.qc.gte("e25095")
            },
            pay() {
                player.e.qc = player.e.qc.sub("e25095")
                player.e.upgg.push(172)
            },
            unlocked() {
                return hasUpgrade("e",171)
            }
        },
        173: {
            title: "Fatal Softcap",
            description: "Fatality boosts IP 2nd effect.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("e33222"),
            effect(){
                let eff = player.f.points.add(10).max(10).log10().add(10).max(10).log10().pow(0.02)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",173))
            },
            canAfford() {
                return player.e.qc.gte("e33222")
            },
            pay() {
                player.e.qc = player.e.qc.sub("e33222")
                player.e.upgg.push(173)
            },
            unlocked() {
                return hasUpgrade("e",172)
            }
        },
        174: {
            title: "Fatal Infecter",
            description: "Fatality boosts 'Quarantine Infecter'.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("e38550"),
            effect(){
                let eff = player.f.points.add(10).max(10).log10().add(10).max(10).log10().pow(0.25)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",174))
            },
            canAfford() {
                return player.e.qc.gte("e38550")
            },
            pay() {
                player.e.qc = player.e.qc.sub("e38550")
                player.e.upgg.push(174)
            },
            unlocked() {
                return hasUpgrade("e",173)
            }
        },
        175: {
            title: "Fataler Unquarantine",
            description: "UC boosts fatality gain.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("e170835"),
            effect(){
                let eff = player.e.qc.add(10).max(10).log10().add(10).max(10).log10().pow(2)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",175))
            },
            canAfford() {
                return player.e.qc.gte("e170835")
            },
            pay() {
                player.e.qc = player.e.qc.sub("e170835")
                player.e.upgg.push(175)
            },
            unlocked() {
                return hasUpgrade("e",174)
            }
        },
        176: {
            title: "Infecter Booster",
            description: "Infecters add to 'Cases Base' and 'UC Boost' base.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("e181364"),
            effect(){
                let eff = player.e.points.div(100)
                return eff
            },
            effect2(){
                let eff = player.e.points.div(7e3)
                return eff
            },
            effectDisplay(){
                return "+"+format(tmp.e.upgrades[176].effect)+", +"+format(tmp.e.upgrades[176].effect2)
            },
            canAfford() {
                return player.e.qc.gte("e181364")
            },
            pay() {
                player.e.qc = player.e.qc.sub("e181364")
                player.e.upgg.push(176)
            },
            unlocked() {
                return hasUpgrade("e",175)
            }
        },
        181: {
            title: "QuarUntined Cases",
            description: "UC boosts cases exponent.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("e312750"),
            effect(){
                let eff = player.e.qc.add(10).max(10).log10().add(10).max(10).log10().pow(0.3)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",181))
            },
            canAfford() {
                return player.e.qc.gte("e312750")
            },
            pay() {
                player.e.qc = player.e.qc.sub("e312750")
                player.e.upgg.push(181)
            },
            unlocked() {
                return hasUpgrade("e",176)
            }
        },
        182: {
            title: "Cased Cases",
            description: "Cases add to 'UC Gain' base.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("e337923"),
            effect(){
                let eff = player.points.add(10).max(10).log10().add(10).max(10).log10().add(10).max(10).log10().pow(0.5)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",182))
            },
            canAfford() {
                return player.e.qc.gte("e337923")
            },
            pay() {
                player.e.qc = player.e.qc.sub("e337923")
                player.e.upgg.push(182)
            },
            unlocked() {
                return hasUpgrade("e",181)
            }
        },
        183: {
            title: "Softer Softpower",
            description: "Cases boost IP 2nd effect.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("e403270"),
            effect(){
                let eff = player.points.add(10).max(10).log10().add(10).max(10).log10().add(10).max(10).log10().pow(0.03)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",183))
            },
            canAfford() {
                return player.e.qc.gte("e403270")
            },
            pay() {
                player.e.qc = player.e.qc.sub("e403270")
                player.e.upgg.push(183)
            },
            unlocked() {
                return hasUpgrade("e",182)
            }
        },
        184: {
            title: "Scaled Cases",
            description: "Cases reduce 'Cases Base' cost scaling.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("e483180"),
            effect(){
                let eff = player.points.add(10).max(10).log10().add(10).max(10).log10().add(10).max(10).log10().pow(0.15)
                return eff.min(4e10)
            },
            effectDisplay(){
                return format(upgradeEffect("e",184))+"x"
            },
            canAfford() {
                return player.e.qc.gte("e483180")
            },
            pay() {
                player.e.qc = player.e.qc.sub("e483180")
                player.e.upgg.push(184)
            },
            unlocked() {
                return hasUpgrade("e",183)
            }
        },
        185: {
            title: "Scaled Disease",
            description: "Cases reduce 'Disease Boost' cost scaling.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("e629435"),
            effect(){
                let eff = player.points.add(10).max(10).log10().add(10).max(10).log10().add(10).max(10).log10().add(10).max(10).log10().pow(0.25)
                return eff.min(1e4)
            },
            effectDisplay(){
                return format(upgradeEffect("e",185))+"x"
            },
            canAfford() {
                return player.e.qc.gte("e629435")
            },
            pay() {
                player.e.qc = player.e.qc.sub("e629435")
                player.e.upgg.push(185)
            },
            unlocked() {
                return hasUpgrade("e",184)
            }
        },
        186: {
            title: "Fatal Scaling",
            description: "MBs boost UC gain, IP 2nd eff, remove Dim sc., unlock a row of IP upgs.",
            currencyDisplayName: "Unquarantined Cases",
            currencyInternalName: "qc",
            currencyLayer: "e",
            cost: new Decimal("e691498"),
            effect(){
                let eff = Decimal.pow(1.15,tmp.f.buyables[33].total)
                return eff
            },
            effect2(){
                let eff = tmp.f.buyables[33].total.add(10).max(10).log10().pow(0.05)
                return eff
            },
            effectDisplay(){
                return format(tmp.e.upgrades[186].effect)+"x, ^"+format(tmp.e.upgrades[186].effect2)
            },
            canAfford() {
                return player.e.qc.gte("e691498")
            },
            pay() {
                player.e.qc = player.e.qc.sub("e691498")
                player.e.upgg.push(186)
            },
            unlocked() {
                return hasUpgrade("e",185)
            }
        },
        191: {
            title: "Distant Infection",
            description: "IP makes Distant Cases Boost scaling start later.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal("e84170e6"),
            effect(){
                let eff = player.e.p.add(10).max(10).log10().add(10).max(10).log10().pow(4)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",191))+"x"
            },
            canAfford() {
                return player.e.p.gte("e84170e6")
            },
            pay() {
                player.e.p = player.e.p.sub("e84170e6")
                player.e.upgg.push(191)
            },
            unlocked() {
                return hasUpgrade("e",186)
            }
        },
        192: {
            title: "Powerful Bases",
            description: "IP adds to 'UC Gain' and 'Cases Base' base.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal("e93514e6"),
            effect(){
                let eff = player.e.p.add(10).max(10).log10().add(10).max(10).log10()
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",192))
            },
            canAfford() {
                return player.e.p.gte("e93514e6")
            },
            pay() {
                player.e.p = player.e.p.sub("e93514e6")
                player.e.upgg.push(192)
            },
            unlocked() {
                return hasUpgrade("e",191)
            }
        },
        193: {
            title: "Fatally Quarantined",
            description: "Fatality adds to 'Quarantine Boost' base",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal("e94777e6"),
            effect(){
                let eff = player.f.points.add(10).max(10).log10().add(10).max(10).log10().pow(0.25).div(150)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",193))
            },
            canAfford() {
                return player.e.p.gte("e94777e6")
            },
            pay() {
                player.e.p = player.e.p.sub("e94777e6")
                player.e.upgg.push(193)
            },
            unlocked() {
                return hasUpgrade("e",192)
            }
        },
        194: {
            title: "Fataler Fatality",
            description: "Fatality power boosts fatality gain and unlock a buyable (no auto).",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal("e106858e6"),
            effect(){
                let eff = player.f.p.add(10).max(10).log10().add(10).max(10).log10().pow(1.5)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",194))
            },
            canAfford() {
                return player.e.p.gte("e106858e6")
            },
            pay() {
                player.e.p = player.e.p.sub("e106858e6")
                player.e.upgg.push(194)
            },
            unlocked() {
                return hasUpgrade("e",193)
            }
        },
        195: {
            title: "Diseaser Quarantine",
            description: "UC boosts ID effect exponent",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal("e133627e6"),
            effect(){
                let eff = player.e.qc.add(10).max(10).log10().add(10).max(10).log10().pow(0.25)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",195))
            },
            canAfford() {
                return player.e.p.gte("e133627e6")
            },
            pay() {
                player.e.p = player.e.p.sub("e133627e6")
                player.e.upgg.push(195)
            },
            unlocked() {
                return hasUpgrade("e",194)
            }
        },
        196: {
            title: "Powerful Infections",
            description: "IP boosts cases exponent and unlock RNA.",
            currencyDisplayName: "infection power",
            currencyInternalName: "p",
            currencyLayer: "e",
            cost: new Decimal("e31927e7"),
            effect(){
                let eff = player.e.p.add(10).max(10).log10().add(10).max(10).log10().pow(0.25)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",196))
            },
            canAfford() {
                return player.e.p.gte("e31927e7")
            },
            pay() {
                player.e.p = player.e.p.sub("e31927e7")
                player.e.upgg.push(196)
            },
            unlocked() {
                return hasUpgrade("e",195)
            }
        },
        201: {
            title: "Ribonucleic",
            description: "RNA boosts UC gain.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(30),
            effect(){
                let eff = player.e.rna.add(1).max(1).pow(1e5)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",201))+"x"
            },
            canAfford() {
                return player.e.rna.gte(30)
            },
            pay() {
                player.e.rna = player.e.rna.sub(30)
                player.e.upgg.push(201)
            },
            unlocked() {
                return hasUpgrade("e",196)
            }
        },
        202: {
            title: "Self RNA",
            description: "RNA boosts RNA gain.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(60),
            effect(){
                let eff = player.e.rna.add(10).max(10).log10().pow(player.e.rna.add(10).max(10).log10().add(10).max(10).log10().pow(2).add(1).max(1)).max(1)
                if (hasUpgrade("e",224)) eff = eff.pow(upgradeEffect("e",224))
                if (hasUpgrade("e",295)) eff = eff.pow(upgradeEffect("e",295))
                eff = eff.pow(tmp.e.Adeffect)
                if (eff.gte(Decimal.pow(10,5e8))) eff = eff.div(Decimal.pow(10,5e8)).log10().pow(0.85).pow10().mul(Decimal.pow(10,5e8))
                if (eff.gte(Decimal.pow(10,5e9))) eff = eff.log10().mul(2).pow(5e8)
                return eff
            },
            effectDisplay(){
                let dis = format(upgradeEffect("e",202))+"x"
                if (upgradeEffect("e",202).gte(Decimal.pow(10,5e8))) dis += " (softcapped)"
                return dis
            },
            canAfford() {
                return player.e.rna.gte(60)
            },
            pay() {
                player.e.rna = player.e.rna.sub(60)
                player.e.upgg.push(202)
            },
            unlocked() {
                return hasUpgrade("e",201)
            }
        },
        203: {
            title: "Nucleic Acid",
            description: "RNA makes Distant Cases Boost scaling start later.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(666),
            effect(){
                let eff = player.e.rna.add(10).max(10).log10().pow(5)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",203))+"x"
            },
            canAfford() {
                return player.e.rna.gte(666)
            },
            pay() {
                player.e.rna = player.e.rna.sub(666)
                player.e.upgg.push(203)
            },
            unlocked() {
                return hasUpgrade("e",202)
            }
        },
        204: {
            title: "Ribose",
            description: "RNA boosts IP effects.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(1234),
            effect(){
                let eff = player.e.rna.add(10).max(10).log10().pow(10).mul(50)
                return eff
            },
            effect2(){
                let eff = player.e.rna.add(10).max(10).log10().pow(0.15).div(1.15).max(1)
                if (eff.gte(2)) eff = eff.div(2).pow(1/3).mul(2)
                return eff
            },
            effectDisplay(){
                return "^"+format(tmp.e.upgrades[204].effect)+", ^" + format(tmp.e.upgrades[204].effect2)
            },
            canAfford() {
                return player.e.rna.gte(1234)
            },
            pay() {
                player.e.rna = player.e.rna.sub(1234)
                player.e.upgg.push(204)
            },
            unlocked() {
                return hasUpgrade("e",203)
            }
        },
        205: {
            title: "Macromolecule",
            description: "UC boosts RNA gain.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(2021),
            effect(){
                let eff = player.e.qc.add(10).max(10).log10().pow(0.15)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",205))+"x"
            },
            canAfford() {
                return player.e.rna.gte(2021)
            },
            pay() {
                player.e.rna = player.e.rna.sub(2021)
                player.e.upgg.push(205)
            },
            unlocked() {
                return hasUpgrade("e",204)
            }
        },
        206: {
            title: "RNA Genome",
            description: "II boosts RNA gain.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(69420),
            effect(){
                let eff = player.e.infections.add(10).max(10).log10().pow(0.3)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",206))+"x"
            },
            canAfford() {
                return player.e.rna.gte(69420)
            },
            pay() {
                player.e.rna = player.e.rna.sub(69420)
                player.e.upgg.push(206)
            },
            unlocked() {
                return hasUpgrade("e",205)
            }
        },
        211: {
            title: "Gene Expression",
            description: "RNA boosts base ID gain, ID boosts cases exp.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(3e10),
            effect(){
                let eff = player.e.rna.add(1).max(1)
                return eff
            },
            effect2(){
                let eff = player.e.diseases.add(10).max(10).log10().add(10).max(10).log10().pow(0.2)
                return eff
            },
            effectDisplay(){
                return format(tmp.e.upgrades[211].effect)+"x, ^"+format(tmp.e.upgrades[211].effect2)
            },
            canAfford() {
                return player.e.rna.gte(3e10)
            },
            pay() {
                player.e.rna = player.e.rna.sub(3e10)
                player.e.upgg.push(211)
            },
            unlocked() {
                return hasUpgrade("e",206)
            }
        },
        212: {
            title: "Nucleotides",
            description: "Cases boost RNA gain.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(69420666969),
            effect(){
                let eff = player.points.add(10).max(10).log10().add(10).max(10).log10().add(10).max(10).log10().pow(tmp.e.Ceffect)
                if (eff.gte(Decimal.pow(10,2e4))) eff = eff.div(Decimal.pow(10,2e4)).log10().pow(0.7).pow10().mul(Decimal.pow(10,2e4))
                if (eff.gte(Decimal.pow(10,5e6))) eff = eff.log10().div(50).pow(1e6)
                return eff
            },
            effectDisplay(){
                let dis = format(upgradeEffect("e",212))+"x"
                if (upgradeEffect("e",212).gte(Decimal.pow(10,2e4))) dis += " (softcapped)"
                return dis
            },
            canAfford() {
                return player.e.rna.gte(69420666969)
            },
            pay() {
                player.e.rna = player.e.rna.sub(69420666969)
                player.e.upgg.push(212)
            },
            unlocked() {
                return hasUpgrade("e",211)
            }
        },
        213: {
            title: "Single-stranded",
            description: "II makes Distant Cases Boost scaling start later.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(1e13),
            effect(){
                let eff = player.e.infections.add(10).max(10).log10().pow(1.3)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",213))+"x"
            },
            canAfford() {
                return player.e.rna.gte(1e13)
            },
            pay() {
                player.e.rna = player.e.rna.sub(1e13)
                player.e.upgg.push(213)
            },
            unlocked() {
                return hasUpgrade("e",212)
            }
        },
        214: {
            title: "Protein Synthesis",
            description() {
                let a = player.e.buyables[72].div(1e3)
                if (a.gte(500)) a = a.div(500).pow(0.3).mul(500)
                let exp = Decimal.add(1.05,a.mul(hasUpgrade("e",241)+0).add(tmp.e.Cyeffect))
                return "Multiply RNA gain by " + format(exp) + " per RNA upgrade squared."
            } ,
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(3e13),
            effect(){
                let eff = player.e.upgrades.filter(number => number>200 && number<270).length
                let exp = Decimal.add(1.05,player.e.buyables[72].mul(hasUpgrade("e",241)/1000)).add(tmp.e.Cyeffect)
                let exp2 = Decimal.add(2,upgradeEffect("e",263).mul(hasUpgrade("e",263)+0)).add(upgradeEffect("e",294).mul(hasUpgrade("e",294)+0))
                eff = Decimal.pow(exp,Decimal.pow(eff,exp2))
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",214))+"x"
            },
            canAfford() {
                return player.e.rna.gte(3e13)
            },
            pay() {
                player.e.rna = player.e.rna.sub(3e13)
                player.e.upgg.push(214)
            },
            unlocked() {
                return hasUpgrade("e",213)
            }
        },
        215: {
            title: "Amino Acids",
            description: "Infecters boost RNA gain.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(1.616e16),
            effect(){
                let exp = decimalOne
                if (hasUpgrade("e",253)) exp = exp.mul(1.25)
                if (hasUpgrade("e",265)) exp = exp.mul(upgradeEffect("e",265))
                let eff = Decimal.pow(1.02,player.e.points.pow(exp))
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",215))+"x"
            },
            canAfford() {
                return player.e.rna.gte(1.616e16)
            },
            pay() {
                player.e.rna = player.e.rna.sub(1.616e16)
                player.e.upgg.push(215)
            },
            unlocked() {
                return hasUpgrade("e",214)
            }
        },
        216: {
            title: "Catalysis",
            description: "RNA boost 'Cases Base' base, reduce its scaling, unlock a buyable.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(5e19),
            effect(){
                let eff = player.e.rna.add(1).max(1).pow(0.15)
                return eff
            },
            effect2(){
                let eff = player.e.rna.add(10).max(10).log10().pow(0.25).min(1e3)
                return eff
            },
            effectDisplay(){
                return format(tmp.e.upgrades[216].effect)+"x, "+format(tmp.e.upgrades[216].effect2)+"x"
            },
            canAfford() {
                return player.e.rna.gte(5e19)
            },
            pay() {
                player.e.rna = player.e.rna.sub(5e19)
                player.e.upgg.push(216)
            },
            unlocked() {
                return hasUpgrade("e",215)
            }
        },
        221: {
            title: "Genetics",
            description: "'DNA' boosts cases.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(2e21),
            effect(){
                let eff = getRUpgEff(12).add(10).max(10).log10().pow(0.86).pow10()
                if (eff.gte(Decimal.tetrate(10,10))) eff = Decimal.tetrate(10,eff.slog().div(10).pow(0.8).mul(10))
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",221))
            },
            canAfford() {
                return player.e.rna.gte(2e21)
            },
            pay() {
                player.e.rna = player.e.rna.sub(2e21)
                player.e.upgg.push(221)
            },
            unlocked() {
                return hasUpgrade("e",216)
            }
        },
        222: {
            title: "Cased RNA",
            description: "RNA boosts cases exp.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(1e26),
            effect(){
                let eff = player.e.rna.add(10).max(10).log10().pow(0.25)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",222))
            },
            canAfford() {
                return player.e.rna.gte(1e26)
            },
            pay() {
                player.e.rna = player.e.rna.sub(1e26)
                player.e.upgg.push(222)
            },
            unlocked() {
                return hasUpgrade("e",221)
            }
        },
        223: {
            title: "Upgraded RNA",
            description: "Infectivity boosts cases exp (boosted by RNA upgrades).",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(1e28),
            effect(){
                let exp = player.e.upgrades.filter(number => number>200 && number<270).length+1
                let eff = player.i.points.add(10).max(10).log10().add(10).max(10).log10().add(10).max(10).log10().pow(Decimal.div(exp,70))
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",223))
            },
            canAfford() {
                return player.e.rna.gte(1e28)
            },
            pay() {
                player.e.rna = player.e.rna.sub(1e28)
                player.e.upgg.push(223)
            },
            unlocked() {
                return hasUpgrade("e",222)
            }
        },
        224: {
            title: "Infected RNA",
            description: "II boosts 'Self RNA' and unlock a buyable.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(1e34),
            effect(){
                let eff = player.e.infections.add(10).max(10).log10().pow(0.1)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",224))
            },
            canAfford() {
                return player.e.rna.gte(1e34)
            },
            pay() {
                player.e.rna = player.e.rna.sub(1e34)
                player.e.upgg.push(224)
            },
            unlocked() {
                return hasUpgrade("e",223)
            }
        },
        225: {
            title: "Virus RNA",
            description: "CV boosts RNA gain.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(1e48),
            effect(){
                let eff = player.f.virus.add(10).max(10).log10().pow(0.3)
                if (eff.gte(Decimal.pow(10,1e12))) eff = eff.log10().div(100).pow(1e11)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",225))+"x"
            },
            canAfford() {
                return player.e.rna.gte(1e48)
            },
            pay() {
                player.e.rna = player.e.rna.sub(1e48)
                player.e.upgg.push(225)
            },
            unlocked() {
                return hasUpgrade("e",224)
            }
        },
        226: {
            title: "Atomic",
            description: "RNA boosts 2nd row Infecter buyable bases and unlock Atoms.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(1e65),
            effect(){
                let eff = player.e.rna.add(1).max(1).pow(0.5)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",226))+"x"
            },
            canAfford() {
                return player.e.rna.gte(1e65)
            },
            pay() {
                player.e.rna = player.e.rna.sub(1e65)
                player.e.upgg.push(226)
            },
            unlocked() {
                return hasUpgrade("e",225)
            }
        },
        231: {
            title: "Polymeric",
            description: "'Max Buyable' boosts 2nd row buyable bases.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(1e73),
            effect(){
                let exp = player.e.buyables[31].pow(1.7777)
                if (hasUpgrade("e",255)) exp = exp.pow(upgradeEffect("e",255))
                if (hasUpgrade("e",282)) exp = exp.pow(upgradeEffect("e",282))
                if (hasUpgrade("e",351)) exp = exp.pow(upgradeEffect("e",351))
                let eff = tmp.e.buyables[31].effect.pow(exp)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",231))+"x"
            },
            canAfford() {
                return player.e.rna.gte(1e73)
            },
            pay() {
                player.e.rna = player.e.rna.sub(1e73)
                player.e.upgg.push(231)
            },
            unlocked() {
                return hasUpgrade("e",226)
            }
        },
        232: {
            title: "Genetic Information",
            description: "Immunity boosts atom gain and RNA effect.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(1e103),
            effect(){
                let eff = player.e.i.pow(-1).mul(1e3).add(10).max(10).log10().add(10).max(10).log10().pow(1.2)
                return eff
            },
            effect2(){
                let eff = player.e.i.pow(-1).mul(1e3).add(10).max(10).log10().add(10).max(10).log10().pow(0.05)
                return eff
            },
            effectDisplay(){
                return format(tmp.e.upgrades[232].effect)+"x, ^"+format(tmp.e.upgrades[232].effect2)
            },
            canAfford() {
                return player.e.rna.gte(1e103)
            },
            pay() {
                player.e.rna = player.e.rna.sub(1e103)
                player.e.upgg.push(232)
            },
            unlocked() {
                return hasUpgrade("e",231)
            }
        },
        233: {
            title: "Ribosomes",
            description: "Each Atom RNA doubles RNA gain.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(1e113),
            effect(){
                let eff = Decimal.pow(2,player.e.buyables[81].add(player.e.buyables[82]).add(player.e.buyables[83]).add(player.e.buyables[91]).add(player.e.buyables[92]))
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",233))+"x"
            },
            canAfford() {
                return player.e.rna.gte(1e113)
            },
            pay() {
                player.e.rna = player.e.rna.sub(1e113)
                player.e.upgg.push(233)
            },
            unlocked() {
                return hasUpgrade("e",232)
            }
        },
        234: {
            title: "Distant Atoms",
            description: "Atomic RNA makes Distant Cases Boost scaling start later.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(1e148),
            effect(){
                let eff = player.e.at.add(1).max(1)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",234))+"x"
            },
            canAfford() {
                return player.e.rna.gte(1e148)
            },
            pay() {
                player.e.rna = player.e.rna.sub(1e148)
                player.e.upgg.push(234)
            },
            unlocked() {
                return hasUpgrade("e",233)
            }
        },
        235: {
            title: "Atomic Atoms",
            description: "Each Atom RNA multiplies atom gain by 1.075.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(5e152),
            effect(){
                let exp = player.e.buyables[81].add(player.e.buyables[82]).add(player.e.buyables[83]).add(player.e.buyables[91]).add(player.e.buyables[92])
                if (exp.gte(120)) exp = exp.div(120).pow(0.5).mul(120)
                if (exp.gte(11111)) exp = exp.div(11111).pow(0.3).mul(11111)
                let eff = Decimal.pow(1.075,exp)
                return eff
            },
            effectDisplay(){
                let dis = format(upgradeEffect("e",235))+"x"
                let exp = player.e.buyables[81].add(player.e.buyables[82]).add(player.e.buyables[83]).add(player.e.buyables[91]).add(player.e.buyables[92])
                if (exp.gte(120)) dis += " (softcapped)"
                return dis
            },
            canAfford() {
                return player.e.rna.gte(5e152)
            },
            pay() {
                player.e.rna = player.e.rna.sub(5e152)
                player.e.upgg.push(235)
            },
            unlocked() {
                return hasUpgrade("e",234)
            }
        },
        236: {
            title: "Diseased RNA",
            description: "ID boosts RNA gain and add 0.002 to 'Disease Boost' base.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(1e217),
            effect(){
                let exp = decimalTen
                if (hasUpgrade("e",283)) exp = exp.pow(upgradeEffect("e",283))
                let eff = player.e.diseases.add(10).max(10).log10().add(10).max(10).log10().pow(exp)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",236))+"x"
            },
            canAfford() {
                return player.e.rna.gte(1e217)
            },
            pay() {
                player.e.rna = player.e.rna.sub(1e217)
                player.e.upgg.push(236)
            },
            unlocked() {
                return hasUpgrade("e",235)
            }
        },
        241: {
            title: "Atom Boost",
            description: "DCB 2x later, +0.001 to Pro Syn base, Atoms x1.2 per RNA Boost.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(1e265),
            effect(){
                let eff = Decimal.pow(2,player.e.buyables[72])
                return eff
            },
            effect2(){
                let exp = player.e.buyables[72]
                if (exp.gte(320)) exp = exp.div(320).pow(0.5).mul(320)
                if (exp.gte(3200)) exp = exp.div(3200).pow(0.3).mul(3200)
                let eff = Decimal.pow(1.2,exp)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.e.upgrades[241].effect)+"x, "+format(tmp.e.upgrades[241].effect2)+"x"
                let exp = player.e.buyables[72]
                if (exp.gte(320)) dis += " (softcapped)"
                return dis
            },
            canAfford() {
                return player.e.rna.gte(1e265)
            },
            pay() {
                player.e.rna = player.e.rna.sub(1e265)
                player.e.upgg.push(241)
            },
            unlocked() {
                return hasUpgrade("e",236)
            }
        },
        242: {
            title: "Nitrogenous Bases",
            description: "Atomic RNA boosts Atom effects and unlock Molecules.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: Decimal.pow(10,317),
            effect(){
                let eff = player.e.at.add(10).max(10).log10().add(10).max(10).log10().pow(0.25).max(1)
                if (eff.gte(5)) eff = eff.div(5).pow(0.3).mul(5)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",242))
            },
            canAfford() {
                return player.e.rna.gte(Decimal.pow(10,317))
            },
            pay() {
                player.e.rna = player.e.rna.sub(Decimal.pow(10,317))
                player.e.upgg.push(242)
            },
            unlocked() {
                return hasUpgrade("e",241)
            }
        },
        243: {
            title: "Atomic Boost",
            description: "Atomic RNA boosts RNA, Adenine, and Uracil effects.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: Decimal.pow(10,455),
            effect(){
                let eff = player.e.at.add(10).max(10).log10().add(10).max(10).log10().pow(0.2).max(1)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",243))
            },
            canAfford() {
                return player.e.rna.gte(Decimal.pow(10,455))
            },
            pay() {
                player.e.rna = player.e.rna.sub(Decimal.pow(10,455))
                player.e.upgg.push(243)
            },
            unlocked() {
                return hasUpgrade("e",242)
            }
        },
        244: {
            title: "Molecular Achievement",
            description: "AP boosts RNA gain, and unlock 2 Molecules.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: Decimal.pow(10,515),
            effect(){
                let eff = tmp.a.effect.pow(0.1)
                if (hasUpgrade("e",262)) eff = eff.pow(upgradeEffect("e",262))
                if (eff.gte(Decimal.pow(10,1.5e8))) eff = eff.div(Decimal.pow(10,1.5e8)).log10().pow(0.85).pow10().mul(Decimal.pow(10,1.5e8))
                if (eff.gte(Decimal.pow(10,2e10))) eff = eff.log10().div(2).pow(2e9)
                return eff
            },
            effectDisplay(){
                let dis = format(upgradeEffect("e",244))+"x"
                if (upgradeEffect("e",244).gte(Decimal.pow(10,1.5e8))) dis += " (softcapped)"
                return dis
            },
            canAfford() {
                return player.e.rna.gte(Decimal.pow(10,515))
            },
            pay() {
                player.e.rna = player.e.rna.sub(Decimal.pow(10,515))
                player.e.upgg.push(244)
            },
            unlocked() {
                return hasUpgrade("e",243)
            }
        },
        245: {
            title: "Base Pair 1",
            description: "Adenine and Uracil boost each other.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: Decimal.pow(10,770),
            effect(){
                let eff = player.e.ur.add(10).log10().pow(0.05)
                return eff
            },
            effect2(){
                let eff = player.e.ad.add(10).log10().pow(0.05)
                return eff
            },
            effectDisplay(){
                return "AD: ^"+format(tmp.e.upgrades[245].effect)+", UR: ^"+format(tmp.e.upgrades[245].effect2)
            },
            canAfford() {
                return player.e.rna.gte(Decimal.pow(10,770))
            },
            pay() {
                player.e.rna = player.e.rna.sub(Decimal.pow(10,770))
                player.e.upgg.push(245)
            },
            unlocked() {
                return hasUpgrade("e",244)
            }
        },
        246: {
            title: "Base Pair 2",
            description: "Cytosine and Guanine boost each other, and reduce 'Max Buyable' scaling base by 0.5.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: Decimal.pow(10,870),
            effect(){
                let eff = player.e.gu.add(10).log10().pow(0.085)
                return eff
            },
            effect2(){
                let eff = player.e.cy.add(10).log10().pow(0.085)
                return eff
            },
            effectDisplay(){
                return "CY: ^"+format(tmp.e.upgrades[246].effect)+", GU: ^"+format(tmp.e.upgrades[246].effect2)
            },
            canAfford() {
                return player.e.rna.gte(Decimal.pow(10,870))
            },
            pay() {
                player.e.rna = player.e.rna.sub(Decimal.pow(10,870))
                player.e.upgg.push(246)
            },
            unlocked() {
                return hasUpgrade("e",245)
            }
        },
        251: {
            title: "Immune RNA",
            description: "RNA boosts immunity exponent.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal("e1005"),
            effect(){
                let eff = player.e.rna.add(10).log10().pow(0.025)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",251))+"x"
            },
            canAfford() {
                return player.e.rna.gte("e1005")
            },
            pay() {
                player.e.rna = player.e.rna.sub("e1005")
                player.e.upgg.push(251)
            },
            unlocked() {
                return hasUpgrade("e",246)
            }
        },
        252: {
            title: "Immune Molecules",
            description: "Molecules boost immunity exponent.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal("5.678e1234"),
            effect(){
                let eff = player.e.ad.add(player.e.ur).add(player.e.cy).add(player.e.gu).add(10).log10().pow(0.03)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",252))+"x"
            },
            canAfford() {
                return player.e.rna.gte("5.678e1234")
            },
            pay() {
                player.e.rna = player.e.rna.sub("5.678e1234")
                player.e.upgg.push(252)
            },
            unlocked() {
                return hasUpgrade("e",251)
            }
        },
        253: {
            title: "Infected Acids",
            description: "'Amino Acids' infecters is ^1.25 and unlock an Atom.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal("e1950"),
            canAfford() {
                return player.e.rna.gte("e1950")
            },
            pay() {
                player.e.rna = player.e.rna.sub("e1950")
                player.e.upgg.push(253)
            },
            unlocked() {
                return hasUpgrade("e",252)
            }
        },
        254: {
            title: "Phosphate Pair",
            description: "Phosphorus boosts Cytosine and Guanine effects.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal("e3500"),
            effect(){
                let eff = player.e.ph.max(10).log10().pow(0.125)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",254))
            },
            canAfford() {
                return player.e.rna.gte("e3500")
            },
            pay() {
                player.e.rna = player.e.rna.sub("e3500")
                player.e.upgg.push(254)
            },
            unlocked() {
                return hasUpgrade("e",253)
            }
        },
        255: {
            title: "Max Atomic",
            description: "A. RNA boosts 'Polymeric' exp and reduce 'Max B.' sc. base by 1.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: Decimal.pow(10,4100),
            effect(){
                let eff = player.e.at.max(10).log10().max(10).log10().pow(0.6)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",255))
            },
            canAfford() {
                return player.e.rna.gte(Decimal.pow(10,4100))
            },
            pay() {
                player.e.rna = player.e.rna.sub(Decimal.pow(10,4100))
                player.e.upgg.push(255)
            },
            unlocked() {
                return hasUpgrade("e",254)
            }
        },
        256: {
            title: "Infected Atoms",
            description: "II boosts Atom gain and unlock a Molecule.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: Decimal.pow(10,4510),
            effect(){
                let eff = player.e.infections.max(10).log10().pow(0.1).pow10()
                if (eff.gte(Decimal.pow(10,1e9))) eff = eff.log10().mul(10).pow(1e8)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",256))+"x"
            },
            canAfford() {
                return player.e.rna.gte(Decimal.pow(10,4510))
            },
            pay() {
                player.e.rna = player.e.rna.sub(Decimal.pow(10,4510))
                player.e.upgg.push(256)
            },
            unlocked() {
                return hasUpgrade("e",255)
            }
        },
        261: {
            title: "Ribonucleic Atoms",
            description: "RNA boosts Atom gain.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal("e7220"),
            effect(){
                let eff = player.e.rna.max(10).log10().pow(0.1).pow10()
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",261))+"x"
            },
            canAfford() {
                return player.e.rna.gte("e7220")
            },
            pay() {
                player.e.rna = player.e.rna.sub("e7220")
                player.e.upgg.push(261)
            },
            unlocked() {
                return hasUpgrade("e",256)
            }
        },
        262: {
            title: "Phosphate Achievement",
            description: "Ribose-Phosphate (R5P) boosts 'Molecular Achievement'.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal("e9750"),
            effect(){
                let eff = player.e.rna.max(10).log10().pow(0.15)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",262))
            },
            canAfford() {
                return player.e.rna.gte("e9750")
            },
            pay() {
                player.e.rna = player.e.rna.sub("e9750")
                player.e.upgg.push(262)
            },
            unlocked() {
                return hasUpgrade("e",261)
            }
        },
        263: {
            title: "Phosphate Synthesis",
            description: "R5P boosts 'Protein Synthesis' exponent.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: Decimal.pow(10,11500),
            effect(){
                let eff = player.e.rna.max(10).log10().max(10).log10().pow(0.12).sub(1)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",263))
            },
            canAfford() {
                return player.e.rna.gte(Decimal.pow(10,11500))
            },
            pay() {
                player.e.rna = player.e.rna.sub(Decimal.pow(10,11500))
                player.e.upgg.push(263)
            },
            unlocked() {
                return hasUpgrade("e",262)
            }
        },
        264: {
            title: "Atomic Phosphate",
            description: "Atomic RNA boosts R5P effect.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: Decimal.pow(10,13000),
            effect(){
                let eff = player.e.at.max(10).log10().pow(0.07)
                if (eff.gte(1e25)) eff = eff.log10().mul(4).pow(12.5)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",264))
            },
            canAfford() {
                return player.e.rna.gte(Decimal.pow(10,13000))
            },
            pay() {
                player.e.rna = player.e.rna.sub(Decimal.pow(10,13000))
                player.e.upgg.push(264)
            },
            unlocked() {
                return hasUpgrade("e",263)
            }
        },
        265: {
            title: "Infected Phosphate",
            description: "R5P boosts infecter amount in 'Amino Acids' effect.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: Decimal.pow(10,15000),
            effect(){
                let eff = player.e.rp.max(10).log10().max(10).log10().pow(0.3)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",265))
            },
            canAfford() {
                return player.e.rna.gte(Decimal.pow(10,15000))
            },
            pay() {
                player.e.rna = player.e.rna.sub(Decimal.pow(10,15000))
                player.e.upgg.push(265)
            },
            unlocked() {
                return hasUpgrade("e",264)
            }
        },
        266: {
            title: "Molecular RNA",
            description: "RNA boosts At and Mol eff. and gain 100% of molecules per second, and unlock mRNA.",
            currencyDisplayName: "RNA",
            currencyInternalName: "rna",
            currencyLayer: "e",
            cost: new Decimal(Decimal.pow(10,17000)),
            effect(){
                let eff = player.e.rna.add(10).max(10).log10().add(10).max(10).log10().add(10).max(10).log10().pow(0.15)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",266))
            },
            canAfford() {
                return player.e.rna.gte(Decimal.pow(10,17000))
            },
            pay() {
                player.e.rna = player.e.rna.sub(Decimal.pow(10,17000))
                player.e.upgg.push(266)
            },
            unlocked() {
                return hasUpgrade("e",265)
            }
        },
        271: {
            title: "Messenger RNA",
            description: "RNA boosts mRNA gain.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: decimalTen,
            effect(){
                let eff = player.e.rna.max(10).log10().max(10).log10()
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",271))+"x"
            },
            canAfford() {
                return player.e.mrna.gte(10)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(10)
                player.e.upgg.push(271)
            },
            unlocked() {
                return hasUpgrade("e",266)
            }
        },
        272: {
            title: "mRRNA",
            description: "mRNA boosts RNA gain.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(42),
            effect(){
                let eff = player.e.mrna.add(1).max(1).pow(500)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",272))+"x"
            },
            canAfford() {
                return player.e.mrna.gte(42)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(42)
                player.e.upgg.push(272)
            },
            unlocked() {
                return hasUpgrade("e",271)
            }
        },
        273: {
            title: "Immune mRNA",
            description: "mRNA boosts immunity exponent.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(69),
            effect(){
                let eff = player.e.mrna.add(10).max(10).log10().pow(0.2)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",273))+"x"
            },
            canAfford() {
                return player.e.mrna.gte(69)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(69)
                player.e.upgg.push(273)
            },
            unlocked() {
                return hasUpgrade("e",272)
            }
        },
        274: {
            title: "Atomic mRNA",
            description: "Atomic RNA boosts mRNA gain.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(100),
            effect(){
                let eff = player.e.at.add(10).max(10).log10().pow(0.3)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",274))+"x"
            },
            canAfford() {
                return player.e.mrna.gte(100)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(100)
                player.e.upgg.push(274)
            },
            unlocked() {
                return hasUpgrade("e",273)
            }
        },
        275: {
            title: "RNA Boost",
            description: "mRNA boosts RNA effect.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(420),
            effect(){
                let eff = player.e.mrna.add(10).max(10).log10().pow(0.3)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",275))
            },
            canAfford() {
                return player.e.mrna.gte(420)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(420)
                player.e.upgg.push(275)
            },
            unlocked() {
                return hasUpgrade("e",274)
            }
        },
        276: {
            title: "Achievement Boost",
            description: "mRNA boosts AP exponent.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(666),
            effect(){
                let eff = player.e.mrna.add(10).max(10).log10().pow(0.125)
                return eff.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",276))
            },
            canAfford() {
                return player.e.mrna.gte(666)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(666)
                player.e.upgg.push(276)
            },
            unlocked() {
                return hasUpgrade("e",275)
            }
        },
        281: {
            title: "Self Upgrade",
            description: "mRNA boosts itself (boosted by mRNA upgrades).",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(1e3),
            effect(){
                let exp = player.e.upgrades.filter(number => number>270).length
                if (hasUpgrade("e",314)) exp = Decimal.pow(exp,upgradeEffect("e",314))
                let eff = player.e.mrna.add(10).max(10).log10().pow(Decimal.div(exp,3))
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",281))+"x"
            },
            canAfford() {
                return player.e.mrna.gte(1e3)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(1e3)
                player.e.upgg.push(281)
            },
            unlocked() {
                return hasUpgrade("e",276)
            }
        },
        282: {
            title: "PolymRNA",
            description: "mRNA boosts 'Polymeric' exponent.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(5e4),
            effect(){
                let eff = player.e.mrna.add(10).max(10).log10().pow(0.07)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",282))
            },
            canAfford() {
                return player.e.mrna.gte(5e4)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(5e4)
                player.e.upgg.push(282)
            },
            unlocked() {
                return hasUpgrade("e",281)
            }
        },
        283: {
            title: "Diseased mRNA",
            description: "mRNA boosts 'Diseased RNA' exponent.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(1e5),
            effect(){
                let eff = player.e.mrna.add(10).max(10).log10().add(10).max(10).log10().pow(0.8).mul(3)
                return eff.min(7)
            },
            effectDisplay(){
                let dis = "^"+format(upgradeEffect("e",283))
                if (upgradeEffect("e",283).gte(7)) dis += " (hardcapped)"
                return dis
            },
            canAfford() {
                return player.e.mrna.gte(1e5)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(1e5)
                player.e.upgg.push(283)
            },
            unlocked() {
                return hasUpgrade("e",282)
            }
        },
        284: {
            title: "Molecular mRNA",
            description: "mRNA boosts Atom and Molecule effects.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(25e4),
            effect(){
                let eff = player.e.mrna.add(10).max(10).log10().add(10).max(10).log10().pow(0.1)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",284))
            },
            canAfford() {
                return player.e.mrna.gte(25e4)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(25e4)
                player.e.upgg.push(284)
            },
            unlocked() {
                return hasUpgrade("e",283)
            }
        },
        285: {
            title: "mRNA Boost",
            description: "RNA boosts mRNA effect.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(5e5),
            effect(){
                let eff = player.e.rna.add(10).max(10).log10().add(10).max(10).log10().pow(0.5)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",285))
            },
            canAfford() {
                return player.e.mrna.gte(5e5)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(5e5)
                player.e.upgg.push(285)
            },
            unlocked() {
                return hasUpgrade("e",284)
            }
        },
        286: {
            title: "Cased mRNA",
            description: "Cases boosts mRNA gain and imm exp, unlock a buyable.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(25e5),
            effect(){
                let eff = player.points.add(10).max(10).log10().add(10).max(10).log10()
                .add(10).max(10).log10().pow(0.75)
                if (eff.gte(Decimal.pow(10,Decimal.pow(10,25e4)))) eff = eff.log10().log10().div(25e4).pow(0.1).mul(25e4).pow10().pow10()
                return eff
            },
            effect2(){
                let eff = player.points.add(10).max(10).log10().add(10).max(10).log10()
                .add(10).max(10).log10().pow(0.05)
                return eff
            },
            effectDisplay(){
                return format(tmp.e.upgrades[286].effect)+"x, " + format(tmp.e.upgrades[286].effect2)+"x"
            },
            canAfford() {
                return player.e.mrna.gte(25e5)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(25e5)
                player.e.upgg.push(286)
            },
            unlocked() {
                return hasUpgrade("e",285)
            }
        },
        291: {
            title: "Atomic Booster",
            description: "Atomic RNA boosts mRNA effect.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(2e14),
            effect(){
                let eff = player.e.at.add(10).max(10).log10().add(10).max(10).log10().pow(0.5)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",291))
            },
            canAfford() {
                return player.e.mrna.gte(2e14)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(2e14)
                player.e.upgg.push(291)
            },
            unlocked() {
                return hasUpgrade("e",286)
            }
        },
        292: {
            title: "mMNA",
            description: "Add 0.015 to mRNA gain exp per 'mRNA Gain' bought.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(5e16),
            effect(){
                let eff = player.e.buyables[93].mul(0.015)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",292))
            },
            canAfford() {
                return player.e.mrna.gte(5e16)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(5e16)
                player.e.upgg.push(292)
            },
            unlocked() {
                return hasUpgrade("e",291)
            }
        },
        293: {
            title: "Diseaser mRNA",
            description: "Add 0.003 to 'Disease Boost' base  and unlock a buyable.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(2e21),
            canAfford() {
                return player.e.mrna.gte(2e21)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(2e21)
                player.e.upgg.push(293)
            },
            unlocked() {
                return hasUpgrade("e",292)
            }
        },
        294: {
            title: "mRNA Synthesis",
            description: "mRNA adds to 'Protein Synthesis' exp.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(5e30),
            effect(){
                let eff = player.e.mrna.max(10).log10().max(10).log10().pow(1.1)
                if (eff.gte(2.4)) eff = eff.div(2.4).pow(0.3).mul(2.4)
                return eff.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",294))
            },
            canAfford() {
                return player.e.mrna.gte(5e30)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(5e30)
                player.e.upgg.push(294)
            },
            unlocked() {
                return hasUpgrade("e",293)
            }
        },
        295: {
            title: "Self Boostest",
            description: "mRNA boosts 'Self RNA'.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(4e37),
            effect(){
                let eff = player.e.mrna.max(10).log10().max(10).log10().pow(3)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",295))
            },
            canAfford() {
                return player.e.mrna.gte(4e37)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(4e37)
                player.e.upgg.push(295)
            },
            unlocked() {
                return hasUpgrade("e",294)
            }
        },
        296: {
            title: "Maxer Scaling",
            description: "Reduce 'Max Buyable' scaling base by 0.35.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(1e45),
            canAfford() {
                return player.e.mrna.gte(1e45)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(1e45)
                player.e.upgg.push(296)
            },
            unlocked() {
                return hasUpgrade("e",295)
            }
        },
        301: {
            title: "Infected mRNA",
            description: "Infecters boost mRNA gain.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(1e53),
            effect(){
                let inf = player.e.points
                if (hasUpgrade("e",334)) inf = inf.pow(1.1)
                if (inf.gte(Decimal.pow(10,2e5))) inf = inf.log10().div(2e5).pow(0.3).mul(2e5).pow10()
                let eff = Decimal.pow(1.01,inf.sub(20000).max(0))
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",301))+"x"
            },
            canAfford() {
                return player.e.mrna.gte(1e53)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(1e53)
                player.e.upgg.push(301)
            },
            unlocked() {
                return hasUpgrade("e",296)
            }
        },
        302: {
            title: "Cased Boost",
            description: "Cases boost mRNA effect.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(3e75),
            effect(){
                let eff = player.points.max(10).log10().max(10).log10().max(10).log10().pow(0.05)
                if (eff.gte(Decimal.pow(10,1e12))) eff= eff.log10().log10().div(12).pow(0.3).mul(12).pow10().pow10()
                if (eff.gte(Decimal.pow(10,1e20))) eff= eff.log10().log10().div(20).pow(0.2).mul(20).pow10().pow10()
                if (eff.gte(Decimal.pow(10,1e23))) eff= powExp(eff.log10().mul(100).pow(4),2).pow(1e19)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",302))
            },
            canAfford() {
                return player.e.mrna.gte(3e75)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(3e75)
                player.e.upgg.push(302)
            },
            unlocked() {
                return hasUpgrade("e",301)
            }
        },
        303: {
            title: "Upgraded Exp",
            description: "Cases exp is squared per upg per 'mRNA Gain'.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(8.888e88),
            effect(){
                let exp = player.e.upgrades.filter(number => number>270).length
                if (hasUpgrade("e",314)) exp = Decimal.pow(exp,upgradeEffect("e",314).pow(20))
                let eff = Decimal.pow(2,exp).pow(tmp.e.buyables[93].total)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",303))
            },
            canAfford() {
                return player.e.mrna.gte(8.888e88)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(8.888e88)
                player.e.upgg.push(303)
            },
            unlocked() {
                return hasUpgrade("e",302)
            }
        },
        304: {
            title: "Cased RRNA",
            description: "Cases boost RNA effect.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(2e100),
            effect(){
                let eff = player.points.max(10).log10().max(10).log10().max(10).log10().pow(0.03)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",304))
            },
            canAfford() {
                return player.e.mrna.gte(2e100)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(2e100)
                player.e.upgg.push(304)
            },
            unlocked() {
                return hasUpgrade("e",303)
            }
        },
        305: {
            title: "Immuner mRNA",
            description: "Immunity boosts mRNA gain and unlock a buyable.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(35e115),
            effect(){
                let eff = player.e.i.pow(-1).mul(1e3).max(10).log10().pow(0.7)
                if (eff.gte(Decimal.pow(10,1e15))) eff = eff.log10().log10().div(15).pow(0.33).mul(15).pow10().pow10()
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",305))+"x"
            },
            canAfford() {
                return player.e.mrna.gte(35e115)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(35e115)
                player.e.upgg.push(305)
            },
            unlocked() {
                return hasUpgrade("e",304)
            }
        },
        306: {
            title: "Soft RNA",
            description: "RNA 2nd eff softcap is weaker.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(2e176),
            canAfford() {
                return player.e.mrna.gte(2e176)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(2e176)
                player.e.upgg.push(306)
            },
            unlocked() {
                return hasUpgrade("e",305)
            }
        },
        311: {
            title: "mRNA Caser",
            description: "mRNA boosts cases exp<sup>2</sup>, mRNA effect exp is ^1.1.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(1e219),
            effect(){
                let eff = player.e.mrna.max(10).log10().max(10).log10().pow(0.05)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",311))
            },
            canAfford() {
                return player.e.mrna.gte(1e219)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(1e219)
                player.e.upgg.push(311)
            },
            unlocked() {
                return hasUpgrade("e",306)
            }
        },
        312: {
            title: "Cased Atoms",
            description: "Cases boost Atom and Molecule effects.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(5e262),
            effect(){
                let eff = player.points.max(10).log10().max(10).log10().max(10).log10()
                .max(10).log10().pow(0.03)
                if (eff.gte(2.5)) eff = eff.div(2.5).pow(0.3).mul(2.5)
                if (eff.gte(5)) eff = eff.div(5).log10().add(5)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",312))
            },
            canAfford() {
                return player.e.mrna.gte(5e262)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(5e262)
                player.e.upgg.push(312)
            },
            unlocked() {
                return hasUpgrade("e",311)
            }
        },
        313: {
            title: "Cased Immunity",
            description: "Cases boost Immunity exp and unlock a buyable.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: new Decimal(5e291),
            effect(){
                let eff = player.points.max(10).log10().max(10).log10().max(10).log10().pow(0.03)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",313))+"x"
            },
            canAfford() {
                return player.e.mrna.gte(5e291)
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(5e291)
                player.e.upgg.push(313)
            },
            unlocked() {
                return hasUpgrade("e",312)
            }
        },
        314: {
            title: "Cased Upgrades",
            description: "Cases boost Upg amt. in 'Self Upg', 'mRNA Gain', and 'Upg Exp', +0.005 Dis. Boost base.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,435),
            effect(){
                let eff = player.points.max(10).log10().max(10).log10().max(10).log10()
                .max(10).log10().pow(0.02)
                if (eff.gte(22)) eff = eff.div(22).pow(0.2).mul(22)
                if (eff.gte(48)) eff= eff.log10().div(Decimal.log10(48)).pow(0.3).mul(Decimal.log10(48)).pow10()
                if (eff.gte(100)) eff = eff.log10().mul(50)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",314))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,435))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,435))
                player.e.upgg.push(314)
            },
            unlocked() {
                return hasUpgrade("e",313)
            }
        },
        315: {
            title: "cRNA",
            description: "Cases add to mRNA exponent.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,718).mul(3),
            effect(){
                let eff = player.points.max(10).log10().max(10).log10().max(10).log10().pow(0.05)
                if (eff.gte(6e4)) eff = eff.div(6).log10().mul(2).pow(1/3).mul(3e4)
                return eff.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",315))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,718).mul(3))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,718).mul(3))
                player.e.upgg.push(315)
            },
            unlocked() {
                return hasUpgrade("e",314)
            }
        },
        316: {
            title: "Mutation",
            description: "Cases boost mRNA effect exp and unlock MMNA.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,921.699),
            effect(){
                let eff = player.points.max(10).log10().max(10).log10().max(10).log10()
                .max(10).log10().pow(0.1)
                if (eff.gte(1.38)) eff = eff.div(1.38).pow(0.25).mul(1.38)
                if (eff.gte(2.7)) eff = eff.div(2.7).pow(0.1).mul(2.7)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",316))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,921.699))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,921.699))
                player.e.upgg.push(316)
            },
            unlocked() {
                return hasUpgrade("e",315)
            }
        },
        321: {
            title: "Mutated MRNA",
            description: "MMNA adds to mRNA exponent.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,1101).mul(5),
            effect(){
                let eff = player.e.mm.pow(0.7).div(10)
                if (eff.gte(4)) eff = eff.div(4).pow(0.07).mul(4)
                if (eff.gte(1e4)) eff = eff.log10().pow(0.5).mul(5e3)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",321))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,1101).mul(5))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,1101).mul(5))
                player.e.upgg.push(321)
            },
            unlocked() {
                return hasUpgrade("e",316)
            }
        },
        322: {
            title: "Cheaper Mutations",
            description: "Reduce Mutation scaling by 15%.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,1432).mul(7),
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,1432).mul(7))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,1432).mul(7))
                player.e.upgg.push(322)
            },
            unlocked() {
                return hasUpgrade("e",321)
            }
        },
        323: {
            title: "MuRNA",
            description: "mRNA boosts MMNA limit and Cytosine effect.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,1578).mul(2),
            effect(){
                let eff = player.e.mrna.max(10).log10().pow(0.1)
                if (inChallenge("ct",32)) eff = eff.pow(.3).sub(1).div(3).add(1)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",323))+"x, ^"+format(upgradeEffect("e",323).pow(1.6))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,1578).mul(2))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,1578).mul(2))
                player.e.upgg.push(323)
            },
            unlocked() {
                return hasUpgrade("e",322)
            }
        },
        324: {
            title: "Mutated Scaling",
            description: "mRNA reduces Mutation scaling and boosts MMNA gain, shift buys 10.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,1948).mul(4),
            effect(){
                let eff = player.e.mrna.max(10).log10().max(10).log10().pow(0.151)
                return eff
            },
            effect2(){
                let eff = player.e.mrna.max(10).log10().max(10).log10()
                return eff
            },
            effectDisplay(){
                return "/"+format(tmp.e.upgrades[324].effect)+", x"+format(tmp.e.upgrades[324].effect2)
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,1948).mul(4))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,1948).mul(4))
                player.e.upgg.push(324)
            },
            unlocked() {
                return hasUpgrade("e",323)
            }
        },
        325: {
            title: "Scaled mRNA",
            description: "mRNA boosts cases exp<sup>2</sup>, RNA makes 20,000 infecter scaling start later.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,2485.699),
            effect(){
                let eff = player.e.mrna.max(10).log10().max(10).log10().pow(0.04)
                return eff
            },
            effect2(){
                let eff = player.e.rna.max(10).log10().max(10).log10().pow(2).mul(20)
                return eff.floor()
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",325))+", +"+formatWhole(tmp.e.upgrades[325].effect2)
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,2485.699))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,2485.699))
                player.e.upgg.push(325)
            },
            unlocked() {
                return hasUpgrade("e",324)
            }
        },
        326: {
            title: "Cased MMNA",
            description: "Cases boost MMNA limit and effect, unlock 3 MMNA buyables.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,3065).mul(6),
            effect(){
                let eff = player.points.max(10).log10().max(10).log10()
                .max(10).log10().max(10).log10().pow(0.5)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",326))+"x, ^"+format(upgradeEffect("e",326).pow(2.5))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,3065).mul(6))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,3065).mul(6))
                player.e.upgg.push(326)
            },
            unlocked() {
                return hasUpgrade("e",325)
            }
        },
        331: {
            title: "RMNA",
            description: "RNA boost MMNA effect.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,3751),
            effect(){
                let eff = player.e.rna.max(10).log10().max(10).log10().pow(0.3)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",331))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,3751))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,3751))
                player.e.upgg.push(331)
            },
            unlocked() {
                return hasUpgrade("e",326)
            }
        },
        332: {
            title: "BULCKED Mutations",
            description: "mRNA boost Reward 1 and 2, shift buys 100x more.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,4212).mul(3),
            effect(){
                let eff = player.e.mrna.max(10).log10().max(10).log10().pow(0.3)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",332))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,4212).mul(3))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,4212).mul(3))
                player.e.upgg.push(332)
            },
            unlocked() {
                return hasUpgrade("e",331)
            }
        },
        333: {
            title: "CHEAPENER",
            description: "Mutations reduce 'MMNA Virus' and Mutation scaling, mRNA effect exp^1.125.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,4670).mul(1.5),
            effect(){
                let eff = player.e.mu.add(2).pow(0.5)
                return eff
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",333))+", /"+format(upgradeEffect("e",333).pow(0.07))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,4670).mul(1.5))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,4670).mul(1.5))
                player.e.upgg.push(333)
            },
            unlocked() {
                return hasUpgrade("e",332)
            }
        },
        334: {
            title: "Infected MMNA",
            description: "A. RNA boosts Mutation chance and MMNA lim, base MMNA gain^1.25, inf amt in 'Infected mRNA' ^1.1.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,5613).mul(2),
            effect(){
                let eff = player.e.at.max(10).log10().pow(0.2)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",334))+"x"
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,5613).mul(2))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,5613).mul(2))
                player.e.upgg.push(334)
            },
            unlocked() {
                return hasUpgrade("e",333)
            }
        },
        335: {
            title: "Atomic Chance",
            description: "A. RNA increases 'Chance Boost' base.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,6937).mul(6),
            effect(){
                let eff = player.e.at.max(10).log10().max(10).log10().div(7)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",335))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,6937).mul(6))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,6937).mul(6))
                player.e.upgg.push(335)
            },
            unlocked() {
                return hasUpgrade("e",334)
            }
        },
        336: {
            title: "Atomic Mutations",
            description: "<span style='font-size:9px;'>A. RNA increases 'MMNA Boost' base,'RNA Booster' soft. start +2, MMNA eff^1.25, Shift buys 10x.</span>",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,7940).mul(2),
            effect(){
                let eff = player.e.at.max(10).log10().max(10).log10().div(30)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",336))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,7940).mul(2))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,7940).mul(2))
                player.e.upgg.push(336)
            },
            unlocked() {
                return hasUpgrade("e",335)
            }
        },
        341: {
            title: "Alteration",
            description: "Infection power boosts mRNA gain.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,11346.6021),
            effect(){
                let eff = player.e.p.max(10).log10().pow(player.e.p.max(10).log10().max(10).log10().pow(0.5))
                if (eff.gte(Decimal.pow(10,5e7))) eff = eff.log10().div(5e7).pow(0.2).mul(5e7).pow10()
                if (eff.gte(Decimal.pow(10,Decimal.pow(10,1e5)))) eff = eff.log10().log10().log10().div(5).pow(0.2).mul(5).pow10().pow10().pow10()
                return eff
            },
            effectDisplay(){
                let dis = format(upgradeEffect("e",341))+"x"
                if (upgradeEffect("e",341).gte(Decimal.pow(10,5e7))) dis += " (softcapped)"
                return dis
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,11346.6021))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,11346.6021))
                player.e.upgg.push(341)
            },
            unlocked() {
                return hasUpgrade("e",336)
            }
        },
        342: {
            title: "Replication Errors",
            description: "Infection power boosts Reward 2 and MMNA gain is ^1.2.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,12999),
            effect(){
                let eff = player.e.p.max(10).log10().max(10).log10().pow(0.125)
                if (eff.gte(1e7)) eff = eff.log10().add(3).pow(7)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",342))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,12999))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,12999))
                player.e.upgg.push(342)
            },
            unlocked() {
                return hasUpgrade("e",341)
            }
        },
        343: {
            title: "Immune Mutations",
            description: "Immunity boosts Reward 3 and 'mRNA Gain' softcap starts 50 later.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,14098),
            effect(){
                let eff = player.e.i.pow(-1).mul(1e3).max(10).log10().max(10).log10().pow(0.25)
                if (eff.gte(Decimal.pow(10,13e5))) eff = eff.log10().div(13).pow(26e4)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",343))+"x"
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,14098))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,14098))
                player.e.upgg.push(343)
            },
            unlocked() {
                return hasUpgrade("e",342)
            }
        },
        344: {
            title: "Sequence Change ",
            description: "Immunity adds to 'mRNA Booster' base.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,15741).mul(4),
            effect(){
                let eff = player.e.i.pow(-1).mul(1e3).max(10).log10().max(10).log10().pow(0.05).div(1e3)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",344))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,15741).mul(4))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,15741).mul(4))
                player.e.upgg.push(344)
            },
            unlocked() {
                return hasUpgrade("e",343)
            }
        },
        345: {
            title: "Genetic Recombination",
            description: "mRNA reduces 'Max Buyable' scaling.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,16974).mul(2),
            effect(){
                let eff = player.e.mrna.max(10).log10().max(10).log10().pow(0.25)
                return eff
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",345))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,16974).mul(2))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,16974).mul(2))
                player.e.upgg.push(345)
            },
            unlocked() {
                return hasUpgrade("e",344)
            }
        },
        346: {
            title: "Spontaneous Mutations",
            description: "mRNA adds to 'Mutation Scaling' base and unlock a Reward.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,17767).mul(5),
            effect(){
                let eff = player.e.mrna.max(10).log10().max(10).log10().pow(0.005)
                return eff.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",346))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,17767).mul(5))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,17767).mul(5))
                player.e.upgg.push(346)
            },
            unlocked() {
                return hasUpgrade("e",345)
            }
        },
        351: {
            title: "Error-prone Replication",
            description: "MMNA boosts 'Polymeric' exp and 'MMNA Boost' base.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,18823).mul(5),
            effect(){
                let eff = player.e.mm.max(10).log10().pow(0.2)
                return eff
            },
            effect2(){
                let eff = player.e.mm.max(10).log10().add(10).max(10).log10().pow(0.15)
                return eff.sub(1)
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",351))+", +"+format(tmp.e.upgrades[351].effect2)
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,18823).mul(5))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,18823).mul(5))
                player.e.upgg.push(351)
            },
            unlocked() {
                return hasUpgrade("e",346)
            }
        },
        352: {
            title: "Repair Errors",
            description: "Infection power boosts MMNA effect and 'Chance Boost' base.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,20229).mul(5),
            effect(){
                let eff = player.e.p.max(10).log10().max(10).log10().pow(1/30)
                if (inChallenge("ct",32)) {
                    if (eff.gte(1e43)) eff = eff.log10().div(43).pow(0.5).mul(43).pow10()
                    if (eff.gte(1e48)) eff = eff.log10().div(48).pow(0.5).mul(48).pow10()
                }
                return eff
            },
            effect2(){
                let eff = player.e.p.max(10).log10().max(10).log10().pow(0.15)
                return eff.sub(1)
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",352))+", +"+format(tmp.e.upgrades[352].effect2)
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,20229).mul(5))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,20229).mul(5))
                player.e.upgg.push(352)
            },
            unlocked() {
                return hasUpgrade("e",351)
            }
        },
        353: {
            title: "Induced Mutations",
            description: "Add 0.05 to 'Chance Boost' base per 'mRNA Booster' bought, MMNA gain ^1.1.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,24079).mul(3),
            effect(){
                let eff = player.e.buyables[101].mul(0.05)
                return eff
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",353))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,24079).mul(3))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,24079).mul(3))
                player.e.upgg.push(353)
            },
            unlocked() {
                return hasUpgrade("e",352)
            }
        },
        354: {
            title: "Mutagens",
            description: "Cases reduce 'Chance Boost' scaling.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,27530).mul(1.5),
            effect(){
                let eff = player.points.max(10).log10().max(10).log10().max(10).log10()
                .max(10).log10().pow(0.1)
                return eff
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",354))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,27530).mul(1.5))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,27530).mul(1.5))
                player.e.upgg.push(354)
            },
            unlocked() {
                return hasUpgrade("e",353)
            }
        },
        355: {
            title: "Mutant Cases",
            description: "Cases boost Reward 2.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,32390).mul(3),
            effect(){
                let eff = player.points.max(10).log10().max(10).log10().max(10).log10()
                .max(10).log10().pow(0.2)
                if (eff.gte(1e3)) eff = eff.log10().add(7).mul(100)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",355))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,32390).mul(3))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,32390).mul(3))
                player.e.upgg.push(355)
            },
            unlocked() {
                return hasUpgrade("e",354)
            }
        },
        356: {
            title: "Mutant Sequences",
            description: "Cases boost Reward 5 and divide Mutation chance and 'MMNA Boost' scaling by 1.1.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,35250),
            effect(){
                let eff = player.points.max(10).log10().max(10).log10().max(10).log10()
                .max(10).log10().pow(0.5)
                if (eff.gte(10)) eff = eff.log10().mul(10)
                return eff
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",356))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,35250))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,35250))
                player.e.upgg.push(356)
            },
            unlocked() {
                return hasUpgrade("e",355)
            }
        },
        361: {
            title: "Tautomerism",
            description: "Mutations reduce MMNA buyables exc. 'Mutation Scaling' and chance scaling, shift buys 10,000x.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,38600),
            effect(){
                let eff = player.e.mu.add(1).pow(0.04)
                return eff
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",361))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,38600))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,38600))
                player.e.upgg.push(361)
            },
            unlocked() {
                return hasUpgrade("e",356)
            }
        },
        362: {
            title: "Depurination",
            description: "MMNA reduces Chance scaling.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,67700),
            effect(){
                let eff = player.e.mm.max(10).log10().pow(0.04)
                return eff
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",362))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,67700))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,67700))
                player.e.upgg.push(362)
            },
            unlocked() {
                return hasUpgrade("e",361)
            }
        },
        363: {
            title: "Deamination",
            description: "MMNA boosts imm exp, attempt amt, and 'Chance Boost' base.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,74300),
            effect(){
                let eff = player.e.mm.max(10).log10().pow(2)
                return eff
            },
            effect2(){
                let eff = player.e.mm.max(10).log10().pow(0.5)
                return eff
            },
            effectDisplay(){
                return format(upgradeEffect("e",363))+"x, +"+format(tmp.e.upgrades[363].effect2)
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,74300))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,74300))
                player.e.upgg.push(363)
            },
            unlocked() {
                return hasUpgrade("e",362)
            }
        },
        364: {
            title: "Strand Mispairing",
            description: "'Chance Boost' reduces Chance scaling.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            cost: Decimal.pow(10,142000),
            effect(){
                let eff = Decimal.pow(1.02,player.e.buyables[105].pow(0.5))
                return eff
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",364))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,142000))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,142000))
                player.e.upgg.push(364)
            },
            unlocked() {
                return hasUpgrade("e",363)
            }
        },
        365: { //Nayeon, Jeongyeon, Momo, Sana, Jihyo, Mina, Dahyun, Chaeyoung, Tzuyu
            title: "Replication Slippage",
            description: "Immunity adds to 'Mutation Scaling' base.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,185500),
            effect(){
                let Nayeon = player.e.i.pow(-1).mul(1e3).max(10).log10().max(10).log10()
                .max(10).log10().pow(0.2).div(300)
                return Nayeon
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",365))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,185500))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,185500))
                player.e.upgg.push(365)
            },
            unlocked() {
                return hasUpgrade("e",364)
            }
        },
        366: {
            title: "Hydroxylamine",
            description: "MMNA boosts cases exp<sup>2</sup> and Immunity exp.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,306750),
            effect(){
                let Jeongyeon = player.e.mm.max(10).log10().max(10).log10().pow(0.25)
                return Jeongyeon
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",366))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,306750))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,306750))
                player.e.upgg.push(366)
            },
            unlocked() {
                return hasUpgrade("e",365)
            }
        },
        371: {
            title: "Base Analogs",
            description: "Mutations boost Immunity exp and MMNA effect.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,360000),
            effect(){
                let Momo = player.e.mu.max(10).log10().pow(0.15)
                return Momo
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",371))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,360000))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,360000))
                player.e.upgg.push(371)
            },
            unlocked() {
                return hasUpgrade("e",366)
            }
        },
        372: {
            title: "Alkylating Agents",
            description: "Mutations make 'RNA Booster' softcap later and Chance scaling/1.05.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,393393).mul(3.933),
            effect(){
                let Sana = player.e.mu.div(12)
                return Sana.floor()
            },
            effectDisplay(){
                return "+"+formatWhole(upgradeEffect("e",372))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,393393).mul(3.933))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,393393).mul(3.933))
                player.e.upgg.push(372)
            },
            unlocked() {
                return hasUpgrade("e",371)
            }
        },
        373: {
            title: "DNA Adducts",
            description: "IP reduces Mutation(^2), Chance, 'Max Buyable', 'Chance Boost' scaling.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,420420).mul(4.2),
            effect(){
                let Jihyo = player.e.p.max(10).log10().max(10).log10().max(10).log10().pow(0.075)
                return Jihyo
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",373))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,420420).mul(4.2))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,420420).mul(4.2))
                player.e.upgg.push(373)
            },
            unlocked() {
                return hasUpgrade("e",372)
            }
        },
        374: {
            title: "DNA Crosslinkers",
            description: "'Mutation Scaling' boosts 'Chance Boost base' based on Mutations.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,453453).mul(4.53),
            effect(){
                let exp = player.e.mu.pow(0.1).div(2)
                let Mina = tmp.e.buyables[103].effect.pow(exp)
                return Mina
            },
            effectDisplay(){
                return format(upgradeEffect("e",374))+"x"
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,453453).mul(4.53))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,453453).mul(4.53))
                player.e.upgg.push(374)
            },
            unlocked() {
                return hasUpgrade("e",373)
            }
        },
        375: {
            title: "Oxidative Damage",
            description: "RNA boosts Reward 2 and MMNA effect, 'Immunity Boost' softcap is weaker.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,613000),
            effect(){
                let Dahyun = player.e.rna.max(10).log10().max(10).log10().pow(0.15)
                return Dahyun
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",375))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,613000))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,613000))
                player.e.upgg.push(375)
            },
            unlocked() {
                return hasUpgrade("e",374)
            }
        },
        376: {
            title: "Ionizing Radiation",
            description: "<span style='font-size:9px'>RNA reduces 'Mutation Scaling', 'Chance Boost' scaling, Corona Rewards are 50% stronger.</span>",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,688000),
            effect(){
                let Chaeyoung = player.e.rna.max(10).log10().max(10).log10().pow(0.075)
                return Chaeyoung
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",376))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,688000))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,688000))
                player.e.upgg.push(376)
            },
            unlocked() {
                return hasUpgrade("e",375)
            }
        },
        381: {
            title: "Chromosome Abnormality",
            description: "<span style='font-size:9px'>ID adds to 'Mutation Scaling' base and it affects chance scaling at reduced rate, Reward 5 ^1.2.</span>",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,868000),
            effect(){
                let Tzuyu = player.e.diseases.max(10).log10().max(10).log10().pow(0.03).div(100)
                if (Tzuyu.gte(0.15)) Tzuyu = Tzuyu.div(0.15).pow(0.1).mul(0.15)
                if (Tzuyu.gte(0.16)) Tzuyu = Tzuyu.div(0.016).log10().pow(0.1).mul(0.16)
                return Tzuyu
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",381))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,868000))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,868000))
                player.e.upgg.push(381)
            },
            unlocked() {
                return hasUpgrade("e",376)
            }
        },
        382: {
            title: "Chromosomal Rearrangement",
            description: "<span style='font-size:9px'>ID reduces 'MMNA Virus' and 'Mut Scaling', 'Dis Boost' base +0.005, Shift buys 1e12x, Imm exp^1.1.</span>",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,1093000),
            effect(){
                let Nayeon = player.e.diseases.max(10).log10().max(10).log10().max(10).log10().pow(0.07)
                return Nayeon
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",382))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,1093000))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,1093000))
                player.e.upgg.push(382)
            },
            unlocked() {
                return hasUpgrade("e",381)
            }
        },
        383: {
            title: "Chromosomal Translocation",
            description: "<span style='font-size:9px'>ID reduces mut(^1.65) and chance scaling, and boost att. amt, Imm exp^1.05.</span>",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,1710000),
            effect(){
                let Jeongyeon = player.e.diseases.max(10).log10().max(10).log10().max(10).log10().pow(1/12)
                return Jeongyeon
            },
            effect2(){
                let Jeongyeon = player.e.diseases.max(10).log10().max(10).log10()
                return Jeongyeon
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",383))+", "+format(tmp.e.upgrades[383].effect2)+"x"
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,1710000))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,1710000))
                player.e.upgg.push(383)
            },
            unlocked() {
                return hasUpgrade("e",382)
            }
        },
        384: {
            title: "Chromosomal Inversion",
            description: "MMNA makes 'mRNA Gain' softcap start later, base MMNA gain^1.25.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,2160000),
            effect(){
                let Momo = player.e.mm.max(10).log10().pow(1.5)
                return Momo.floor()
            },
            effectDisplay(){
                return "+"+formatWhole(upgradeEffect("e",384))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,2160000))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,2160000))
                player.e.upgg.push(384)
            },
            unlocked() {
                return hasUpgrade("e",383)
            }
        },
        385: {
            title: "Chromosomal Crossover",
            description: "MMNA boosts Reward 1, MMNA gain and Imm exp^1.05.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,3210000),
            effect(){
                let Sana = player.e.mm.max(10).log10().max(10).log10().pow(0.7)
                if (Sana.gte(1.9)) Sana = Sana.div(1.9).pow(0.3).mul(1.9)
                return Sana
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",385))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,3210000))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,3210000))
                player.e.upgg.push(385)
            },
            unlocked() {
                return hasUpgrade("e",384)
            }
        },
        386: {
            title: "Interstitial Deletions",
            description: "<span style='font-size:9px'>Mutations boost Imm exp and MMNA eff, Mut sc/1.5, Ch sc/1.025, +5 'RB' sc start, 'CB' base x2.</span>",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,3790000),
            effect(){
                let Jihyo = player.e.mu.add(1).pow(0.025)
                return Jihyo
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",386))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,3790000))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,3790000))
                player.e.upgg.push(386)
            },
            unlocked() {
                return hasUpgrade("e",385)
            }
        },
        391: {
            title: "Soft mRNA",
            description: "mRNA makes mRNA buyables sc. weaker, Imm exp and upg amt in 'mRNA Gain'^1.1.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,6600000),
            effect(){
                let Mina = player.e.mrna.max(10).log10().max(10).log10().pow(0.05)
                return Mina
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",391))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,6600000))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,6600000))
                player.e.upgg.push(391)
            },
            unlocked() {
                return hasUpgrade("e",386)
            }
        },
        392: {
            title: "Soft MMNA",
            description: "<span style='font-size:9px'>MMNA makes mRNA buyables sc. weaker, Chance sc/1.075, Imm exp^1.15, MMNA gain^1.1, eff exp^1.01.<span>",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,12600000),
            effect(){
                let Dahyun = player.e.mm.max(10).log10().max(10).log10().pow(0.15)
                return Dahyun
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",392))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,12600000))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,12600000))
                player.e.upgg.push(392)
            },
            unlocked() {
                return hasUpgrade("e",391)
            }
        },
        393: {
            title: "<span style='font-size:10px'><b>Maxed Boosters</b></span>",
            description: "<span style='font-size:9px'>Each 'Max Bb' adds 0.001 to 'MMNA Boost' and 1e-4 to 'Mut Sc' base, C Mut sc /1.2, MMNA eff exp^1.02</span>",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,16600000),
            effect(){
                let Chaeyoung = player.e.buyables[31].div(1e3)
                return Chaeyoung
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",393))+", +"+format(upgradeEffect("e",393).div(10))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,16600000))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,16600000))
                player.e.upgg.push(393)
            },
            unlocked() {
                return hasUpgrade("e",392)
            }
        },
        394: {
            title: "Mutated Boosters",
            description: "Mutations add to 'mRNA Booster' base, Imm exp^1.1.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,21050000),
            effect(){
                let Tzuyu = player.e.mu.pow(0.5).div(3e3)
                return Tzuyu
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",394))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,21050000))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,21050000))
                player.e.upgg.push(394)
            },
            unlocked() {
                return hasUpgrade("e",393)
            }
        },
        395: {
            title: "Mutatest Boostest",
            description: "Mutations add to 'mRNA Booster' 2nd base, Imm exp<sup>2</sup>^1.02.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,30320000),
            effect(){
                let Nayeon = player.e.mu.div(10)
                return Nayeon
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",395))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,30320000))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,30320000))
                player.e.upgg.push(395)
            },
            unlocked() {
                return hasUpgrade("e",394)
            }
        },
        396: {
            title: "Corona Boost",
            description: "MMNA boosts Cor Reward 2, unlock a Reward, 'Imm Boost' sc is weaker, Chance sc/1.05.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,41000000),
            effect(){
                let Jeongyeon = player.e.mm.max(10).log10().max(10).log10().pow(1.5)
                return Jeongyeon
            },
            effectDisplay(){
                return format(upgradeEffect("e",396))+"x"
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,41000000))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,41000000))
                player.e.upgg.push(396)
            },
            unlocked() {
                return hasUpgrade("e",395)
            }
        },
        401: {
            title: "Cheap Coronas",
            description: "MMNA reduces Corona Mutation scaling, MMNA gain^1.15.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,71250000),
            effect(){
                let Momo = player.e.mm.max(10).log10().max(10).log10().pow(0.12)
                return Momo
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",401))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,71250000))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,71250000))
                player.e.upgg.push(401)
            },
            unlocked() {
                return hasUpgrade("e",396)
            }
        },
        402: {
            title: "Mutanter",
            description: "Mutations boost Imm exp, Mutations are 1.3x stronger.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,1239e5),
            effect(){
                let Sana = player.e.mu.pow(0.5).div(100).add(1)
                return Sana
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("e",402))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,1239e5))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,1239e5))
                player.e.upgg.push(402)
            },
            unlocked() {
                return hasUpgrade("e",401)
            }
        },
        403: {
            title: "Boosterona",
            description: "<span style='font-size:9px'>mRNA adds to 'mRNA Booster' and 'MMNA Boost' base, +1 eff Corona Mutation, unlock CRNA</span>.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,2115e5),
            effect(){
                let Jihyo = player.e.mrna.max(10).log10().max(10).log10().pow(0.3).div(500)
                return Jihyo
            },
            effect2(){
                let Mina = player.e.mrna.max(10).log10().max(10).log10().pow(0.9).div(40)
                return Mina
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",403))+", +"+format(tmp.e.upgrades[403].effect2)
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,2115e5))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,2115e5))
                player.e.upgg.push(403)
            },
            unlocked() {
                return hasUpgrade("e",402)
            }
        },
        404: {
            title: "CR Booster",
            description: "<span style='font-size:9px'>CRNA adds to 'mRNA Booster' base, Reward 2 and Imm exp<sup>2</sup>^1.03, C Mut sc/1.1, unlock a buyable</span>.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,5520e5),
            effect(){
                let Dahyun = powExp(player.e.crna.add(10).max(10),0.2).div(2500)
                return Dahyun
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",404))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,5520e5))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,5520e5))
                player.e.upgg.push(404)
            },
            unlocked() {
                return hasUpgrade("e",403)
            }
        },
        405: {
            title: "Cooster",
            description: "<span style='font-size:9px'>CRNA adds to 'mRNA Booster' 2nd base, upg amt in 'mRNA Gain' ^1.25, C Mut mRNA cost scaling/1.05</span>.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,1300e6),
            effect(){
                let Chaeyoung = powExp(player.e.crna.add(10).max(10),1/6).mul(3)
                if (Chaeyoung.gte(Decimal.pow(10,18e4))) Chaeyoung=Chaeyoung.log10().div(18e4).pow(0.1).mul(18e4).pow10()
                if (Chaeyoung.gte(Decimal.pow(10,1e14))) Chaeyoung=Chaeyoung.log10().div(1e4).pow(1e13)
                return Chaeyoung
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",405))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,1300e6))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,1300e6))
                player.e.upgg.push(405)
            },
            unlocked() {
                return hasUpgrade("e",404)
            }
        },
        406: {
            title: "Softerona",
            description: "<span style='font-size:9px'>CRNA boosts Corona Reward 2, RNA effect softcap is weaker, Imm exp^1.2, unlock a buyable, +0.1 CRNA gain exp, /1.1 CM mRNA scaling</span>.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,1940e6),
            effect(){
                let Tzuyu = powExp(player.e.crna.add(10).max(10),0.1).pow(0.2)
                if (Tzuyu.gte(Decimal.pow(10,9e5))) Tzuyu = Tzuyu.log10().div(9).pow(18e4)
                return Tzuyu.min(tet10(10))
            },
            effectDisplay(){
                return format(upgradeEffect("e",406))+"x"
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,1940e6))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,1940e6))
                player.e.upgg.push(406)
            },
            unlocked() {
                return hasUpgrade("e",405)
            }
        },
        411: {
            title: "Corona Corona",
            description: "CRNA adds effective Corona Mutations, +0.15 CRNA gain exp.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,99e8),
            effect(){
                let Nayeon = player.e.crna.max(10).log10().pow(0.7)
                if (Nayeon.gte(3e3)) Nayeon = Nayeon.div(3).log10().mul(1e3)
                return Nayeon.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",411))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,99e8))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,99e8))
                player.e.upgg.push(411)
            },
            unlocked() {
                return hasUpgrade("e",406)
            }
        },
        412: {
            title: "COMMNA Chance",
            description: "MMNA adds effective Corona Mutations, Chance scaling^0.75, unlock a buyable.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,186e8),
            effect(){
                let Jeongyeon = player.e.mm.max(10).log10().max(10).log10().pow(0.7)
                return Jeongyeon.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",412))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,186e8))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,186e8))
                player.e.upgg.push(412)
            },
            unlocked() {
                return hasUpgrade("e",411)
            }
        },
        413: {
            title: "Corona Scaling",
            description: "CRNA reduces 10 VN chance scaling, CRNA affects att amt, CRNA gain log -0.01.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,324e8),
            effect(){
                let Momo = player.e.crna.max(10).log10().pow(0.09)
                return Momo
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",413))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,324e8))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,324e8))
                player.e.upgg.push(413)
            },
            unlocked() {
                return hasUpgrade("e",412)
            }
        },
        414: {
            title: "mCNA",
            description: "mRNA adds to CRNA exponent, Reward 2 exp^1.02, CRNA gain log -0.01.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,500e8),
            effect(){
                let Sana = player.e.mrna.max(10).log10().max(10).log10().pow(0.05)
                return Sana.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",414))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,500e8))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,500e8))
                player.e.upgg.push(414)
            },
            unlocked() {
                return hasUpgrade("e",413)
            }
        },
        415: {
            title: "Softerer mRNA",
            description: "<span style='font-size:9px'>MMNA limit makes mRNA buyables softcap weaker, 10 VN chance scaling/2, CRNA gain log -0.03</span>.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,713e8),
            effect(){
                let Jihyo = tmp.e.mmlim.max(10).log10().max(10).log10().pow(0.07)
                return Jihyo
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",415))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,713e8))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,713e8))
                player.e.upgg.push(415)
            },
            unlocked() {
                return hasUpgrade("e",414)
            }
        },
        416: {
            title: "CCNA",
            description: "<span style='font-size:9px'>MMNA limit adds to CRNA exponent, C Reward 3 ^3, MMNA lim^1.2, unlock a buyable</span>.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,1405e8),
            effect(){
                let Mina = tmp.e.mmlim.max(10).log10().max(10).log10().pow(0.11)
                return Mina.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",416))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,1405e8))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,1405e8))
                player.e.upgg.push(416)
            },
            unlocked() {
                return hasUpgrade("e",415)
            }
        },
        421: {
            title: "Logged MMNA",
            description: "<span style='font-size:9px'>MMNA limit reduces CRNA log, 10 VN ch sc/3, imm exp<sup>2</sup>^1.02, C Reward 3 ^2</span>.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,449e9),
            effect(){
                let Dahyun = tmp.e.mmlim.max(10).log10().max(10).log10().pow(0.01)
                return Dahyun.sub(1).min(0.05)
            },
            effectDisplay(){
                return "-"+format(upgradeEffect("e",421))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,449e9))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,449e9))
                player.e.upgg.push(421)
            },
            unlocked() {
                return hasUpgrade("e",416)
            }
        },
        422: {
            title: "Scaled Corona",
            description: "<span style='font-size:9px'>MMNA limit reduces 10 VN ch sc, Chance sc^0.8, C Mut mRNA sc/1.05, MMNA sc/1.2, unlock a buyable</span>.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,2123e9),
            effect(){
                let Chaeyoung = tmp.e.mmlim.max(10).log10().max(10).log10().pow(0.4)
                return Chaeyoung
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",422))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,2123e9))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,2123e9))
                player.e.upgg.push(422)
            },
            unlocked() {
                return hasUpgrade("e",421)
            }
        },
        423: {
            title: "Mutated Corona",
            description: "<span style='font-size:9px'>MMNA limit reduces MMNA cost scaling, Chance sc^0.8, 'mRNA Booster' base x1.2, 2nd base^1.3, +0.2 CRNA exp</span>.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,2563e9),
            effect(){
                let Tzuyu = tmp.e.mmlim.max(10).log10().max(10).log10().pow(0.04)
                return Tzuyu
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("e",423))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,2563e9))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,2563e9))
                player.e.upgg.push(423)
            },
            unlocked() {
                return hasUpgrade("e",422)
            }
        },
        424: {
            title: "CRNA Infecter",
            description: "<span style='font-size:9px'>Infecters add to CRNA exp, Mut and ch sc^0.8, 5 and 10 VN sc/1.05, MMNA limit^1.2, -0.02 CRNA log</span>.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,3689e9),
            effect(){
                let Nayeon = player.e.points.max(10).log10().pow(0.1)
                return Nayeon.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("e",424))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,3689e9))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,3689e9))
                player.e.upgg.push(424)
            },
            unlocked() {
                return hasUpgrade("e",423)
            }
        },
        425: {
            title: "Logged Infecters",
            description: "<span style='font-size:9px'>Infecters reduce CRNA log, MMNA sc/1.02, 5 and 10 VN sc/1.05, +0.1 CRNA exp</span>.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,543e10),
            effect(){
                let Jeongyeon = player.e.points.max(10).log10().pow(0.01)
                return Jeongyeon.sub(1).min(0.05)
            },
            effectDisplay(){
                return "-"+format(upgradeEffect("e",425))
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,543e10))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,543e10))
                player.e.upgg.push(425)
            },
            unlocked() {
                return hasUpgrade("e",424)
            }
        },
        426: {
            title: "After Infecter",
            description: "<span style='font-size:9px'>Infecters boost CRNA gain after log and MMNA limit, 5 VN sc/1.02, +0.2 CRNA exp, -0.04 CRNA log</span>.",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "in",
            cost: Decimal.pow(10,6185e9),
            effect(){
                let Momo = player.e.points.add(1).pow(0.15)
                return Momo
            },
            effect2(){
                let Sana = player.e.points.max(10).log10().pow(0.0964)
                return Sana
            },
            effectDisplay(){
                return format(upgradeEffect("e",426))+"x, ^"+format(tmp.e.upgrades[426].effect2)
            },
            canAfford() {
                return player.e.mrna.gte(Decimal.pow(10,6185e9))
            },
            pay() {
                player.e.mrna = player.e.mrna.sub(Decimal.pow(10,6185e9))
                player.e.upgg.push(426)
            },
            unlocked() {
                return hasUpgrade("e",425)
            }
        },
    },
    challenges: { 
        rows: 2,
        cols: 2,
        11: {
            name: "Boostless",
            currencyDisplayName: "cases per second",
            completionLimit: 100000,
            challengeDescription: function() {
                let c11 = "'Cases Boost' is useless."
                if (inChallenge("e", 11)) c11 = c11 + " (In Challenge)"
                if (player.e.c11.gte(1e6)) c11 = c11 + " (Completed)"
                return c11
            },
            canComplete() {
                return getPointGen().gte("ee1664750")
            },
            onStart(testInput=false) { 
                if (testInput) {
                    startIChallenge(11)
                }
            },
            onComplete() {
                player.e.c11 = tmp.e.challenges[11].cp.floor().max(player.e.c11)
            },
            goalDescription() { return format("ee1664750")+" cases per second"},
            cp() { 
                let gain = Decimal.pow(4,getPointGen().add(1).max(1).log10().add(1).max(1).log10().div(1664750).sub(1)).pow(1/5).mul(100).max(player.e.c11)
                if (gain.gte(1e4)) gain = gain.div(1e4).pow(0.2).mul(1e4)
                return gain.min(1e6)
            },
            rewardDescription() {
                let dis = "Infectious Diseases add to 'Cases Boost' base. <br>Challenge Points:" + formatWhole(player.e.c11)
                let next = tmp.e.challenges[11].cp.floor().max(player.e.c11).add(1).max(1)
                if (next.gte(1e4)) next = next.div(1e4).pow(5).mul(1e4)
                next = next.div(100).pow(5).log(4).add(1).max(1).mul(1664750).pow10().sub(1).pow10().sub(1)
                if (inChallenge("e", 11)) {
                    dis += "(+" + formatWhole(tmp.e.challenges[11].cp.sub(player.e.c11).max(0).floor()) + ")"
                    dis += "<br>Next at " + format(next)
                }
                return dis
            },
            rewardEffect() {
                let eff = player.e.diseases.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.1).div(1111).mul(player.e.c11.pow(0.3))
                return eff
            },
            rewardDisplay() {
                return "+" + format(this.rewardEffect())
            },
            unlocked(){
                return hasMilestone("e", 3)
            }
        },
        12: {
            name: "Logarithm",
            currencyDisplayName: "cases per second",
            completionLimit: 100000,
            challengeDescription: function() {
                let c11 = "Cases gain is log10(gain)."
                if (inChallenge("e", 12)) c11 = c11 + " (In Challenge)"
                if (player.e.c12.gte(1e6)) c11 = c11 + " (Completed)"
                return c11
            },
            canComplete() {
                return getPointGen().gte("e16349349")
            },
            onStart(testInput=false) { 
                if (testInput) {
                    startIChallenge(12)
                }
            },
            onComplete() {
                player.e.c12 = tmp.e.challenges[12].cp.floor().max(player.e.c12)
            },
            goalDescription() { return format("e16349349")+" cases per second"},
            cp() { 
                let gain =  Decimal.pow(3,getPointGen().add(1).max(1).log10().div(16349349).sub(1)).mul(100).max(player.e.c12)
                if (gain.gte(1e5)) gain = gain.div(1e5).pow(1/6).mul(1e5)
                return gain.min(1e6)
            },
            rewardDescription() {
                let dis = "Cases divide immunity. <br>Challenge Points:" + formatWhole(player.e.c12)
                let next = tmp.e.challenges[12].cp.floor().max(player.e.c12).add(1).max(1)
                if (next.gte(1e5)) next = next.div(1e5).pow(6).mul(1e5)
                next = next.div(100).log(3).add(1).max(1).mul(16349349).pow10().sub(1)
                if (inChallenge("e", 12)) {
                    dis += "(+" + formatWhole(tmp.e.challenges[12].cp.sub(player.e.c12).max(0).floor()) + ")"
                    dis += "<br>Next at " + format(next)
                }
                return dis
            },
            rewardEffect() {
                let eff = player.points.add(10).max(10)
                eff = eff.log10().add(10).max(10)
                eff = eff.log10().pow(0.03).div(2.3).mul(player.e.c12.add(1).max(1).log10().pow(0.5))
                if (eff.gte(7)) eff = eff.add(3).log10().add(6)
                return eff.max(1)
            },
            rewardDisplay() {
                return "/" + format(this.rewardEffect())
            },
            unlocked(){
                return hasMilestone("e", 3)
            }
        },
    },
})
addLayer("ct", {
    name: "ct",
    symbol: "CT",
    position: 0,
    startData() {
        return {
            unlocked: false,
            auto: false,
            autom: false,
            autoc: false,
            autov: false,
            points: decimalZero,
            total: decimalZero,
            best: decimalZero,
            corona: decimalZero,
            CorVid: decimalZero,
            LaBas: decimalZero,
            Am: decimalZero,
            Avaxxers: decimalZero,
            Avaccines: decimalZero,
            SideEff: decimalZero,
            AdEff: decimalZero,
            Adversity: decimalZero,
            Uv: decimalZero,
            Av: decimalZero,
            Advaxxers: decimalZero,
            AdVax: decimalZero,
            arna: decimalZero,
            aav: decimalZero,
            aiv: decimalZero,
            asv: decimalZero,
            aBoost: decimalZero,
            extraBoost: decimalZero,
            bestBoost: decimalZero,
            aB: decimalZero,
            aB2: decimalZero,
            aB3: decimalZero,
            aB4: decimalZero,
            aB5: decimalZero,
            aB6: decimalZero,
            aB7: decimalZero,
            AdvTime: 0,
            AdvVaxTime: decimalZero,
            spent: decimalZero,
            Ui: decimalZero,
            Uib: decimalZero,
            bestAdv: decimalZero,
            bestAdvax: decimalZero,
            bestAps: decimalZero,
            bestCases: decimalZero,
            Aspent: decimalZero,
            resetTime: 0,
            number: 0,
            red:[1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36],
            black:[2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35],
            distBuyId:[261,262,263,271,272,273,281,282,283],
            distBuy:[decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero,decimalZero],
            AdV0:decimalZero,
            AdVax0:decimalZero,
            AdV1:decimalZero,
            AdVax1:decimalZero,
            AdV2:decimalZero,
            AdVax2:decimalZero,
            AdV3:decimalZero,
            AdVax3:decimalZero,
            AdV4:decimalZero,
            AdVax4:decimalZero,
            Atb:decimalZero,
            AntiDist:decimalZero,
            ADgain:decimalZero,
            bet: 0,
            wchance: 18/37,
            wset: 1,
            bets: ["RED","BLACK","GREEN"],
            colors: ["#aa0000","#000000","#00aa00"],
            rolltime: 0,
            autoroll: false,
            autorolltime: 0,
            win: decimalZero,
            winstreak: 0,
            highstreak: decimalZero,
            losestreak: 0,
            gwinstreak: 0,
            glosestreak: 0,
            ghighstreak: decimalZero,
            changebet:0,
            inC: false,
            autoaest: false,
            a263: decimalZero,
        }
    },
    color: "#a5c38d",
    requires() { return inChallenge("ct",32)?new Decimal(1e30) : new Decimal(6.25e26)},
    resource: "CTNA",
    baseResource: "CRNA",
    baseAmount() { return player.e.crna },
    type: "custom",
    softcapPower: 1,
    branches: ["e","f"],
    exponent: 0.3,
    gainMult() {//ctnagain
        mult = decimalOne
        if (inChallenge("ct",32)) {
            if (hasUpgrade("uv",94)) mult = mult.mul(3)
            if (hasUpgrade("uv",95)) mult = mult.mul(3)
            if (hasUpgrade("uv",96)) mult = mult.mul(3)
            if (hasMilestone("uv",24)) mult = mult.mul(3)
            if (hasMilestone("uv",25)) {
                mult = mult.mul(3)
                if (player.uv.virusTotal.gte(1e71)) mult = mult.mul(3)
            }
            if (hasChallenge("Ud",12)) mult = mult.mul(100)
            if (hasChallenge("Ud",21)) mult = mult.mul(100)
            if (hasChallenge("Ud",22)) mult = mult.mul(100)
            if (hasMilestone("Ud",5)) mult = mult.mul(tmp.Ud.milestones[5].effect)
        }
        else {
        if (hasUpgrade("ct",21)) mult = mult.mul(upgradeEffect("ct",21))
        if (hasUpgrade("ct",36)) mult = mult.mul(upgradeEffect("ct",36))
        if (hasUpgrade("ct",42)) mult = mult.mul(upgradeEffect("ct",42))
        }
        return mult.min(tet10(10))
    },
    gainExp() {
        let exp = decimalOne
        if (inChallenge("ct",32)) {
            exp = exp.div(2)
        }
        else {
        let x = player.ct.milestones.length*player.ct.upgrades.length
        if (hasUpgrade("ct",16)) exp = exp.add(0.5)
        if (hasUpgrade("ct",34)) exp = exp.add(0.5)
        if (hasUpgrade("ct",25)) exp = exp.add(upgradeEffect("ct",25))
        if (hasUpgrade("ct",26)) exp = exp.add(upgradeEffect("ct",26))
        if (hasUpgrade("ct",32)) exp = exp.add(upgradeEffect("ct",32))
        if (hasUpgrade("ct",44)) exp = exp.add(upgradeEffect("ct",44))
        if (hasMilestone("ct",6)) exp = exp.add(0.5)
        if (hasMilestone("ct",7)) exp = exp.add(0.5)
        if (hasMilestone("ct",8)) exp = exp.add(0.5)
        if (hasMilestone("ct",9)) exp = exp.add(0.5)
        if (hasMilestone("ct",10)) exp = exp.add(0.5)
        if (hasMilestone("ct",11)) exp = exp.add(0.5)
        if (hasMilestone("ct",12)) exp = exp.add(x*0.05)
        if (hasMilestone("ct",13)) exp = exp.add(x*0.1)
        if (hasUpgrade("ct",65)) exp = exp.mul(upgradeEffect("ct",65))
        if (hasUpgrade("ct",92)) exp = exp.mul(upgradeEffect("ct",92))
        if (hasUpgrade("ct",102)) exp = exp.mul(upgradeEffect("ct",102))
        if (hasMilestone("ct",18)) exp = exp.mul(milestoneEffect("ct",18))
        }
        return exp.min(tet10(10))
    },
    row: 4,
    hotkeys: [
        {
            key:"t", description: "T:Reset for CTNA", onPress() {
                if (canReset(this.layer)) doReset(this.layer)
            },
        },
        {
            key:"a", description: "A:Buy max AdVaccines", onPress() {
                if (hasUpgrade("ct",373)) layers.ct.clickables[33].onClick()
            },
            unlocked() {return hasUpgrade("ct",373)}
        },
    ],
    tooltipLocked() {
        let m = player.e.mu2
        let virus = player.e.virus[m]
        let sub = m.mul(m.add(1)).div(2).add(m.mul(4))
        let num = player.e.mu.div(10).sub(sub)
        return "Reach " + format(tmp.ct.requires) + " CRNA and COVID-19 mutation to unlock (You have "+format(player.e.crna)+ " CRNA and "+virus+"-"+format(num,1)+")"
    },
    getCorGain() { 
        let gain = player.ct.best.max(10).log10().sub(328820).div(49464).max(0).pow(0.7)
        if (gain.gte(5)) gain = gain.div(5).pow(0.4).mul(5)
        if (gain.gte(15)) gain = gain.div(15).pow(0.2).mul(15)
        if (gain.gte(1e40)) gain = gain.log10().div(40).root(1.5).mul(40).pow10()
        if (gain.gte(Decimal.pow(10,1e60))) gain = gain.log10().log10().div(60).root(2).mul(60).pow10().pow10()
        if (gain.gte(Decimal.pow(10,1e100))) gain = gain.log10().log10().log10().div(2).root(5).mul(2).pow10().pow10().pow10()
        if (hasUpgrade("ct",83)) gain = gain.mul(upgradeEffect("ct",83))
        if (gain.gte(tet10(10))) gain = tet10(slog(gain).div(10).pow(0.6).mul(10))
        return gain.floor()
    },
    getCorNext() { 
        let gain = tmp.ct.getCorGain.add(1)
        if (gain.gte(tet10(10))) gain = tet10(slog(gain).div(10).root(0.6).mul(10))
        if (hasUpgrade("ct",83)) gain = gain.div(upgradeEffect("ct",83))
        if (gain.gte(Decimal.pow(10,1e100))) gain = gain.log10().log10().log10().div(2).pow(5).mul(2).pow10().pow10().pow10()
        if (gain.gte(Decimal.pow(10,1e60))) gain = gain.log10().log10().div(60).pow(2).mul(60).pow10().pow10()
        if (gain.gte(1e40)) gain = gain.log10().div(40).pow(1.5).mul(40).pow10()
        if (gain.gte(15)) gain = gain.div(15).pow(5).mul(15)
        if (gain.gte(5)) gain = gain.div(5).pow(2.5).mul(5)
        return gain.root(0.7).mul(49464).add(328820).pow10()
    },
    getVaxcostBase() { 
        let base = decimalFive
        if (hasUpgrade("ct",173)) base = decimalThree
        if (hasUpgrade("ct",183)) base = decimalTwo
        if (hasUpgrade("ct",191)) base = base.pow(upgradeEffect("ct",191))
        return base
    },
    getVaxcostExp() { 
        let exp = new Decimal(1.5)
        if (hasUpgrade("ct",175)) exp = exp.sub(0.05)
        if (hasUpgrade("ct",181)) exp = exp.sub(0.05)
        if (hasUpgrade("ct",201)) exp = exp.sub(0.05)
        return exp
    },
    getVaxxerGain() { 
        let gain = player.ct.Am.max(10).log10().div(27e7).log(tmp.ct.getVaxcostBase).add(1).root(tmp.ct.getVaxcostExp)
        if (gain.gte(1e4)) gain = gain.div(1e4).pow(0.25).mul(1e4)
        if (gain.gte(1e6)) gain = gain.log10().div(6).pow(0.4).mul(6).pow10()
        if (gain.gte(Decimal.pow(10,3e5))) gain = gain.log10().div(3e5).pow(0.4).mul(3e5).pow10()
        if (gain.gte(Decimal.pow(10,1e6))) gain = gain.log10().log10().div(6).pow(0.25).mul(6).pow10().pow10()
        if (gain.gte("eeee15")) gain = gain.log10().log10().log10().log10().div(15).pow(0.25).mul(15).pow10().pow10().pow10().pow10()
        if (player.ct.Am.max(10).log10().lt(27e7)) gain = decimalZero
        if (hasUpgrade("ct",271)) gain = gain.pow(tmp.ct.upgrades[271].effect)
        if (hasUpgrade("ct",272)) gain = gain.pow(tmp.ct.upgrades[272].effect)
        if (hasUpgrade("ct",266)) gain = gain.pow(tmp.ct.upgrades[266].effect)
        if (hasUpgrade("ct",284)) gain = gain.pow(tmp.ct.upgrades[284].effect)
        if (hasUpgrade("ct",291)) gain = gain.pow(tmp.ct.upgrades[291].effect)
        return gain.floor().min(tet10(5.2))
    },
    getVaxxerNext() { 
        let gain = tmp.ct.getVaxxerGain.add(1)
        if (hasUpgrade("ct",271)) gain = gain.root(tmp.ct.upgrades[271].effect)
        if (hasUpgrade("ct",272)) gain = gain.root(tmp.ct.upgrades[272].effect)
        if (hasUpgrade("ct",266)) gain = gain.root(tmp.ct.upgrades[266].effect)
        if (hasUpgrade("ct",284)) gain = gain.root(tmp.ct.upgrades[284].effect)
        if (hasUpgrade("ct",291)) gain = gain.root(tmp.ct.upgrades[291].effect)
        if (gain.gte("eeee15")) gain = gain.log10().log10().log10().log10().div(15).pow(4).mul(15).pow10().pow10().pow10().pow10()
        if (gain.gte(Decimal.pow(10,1e6))) gain = gain.log10().log10().div(6).pow(4).mul(6).pow10().pow10()
        if (gain.gte(Decimal.pow(10,3e5))) gain = gain.log10().div(3e5).pow(2.5).mul(3e5).pow10()
        if (gain.gte(1e6)) gain = gain.log10().div(6).pow(2.5).mul(6).pow10()
        if (gain.gte(1e4)) gain = gain.div(1e4).pow(4).mul(1e4)
        gain = Decimal.pow(tmp.ct.getVaxcostBase,gain.pow(tmp.ct.getVaxcostExp).sub(1)).mul(27e7).pow10()
        return gain
    },
    getVaxxerBase() { 
        let base = tmp.ct.buyables[141].effect.mul(10)
        if (hasUpgrade("ct",173)) base = base.mul(10)
        if (hasUpgrade("ct",182)) base = base.mul(upgradeEffect("ct",182))
        if (hasUpgrade("ct",192)) base = base.mul(upgradeEffect("ct",192))
        let base2 = decimalOne
        if (hasUpgrade("ct",231)) base2 = base2.mul(tmp.ct.upgrades[231].effect)
        if (hasUpgrade("ct",233)) base2 = base2.mul(tmp.ct.upgrades[233].effect)
        return {b1:base,b2:base2}
    },
    getVaxGain() { 
        let base = tmp.ct.getVaxxerBase.b1
        let exp = player.ct.Avaxxers
        let gain = Decimal.pow(base,exp).sub(1)
        if (hasUpgrade("ct",171)) gain = gain.mul(upgradeEffect("ct",171))
        if (hasUpgrade("ct",172)) gain = gain.mul(tmp.ct.upgrades[172].effect2)
        if (hasUpgrade("ct",175)) gain = gain.mul(upgradeEffect("ct",175))
        if (hasUpgrade("ct",176)) gain = gain.mul(upgradeEffect("ct",176))
        if (hasUpgrade("ct",181)) gain = gain.mul(upgradeEffect("ct",181))
        if (hasUpgrade("ct",183)) gain = gain.mul(upgradeEffect("ct",183))
        if (hasUpgrade("ct",185)) gain = gain.mul(upgradeEffect("ct",185))
        if (hasUpgrade("ct",194)) gain = gain.mul(tmp.ct.upgrades[194].effect2)
        if (hasAchievement("a",163)) gain = gain.mul(player.a.points)
        return gain.mul(tmp.ct.buyables[142].effect).mul(tmp.ct.buyables[143].effect2).mul(tmp.ct.getSEEff)
    },
    getSEGain() { 
        let base = tmp.ct.getVaxxerBase.b2
        let Vax = player.ct.Avaxxers.sub(159).mul(base)
        let exp = tmp.ct.buyables[151].effect.add(1)
        let gain = Vax.pow(exp).mul(tmp.ct.getAEEff)
        if (hasUpgrade("ct",204)) gain = gain.mul(tmp.ct.upgrades[204].effect)
        if (hasUpgrade("ct",211)) gain = gain.mul(tmp.ct.upgrades[211].effect)
        if (hasUpgrade("ct",212)) gain = gain.mul(tmp.ct.upgrades[212].effect)
        if (hasUpgrade("ct",213)) gain = gain.mul(20)
        if (hasUpgrade("ct",215)) gain = gain.mul(tmp.ct.upgrades[215].effect)
        if (hasUpgrade("ct",216)) gain = gain.mul(tmp.ct.upgrades[216].effect)
        if (hasUpgrade("ct",222)) gain = gain.mul(tmp.ct.upgrades[205].effect)
        if (hasUpgrade("ct",225)) gain = gain.mul(tmp.ct.upgrades[225].effect)
        if (hasUpgrade("ct",226)) gain = gain.mul(tmp.ct.upgrades[226].effect)
        if (Vax.lt(1)) return decimalZero
        return gain.mul(tmp.ct.buyables[152].effect).mul(tmp.ct.buyables[153].effect2)
    },
    getAEGain() { 
        let Vax = player.ct.Avaxxers
        let exp = tmp.ct.buyables[162].effect2.add(3)
        if (hasUpgrade("ct",236)) exp = exp.add(tmp.ct.upgrades[236].effect)
        if (hasUpgrade("ct",254)) exp = exp.add(tmp.ct.upgrades[254].effect)
        let gain = powExp(Vax.div(5e11).log10().add(1).mul(10),exp)
        if (hasUpgrade("ct",231)) gain = gain.mul(tmp.ct.upgrades[231].effect)
        if (hasUpgrade("ct",232)) gain = gain.mul(tmp.ct.upgrades[232].effect)
        if (hasUpgrade("ct",234)) gain = gain.mul(tmp.ct.upgrades[234].effect2)
        if (Vax.lt(5e11)) gain = decimalZero
        return gain.mul(tmp.ct.buyables[161].effect).mul(tmp.ct.getAdvEff)
    },
    getAntiCapCTNA() {
        let cmult = new Decimal(1.07)
        let cpow = decimalOne
        if (hasUpgrade("ct",254)) cmult = cmult.mul(1.1)
        if (hasUpgrade("ct",281)) cmult = cmult.mul(1.1)
        if (hasUpgrade("ct",282)) cmult = cmult.mul(1.1)
        if (hasUpgrade("ct",362)) cmult = cmult.mul(2)
        if (hasUpgrade("ct",376)) cmult = cmult.mul(tmp.ct.upgrades[376].effect2)
        if (hasUpgrade("ct",396)) cpow = cpow.mul(1.03)
        let eff = tet10(slog(player.ct.points.max(10)).mul(cmult).pow(cpow).add(3))
        return eff
    },
    getBest() {
        let x = player.ct.bestCases
        if (x.gte("ee16")) x = x.log10().div(1e6).pow(1e15)
        if (x.gte("e2e43")) x = x.log10().div(2e3).pow(5e41)
        if (x.gte("ee57")) x = slog(x.pow(1e-47)).pow10().pow(19).pow10()
        return x
    },
    getAdvBaseGain() { 
        let Vax = player.ct.AdEff
        let start = player.ct.inC?Decimal.pow(10,1.05e10):Decimal.pow(10,147956)
        let slog = new Decimal(.1)
        let exp = new Decimal(0.02)
        let expmul = new Decimal(0.01)
        if (hasUpgrade("ct",256)) exp = exp.mul(tmp.ct.upgrades[256].effect)
        if (hasUpgrade("ct",302)) expmul = expmul.mul(10)
        if (Vax.gte(Decimal.pow(10,1e7)) && !player.ct.inC) Vax = Vax.log10().div(1e7).pow(0.3).mul(1e7).pow10()
        if (Vax.gte(Decimal.pow(10,Decimal.pow(10,741088))) && !player.ct.inC) Vax = Vax.log10().log10().div(741088).pow(0.5).mul(741088).pow10().pow10()
        if (Vax.gte(Decimal.pow(10,Decimal.pow(10,1e9))) && !player.ct.inC) Vax = Vax.log10().log10().log10().div(9).pow(0.5).mul(9).pow10().pow10().pow10()
        let gain = slogadd(mulSlog(Vax.div(start),0.85).pow(exp),slog)
        if (player.ct.inC) gain = slogadd(mulSlog(Vax.div(start),0.7).pow(exp.mul(expmul)),slog)
        if (gain.gte("eee3")) gain = gain.log10().log10().div(1e3).pow(0.1).mul(1e3).pow10().pow10()
        return gain
    },
    getAdvGain() { 
        let Vax = player.ct.AdEff
        let start = player.ct.inC?Decimal.pow(10,1.05e10):Decimal.pow(10,147956)
        let gain = tmp.ct.getAdvBaseGain
        if (hasUpgrade("ct",246)) gain = gain.mul(tmp.ct.upgrades[246].effect)
        if (hasUpgrade("ct",252)) gain = gain.mul(tmp.ct.upgrades[252].effect)
        if (hasUpgrade("ct",261)) gain = gain.mul(tmp.ct.upgrades[261].effect)
        if (hasUpgrade("ct",275)) gain = gain.mul(tmp.ct.upgrades[275].effect)
        if (Vax.lt(start)) gain = decimalZero
        gain = gain.mul(tmp.ct.buyables[163].effect).mul(tmp.ct.buyables[164].effect)
        return gain.min("eee51555")
    },
    AdVaxGain() { 
        let gain = tmp.ct.buyables[201].gain
        if (hasUpgrade("ct",375)) gain = gain.mul(tmp.ct.upgrades[375].effect2)
        if (hasUpgrade("ct",376)) gain = gain.mul(tmp.ct.upgrades[376].effect)
        if (hasUpgrade("ct",382)) gain = gain.mul(tmp.ct.upgrades[382].effect)
        if (hasUpgrade("ct",383)) gain = gain.mul(tmp.ct.upgrades[383].effect)
        if (hasChallenge("ct",11)) gain = gain.mul(tmp.ct.challenges[11].rewardEffect)
        return gain
    },
    aRNAgain() { 
        let gain = tmp.ct.buyables[201].arna
        return gain
    },
    aRNAeff() { 
        let eff = player.ct.arna.add(1).pow(0.75)
        if (challengeCompletions("ct", 11)>=5) eff = eff.pow(1.1)
        if (hasUpgrade("ct",414)) eff = powExp(eff,1.1)
        return eff
    },
    AAVgain() { 
        let gain = tmp.ct.buyables[202].aav
        return gain
    },
    AAVeff() { 
        let eff = powExp(player.ct.aav.add(1).pow(3),1.01)
        if (challengeCompletions("ct", 12)>=5) eff = powExp(eff,1.1)
        if (hasUpgrade("ct",485) && player.ct.buyables[243].gte(20)) eff = powExp(eff,1.15)
        if (hasUpgrade("ct",541)) eff = eff.max(10).log10().div(1e12).pow(0.5)
        return eff
    },
    AIVgain() { 
        let gain = tmp.ct.buyables[203].aiv
        return gain
    },
    AIVeff() { 
        let eff = powExp(player.ct.aiv.add(1).pow(10),1.02)
        if (challengeCompletions("ct", 21)>=5) eff = powExp(eff,1.05)
        return eff
    },
    ASVgain() { 
        let gain = tmp.ct.buyables[204].asv
        return gain
    },
    ASVeff() { 
        let eff = player.ct.asv.add(1).max(1).log10().pow(0.5).div(10)
        if (challengeCompletions("ct", 22)>=5) eff = eff.mul(1.1)
        if (hasUpgrade("ct",525)) eff = powExp(eff,2.5)
        if (hasUpgrade("ct",446)) eff = powExp(eff,1.15)
        return eff
    },
    AdVaxBase() {
        let b = decimalTwo
        b = b.add(tmp.ct.ASVeff)
        return b
    },
    typeGain() {
        let gain = decimalOne
        if (hasUpgrade("ct",386)) gain = gain.mul(5)
        if (hasUpgrade("ct",391)) gain = gain.mul(5)
        if (hasUpgrade("ct",392)) gain = gain.mul(tmp.ct.upgrades[392].effect)
        if (hasUpgrade("ct",393)) gain = gain.mul(10)
        if (hasUpgrade("ct",393)) gain = gain.mul(10)
        if (hasChallenge("ct",31)) gain = gain.mul(tmp.ct.challenges[31].rewardEffect)
        return gain.mul(tmp.ct.buyables[221].effect).mul(tmp.ct.aBoostEff)
    },
    getDist() {
        let dist = new Decimal(1.8288).div(tmp.ct.AntiDistEff[0])
        if (hasUpgrade("ct",512)) dist = dist.div(tmp.ct.upgrades[512].effect)
        if (hasUpgrade("uv",25)) dist = dist.div(tmp.uv.upgrades[25].effect)
        for (i = 0; i < player.ct.distBuyId.length && i < 6; i++){
            dist = dist.div(tmp.ct.buyables[player.ct.distBuyId[i]].effect)
        }
        return dist
    },
    getDistEff() {
        let eff = tmp.ct.getDist.div(1.8288).pow(-0.1)
        if (eff.gte(1.4)) eff = eff.div(1.4).pow(0.5).mul(1.4)
        if (eff.gte(2.6)) eff = eff.div(2.6).pow(0.45).mul(2.6)
        return eff
    },
    extraBoostEff() {
        let exp = decimalTwo
        if (hasUpgrade("ct",541)) exp = exp.add(tmp.ct.upgrades[534].effect)
        let eff = player.ct.extraBoost.add(1).pow(exp)
        if (hasUpgrade("ct",521)) eff = eff.pow(tmp.ct.upgrades[521].effect)
        return eff
    },
    getBstMult() {
        let eff = new Decimal(1.1)
        if (hasUpgrade("ct",542)) eff = eff.add(tmp.ct.upgrades[542].effect)
        return eff
    },
    AdVaccineMult() {
        let mult = tmp.ct.aRNAeff
        if (hasUpgrade("ct",384)) mult = mult.mul(tmp.ct.upgrades[384].effect)
        if (hasUpgrade("ct",385)) mult = mult.mul(tmp.ct.upgrades[385].effect)
        return mult
    },
    AdVaxEff() { 
        let eff = player.ct.AdVax.add(1).pow(0.75)
        if (hasUpgrade("ct",415)) eff = eff.pow(tmp.ct.upgrades[415].effect)
        return eff
    },
    getBoosterSlog() {
        let eff = decimalZero
        if (hasUpgrade("ct",402)) eff = eff.add(0.05)
        if (hasUpgrade("ct",492)) eff = eff.add(0.001)
        if (hasUpgrade("ct",493)) eff = eff.add(0.002)
        if (hasUpgrade("ct",494)) eff = eff.add(0.003)
        if (hasUpgrade("ct",495)) eff = eff.add(0.004)
        if (hasMilestone("Uu",2)) eff = eff.add(0.005)
        if (hasUpgrade("Uu",24)) eff = eff.add(0.0225)
        return eff
    },
    getBoosterExp() { // 5.485e27492
        let eff = decimalOne
        if (hasUpgrade("ct",493)) eff = eff.mul(tmp.ct.upgrades[493].effect)
        if (hasUpgrade("Up",65)) eff = eff.mul(tmp.Up.upgrades[65].effect)
        if (hasUpgrade("Up",74)) eff = eff.mul(tmp.Up.upgrades[74].effect)
        if (hasUpgrade("Up",85)) eff = eff.mul(tmp.Up.upgrades[85].effect)
        if (hasUpgrade("Up",91)) eff = eff.mul(tmp.Up.upgrades[91].effect)
        if (hasUpgrade("Up",94)) eff = eff.mul(tmp.Up.upgrades[94].effect)
        if (hasUpgrade("Uu",23)) eff = eff.mul(tmp.Uu.upgrades[23].effect)
        if (hasMilestone("Uu",1)) eff = eff.mul(tmp.Uu.milestones[1].effect)
        return eff
    },
    getUIGain() { 
        let exp = decimalOne
        let chal = (inChallenge("ct",11) || inChallenge("ct",12) || inChallenge("ct",21) || inChallenge("ct",22) || inChallenge("ct",32))
        if (hasUpgrade("ct",283)) exp = exp.add(0.3)
        if (hasUpgrade("ct",291)) exp = exp.add(0.1)
        if (hasUpgrade("ct",292)) exp = exp.add(0.2)
        if (hasUpgrade("ct",294)) exp = exp.add(tmp.ct.upgrades[294].effect)
        if (hasUpgrade("ct",363)) exp = exp.add(1)
        if (hasUpgrade("ct",366)) exp = exp.add(tmp.ct.upgrades[366].effect)
        if (hasUpgrade("ct",381)) exp = exp.add(tmp.ct.upgrades[381].effect)
        let gain = player.ct.Uv.pow(exp)
        if (hasUpgrade("ct",273)) gain = gain.mul(tmp.ct.upgrades[273].effect)
        if (hasUpgrade("ct",281)) gain = gain.mul(tmp.ct.upgrades[281].effect)
        if (hasUpgrade("ct",283)) gain = gain.mul(tmp.ct.upgrades[283].effect)
        if (hasUpgrade("ct",294)) gain = gain.mul(tmp.ct.upgrades[294].effect.max(1))
        if (hasUpgrade("ct",356)) gain = gain.mul(tmp.ct.upgrades[356].effect)
        if (hasUpgrade("ct",362)) gain = gain.mul(tmp.ct.upgrades[362].effect)
        if (hasUpgrade("ct",364)) gain = gain.mul(tmp.ct.upgrades[364].effect)
        if (hasUpgrade("ct",374)) gain = gain.mul(tmp.ct.upgrades[374].effect)
        if (hasAchievement("a",194)) gain = gain.mul(player.a.points.max(1))
        gain = gain.mul(tmp.ct.buyables[181].effect).mul(tmp.ct.AdvaxxerEff)
        if (hasUpgrade("ct",311)) gain = gain.pow(1.075)
        if (hasUpgrade("ct",313)) gain = gain.pow(1.05)
        if (hasUpgrade("ct",312)) {
            if (chal) gain = gain.pow(1.25)
            else gain = gain.pow(1.25**0.2)
        }
        if (hasUpgrade("uv",12)) gain = gain.pow(tmp.uv.upgrades[12].effect)
        if (inChallenge("ct",21)) gain = powExp(gain,0.8)
        if (inChallenge("ct",22)) gain = powExp(gain,0.75)
        return gain
    },
    getUIEff() { 
        let eff = player.ct.Ui.max(1).log10()
        if (hasUpgrade("ct",284)) eff = eff.pow(1.1)
        if (hasUpgrade("ct",366)) eff = eff.pow(1.05)
        if (hasUpgrade("ct",372)) eff = eff.pow(tmp.ct.upgrades[372].effect)
        if (hasUpgrade("ct",395)) eff = eff.pow(tmp.ct.upgrades[395].effect)
        if (hasUpgrade("uv",13)) eff = eff.pow(tmp.uv.upgrades[13].effect)
        if (hasUpgrade("ct",413) && inChallenge("ct",32)) eff = eff.pow(1.1)
        if (inChallenge("ct",11)) eff = decimalZero
        return eff
    },
    getVaxEff() { 
        let exp = tmp.ct.buyables[143].effect.add(2)
        if (hasUpgrade("ct",184)) exp = exp.add(0.1)
        if (hasUpgrade("ct",186)) exp = exp.add(0.1)
        if (hasUpgrade("ct",191)) exp = exp.add(0.1)
        if (hasUpgrade("ct",193)) exp = exp.add(0.2)
        if (hasUpgrade("ct",205)) exp = exp.mul(tmp.ct.upgrades[205].effect)
        let eff = powExp(player.ct.Avaccines.add(1).mul(10),exp).div(10)
        if (hasUpgrade("ct",383)) eff = powExp3(eff,tmp.ct.upgrades[383].effect)
        if (hasUpgrade("ct",541) /*&& false*/) {
            eff = powExpN(eff,4,tmp.ct.AAVeff)
        }
        else eff = powExp3(eff,tmp.ct.AAVeff)
        if (player.ct.inC) eff = decimalOne
        return eff
    },
    getSEEff() { 
        let exp = tmp.ct.buyables[153].effect.add(5)
        if (hasUpgrade("ct",222)) exp = exp.add(1)
        if (hasUpgrade("ct",233)) exp = exp.mul(5)
        if (hasUpgrade("ct",234)) exp = exp.mul(tmp.ct.upgrades[234].effect)
        if (hasUpgrade("ct",241)) exp = exp.mul(tmp.ct.upgrades[241].effect)
        let eff = powExp(player.ct.SideEff.add(1).mul(10),exp).div(10)
        return eff
    },
    getAEEff() { 
        let exp = tmp.ct.buyables[162].effect.mul(5)
        let slog = new Decimal(.2)
        if (hasUpgrade("ct",236)) exp = exp.add(5)
        if (hasUpgrade("ct",242)) {
            exp = exp.mul(tmp.ct.upgrades[242].effect)
            slog = slog.add(.1)
        }
        if (hasUpgrade("ct",243)) exp = exp.mul(tmp.ct.upgrades[243].effect)
        if (hasUpgrade("ct",245)) exp = exp.mul(tmp.ct.upgrades[245].effect)
        if (hasUpgrade("ct",244)) slog = slog.add(tmp.ct.upgrades[244].effect)
        if (hasUpgrade("ct",253)) slog = slog.add(tmp.ct.upgrades[253].effect)
        if (hasUpgrade("ct",263)) slog = slog.add(0.01)
        if (hasUpgrade("ct",286)) slog = slog.add(0.015)
        if (hasUpgrade("ct",301)) slog = slog.add(0.005)
        if (hasUpgrade("ct",372)) slog = slog.add(0.01)
        let eff = slogadd(player.ct.AdEff.add(1),0.1).pow(exp)
        if (hasUpgrade("ct",235)) {
            exp = exp.add(5)
            eff = slogadd(player.ct.AdEff.add(1).pow(exp),slog)
        }
        if (player.ct.AdEff.eq(0)) eff = decimalOne
        return eff
    },
    getAdvEff() { 
        let exp = new Decimal(3.2)
        let slog = new Decimal(0.1)
        if (hasUpgrade("ct",264)) exp = exp.add(.5)
        if (hasUpgrade("ct",265)) exp = exp.add(.3)
        if (hasUpgrade("ct",301)) slog = slog.add(0.015)
        if (hasUpgrade("ct",363)) slog = slog.add(0.01)
        if (hasUpgrade("ct",475)) slog = slog.add(0.119)
        let eff = slogadd(mulSlog(powExp(player.ct.Adversity.add(1).mul(10),exp).div(10),1.075),slog)
        if (eff.gte(Decimal.pow(10,5e5))) eff = eff.log10().div(5e5).pow(0.2).mul(5e5).pow10()
        if (eff.gte(Decimal.pow(10,2e14))) eff = eff.log10().div(2e14).pow(0.35).mul(2e14).pow10()
        return eff
    },
    AdvaxxerEff() { 
        let exp = player.ct.bestAdvax.cbrt().mul(4).min(20)
        if (hasChallenge("ct",22)) exp = exp.mul(tmp.ct.challenges[22].rewardEffect)
        let eff = player.ct.bestAdvax.add(1).pow(exp)
        if (inChallenge("ct",22)) eff = decimalOne
        return eff
    },
    aCapCtna() {
        let Sana = tmp.ct.getAntiCapCTNA
        let mult = decimalOne
        if (hasUpgrade("ct",224)) mult = mult.mul(1.015)
        if (hasUpgrade("ct",226)) mult = mult.mul(1.005)
        if (hasUpgrade("ct",214)) Sana = mulSlog(Sana,1.01)
        if (hasChallenge("ct",12)) Sana = mulSlog(Sana,tmp.ct.challenges[12].rewardEffect)
        Sana = mulSlog(Sana,mult)
        if (inChallenge("ct",12)) Sana = decimalOne
        return Sana.min(tet10(1.79769e308))
    },
    aBoostEff() { 
        let eff = player.ct.aBoost.add(1).pow(10)
        return eff
    },
    getCorEff() { 
        let c = player.ct.corona
        if (hasUpgrade("ct",83)) c = tmp.ct.getCorGain
        let eff = c.div(7).add(1).pow(1.3)
        if (eff.gte(2)) eff = eff.div(2).pow(0.4).mul(2)
        if (hasUpgrade("ct",71)) eff = eff.pow(upgradeEffect("ct",71))
        let eff2 = c.div(4).pow(0.8)
        if (hasUpgrade("ct",82)) eff2 = eff2.pow(upgradeEffect("ct",82))
        return {e1:eff,e2:eff2}
    },
    getCorVeff() { 
        let eff = powExp(player.ct.CorVid.add(10).log10().mul(10),2).div(10).pow(1.5)
        return eff.pow(tmp.ct.getLaBeff)
    },
    getLaBeff() { 
        let eff = player.ct.LaBas.add(10).log10().pow(1.5)
        if (eff.gte(20)) eff = eff.div(20).pow(0.3).mul(20)
        if (hasUpgrade("ct",93)) eff = eff.pow(1.2)
        if (hasUpgrade("ct",101)) eff = eff.pow(upgradeEffect("ct",101))
        if (hasMilestone("ct",15)) eff = eff.pow(1.1)
        if (hasUpgrade("ct",64)) eff = eff.pow(1.1)
        return eff.pow(tmp.ct.getAeff)
    },
    getXmult() { 
        let mul = decimalTen
        if (hasUpgrade("ct",126)) mul = mul.add(1)
        if (hasUpgrade("ct",136)) mul = mul.add(5)
        if (hasUpgrade("ct",132)) mul = mul.add(tmp.ct.buyables[112].effect)
        return mul
    },
    getIter() { 
        let x = tmp.ct.buyables[121].effect.add(1)
        return x
    },
    getX(){
        let amt = player.ct.Am.div(100)

        if (amt.lt(1)) return amt
        
        let times = amt.log(tmp.ct.getXmult).plus(1).log(2).floor()
        let a = Decimal.pow(2, times)

        let mul = Decimal.pow(tmp.ct.getXmult, times)
        let mul2 = amt.div(Decimal.pow(tmp.ct.getXmult, a.sub(1))).root(a)

        return mul.times(mul2)
    },
    getEvenPay() { 
        let mul = decimalTwo
        if (hasUpgrade("ct",114)) mul = mul.add(0.25)
        if (hasUpgrade("ct",124)) mul = mul.add(0.5)
        if (hasUpgrade("ct",143)) mul = mul.add(1.25)
        if (hasUpgrade("ct",146)) mul = mul.add(upgradeEffect("ct",146))
        if (hasUpgrade("ct",154)) mul = mul.mul(upgradeEffect("ct",154))
        if (hasUpgrade("ct",155)) mul = mul.mul(tmp.ct.buyables[102].effect)
        if (hasUpgrade("ct",161)) mul = mul.mul(upgradeEffect("ct",161))
        if (hasUpgrade("ct",162)) mul = mul.mul(upgradeEffect("ct",162))
        if (hasUpgrade("ct",163)) mul = mul.mul(upgradeEffect("ct",163))
        if (hasUpgrade("ct",176)) mul = mul.mul(tmp.ct.getVaxEff)
        return mul
    },
    getAeff() { 
        let eff = player.ct.Am.add(10).max(10).log10().pow(1.5)
        let exp = tmp.ct.getAVaxEff
        if (eff.gte(100)) eff = eff.div(100).pow(0.2).mul(100)
        if (hasUpgrade("ct",132)) eff = eff.pow(upgradeEffect("ct",132))
        if (hasUpgrade("ct",134)) eff = eff.pow(upgradeEffect("ct",134))
        if (hasUpgrade("ct",142)) eff = eff.pow(upgradeEffect("ct",142))
        if (hasUpgrade("ct",146)) eff = eff.pow(tmp.ct.upgrades[146].effect2)
        return eff.pow(tmp.ct.buyables[83].effect2).pow(exp)
    },
    getAVaxEff() { 
        let eff = tmp.ct.getVaxEff
        let mult = decimalOne
        let exp = decimalOne
        let sexp = decimalOne
        if (hasUpgrade("ct",233)) eff = slogadd(eff,3)
        if (hasUpgrade("ct",241)) mult = mult.mul(1.35)
        if (hasUpgrade("ct",245)) exp = exp.mul(1.35)
        if (hasUpgrade("ct",372)) exp = exp.mul(1.002)
        if (hasUpgrade("ct",393)) {
            if (!(inChallenge("ct",11) || inChallenge("ct",12) || inChallenge("ct",21) || inChallenge("ct",22))) exp = exp.mul(1.011)
        }
        eff = mulSlog(eff,mult)
        eff = powSlog(eff,exp)
        if (hasUpgrade("ct",253)) {
            if (eff.gte(tet10(25))) eff = tet10(slog(eff).div(25).pow(10).mul(25))
        }
        if (hasUpgrade("ct",262)) {
            if (eff.gte(tet10(70))) eff = tet10(slog(eff).div(70).pow(10).mul(70))
        }
        if (eff.gte(tet10(130))) eff = tet10(slog(eff).log10().div(Decimal.log10(130)).pow(0.8).mul(Decimal.log10(130)).pow10())
        if (hasUpgrade("ct",395)) sexp = sexp.mul(tmp.ct.upgrades[395].effect)
        if (hasUpgrade("ct",473)) sexp = sexp.mul(tmp.ct.upgrades[473].effect)
        if (hasUpgrade("ct",474)) sexp = sexp.mul(tmp.ct.upgrades[474].effect)
        if (hasUpgrade("ct",414)) sexp = sexp.mul(1.05)
        if (hasUpgrade("ct",461)) sexp = sexp.mul(1.111)
        eff = powSlog(eff,sexp)
        if (hasUpgrade("ct",491)) eff = powSlogExp(eff,1.015)
        if (hasUpgrade("ct",495)) eff = powSlogExp(eff,1.005)
        if (hasUpgrade("ct",496)) eff = powSlogExp(eff,1.002)
        if (hasUpgrade("ct",504)) eff = powSlogExp(eff,1.01)
        if (hasUpgrade("ct",542)) eff = powSlogExp(eff,1.01)
        if (hasUpgrade("ct",551)) eff = mulSlog(eff,tmp.ct.upgrades[551].effect)
        if (player.ct.inC) eff = decimalOne
        return eff
    },
    getLaGain() { 
        let eff = tmp.ct.buyables[42].effect
        return eff
    },
    getCorVidGain() { 
        let eff = tmp.ct.buyables[61].effect
        return eff
    },
    getAntiDist() { 
        let eff = powExp(player.ct.AntiDist.div(1.616255e-35),tmp.ct.getAntiDistDil).pow(tmp.ct.getAntiDistE).mul(1.616255e-35)
        if (inChallenge("ct",32)) return decimalZero
        return eff
    },
    getAntiDistDil() { 
        let eff = 0.5
        if (hasMilestone("uv",15)) eff += 0.001
        if (hasMilestone("uv",17)) eff += 0.001
        if (hasMilestone("uv",21)) eff += 0.001
        if (hasMilestone("uv",22)) eff += 0.001
        if (hasUpgrade("uv",32)) eff += 0.002
        return eff
    },
    getAntiDistE() { 
        let eff = tmp.ct.buyables[283].effect.add(1/3)
        return eff
    },
    getAntiDistGain() { 
        if (tmp.ct.getDist.gte(431e-6)) return decimalZero
        let eff = Decimal.div(431e-6,tmp.ct.getDist)
        if (eff.gte(1.2)) eff = eff.div(1.2).pow(0.1).mul(1.2)
        if (eff.gte(1.35)) eff = eff.div(1.35).pow(0.8).mul(1.35).sub(1.35).div(2).add(1.35)
        eff = eff.pow(tmp.ct.getAntiDistExp).mul(1.616255e-35).mul(tmp.ct.buyables[281].effect)
        if (hasMilestone("uv",12)) eff = eff.mul(tmp.uv.milestones[12].effect)
        if (hasUpgrade("ct",452)) eff = eff.mul(tmp.ct.upgrades[452].effect)
        if (hasUpgrade("uv",66)) eff = eff.mul(tmp.uv.upgrades[66].effect)
        if (hasUpgrade("uv",32)) eff = eff.mul(tmp.uv.upgrades[32].effect)
        if (hasAchievement("a",252)) eff = eff.mul(tmp.a.achievements[252].effect)
        if (hasAchievement("a",255)) eff = eff.mul(tmp.a.achievements[255].effect)
        if (hasAchievement("a",263)) eff = eff.mul(tmp.a.achievements[263].effect)
        return eff
    },
    getAntiDistExp() { 
        let eff = tmp.ct.buyables[282].effect.add(10)
        return eff
    },
    crex() {
        return tmp.ct.getCorEff.e2.mul(player.e.mu2.pow(tmp.e.crx))
    },
    AntiDistEff() {
        let ad = tmp.ct.getAntiDist.mul(1e33)
        let eff = ad.add(10).log10()
        let eff2 = powExp(ad.add(1),0.5).pow(3)
        if (hasAchievement("a",263)) {
            eff = eff.pow(1.01)
            eff2 = eff2.pow(1.01)
        }
        return [eff,eff2]
    },
    timeSpeed() {
        let eff = tmp.ct.AntiDistEff[1]
        if (hasUpgrade("uv",31)) eff = Decimal.mul(eff,tmp.uv.upgrades[31].effect)
        if (hasUpgrade("uv",66)) eff = eff.mul(3)
        if (hasUpgrade("ct",453)) eff = eff.mul(tmp.ct.upgrades[453].effect)
        if (hasMilestone("uv",21)) eff = eff.mul(3.2)
        return eff
    },
    update(diff) {
        player.ct.a263 = powExp(tmp.ct.getDist.pow(-0.5).div(1e5).add(1),2)
        if (player.ct.AdvTime+diff*tmp.ct.timeSpeed.toNumber()>=1e308) {
            player.ct.AdvTime = 1e308
        }
        else {
            player.ct.AdvTime += diff*tmp.ct.timeSpeed.toNumber()
            player.ct.AdvVaxTime = new Decimal(player.ct.AdvTime)
        }
        player.ct.AdvVaxTime = player.ct.AdvVaxTime.add(Decimal.mul(diff,tmp.ct.timeSpeed))
        let d = 0
        if (hasMilestone("ct", 9)) d+=0.01
        if (hasMilestone("ct", 10)) d+=0.99
        if (inChallenge("ct",32)) d/=100
        generatePoints("ct",diff*d)
        if (player.ct.auto) {
            layers.ct.buyables[11].buyMax()
            layers.ct.buyables[12].buyMax()
            layers.ct.buyables[13].buyMax()
            layers.ct.buyables[21].buyMax()
            layers.ct.buyables[22].buyMax()
            layers.ct.buyables[23].buyMax()
        }
        if (player.ct.autov) {
            if (hasUpgrade("ct",104)) {
                layers.ct.buyables[41].buyMax()
                layers.ct.buyables[42].buyMax()
                layers.ct.buyables[43].buyMax()
                layers.ct.buyables[51].buyMax()
                layers.ct.buyables[52].buyMax()
                if (hasMilestone("ct",16)) layers.ct.buyables[53].buyMax()
                if (hasMilestone("ct",17)) layers.ct.buyables[61].buyMax()
                if (hasUpgrade("ct",106)) layers.ct.buyables[62].buyMax()
                if (hasMilestone("ct",19)) layers.ct.buyables[63].buyMax()
            }
            else {
                layers.ct.buyables[41].buy()
                layers.ct.buyables[42].buy()
                layers.ct.buyables[43].buy()
                layers.ct.buyables[51].buy()
                layers.ct.buyables[52].buy()
                if (hasMilestone("ct",16)) layers.ct.buyables[53].buy()
                if (hasMilestone("ct",17)) layers.ct.buyables[61].buy()
                if (hasUpgrade("ct",106)) layers.ct.buyables[62].buy()
                if (hasMilestone("ct",19)) layers.ct.buyables[63].buy()
            }
            
        }
        if (hasUpgrade("ct",113)) {
            player.ct.Am = player.ct.Am.add(tmp.ct.getBetAmt.mul(diff).mul(tmp.ct.getAmps))
            player.ct.rolltime = Math.max(0,(player.ct.rolltime-diff))
        }
        let bulk = Decimal.div(player.ms,50).ceil()
        if (hasUpgrade("ct",142)) bulk = bulk.mul(5)
        if (hasUpgrade("ct",151)) bulk = bulk.mul(5)
        if (hasUpgrade("ct",156)) bulk = bulk.mul(10)
        if (hasUpgrade("ct",164)) bulk = bulk.mul(10)
        if (hasUpgrade("ct",165)) bulk = bulk.mul(40)
        if (hasUpgrade("ct",166)) bulk = bulk.mul(100)
        if (hasUpgrade("ct",174)) bulk = tet10(1.79769e308)
        if (hasUpgrade("ct",112)) layers.ct.buyables[71].buyMax()
        if (hasUpgrade("ct",114)) layers.ct.buyables[81].buyMax()
        if (hasUpgrade("ct",123)) layers.ct.buyables[72].buyMax()
        if (hasUpgrade("ct",131)) {
            layers.ct.buyables[91].buyMax(bulk)
            player.ct.autorolltime = Math.max(0,(player.ct.autorolltime-diff))
            if (player.ct.autorolltime==0 && player.ct.autoroll && tmp.ct.clickables[12].canClick) {
                layers.ct.clickables[12].onClick()
                let time = 10
                if (hasUpgrade("ct",133)) time=8
                if (hasUpgrade("ct",135)) time=6
                if (hasUpgrade("ct",144)) time=4
                if (hasUpgrade("ct",146)) time=3
                if (hasUpgrade("ct",153)) time=1.5
                if (hasUpgrade("ct",155)) time=1
                if (hasUpgrade("ct",156)) time=.5
                if (hasUpgrade("ct",165)) time=.3
                if (hasUpgrade("ct",166)) time=0
                player.ct.autorolltime=time
            }
        }
        if (hasUpgrade("ct",133)) {
            layers.ct.buyables[92].buyMax(bulk)
            layers.ct.buyables[93].buyMax(bulk)
        }
        if (hasUpgrade("ct",136)) {
            layers.ct.buyables[101].buyMax(bulk)
            layers.ct.buyables[102].buyMax(bulk)
            layers.ct.buyables[103].buyMax(bulk)
            layers.ct.buyables[111].buyMax(bulk)
            layers.ct.buyables[112].buyMax(bulk)
            layers.ct.buyables[113].buyMax(bulk)
            layers.ct.buyables[121].buyMax(bulk)
            layers.ct.buyables[122].buyMax(bulk)
            layers.ct.buyables[123].buyMax(bulk)
            layers.ct.buyables[131].buyMax(bulk)
            layers.ct.buyables[132].buyMax(bulk)
            layers.ct.buyables[133].buyMax(bulk)
        }
        if (hasUpgrade("ct",154)) {
            layers.ct.buyables[73].buyMax()
            layers.ct.buyables[82].buyMax()
        }
        if (hasUpgrade("ct",171)) layers.ct.buyables[83].buyMax()
        player.ct.highstreak = Decimal.max(player.ct.highstreak,player.ct.winstreak)
        player.ct.ghighstreak = Decimal.max(player.ct.ghighstreak,player.ct.gwinstreak)
        if (hasMilestone("ct",12)) player.ct.corona = tmp.ct.getCorGain.sub(player.ct.spent)
        if (hasMilestone("ct",13)) player.ct.LaBas = player.ct.LaBas.add(tmp.ct.getLaGain.mul(diff))
        player.ct.CorVid = player.ct.CorVid.add(tmp.ct.getCorVidGain.mul(diff))
        if (hasUpgrade("ct",166)) {
            player.ct.Avaxxers = tmp.ct.getVaxxerGain
            player.ct.Avaccines = player.ct.Avaccines.add(tmp.ct.getVaxGain.mul(diff))
        }
        if (hasUpgrade("ct",194)){
        player.ct.changebet++
        player.ct.bet = player.ct.changebet%3+1
        }
        if (hasUpgrade("ct",195)){
            layers.ct.buyables[141].buyMax()
            layers.ct.buyables[142].buyMax()
            layers.ct.buyables[143].buyMax()
        }
        if (hasUpgrade("ct",203)) {
            player.ct.SideEff = player.ct.SideEff.add(tmp.ct.getSEGain.mul(diff))
        }
        if (hasUpgrade("ct",226)) {
            player.ct.AdEff = player.ct.AdEff.add(tmp.ct.getAEGain.mul(diff))
        }
        if (hasUpgrade("ct",244)) {
            player.ct.Adversity = player.ct.Adversity.add(tmp.ct.getAdvGain.mul(diff))
        }
        if (hasUpgrade("ct",265)) {
            player.ct.Ui = player.ct.Ui.add(tmp.ct.getUIGain.mul(Decimal.mul(diff,tmp.ct.timeSpeed)))
        }
        if (hasUpgrade("ct",234)){
            layers.ct.buyables[151].buyMax()
            layers.ct.buyables[152].buyMax()
            layers.ct.buyables[153].buyMax()
        }
        let abulk = decimalOne
        if (hasUpgrade("ct",244)) abulk = abulk.mul(5)
        if (hasUpgrade("ct",244)) abulk = tet10(1.79769e308)
        if (hasUpgrade("ct",243)){
            layers.ct.buyables[161].buyMax(abulk)
        }
        if (hasUpgrade("ct",261)){
            layers.ct.buyables[163].buyMax(tet10(1.79769e308))
        }
        if (hasUpgrade("ct",274)){
            layers.ct.buyables[162].buyMax(tet10(1.79769e308))
            layers.ct.buyables[164].buy()
        }
        if (hasUpgrade("ct",281)){
            if (hasUpgrade("ct",354)) layers.ct.buyables[171].buyMax()
            else layers.ct.buyables[171].buy()
        }
        if (hasUpgrade("ct",284) && player.ct.inC){
            player.ct.Uv = player.ct.Uv.add(tmp.ct.clickables[31].gain.sub(player.ct.Uv).max(0).mul(diff))
        }
        if (hasUpgrade("ct",361)){
            layers.ct.buyables[181].buy()
        }
        if (hasUpgrade("ct",373)){
            player.ct.AdVax = player.ct.AdVax.add(tmp.ct.AdVaxGain.mul(Decimal.mul(diff,tmp.ct.timeSpeed)))
            player.ct.AdVax0 = player.ct.AdVax0.add(tmp.ct.buyables[202].gain.mul(Decimal.mul(diff,tmp.ct.timeSpeed)))
            player.ct.AdVax1 = player.ct.AdVax1.add(tmp.ct.buyables[203].gain.mul(Decimal.mul(diff,tmp.ct.timeSpeed)))
            player.ct.AdVax2 = player.ct.AdVax2.add(tmp.ct.buyables[204].gain.mul(Decimal.mul(diff,tmp.ct.timeSpeed)))
            player.ct.AdVax3 = player.ct.AdVax3.add(tmp.ct.buyables[211].gain.mul(Decimal.mul(diff,tmp.ct.timeSpeed)))
            player.ct.buyables[201] = player.ct.AdVax0
            player.ct.buyables[202] = player.ct.AdVax1
            player.ct.buyables[203] = player.ct.AdVax2
            player.ct.buyables[204] = player.ct.AdVax3
            player.ct.buyables[211] = player.ct.AdVax4
        }
        if (hasUpgrade("ct",306)) player.ct.Uv = tmp.ct.clickables[31].gain.max(player.ct.Uv)
        player.ct.bestAdv = player.ct.bestAdv.max(player.ct.Adversity)
        player.ct.bestAdvax = player.ct.bestAdvax.max(player.ct.Advaxxers)
        player.ct.bestBoost = player.ct.bestBoost.max(player.ct.aBoost)
        player.ct.buyables[181] = player.ct.Uib
        player.ct.buyables[191] = player.ct.Av.add(player.ct.Aspent)
        if (hasUpgrade("ct",355)) player.ct.Advaxxers = player.ct.Advaxxers.add(player.ct.bestAps.mul(Decimal.mul(diff/2,tmp.ct.timeSpeed)))
        if (player.ct.challenges[11]>=3) player.ct.arna = player.ct.arna.add(tmp.ct.aRNAgain.mul(Decimal.mul(diff,tmp.ct.timeSpeed)))
        if (player.ct.challenges[12]>=3) player.ct.aav = player.ct.aav.add(tmp.ct.AAVgain.mul(Decimal.mul(diff,tmp.ct.timeSpeed)))
        if (player.ct.challenges[21]>=3) player.ct.aiv = player.ct.aiv.add(tmp.ct.AIVgain.mul(Decimal.mul(diff,tmp.ct.timeSpeed)))
        if (player.ct.challenges[22]>=3) player.ct.asv = player.ct.asv.add(tmp.ct.ASVgain.mul(Decimal.mul(diff,tmp.ct.timeSpeed)))
        if (hasUpgrade("ct",422) && !inChallenge("ct",32)) {
            player.ct.aBoost = player.ct.aBoost.add(tmp.ct.buyables[231].effect.mul(Decimal.mul(diff,tmp.ct.timeSpeed)))
            player.ct.buyables[231] = player.ct.buyables[231].add(tmp.ct.buyables[232].effect.mul(Decimal.mul(diff,tmp.ct.timeSpeed)))
            player.ct.buyables[232] = player.ct.buyables[232].add(tmp.ct.buyables[233].effect.mul(Decimal.mul(diff,tmp.ct.timeSpeed)))
            player.ct.buyables[233] = player.ct.buyables[233].add(tmp.ct.buyables[241].effect.mul(Decimal.mul(diff,tmp.ct.timeSpeed)))
            player.ct.buyables[241] = player.ct.buyables[241].add(tmp.ct.buyables[242].effect.mul(Decimal.mul(diff,tmp.ct.timeSpeed)))
            player.ct.buyables[242] = player.ct.buyables[242].add(tmp.ct.buyables[243].effect.mul(Decimal.mul(diff,tmp.ct.timeSpeed)))
            player.ct.buyables[243] = player.ct.buyables[243].add(tmp.ct.buyables[251].effect.mul(Decimal.mul(diff,tmp.ct.timeSpeed)))
        }
        if (hasUpgrade("ct",381) && player.ct.Advaxxers) player.ct.Advaxxers = player.ct.Advaxxers.add(tmp.ct.clickables[32].gain.mul(Decimal.mul(diff/100,tmp.ct.timeSpeed)))
        if (inChallenge("ct",32)) player.ct.bestCases = player.ct.bestCases.max(player.points)
        if (hasUpgrade("uv",12)) layers.ct.clickables[33].onClick()
        if (hasUpgrade("ct",421)) layers.ct.buyables[191].buy()
        if (hasUpgrade("ct",434)) {
            layers.ct.buyables[231].buyMax()
            layers.ct.buyables[232].buyMax()
            layers.ct.buyables[233].buyMax()
        }
        if (hasUpgrade("ct",502)) {
            layers.ct.buyables[241].buyMax()
        }
        if (hasUpgrade("ct",443)) {
            layers.ct.buyables[242].buyMax()
        }
        if (hasUpgrade("ct",444)) {
            layers.ct.buyables[243].buyMax()
        }
        if (hasMilestone("uv",23) && player.ct.autoaest) {
            layers.ct.buyables[251].buy()
        }
        if (hasUpgrade("ct",513)) player.ct.extraBoost = player.ct.extraBoost.add(tmp.ct.upgrades[513].effect.mul(Decimal.mul(diff,tmp.ct.timeSpeed)))
        if (hasUpgrade("ct",541) && !inChallenge("ct",32)) {
            player.ct.ADgain = tmp.ct.getAntiDist
            player.ct.AntiDist = player.ct.AntiDist.add(tmp.ct.getAntiDistGain.mul(diff))
            let ad = powExp(player.ct.AntiDist.div(1.616255e-35),tmp.ct.getAntiDistDil).pow(tmp.ct.getAntiDistE).mul(1.616255e-35)
            player.ct.ADgain = ad.sub(player.ct.ADgain).div(diff)
        }
    },
    canReset() {return player.e.crna.gte(tmp.ct.requires) && player.e.mu.gte(1800)},
    getABmult() {
        let a = player.ct.buyables[233].sub(player.ct.aB3).add(1)
        let b = player.ct.buyables[241].sub(player.ct.aB4).add(1).pow(2)
        let c = player.ct.buyables[242].sub(player.ct.aB5).add(1).pow(3)
        return a.mul(b).mul(c)
    },
    getAerBmult() {
        let a = player.ct.buyables[243].sub(player.ct.aB6).add(1)
        if (hasUpgrade("ct",512)) a = a.pow(1.1)
        return a
    },
    getCRNA(){
        let c = tmp.ct.baseAmount
        let exp= decimalOne
        if (inChallenge("ct",32)) {

        }
        else {
        if (hasUpgrade("ct",164)) exp = exp.mul(1.02)
        if (hasUpgrade("ct",201)) exp = exp.mul(1.03)
        if (hasUpgrade("ct",203)) exp = exp.mul(tmp.ct.upgrades[203].effect)
        if (hasUpgrade("ct",206)) exp = exp.mul(tmp.ct.upgrades[206].effect)
        if (hasUpgrade("ct",234)) exp = exp.mul(1.02)
        if (hasUpgrade("ct",362)) exp = exp.mul(1.05)
        if (hasUpgrade("ct",372)) exp = exp.mul(1.05)
        if (c.gte(Decimal.pow(10,1e28))) c = c.log10().log10().div(28).pow(0.3).mul(28).pow10().pow10()
        if (c.gte(Decimal.pow(10,1e300))) c = c.log10().log10().div(300).pow(0.2).mul(300).pow10().pow10()
        if (c.gte(Decimal.tetrate(10,4))) c = Decimal.tetrate(10,slog(c).div(4).pow(0.7).mul(4))
        c = powSlog(c,exp)
        }
        return c 
    },
    getResetGain() { //ctnaGain
        let c = tmp.ct.getCRNA
        let d = decimalHalf
        let s = tmp.ct.getCTNAsc
        if (hasUpgrade("ct",76)) d = d.root(upgradeEffect("ct",76))
        if (c.lt(tmp.ct.requires)) return decimalZero
        let gain = powExp(c.div(tmp.ct.requires).pow(tmp.ct.exponent),0.5).pow(tmp.ct.gainExp).mul(tmp.ct.gainMult)
        if (gain.gte(Decimal.pow(10,s))) gain = gain.log10().div(s).pow(d).mul(s).pow10()
        if (player.ct.points.gte(Decimal.pow(10,1e10-1e5)) && player.ct.CorVid.eq(0)) gain = Decimal.pow(10,1e10-1.5)
        if (hasUpgrade("ct",486) && !inChallenge("ct",32)) gain = mulSlog(gain,tmp.ct.upgrades[486].effect)
        return gain.floor()
    },
    getResetGainb() { 
        let c = tmp.ct.getCRNA
        if (c.lt(tmp.ct.requires)) return decimalZero
        let gain = powExp(c.div(tmp.ct.requires).pow(tmp.ct.exponent),0.5).pow(tmp.ct.gainExp).mul(tmp.ct.gainMult)
        if (hasUpgrade("ct",486) && !inChallenge("ct",32)) gain = mulSlog(gain,tmp.ct.upgrades[486].effect)
        return gain.floor()
    },
    getCTNAsc() { 
        let s = tmp.ct.getCorEff.e1.mul(3e4)
        if (hasUpgrade("ct",52)) s = s.mul(upgradeEffect("ct",52))
        return s
    },
    getA(){
        let amt = tmp.ct.buyables[112].effect
        if (hasUpgrade("ct",122)) amt = amt.add(0.01)
        if (hasUpgrade("ct",163)) amt = powExp(amt,1.5)
        return amt
    },
    getB(){
        let amt = tmp.ct.buyables[93].effect
        return amt
    },
    getC(){
        let amt = tmp.ct.buyables[91].effect
        return amt
    },
    getBet() { 
        let x = tmp.ct.getX
        let a = tmp.ct.getA
        let b = tmp.ct.getB
        let c = tmp.ct.getC
        let iter = tmp.ct.getIter
        let bet = function(f){
            return a.mul(f.pow(2)).add(b.mul(f)).add(c)
        }
        if (iter.lte(5)) return recurse(bet, x, iter.toNumber())
        let amt = recurse(bet, x, 5)
        let rem = iter.sub(5)
        let levelsOfA = Decimal.pow(2, rem).sub(1)
        let aComponent = a.pow(levelsOfA)
        return amt.pow(Decimal.pow(2, rem)).times(aComponent)
    },
    getAexp() { 
        let exp = new Decimal(0.01)
        if (hasUpgrade("ct",143)) exp = exp.add(0.01)
        if (hasUpgrade("ct",145)) exp = exp.add(0.01)
        if (hasUpgrade("ct",151)) exp = exp.add(0.01)
        return exp.add(tmp.ct.buyables[83].effect)
    },
    getBetAmt() { 
        let mult = tmp.ct.buyables[92].effect.mul(tmp.ct.buyables[101].effect)
        .mul(tmp.ct.buyables[113].effect).mul(tmp.ct.buyables[123].effect).mul(tmp.ct.buyables[131].effect)
        if (hasUpgrade("ct",114)) mult = mult.mul(2)
        if (hasAchievement("a",145)) mult = mult.mul(2)
        if (hasAchievement("a",146)) mult = mult.mul(2)
        if (hasAchievement("a",151)) mult = mult.mul(5)
        if (hasUpgrade("ct",115)) mult = mult.mul(upgradeEffect("ct",115))
        if (hasUpgrade("ct",116)) mult = mult.mul(upgradeEffect("ct",116))
        if (hasUpgrade("ct",122)) mult = mult.mul(upgradeEffect("ct",122))
        if (hasUpgrade("ct",133)) mult = mult.mul(upgradeEffect("ct",133))
        if (tmp.ct.getAexp.gte(0.999)) mult = mult.pow(Decimal.sub(1,tmp.ct.getAexp).pow(-1))
        else if (hasUpgrade("ct",142)) mult = mult.mul(player.ct.Am.add(1).pow(tmp.ct.getAexp))
        if (hasAchievement("a",152)) mult = mult.mul(player.a.points)
        let bet = tmp.ct.getBet.mul(mult)
        if (hasUpgrade("ct",195)) bet = bet.pow(tmp.ct.upgrades[195].effect)
        return bet
    },
    WinChance() { 
        let eff = 18/37
        if (hasUpgrade("ct",121)) eff = 0.5
        if (hasUpgrade("ct",125)) eff = 0.55
        if (hasUpgrade("ct",136)) eff = 0.6
        if (hasUpgrade("ct",152)) eff = 0.65
        if (hasUpgrade("ct",163)) eff = 0.7
        if (hasUpgrade("ct",164)) eff = 0.75
        if (hasUpgrade("ct",166)) eff = 0.85
        if (hasUpgrade("ct",172)) eff = 1-tmp.ct.getLoseChance.toNumber()
        return eff
    },
    getWinChance() { 
        if (player.ct.wset == 0) return player.ct.wchance
        return tmp.ct.WinChance
    },
    getLoseChance() { 
        let eff = new Decimal(0.15)
        if (hasUpgrade("ct",172)) eff = eff.div(upgradeEffect("ct",172))
        if (hasUpgrade("ct",174)) eff = eff.div(upgradeEffect("ct",174))
        if (hasUpgrade("ct",186)) eff = eff.div(upgradeEffect("ct",186))
        return eff
    },
    getGreenChance() { 
        let eff = 1/37
        if (hasUpgrade("ct",152)) eff = 0.04
        if (hasUpgrade("ct",161)) eff = 0.06
        if (hasUpgrade("ct",163)) eff = 0.11
        if (hasUpgrade("ct",165)) eff = 0.15
        if (hasUpgrade("ct",166)) eff = 0.25
        if (hasUpgrade("ct",182)) eff = 18/37
        if (hasUpgrade("ct",192)) eff = 0.55
        if (hasUpgrade("ct",193)) eff = 1-tmp.ct.getGreenLoseChance.toNumber()
        return eff
    },
    getGreenLoseChance() { 
        let eff = new Decimal(0.45)
        if (hasUpgrade("ct",193)) eff = eff.div(upgradeEffect("ct",193))
        if (hasUpgrade("ct",196)) eff = eff.div(tmp.ct.upgrades[196].effect)
        if (hasUpgrade("ct",202)) eff = eff.div(tmp.ct.upgrades[202].effect)
        return eff
    },
    getGreenExp() { 
        let eff = decimalFive
        if (hasAchievement("a",156)) eff = decimalTen
        if (hasUpgrade("ct",166)) eff = eff.mul(player.ct.buyables[83].pow(2))
        if (hasUpgrade("ct",184)) eff = eff.mul(tmp.ct.upgrades[184].effect)
        if (hasUpgrade("ct",214)) eff = eff.mul(tmp.ct.upgrades[214].effect)
        return eff
    },
    getStreakMultNext() { 
        let mul = Decimal.pow(tmp.ct.buyables[102].effect,player.ct.winstreak)
        return mul
    },
    getStreakGreenNext() { 
        let mul = Decimal.pow(tmp.ct.buyables[102].effect.pow(tmp.ct.getGreenExp),player.ct.gwinstreak)
        return mul
    },
    getStreakMult() { 
        let mul = Decimal.pow(tmp.ct.buyables[102].effect,Decimal.sub(player.ct.winstreak,1)).max(1)
        return mul
    },
    getStreakGreen() { 
        let mul = Decimal.pow(tmp.ct.buyables[102].effect.pow(tmp.ct.getGreenExp),Decimal.sub(player.ct.gwinstreak,1)).max(1)
        return mul
    },
    getAmps() { 
        let eff = new Decimal(0.1)
        if (hasUpgrade("ct",116)) eff = eff.add(.05)
        if (hasUpgrade("ct",122)) eff = eff.add(.1)
        if (hasUpgrade("ct",132)) eff = eff.add(.75)
        if (hasUpgrade("ct",136)) eff = eff.add(1)
        if (hasUpgrade("ct",145)) eff = eff.add(8)
        if (hasUpgrade("ct",153)) eff = eff.mul(tmp.ct.getX.max(10).log10().pow(2))
        if (hasUpgrade("ct",155)) eff = eff.mul(tmp.ct.buyables[102].effect.pow(5))
        if (hasUpgrade("ct",156)) eff = eff.mul(upgradeEffect("ct",156))
        if (hasUpgrade("ct",165)) eff = eff.mul(upgradeEffect("ct",165))
        return eff.mul(tmp.ct.buyables[132].effect).mul(tmp.ct.buyables[133].effect)
    },
    getGreenPay() { 
        let mul = tmp.ct.getEvenPay.pow(tmp.ct.getGreenExp)
        return mul
    },
    getNextAt() {
        let next = tmp.ct.getResetGain.add(1).max(1)
		next = powExp(next.div(tmp.ct.gainMult).root(tmp.ct.gainExp),2).root(tmp.ct.exponent).mul(tmp.ct.requires)
		return next;
    },
    layerShown() {
        let shown = hasUpgrade("e",426)
        if(player.ct.unlocked) shown = true
        return shown && player.uv.tree == "normal"
    },
    prestigeButtonText() {
        let text =  `${ player.ct.points.lt(1e3) ? (tmp.ct.resetDescription !== undefined ? tmp.ct.resetDescription : "Reset for ") : ""}+<b>${formatWhole(tmp.ct.resetGain)}</b> ${tmp.ct.resource} ${tmp.ct.getResetGain.lt(100) && player.ct.points.lt(1e3) ? `<br><br>Next at ${ (tmp.ct.roundUpCost ? formatWhole(tmp.ct.nextAt) : format(tmp.ct.nextAt))} ${ tmp.ct.baseResource }` : ""}` + "<br>"
        let gain = tmp.ct.getResetGain.div(player.ct.resetTime+0.0001)
        if (gain.gte(10)) text += format(gain) + "/s"
        else if (gain.gte(1/6)) text += format(gain.mul(60)) + "/min"
        else text += format(gain.mul(3600)) + "/hr"
        return text+"<br> Req: COVID-19 mutation"
    },
    unlocked(){
        return player.e.mu.gte(1800) && player.e.crna.gte(6.25e26)
    },
    effect() {
        let eff = powExp(player.ct.best.add(1).mul(10),3).div(10).tetrate(1.1).pow(1.5)
        if (eff.gte(1e50)) eff = eff.log10().mul(2).pow(25)
        if (eff.gte(1e100)) eff = eff.log10().div(100).pow(0.5).mul(100).pow10()
        if (eff.gte(Decimal.pow(10,3e6))) eff.log10().div(3e6).pow(0.5).mul(3e6).pow10()
        if (hasUpgrade("ct",46)) eff = eff.pow(upgradeEffect("ct",46))
        return eff.pow(tmp.ct.buyables[23].effect).pow(tmp.ct.getCorVeff)
    },
    effectDescription() {
        return "which boosts previous resource gain by "+layerText("h2", "ct", format(tmp.ct.effect))+" (based on best)(Base CRNA gain)"
    },
    microtabs: {
        Anti: {
            "Upgrades": {
                content: [
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers") return ["buyables",[7,8]]},
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers") return ["upgrades",[11,12,13,14,15,16]]}
                ],
            },
            "Anti-Roulette": {
                content: [
                    ["raw-html",
                    function () {
                        if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Anti == "Anti-Roulette") {
                            let x = makeRed("x")
                            let A = makeBlue("a")
                            let B = makeBlue("b")
                            let C = makeBlue("c")
                            let a = "Bet: <h2 style='color:"+player.ct.colors[player.ct.bet-1]+";text-shadow:0px 0px 10px;'>"+(player.ct.bets[player.ct.bet-1])+"</h2><br>"
                            let b = "Bet Amount:"+layerText("h2", "ct", format(tmp.ct.getBetAmt))+"<br>"
                            let b1 = "Bet Amount:f<sup>"+formatWhole(tmp.ct.getIter)+"</sup>("+x+")*multipliers<br>"
                            let b2 = "f("+x+")="+A+x+"<sup>2</sup>+"+B+x+"+"+C+"<br>"
                            let b3 = shiftDown?x+"="+format(tmp.ct.getX)+", "+A+"="+format(tmp.ct.getA)+", "+B+"="+format(tmp.ct.getB)+", "+C+"="+format(tmp.ct.getC)+", f<sup>"+formatWhole(tmp.ct.getIter)+"</sup>("+x+")="+format(tmp.ct.getBet)+"<br>"+x+" is Anti-Maskers/100, but every time "+x+" gets "+format(tmp.ct.getXmult)+"x larger, it is square rooted<br>":""
                            let c = "You are gaining "+layerText("h2", "ct", format(tmp.ct.getBetAmt.mul(tmp.ct.getAmps)))+" Anti-"+pluralize(tmp.ct.getBetAmt.mul(tmp.ct.getAmps),'Masker','Maskers')+" per second ("+format(tmp.ct.getAmps.mul(100))+"% of bet amount)</br>"
                            let d = (player.ct.win.gte(0)?"You won ":"You lost ")+layerText("h2", "ct", format(player.ct.win.gte(0)?player.ct.win:player.ct.win.neg()))+" Anti-Maskers</br>"+(player.ct.buyables[102].gte(1)?(hasUpgrade("ct",145)?"Even ":"")+(Decimal.gt(player.ct.winstreak,0)?"Win Streak:"+formatWhole(player.ct.winstreak):player.ct.losestreak>0?"Lose Streak:"+player.ct.losestreak:"")+" (Win Multiplier:"+format(tmp.ct.getStreakMult)+", Next:"+format(tmp.ct.getStreakMultNext)+"), Highest Win Streak:"+formatWhole(player.ct.highstreak)+"<br>":"")
                            let d2 = (hasUpgrade("ct",145)&&(Decimal.gt(player.ct.gwinstreak,0)||Decimal.gt(player.ct.glosestreak,0)))?((Decimal.gt(player.ct.gwinstreak,0)?"Green Win Streak:"+formatWhole(player.ct.gwinstreak):player.ct.glosestreak>0?"Green Lose Streak:"+player.ct.glosestreak:"")+" (Win Multiplier:"+format(tmp.ct.getStreakGreen)+", Next:"+format(tmp.ct.getStreakGreenNext)+"), Highest Win Streak:"+formatWhole(player.ct.ghighstreak)+"<br>"):""
                            let e = shiftDown?"Bet Payouts:<br>Red/Black - "+format(tmp.ct.getEvenPay.sub(1))+":1<br>":""
                            let e2 = (shiftDown && hasUpgrade("ct",145))?"Green - "+format(tmp.ct.getGreenPay.sub(1))+":1<br>":""
                            let f = !hasUpgrade("ct",194)?(((player.ct.bet!=3 && tmp.ct.getLoseChance.lt(1e-5))?"Lose":"Win") + " Chance:"+(player.ct.bet==3?format(new Decimal(tmp.ct.getGreenChance*100)):(tmp.ct.getLoseChance.lt(1e-5)?format(tmp.ct.getLoseChance.mul(100)):format(new Decimal(tmp.ct.getWinChance*100))))+"%<br>"):""
                            let f2 = hasUpgrade("ct",194)?"Even Lose Chance:"+format(tmp.ct.getLoseChance.mul(100))+"%, Green "+(tmp.ct.getGreenLoseChance.lt(1e-5)?"Lose":"Win")+" Chance:"+(tmp.ct.getGreenLoseChance.lt(1e-5)?format(tmp.ct.getGreenLoseChance.mul(100)):format(tmp.ct.getGreenChance*100))+"%":""
                        return a+b+b1+b2+b3+c+d+d2+e+e2+f+f2
                        }
                    }],
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Anti == "Anti-Roulette") return ["clickables",[4,1,2]]},
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Anti == "Anti-Roulette") return ["buyables",[9,10,11,12,13]]},
                ],
                unlocked() {
                    return hasUpgrade("ct",113)}
            },
            "Anti-Vaxxers": {
                content: [
                    ["raw-html",
                    function () {
                        if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Anti == "Anti-Vaxxers") {
                            let a = "You have "+colorText("h2", "#8855cc", formatWhole(player.ct.Avaxxers))+" Anti-"+pluralize(player.ct.Avaxxers,'Vaxxer','Vaxxers',true)+", which "+pluralize(player.ct.Avaxxers,'produces','produce',true)+" "+colorText("h2", "#8855cc", formatWhole(tmp.ct.getVaxGain))+" Anti-"+pluralize(tmp.ct.getVaxGain,'Vaccine','Vaccines',true)+" "+(hasUpgrade("ct",203)?(" and "+colorText("h2","#8855cc",format(tmp.ct.getSEGain))+" Side "+pluralize(tmp.ct.getSEGain,'Effect','Effects')+" "):"")+"per second (next at "+format(tmp.ct.getVaxxerNext)+")<br>"
                            let b = "You have "+colorText("h2", "#8855cc", formatWhole(player.ct.Avaccines))+" Anti-"+pluralize(player.ct.Avaccines,'Vaccine','Vaccines',true)+", which "+pluralize(player.ct.Avaccines,'boosts','boost',true)+" Anti-Maskers effect by ^"+colorText("h2", "#8855cc", format(tmp.ct.getAVaxEff))+(hasUpgrade("ct",176)?" and Even Payout by "+colorText("h2", "#8855cc", format(tmp.ct.getVaxEff)):"")+"<br>"
                            let c = hasUpgrade("ct",203)?"You have "+colorText("h2", "#8855cc", formatWhole(player.ct.SideEff))+" Side "+pluralize(player.ct.SideEff,'Effect','Effects',true)+", which "+pluralize(player.ct.SideEff,'boosts','boost',true)+" Anti-Vaccine gain by "+colorText("h2", "#8855cc", format(tmp.ct.getSEEff)):""
                        return a+b+c
                        }
                    }],
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Anti == "Anti-Vaxxers") return ["upgrades",[17,18,19,20,21,22]]},
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Anti == "Anti-Vaxxers") return ["buyables",[14,15]]},
                ],
                buttonStyle: {"border-color": "#8855cc"},
                unlocked() {
                    return hasUpgrade("ct",166)}
            },
            "Adverse Effects": {
                content: [
                    ["raw-html",
                    function () {
                        if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Anti == "Adverse Effects") {
                            let a = "You have "+colorText("h2", "#8855cc", formatWhole(player.ct.Avaxxers))+" Anti-"+pluralize(player.ct.Avaxxers,'Vaxxer','Vaxxers',true)+", which "+pluralize(player.ct.Avaxxers,'produces','produce',true)+" "+colorText("h2", "#8855cc", formatWhole(tmp.ct.getVaxGain))+" Anti-"+pluralize(tmp.ct.getVaxGain,'Vaccine','Vaccines',true)+" "+(hasUpgrade("ct",203)?(" and "+colorText("h2","#8855cc",format(tmp.ct.getSEGain))+" Side "+pluralize(tmp.ct.getSEGain,'Effect','Effects')+" "):"")+"per second (next at "+format(tmp.ct.getVaxxerNext)+")<br>"
                            let b = "You have "+colorText("h2", "#8855cc", formatWhole(player.ct.AdEff))+" Adverse "+pluralize(player.ct.AdEff,'Effect','Effects',true)+", which "+pluralize(player.ct.AdEff,'boosts','boost',true)+" Side Effect gain by "+colorText("h2", "#8855cc", format(tmp.ct.getAEEff))+"<br>"
                            let c = "You are gaining "+colorText("h2", "#8855cc", format(tmp.ct.getAEGain))+" Adverse "+pluralize(tmp.ct.getAEGain,'Effect','Effects')+" per second (starts at "+format(5e11)+" Anti-Vaxxers)<br>"
                            let d = hasUpgrade("ct",244)?"You have "+colorText("h2", "#6688aa", formatWhole(player.ct.Adversity))+" "+pluralize(player.ct.Adversity,'Adversity','Adversities',true)+", which "+pluralize(player.ct.Adversity,'boosts','boost',true)+" Adverse Effect gain by "+colorText("h2", "#6688aa", format(tmp.ct.getAdvEff))+"<br>":""
                            let e = hasUpgrade("ct",244)?"You are gaining "+colorText("h2", "#6688aa", format(tmp.ct.getAdvGain))+" "+pluralize(tmp.ct.getAdvGain,'Adversity','Adversities')+" per second (starts at "+format(player.ct.inC?"e10500000000":"1e147956")+" Adverse Effects)<br>":""
                            let f = "Your best Adversities is " + format(player.ct.bestAdv)
                        return a+b+c+d+e+f
                        }
                    }],
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Anti == "Adverse Effects") return ["upgrades",[23,24,25,26]]},
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Anti == "Adverse Effects") return ["buyables",[16]]},
                ],
                buttonStyle: {"border-color": "#8855cc"},
                unlocked() {
                    return hasUpgrade("ct",226)}
            },
            "Vaccination": {
                content: [
                    ["raw-html",
                    function () {
                        if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Anti == "Vaccination") {
                            let a = "You have "+colorText("h2", "#153d63", formatWhole(player.ct.Uv))+" Unvaccinated "+pluralize(player.ct.Uv,'Vaxxer','Vaxxers',true)+", which "+pluralize(player.ct.Uv,'produces','produce',true)+" "+colorText("h2", "#153d63", format(tmp.ct.getUIGain))+" Unvaccinated "+pluralize(tmp.ct.getUIGain,'Infection','Infections')+" per second<br>"
                            let b = "You have "+colorText("h2", "#153d63", formatWhole(player.ct.Ui))+" Unvaccinated "+pluralize(player.ct.Ui,'Infection','Infections',true)+", which "+pluralize(player.ct.Ui,'adds','add',true)+" "+colorText("h2", "#153d63", format(tmp.ct.getUIEff))+" to 'Anti-Capped' slog<br>"
                            let c = hasUpgrade("ct",541)?" Time Speed: "+colorText("h2", "#153d63",format(tmp.ct.timeSpeed))+"x<br>":""
                        return a+b+c
                        }
                    }],
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Anti == "Vaccination") return ["row", [["clickable",31]]]},
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Anti == "Vaccination") return ["buyables",[17,18]]},
                    ["raw-html",
                    function () {
                        if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Anti == "Vaccination") {
                            let a = "You can only buy the upgrades in Vaccination"
                        return a
                        }
                    }],
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Anti == "Vaccination") return ["upgrades",[27,28,33]]},
                ],
                buttonStyle: {"border-color": "#153d63"},
                unlocked() {
                    return hasUpgrade("ct",265)}
            },
            "Adverse Vaccines": {
                content: [
                    ["raw-html",
                    function () {
                        if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Anti == "Adverse Vaccines") {
                            let a = "You have "+colorText("h2", "#153d63", formatWhole(player.ct.Uv))+" Unvaccinated "+pluralize(player.ct.Uv,'Vaxxer','Vaxxers',true)+", which "+pluralize(player.ct.Uv,'produces','produce',true)+" "+colorText("h2", "#153d63", format(tmp.ct.getUIGain))+" Unvaccinated "+pluralize(tmp.ct.getUIGain,'Infection','Infections')+" per second<br>"
                            let b = "You have "+colorText("h2", "#153d63", formatWhole(player.ct.Ui))+" Unvaccinated "+pluralize(player.ct.Ui,'Infection','Infections',true)+", which "+pluralize(player.ct.Ui,'adds','add',true)+" "+colorText("h2", "#153d63", format(tmp.ct.getUIEff))+" to 'Anti-Capped' slog<br>"
                            let c = hasUpgrade("ct",541)?" Time Speed: "+colorText("h2", "#153d63",format(tmp.ct.timeSpeed))+"x<br>":""
                        return a+b+c
                        }
                    }],
                    ["microtabs","Av"]
                ],
                buttonStyle: {"border-color": "#153d63"},
                unlocked() {
                    return hasUpgrade("ct",286) || player.ct.bestAdvax.gte(1)}
            },
        },
        Av: {
            "Anti-Vaxxed Vaxxers": {
                content: [
                    ["raw-html",
                    function () {
                        if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Av == "Anti-Vaxxed Vaxxers") {
                            let a = "You have "+colorText("h2", "#153d63", formatWhole(player.ct.Av))+" Anti-Vaxxed "+pluralize(player.ct.Av,'Vaxxer','Vaxxers')+"<br>"
                        return a
                        }
                    }],
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Anti == "Adverse Vaccines") return ["buyables",[19]]},
                    ["row", [["upgrade",291]]],
                    ["row", [["upgrade",292],["upgrade",293]]],
                    ["row", [["upgrade",294],["upgrade",295]]],
                    ["row", [["upgrade",296]]],
                    ["row", [["upgrade",301]]],
                    ["row", [["upgrade",302]]],
                    ["row", [["upgrade",303],["upgrade",304],["upgrade",305]]],
                    ["row", [["upgrade",306]]],
                    ["row", [["upgrade",311],["upgrade",312]]],
                    ["row", [["upgrade",313]]],
                    ["row", [["upgrade",314]]],
                ],
                buttonStyle: {"border-color": "#153d63"},
                unlocked() {
                    return hasUpgrade("ct",286) || player.ct.bestAdvax.gte(1)}
            },
            "Adverse Vaxxers": {
                content: [
                    ["raw-html",
                    function () {
                        if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Av == "Adverse Vaxxers") {
                            let ap = player.ct.bestAps
                            let aps = format(ap.mul(3600))+"/hr"
                            if (ap.gte(10)) aps = format(ap)+"/s"
                            else if (ap.gte(1/6)) aps = format(ap.mul(60))+"/min"
                            let a = "You have "+colorText("h2", "#153d63", formatWhole(player.ct.Advaxxers))+" Adverse "+pluralize(player.ct.Advaxxers,'Vaxxer','Vaxxers',true)+", which "+pluralize(player.ct.Advaxxers,'boosts','boost',true)+" UI gain by "+colorText("h2", "#153d63",format(tmp.ct.AdvaxxerEff))+"<br>"
                            let b = "Your best Adverse Vaxxers is "+formatWhole(player.ct.bestAdvax)+"<br>"
                            let c = "Reset Time: "+(player.ct.AdvTime>=31556952e3?formatTimeLong(player.ct.AdvVaxTime):formatTime(player.ct.AdvTime))+"<br>"
                            let d = "Your best Adverse Vaxxers/hr: "+aps+"<br>"
                        return a+b+c+d
                        }
                    }],
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Av == "Adverse Vaxxers") return ["row", [["clickable",32]]]},
                    "blank",
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Av == "Adverse Vaxxers") return ["upgrades",[34,35,36,37,38,39,40]]},
                ],
                buttonStyle: {"border-color": "#153d63"},
                unlocked() {
                    return hasUpgrade("ct",302) || player.ct.bestAdvax.gte(1)}
            },
            "AdVaccines": {
                content: [
                    ["raw-html",
                    function () {
                        if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Av == "AdVaccines") {
                            let a = "You have "+colorText("h2", "#153d63", formatWhole(player.ct.Advaxxers))+" Adverse "+pluralize(player.ct.Advaxxers,'Vaxxer','Vaxxers',true)+", which "+pluralize(player.ct.Advaxxers,'boosts','boost',true)+" UI gain by "+colorText("h2", "#153d63",format(tmp.ct.AdvaxxerEff))+"<br>"
                            let b = "You have "+colorText("h2", "#153d63", formatWhole(player.ct.AdVax))+" AdVaxxed "+pluralize(player.ct.AdVax,'Vaccine','Vaccines',true)+", which "+pluralize(player.ct.AdVax,'boosts','boost',true)+" Adverse Vaxxer gain by "+colorText("h2", "#153d63",format(tmp.ct.AdVaxEff))+"<br>"
                            let c = "You are gaining "+format(tmp.ct.AdVaxGain)+" AdVaxxed Vaccines per second<br>"
                            let d = player.ct.challenges[11]>=3?"You have "+colorText("h2", "#aa0000", formatWhole(player.ct.arna))+" aRNA "+pluralize(player.ct.arna,'Vaccine','Vaccines',true)+" <span style='color:#aa0000'>("+format(tmp.ct.aRNAgain)+"/s)</span> (starts at "+format(1e67)+" AdVaxxed Vaxxers), which "+pluralize(player.ct.arna,'boosts','boost',true)+" AdVaccines by "+colorText("h2", "#aa0000",format(tmp.ct.aRNAeff))+"<br>":""
                            let e = player.ct.challenges[12]>=3?"You have "+colorText("h2", "#aa5500", formatWhole(player.ct.aav))+" AAV "+pluralize(player.ct.aav,'Vaccine','Vaccines',true)+" <span style='color:#aa5500'>("+format(tmp.ct.AAVgain)+"/s)</span> (starts at "+format(1e53)+" AdVaxxed AdVaxxers), which "+pluralize(player.ct.aav,'boosts','boost',true)+" Anti-Vaccine effect exp<sup>"+(hasUpgrade("ct",541)?"4":"3")+"</sup> by "+colorText("h2", "#aa5500",format(tmp.ct.AAVeff))+"<br>":""
                            let f = player.ct.challenges[21]>=3?"You have "+colorText("h2", "#00aa55", formatWhole(player.ct.aiv))+" AIV "+pluralize(player.ct.aiv,'Vaccine','Vaccines',true)+" <span style='color:#00aa55'>("+format(tmp.ct.AIVgain)+"/s)</span> (starts at "+format(1e32)+" AnVaxxed Vaccines), which "+pluralize(player.ct.aiv,'boosts','boost',true)+" UV gain by "+colorText("h2", "#00aa55",format(tmp.ct.AIVeff))+"<br>":""
                            let g = player.ct.challenges[22]>=3?"You have "+colorText("h2", "#00aaaa", formatWhole(player.ct.asv))+" ASV "+pluralize(player.ct.asv,'Vaccine','Vaccines',true)+" <span style='color:#00aaaa'>("+format(tmp.ct.ASVgain)+"/s)</span> (starts at "+format(1e17)+" AnVaxxed Vaxxers), which "+pluralize(player.ct.asv,'increases','increase',true)+" multiplier per AdVaccine by "+colorText("h2", "#00aaaa",format(tmp.ct.ASVeff))+"<br>":""
                        return a+b+c+d+e+f+g
                        }
                    }],
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Av == "AdVaccines") return ["row", [["clickable",33]]]},
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Av == "AdVaccines") return ["buyables",[20,21,22]]},
                ],
                buttonStyle: {"border-color": "#153d63"},
                unlocked() {
                    return hasUpgrade("ct",373)}
            },
            "Challenges": {
                content: [
                    ["raw-html",
                    function () {
                        if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Av == "AdVaccines") {
                            let a = "You have "+colorText("h2", "#153d63", formatWhole(player.ct.Advaxxers))+" Adverse Vaxxers, which boost UI gain by "+colorText("h2", "#153d63",format(tmp.ct.AdvaxxerEff))+"<br>"
                            let b = "You have "+colorText("h2", "#153d63", formatWhole(player.ct.AdVax))+" AdVaxxed Vaccines, which boost Adverse Vaxxer gain by "+colorText("h2", "#153d63",format(tmp.ct.AdVaxEff))+"<br>"
                            let c = "You are gaining "+format(tmp.ct.AdVaxGain)+" AdVaxxed Vaccines per second"
                        return a+b+c
                        }
                    }],
                    "challenges",
                ],
                buttonStyle: {"border-color": "#153d63"},
                unlocked() {
                    return hasUpgrade("ct",382)}
            },
            "Booster Upgrades": {
                content: [
                    ["raw-html",
                    function () {
                        if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Av == "Booster Upgrades") {
                            let a = "Your best cases in 'Booster Vaccine' is "+colorText("h2", "#153d63", formatWhole(player.ct.bestCases))
                            let b = shiftDown?"<br>"+format(tmp.ct.getBest):""
                        return a+b
                        }
                    }],
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Av == "Booster Upgrades") return ["upgrades",[41,42,43,44,45]]},
                ],
                buttonStyle: {"border-color": "#153d63"},
                unlocked() {
                    return hasUpgrade("ct",314) || player.ct.bestCases.gt(0)}
            },
            "Anti-Boosters": {
                content: [
                    ["raw-html",
                    function () {
                        if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Av == "Anti-Boosters") {
                            let a = "You have "+colorText("h2", "#153d63", formatWhole(player.ct.Advaxxers))+" Adverse "+pluralize(player.ct.Advaxxers,'Vaxxer','Vaxxers',true)+", which "+pluralize(player.ct.Advaxxers,'boosts','boost',true)+" UI gain by "+colorText("h2", "#153d63",format(tmp.ct.AdvaxxerEff))+"<br>"
                            let b = "You have "+colorText("h2", "#fa5f9c", formatWhole(player.ct.aBoost))+" Anti-"+pluralize(player.ct.aBoost,'Booster','Boosters',true)+", which "+pluralize(player.ct.aBoost,'boosts','boost',true)+" Anti-Vax type gain by "+colorText("h2", "#fa5f9c",format(tmp.ct.aBoostEff))+"<br>"
                            let c = "Your best Anti-Boosters is "+colorText("h2", "#fa5f9c", formatWhole(player.ct.bestBoost))+"<br>"
                        return a+b+c
                        }
                    }],
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Av == "Anti-Boosters") return ["buyables",[23,24,25]]},
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Av == "Anti-Boosters") return ["upgrades",[46,47,48,49,50]]},
                ],
                buttonStyle: {"border-color": "#fa5f9c"},
                unlocked() {
                    return hasUpgrade("ct",422)}
            },
            "Anti-Distancing": {
                content: [
                    ["raw-html",
                    function () {
                        if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Av == "Anti-Distancing") {
                            let dil = tmp.ct.getAntiDistDil
                            let exp = tmp.ct.getAntiDistE
                            let a = "You have "+colorText("h2", "#fa5f9c", formatWhole(player.ct.aBoost))+" Anti-"+pluralize(player.ct.aBoost,'Booster','Boosters',true)+"<br>"
                            let b = "The distance between people is "+colorText("h2", "#fa5f9c", distShort(tmp.ct.getDist))+", which boosts Anti-Booster gain by ^"+colorText("h2", "#fa5f9c",format(tmp.ct.getDistEff))+"<br>"
                            let c = hasUpgrade("ct",541)?("The anti-distance between viruses is "+colorText("h2", "#05a063", distShort(tmp.ct.getAntiDist))+", which divides distance by "+colorText("h2", "#05a063",format(tmp.ct.AntiDistEff[0]))+" and boosts time speed by "+colorText("h2", "#05a063",format(tmp.ct.AntiDistEff[1]))+"<br>"):""
                            let d = hasUpgrade("ct",541)?("You are gaining "+colorText("h2", "#05a063", distShort(player.ct.ADgain))+" anti-distance per second (Base Gain: "+colorText("h2", "#05a063",distShort(tmp.ct.getAntiDistGain))+") (starts at "+distShort(431e-6)+" distance) (hold shift to see formula)<br>"):""
                            let e = hasUpgrade("ct",541)&&shiftDown?("Formula: 10<sup>log10(Base Anti-Distance in PL)<sup>"+format(dil)+"</sup>*"+format(exp)+"</sup> PL<br>"):""
                        return a+b+c+d+e
                        }
                    }],
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Av == "Anti-Distancing") return ["buyables",[26,27,28]]},
                    function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers" && player.subtabs.ct.Av == "Anti-Distancing") return ["upgrades",[51,52,53,54,55]]},
                ],
                buttonStyle: {"border-color": "#fa5f9c"},
                unlocked() {
                    return hasUpgrade("ct",443)}
            },
        }
    },
    tabFormat: {
        "Main": {
        content:[
            function() {if (player.tab == "ct") return "main-display"},
            function() {if (player.tab == "ct" && !hasMilestone("ct",10)) return "prestige-button"},
            ["raw-html",function() {if (player.tab == "ct" && hasMilestone("ct",10)) return "You are gaining "+layerText("h2", "ct", format(tmp.ct.getResetGain.div(inChallenge("ct",32)?100:1)))+ " CTNA per second (starts at "+format(tmp.ct.requires)+" CRNA and COVID-19 Mutation)"}],
            ["raw-html",function() {if (player.tab == "ct" && tmp.ct.getResetGain.gte(Decimal.pow(10,tmp.ct.getCTNAsc))) return "CTNA gain is ^"+layerText("h2", "ct", format(tmp.ct.getResetGain.log(tmp.ct.getResetGainb)))+ "." + "(starts at "+format(tmp.ct.getCTNAsc.pow10()) + ")"}],
            function() {if (player.tab == "ct") return "resource-display"},
            "blank",
            ["display-text",function() {if (!hasMilestone("ct",10)) return "Reset time:"+formatTime(player.ct.resetTime)}],
            ["upgrades",[1,2,3,4,5,6]]
        ]
            
        },
        "Milestones": {
            content:[
            function() {if (player.tab == "ct") return "main-display"},
            function() {if (player.tab == "ct" && !hasMilestone("ct",10)) return "prestige-button"},
            ["raw-html",function() {if (player.tab == "ct" && hasMilestone("ct",10)) return "You are gaining "+layerText("h2", "ct", format(tmp.ct.getResetGain.div(inChallenge("ct",32)?100:1)))+ " CTNA per second (starts at "+format(tmp.ct.requires)+" CRNA and COVID-19 Mutation)"}],
            ["raw-html",function() {if (player.tab == "ct" && tmp.ct.getResetGain.gte(Decimal.pow(10,tmp.ct.getCTNAsc))) return "CTNA gain is ^"+layerText("h2", "ct", format(tmp.ct.getResetGain.log(tmp.ct.getResetGainb)))+ "." + "(starts at "+format(tmp.ct.getCTNAsc.pow10()) + ")"}],
            function() {if (player.tab == "ct") return "resource-display"},
            "blank",
            ["display-text",function() {if (!hasMilestone("ct",10)) return "Reset time:"+formatTime(player.ct.resetTime)}],
            "milestones"
        ],
        },
        "Buyables": {
            content:[
            function() {if (player.tab == "ct") return "main-display"},
            function() {if (player.tab == "ct" && !hasMilestone("ct",10)) return "prestige-button"},
            ["raw-html",function() {if (player.tab == "ct" && hasMilestone("ct",10)) return "You are gaining "+layerText("h2", "ct", format(tmp.ct.getResetGain.div(inChallenge("ct",32)?100:1)))+ " CTNA per second (starts at "+format(tmp.ct.requires)+" CRNA and COVID-19 Mutation)"}],
            ["raw-html",function() {if (player.tab == "ct" && tmp.ct.getResetGain.gte(Decimal.pow(10,tmp.ct.getCTNAsc))) return "CTNA gain is ^"+layerText("h2", "ct", format(tmp.ct.getResetGain.log(tmp.ct.getResetGainb)))+ "." + "(starts at "+format(tmp.ct.getCTNAsc.pow10()) + ")"}],
            function() {if (player.tab == "ct") return "resource-display"},
            "blank",
            ["display-text",function() {if (!hasMilestone("ct",10)) return "Reset time:"+formatTime(player.ct.resetTime)}],
            function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Buyables") return ["buyables",[1,2]]},
        ],
        unlocked () {return hasMilestone("ct",6)}
        },
        "Coronas": {
            content:[
            function() {if (player.tab == "ct") return "main-display"},
            function() {if (player.tab == "ct" && !hasMilestone("ct",10)) return "prestige-button"},
            ["raw-html",function() {if (player.tab == "ct" && hasMilestone("ct",10)) return "You are gaining "+layerText("h2", "ct", format(tmp.ct.getResetGain.div(inChallenge("ct",32)?100:1)))+ " CTNA per second (starts at "+format(tmp.ct.requires)+" CRNA and COVID-19 Mutation)"}],
            ["raw-html",function() {if (player.tab == "ct" && tmp.ct.getResetGain.gte(Decimal.pow(10,tmp.ct.getCTNAsc))) return "CTNA gain is ^"+layerText("h2", "ct", format(tmp.ct.getResetGain.log(tmp.ct.getResetGainb)))+ "." + "(starts at "+format(tmp.ct.getCTNAsc.pow10()) + ")"}],
            function() {if (player.tab == "ct") return "resource-display"},
            "blank",
            ["raw-html", 
            function () {
                if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Coronas") {
                let a = !hasMilestone("ct",10)?"Reset time:"+formatTime(player.ct.resetTime)+"<br>":""
                let b = "You have "+layerText("h2", "ct",formatWhole(player.ct.corona))+ " "+pluralize(player.ct.corona,'Corona','Coronas',true)+", which "+pluralize(player.ct.corona,'makes','make',true)+" CTNA gain softcap start "+format(tmp.ct.getCorEff.e1)+"x later and "+pluralize(player.ct.corona,'adds','add',true)+" "+format(tmp.ct.getCorEff.e2)+" to CRNA exp per Corona Mutation.<br>"
                let c = "Next Corona at "+format(tmp.ct.getCorNext)+" CTNA."
                return a+b+c
                }
            }],
            function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Coronas") return ["buyables",[3]]},
        ],
        unlocked () {return hasMilestone("ct",12)}
        },
        "CorVids": {
            content:[
            function() {if (player.tab == "ct") return "main-display"},
            function() {if (player.tab == "ct" && !hasMilestone("ct",10)) return "prestige-button"},
            ["raw-html",function() {if (player.tab == "ct" && hasMilestone("ct",10)) return "You are gaining "+layerText("h2", "ct", format(tmp.ct.getResetGain.div(inChallenge("ct",32)?100:1)))+ " CTNA per second (starts at "+format(tmp.ct.requires)+" CRNA and COVID-19 Mutation)"}],
            ["raw-html",function() {if (player.tab == "ct" && tmp.ct.getResetGain.gte(Decimal.pow(10,tmp.ct.getCTNAsc))) return "CTNA gain is ^"+layerText("h2", "ct", format(tmp.ct.getResetGain.log(tmp.ct.getResetGainb)))+ "." + "(starts at "+format(tmp.ct.getCTNAsc.pow10()) + ")"}],
            function() {if (player.tab == "ct") return "resource-display"},
            "blank",
            ["raw-html", 
            function () {
                if (player.tab == "ct" && player.subtabs.ct.mainTabs == "CorVids") {
                let a = !hasMilestone("ct",10)?"Reset time:"+formatTime(player.ct.resetTime)+"<br>":""
                let b = "You have "+layerText("h2", "ct",formatWhole(player.ct.CorVid))+ " "+pluralize(player.ct.CorVid,'CorVid','CorVids',true)+", which "+pluralize(player.ct.CorVid,'boosts','boost',true)+" CTNA effect by ^"+format(tmp.ct.getCorVeff)+"<br>"
                let c = "You have "+layerText("h2", "ct",formatWhole(player.ct.LaBas))+ " "+pluralize(player.ct.LaBas,'LaBa','LaBas',true)+", which "+pluralize(player.ct.LaBas,'boosts','boost',true)+" CorVid effect by ^"+format(tmp.ct.getLaBeff)+"<br>"
                return a+b+c
                }
            }],
            function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "CorVids") return ["buyables",[4,5,6]]},
            function () {if (player.tab == "ct" && player.subtabs.ct.mainTabs == "CorVids") return ["upgrades",[7,8,9,10]]}
            ],
            unlocked () {return hasMilestone("ct",13)}
        },
        "Anti-Maskers": {
            content:[
            function() {if (player.tab == "ct") return "main-display"},
            function() {if (player.tab == "ct" && !hasMilestone("ct",10)) return "prestige-button"},
            ["raw-html",function() {if (player.tab == "ct" && hasMilestone("ct",10)) return "You are gaining "+layerText("h2", "ct", format(tmp.ct.getResetGain.div(inChallenge("ct",32)?100:1)))+ " CTNA per second (starts at "+format(tmp.ct.requires)+" CRNA and COVID-19 Mutation)"}],
            ["raw-html",function() {if (player.tab == "ct" && tmp.ct.getResetGain.gte(Decimal.pow(10,tmp.ct.getCTNAsc))) return "CTNA gain is ^"+layerText("h2", "ct", format(tmp.ct.getResetGain.log(tmp.ct.getResetGainb)))+ "." + "(starts at "+format(tmp.ct.getCTNAsc.pow10()) + ")"}],
            function() {if (player.tab == "ct") return "resource-display"},
            "blank",
            ["raw-html", 
            function () {
                if (player.tab == "ct" && player.subtabs.ct.mainTabs == "Anti-Maskers") {
                let a = !hasMilestone("ct",10)?"Reset time:"+formatTime(player.ct.resetTime)+"<br>":""
                let b = "You have "+layerText("h2", "ct",formatWhole(player.ct.CorVid))+ " "+pluralize(player.ct.CorVid,'CorVid','CorVids',true)+", which "+pluralize(player.ct.CorVid,'boosts','boost',true)+" CTNA effect by ^"+format(tmp.ct.getCorVeff)+"<br>"
                let c = "You are gaining "+layerText("h2", "ct",formatWhole(tmp.ct.getCorVidGain))+ " "+pluralize(tmp.ct.getCorVidGain,'CorVid','CorVids',true)+" per second<br>"
                let d = "You have "+layerText("h2", "ct",formatWhole(player.ct.Am))+ " Anti-"+pluralize(player.ct.Am,'Masker','Maskers',true)+", which "+pluralize(player.ct.Am,'boosts','boost',true)+" LaBas effect and 'Upgraded Log' upg amt exp by ^"+format(tmp.ct.getAeff)+"<br>"
                return a+b+c+d
                }
            }],
            ["microtabs","Anti"]
            ],
            unlocked () {return hasMilestone("ct",20)}
        },
    },
    milestones: {
        0: {
            requirementDescription: "1 Total CTNA",
            effectDescription: "Keep Fatality milestones and challenges on reset, casual interval/10, att amt x100.",
            done() { return player.ct.total.gte(1) }
        },
        1: {
            requirementDescription: "2 Total CTNA",
            effectDescription: "Keep Infecter milestones, Fatality upgrades, and 'UN'QUARANTINE on reset.",
            done() { return player.ct.total.gte(2) },
            unlocked() { return hasMilestone("ct",0)}
        },
        2: {
            requirementDescription: "3 Total CTNA",
            effectDescription: "Keep Infecter upgrades and challenges on reset.",
            done() { return player.ct.total.gte(3) },
            unlocked() { return hasMilestone("ct",1)}
        },
        3: {
            requirementDescription: "5 Total CTNA",
            effectDescription: "Autobuy Mutations, CRNA exponent +0.2.",
            toggles: [["ct","autom"]],
            done() { return player.ct.total.gte(5) },
            unlocked() { return hasMilestone("ct",2)}
        },
        4: {
            requirementDescription: "10 Total CTNA",
            effectDescription: "Autobuy CRNA buyables.",
            toggles: [["ct","autoc"]],
            done() { return player.ct.total.gte(10) },
            unlocked() { return hasMilestone("ct",3)}
        },
        5: {
            requirementDescription: "30,000 Total CTNA",
            effectDescription: "You can get 10 more Corona Mutations, Corona Mutation scaling/1.1, 5 VN scaling/1.1, CRNA log-0.05.",
            done() { return player.ct.total.gte(3e4) },
            unlocked() { return hasMilestone("ct",4)}
        },
        6: {
            requirementDescription() {return format(1e9)+" Total CTNA"},
            effectDescription: "Unlock Buyables, Mutation MMNA scaling/1.1, CRNA exp+0.02/upgrade/milestone, CTNA gain exp+0.5.",
            done() { return player.ct.total.gte(1e9) },
            unlocked() { return hasMilestone("ct",5)}
        },
        7: {
            requirementDescription() {return format(1e25)+" Total CTNA"},
            effectDescription: "Unlock 2nd Buyable, Corona Mutation scaling/1.1, CRNA exp+0.02/upgrade/milestone, CTNA gain exp+0.5.",
            done() { return player.ct.total.gte(1e25) },
            unlocked() { return hasMilestone("ct",6)}
        },
        8: {
            requirementDescription() {return format(1e80)+" Total CTNA"},
            effectDescription: "Unlock 3rd Buyable, You can get 10 more Corona Mutations, CRNA exp+0.03/upgrade/milestone, CTNA gain exp+0.5.",
            done() { return player.ct.total.gte(1e80) },
            unlocked() { return hasMilestone("ct",7)}
        },
        9: {
            requirementDescription() {return format(Decimal.pow(10,316))+" Total CTNA"},
            effectDescription: "Unlock 4th Buyable, Gain 1% of CTNA per second, You can get 10 more Corona Mutations, CRNA exp+0.03/upgrade/milestone, CTNA gain exp+0.5.",
            done() { return player.ct.total.gte(Decimal.pow(10,316)) },
            unlocked() { return hasMilestone("ct",8)}
        },
        10: {
            requirementDescription() {return format(Decimal.pow(10,2121))+" Total CTNA"},
            effectDescription: "Unlock 5th Buyable, Gain 100% of CTNA per second, You can get 20 more Corona Mutations, CRNA exp+0.03/upgrade/milestone, CTNA gain exp+0.5.",
            done() { return player.ct.total.gte(Decimal.pow(10,2121)) },
            unlocked() { return hasMilestone("ct",9)}
        },
        11: {
            requirementDescription() {return format(Decimal.pow(10,9705))+" Total CTNA"},
            effectDescription: "Unlock 6th Buyable, CRNA exp+0.03/upgrade/milestone, CTNA gain exp+0.5.",
            done() { return player.ct.total.gte(Decimal.pow(10,9705)) },
            unlocked() { return hasMilestone("ct",10)}
        },
        12: {
            requirementDescription() {return format(Decimal.pow(10,13e4))+" Total CTNA"},
            effectDescription() { return "Unlock Coronas, Milestones Boost 'Upgraded Log', CRNA and CTNA exp+0.05/upgrade/milestone, 'MMNA Boost' and 'CRNA Boost' 1st base+0.3, 1st exp+0.36, MMNA limit exp^1.1, Max Corona Mutations+136, Mutations cost no MMNA, Autobuy CTNA buyables."},
            toggles: [["ct", "auto"]],
            done() { return player.ct.total.gte(Decimal.pow(10,13e4)) },
            unlocked() { return hasMilestone("ct",11)}
        },
        13: {
            requirementDescription() {return format(Decimal.pow(10,15e8))+" Total CTNA"},
            effectDescription() {return "Unlock CorVids, Milestones Boost 'Upgraded Log', CRNA and CTNA exp+0.1/upgrade/milestone, set CTNA gain to 10<sup>9,999,999,998.5</sup> at "+format(Decimal.pow(10,1e10-1e5))+" CTNA (0 CorVids)."},
            done() { return player.ct.total.gte(Decimal.pow(10,15e8)) },
            unlocked() { return hasMilestone("ct",12)}
        },
        14: {
            requirementDescription() {return format(Decimal.pow(10,1e20))+" Total CTNA"},
            effectDescription: "Unlock a CorVid Buyable, 'LaBas Gain' exp+0.005/upgrade/milestone.",
            done() { return player.ct.total.gte(Decimal.pow(10,1e20)) },
            unlocked() { return hasMilestone("ct",13)}
        },
        15: {
            requirementDescription() {return format(Decimal.pow(10,1e50))+" Total CTNA"},
            effectDescription: "Unlock 2 CorVid Buyables (2nd at 3 1st new Buyables), Autobuy CorVid Buyables 1 per tick, MMNA lim exp<sup>2</sup>^1.1, 'LaBas Gain' exp+0.01/upgrade/milestone, LaBas eff^1.1.",
            toggles: [["ct", "autov"]],
            done() { return player.ct.total.gte(Decimal.pow(10,1e50)) },
            unlocked() { return hasMilestone("ct",14)}
        },
        16: {
            requirementDescription() {return format(Decimal.pow(10,1e150))+" Total CTNA"},
            effectDescription: "Unlock a CorVid Buyable, 'MMNA Boost' 2nd exp+21, 'LaBas Gain' exp+0.05/upgrade/milestone.",
            done() { return player.ct.total.gte(Decimal.pow(10,1e150)) },
            unlocked() { return hasMilestone("ct",15)}
        },
        17: {
            requirementDescription() {return format(Decimal.pow(10,Decimal.pow(2,1024)))+" Total CTNA"},
            effectDescription: "Unlock a CorVid Buyable, 'CTNA Boost' 1st exp+0.18, 'LaBas Gain' exp+0.1/upgrade/milestone.",
            done() { return player.ct.total.gte(Decimal.pow(10,Decimal.pow(2,1024))) },
            unlocked() { return hasMilestone("ct",16)}
        },
        18: {
            requirementDescription() {return format(Decimal.pow(10,Decimal.pow(10,550)))+" Total CTNA"},
            effect() {
                let eff = powExp(player.ct.LaBas.add(10).log10(),2)
                return eff
            },
            effectDescription() {
                return "LaBas boost CTNA exp, log reducton softcap is weaker.<br>Currently: "+format(milestoneEffect("ct",18))+"x"}
                ,
            done() { return player.ct.total.gte(Decimal.pow(10,Decimal.pow(10,550))) },
            unlocked() { return hasMilestone("ct",17)}
        },
        19: {
            requirementDescription() {return format(Decimal.pow(10,Decimal.pow(10,1111).mul(1.111)))+" Total CTNA"},
            effect() {
                let eff = player.ct.buyables[41].add(10).log10().pow(1/3)
                if (hasUpgrade("ct",66)) eff = eff.pow(1.15)
                return eff
            },
            effectDescription() {
                return "Unlock a CorVid Buyable, Bought CorVids boost 'MMNA Boost' base, exps, and 'Upgraded Log', After exp softcap is weaker.<br>Currently: "+format(milestoneEffect("ct",19))+"x"}
                ,
            done() { return player.ct.total.gte(Decimal.pow(10,Decimal.pow(10,1111).mul(1.111))) },
            unlocked() { return hasMilestone("ct",18)}
        },
        20: {
            requirementDescription() {return format(Decimal.pow(10,Decimal.pow(10,1e4)))+" Total CTNA"},
            effect() {
                let eff = tmp.e.crexp.max(10).log10()
                if (eff.gte(Decimal.pow(10,Decimal.pow(2,1024)))) eff = eff.log10().log(2).pow(102.4).pow10()
                return eff.min(tet10(10))
            },
            effectDescription() {
                return "Unlock Anti-Maskers, CRNA exponent boosts CorVid gain.<br>Currently: "+format(milestoneEffect("ct",20))+"x"}
                ,
            done() { return player.ct.total.gte(Decimal.pow(10,Decimal.pow(10,1e4))) },
            unlocked() { return hasMilestone("ct",19)}
        },
    },
    upgrades: {
        rows: 12,
        cols: 6,
        11: {
            title: "Infected Scaling",
            description: "Infecter scaling/1.1.",
            cost: decimalOne,
        },
        12: {
            title: "Scaled Infection",
            description: "Infection power divides Infecter scaling.",
            cost: decimalOne,
            effect(){
                let p = player.e.p
                let Jihyo = Decimal.add(p.layer,new Decimal(p.mag).slog()).pow(0.085)
                return Jihyo
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("ct",12))
            },
        },
        13: {
            title: "After CTNA",
            description: "CTNA boosts CRNA gain after log.",
            cost: new Decimal(50),
            effect(){
                let Mina = player.ct.points.add(1).pow(0.3)
                return Mina
            },
            effectDisplay(){
                return format(upgradeEffect("ct",13))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",11) && hasUpgrade("ct",12)
            }
        },
        14: {
            title: "CTNA Limit",
            description: "CTNA boosts MMNA limit.",
            cost: new Decimal(80),
            effect(){
                let Dahyun = player.ct.points.max(10).log10().pow(0.5)
                return Dahyun
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",14))
            },
            unlocked() {
                return hasUpgrade("ct",13)
            }
        },
        15: {
            title: "Expolog",
            description: "CTNA adds to CRNA exponent, CRNA log -0.02.",
            cost: new Decimal(120),
            effect(){
                let Chaeyoung = player.ct.points.max(10).log10().pow(0.35)
                return Chaeyoung.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",15))
            },
            unlocked() {
                return hasUpgrade("ct",14)
            }
        },
        16: {
            title: "Logged CTNA",
            description: "CTNA reduces CRNA log, CTNA gain exp+0.5.",
            cost: new Decimal(600),
            effect(){
                let Tzuyu = player.ct.points.max(10).log10().pow(0.03).sub(1)
                if (inChallenge("ct",32)) Tzuyu = Tzuyu.div(3)
                return Tzuyu.min(0.15)
            },
            effectDisplay(){
                return "-"+format(upgradeEffect("ct",16))
            },
            unlocked() {
                return hasUpgrade("ct",15)
            }
        },
        21: { // Jisoo, Jennie, Rosé, Lisa, Nayeon, Jeongyeon, Momo, Sana, Jihyo, Mina, Dahyun, Chaeyoung, Tzuyu
            title: "Infected CTNA",
            description: "Infecters boost CTNA gain.",
            cost: new Decimal(1e5),
            effect(){
                let Jisoo = player.e.points.max(10).log10().pow(1.5)
                return Jisoo
            },
            effectDisplay(){
                return format(upgradeEffect("ct",21))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",16)
            }
        },
        22: {
            title: "mTNA Log",
            description: "CTNA reduces 'mRNA Booster' scaling, CRNA exp<sup>0.2</sup> affects After log mult",
            cost: new Decimal(1e7),
            effect(){
                let Jennie = player.ct.points.max(10).log10().pow(0.5)
                return Jennie
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("ct",22))
            },
            unlocked() {
                return hasUpgrade("ct",21)
            }
        },
        23: {
            title: "Upgraded Log",
            description: "CTNA Upgrades boost CRNA gain after log, MMNA limit^1.5.",
            cost: new Decimal(3e8),
            effect(){
                let exp = new Decimal(player.ct.upgrades.length).pow(tmp.ct.buyables[72].effect)
                if (hasUpgrade("ct",43)) exp = exp.pow(3)
                if (hasMilestone("ct",12)) exp = exp.pow(player.ct.milestones.length/25+1)
                if (hasMilestone("ct",13)) exp = exp.pow(player.ct.upgrades.length/75+1.002854772)
                if (hasMilestone("ct",19)) exp = exp.pow(Decimal.pow(player.ct.milestones.length+1,milestoneEffect("ct",19).pow(1.5)))
                if (hasUpgrade("ct",84)) exp = exp.pow(upgradeEffect("ct",84))
                if (hasUpgrade("ct",94)) exp = exp.pow(upgradeEffect("ct",94))
                exp = powExp(exp,tmp.ct.getAeff)
                if (hasUpgrade("ct",121)) exp = powExp(exp,5)
                let Rosé = Decimal.factorial(exp)
                return Rosé
            },
            effectDisplay(){
                return format(upgradeEffect("ct",23))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",22)
            }
        },
        24: {
            title: "CTNA Limiter",
            description: "CTNA boosts MMNA limit, CRNA log -0.05, mRNA buyables softcap/1.1.",
            cost: new Decimal(4e13),
            effect(){
                let Lisa = player.ct.points.max(10).log10().pow(0.1)
                return Lisa
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",24))
            },
            unlocked() {
                return hasUpgrade("ct",23)
            }
        },
        25: {
            title: "ExpoCNA",
            description: "CRNA adds to CTNA gain exp.",
            cost: new Decimal(6e14),
            effect(){
                let Nayeon = powExp(player.e.crna.max(10).log10(),0.75).pow(0.1)
                if (Nayeon.gte(1e8)) Nayeon = Nayeon.log10().add(2).pow(8)
                return Nayeon.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",25))
            },
            unlocked() {
                return hasUpgrade("ct",24)
            }
        },
        26: {
            title: "ExpomRNA",
            description: "mRNA adds to CTNA gain exp, mRNA buyables softcap/1.2.",
            cost: new Decimal(3e19),
            effect(){
                let Jeongyeon = player.e.mrna.max(10).log10().max(10).log10().pow(0.17)
                return Jeongyeon.sub(1).min(Decimal.pow(10,1e20))
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",26))
            },
            unlocked() {
                return hasUpgrade("ct",25)
            }
        },
        31: {
            title: "Infectered MMNA",
            description: "Infecters boost MMNA effect.",
            cost: new Decimal(1e25),
            effect(){
                let Momo = player.e.points.max(10).log10()
                return Momo
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",31))
            },
            unlocked() {
                return hasUpgrade("ct",26)
            }
        },
        32: {
            title: "Infected Log",
            description: "Infecters add to CTNA gain exp, add 0.1 to After log exp.",
            cost: new Decimal(2e37),
            effect(){
                let Sana = player.e.points.max(10).log10().pow(0.2)
                if (Sana.gte(1e300)) Sana = Sana.log10().div(3).pow(150)
                return Sana.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",32))
            },
            unlocked() {
                return hasUpgrade("ct",31)
            }
        },
        33: {
            title: "Infected CRNA",
            description: "Infecters add to CRNA exp, MMNA limit exp^1.05.",
            cost: new Decimal(5e66),
            effect(){
                let Jihyo = player.e.points.max(10).log10().pow(0.5)
                return Jihyo.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",33))
            },
            unlocked() {
                return hasUpgrade("ct",32)
            }
        },
        34: {
            title: "CMNA",
            description: "CRNA boosts MMNA effect, MMNA limit exp^1.05, CTNA exp+0.5.",
            cost: new Decimal(1e173),
            effect(){
                let Mina = player.e.crna.max(10).log10().pow(0.3)
                return Mina.min(tet10(10))
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",34))
            },
            unlocked() {
                return hasUpgrade("ct",33)
            }
        },
        35: {
            title: "Mutated CRNA",
            description: "Mutations add to CRNA exp.",
            cost: new Decimal(1e247),
            effect(){
                let Dahyun = player.e.mu.pow(0.4).div(10)
                return Dahyun
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",35))
            },
            unlocked() {
                return hasUpgrade("ct",34)
            }
        },
        36: {
            title: "mRCT",
            description: "mRNA boosts CTNA gain.",
            cost: Decimal.pow(10,1007),
            effect(){
                let Chaeyoung = powExp(player.e.mrna.max(10).log10(),1.4)
                if (Chaeyoung.gte(Decimal.pow(10,1e100))) Chaeyoung = Chaeyoung.log10().log10().div(100).pow(0.2).mul(100).pow10().pow10()
                return Chaeyoung
            },
            effectDisplay(){
                return format(upgradeEffect("ct",36))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",35)
            }
        },
        41: {
            title: "CTMM",
            description: "CTNA boosts MMNA effect.",
            cost: Decimal.pow(10,1523),
            effect(){
                let Tzuyu = powExp(player.ct.points.add(1),0.2).pow(2)
                return Tzuyu
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",41))
            },
            unlocked() {
                return hasUpgrade("ct",36)
            }
        },
        42: {
            title: "MMCT",
            description: "MMNA boosts CTNA gain.",
            cost: Decimal.pow(10,6945),
            effect(){
                let Jisoo = powExp(player.e.mm.add(1),0.15)
                if (Jisoo.gte(Decimal.pow(10,1e5))) Jisoo = powExp(Jisoo.log10(),2).pow(4000)
                if (Jisoo.gte(Decimal.pow(10,1e6))) Jisoo = Jisoo.log10().div(1e6).pow(0.4).mul(1e6).pow10()
                return Jisoo
            },
            effectDisplay(){
                return format(upgradeEffect("ct",42))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",41)
            }
        },
        43: {
            title: "After MMNA",
            description: "MMNA adds to After log exp, Upg amt in 'Upgraded Log'^3.",
            cost: Decimal.pow(10,23739).mul(5),
            effect(){
                let Jennie = player.e.mm.max(10).log10().max(10).log10().pow(0.07)
                if (Jennie.gte(1e5)) Jennie = Jennie.log10().mul(2).pow(5)
                if (Jennie.gte(1e8)) Jennie = Jennie.log10().add(2).pow(8)
                return Jennie.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",43))
            },
            unlocked() {
                return hasUpgrade("ct",42)
            }
        },
        44: {
            title: "Upgraded CTNA",
            description: "Add 0.1 to CTNA gain exp per CTNA Upgrade.",
            cost: Decimal.pow(10,52645),
            effect(){
                let Rosé = player.ct.upgrades.length*0.1
                return Rosé
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",44))
            },
            unlocked() {
                return hasUpgrade("ct",43)
            }
        },
        45: {
            title: "Infectered CRNA",
            description: "Infecters boost CRNA effect, MMNA effect exp^1.05.",
            cost: Decimal.pow(10,62540).mul(5),
            effect(){
                let Lisa = player.e.points.max(10).log10().pow(2)
                return Lisa
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",45))
            },
            unlocked() {
                return hasUpgrade("ct",44)
            }
        },
        46: {
            title: "Infectered CTNA",
            description: "<span style='font-size:9px'>Infecters boost CTNA effect, MMNA effect exp^1.05, CRNA log-0.05, 'CTNA Boost' 1st base and exp+0.2.</span>",
            cost: Decimal.pow(10,74536).mul(5),
            effect(){
                let Lisa = player.e.points.max(10).log10().pow(0.5)
                return Lisa
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",46))
            },
            unlocked() {
                return hasUpgrade("ct",45)
            }
        },
        51: {
            title: "Infected Boosts",
            description: "Infecters add to 'CTNA Boost' 1st base, 'CTNA Boost' 2nd exp+0.15, MMNA eff exp^1.1.",
            cost: Decimal.pow(10,435716),
            effect(){
                let Nayeon = player.e.points.max(10).log10().pow(0.05862)
                return Nayeon.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",51))
            },
            unlocked() {
                return hasUpgrade("ct",46)
            }
        },
        52: {
            title: "Soft CTNA",
            description: "CRNA makes CTNA gain softcap start later.",
            cost: Decimal.pow(10,94e4),
            effect(){
                let Jeongyeon = player.e.crna.max(10).log10().max(10).log10().pow(0.25)
                return Jeongyeon
            },
            effectDisplay(){
                return format(upgradeEffect("ct",52))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",51)
            }
        },
        53: {
            title: "Cormutated CTNA",
            description: "CTNA adds to Cor Mut exp, Cor Mut limit +300, MMNA limit exp<sup>2</sup>^1.15.",
            cost: Decimal.pow(10,24940098),
            effect(){
                let Momo = player.ct.points.max(10).log10().max(10).log10().pow(0.300000229055)
                return Momo.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",53))
            },
            unlocked() {
                return hasUpgrade("ct",52)
            }
        },
        54: {
            title: "LaBas CTNA",
            description: "CTNA adds to 'LaBas Gain' exponent.",
            cost: Decimal.pow(10,1e13),
            effect(){
                let Sana = player.ct.points.max(10).log10().max(10).log10().pow(0.25)
                return Sana.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",54))
            },
            unlocked() {
                return hasUpgrade("ct",81)
            }
        },
        55: {
            title: "MMNA Booster",
            description: "CTNA adds to 'MMNA Boost' 1st exp, MMNA eff exp<sup>2</sup>^1.05, 'LaBas Gain' exp+2.",
            cost: Decimal.pow(10,1e18),
            effect(){
                let Jihyo = player.ct.points.max(10).log10().max(10).log10().max(10).log10()
                return Jihyo.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",55))
            },
            unlocked() {
                return hasUpgrade("ct",86)
            }
        },
        56: {
            title: "MMNA Boosterer",
            description: "MMNA adds to 'MMNA Boost' 1st exp, MMNA eff exp<sup>2</sup>^1.1, 'LaBas Gain' exp+(After log exp).",
            cost: Decimal.pow(10,1e84),
            effect(){
                let Mina = player.e.mm.max(10).log10().max(10).log10().max(10).log10().pow(1/3)
                return Mina.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",56))
            },
            unlocked() {
                return hasUpgrade("ct",96)
            }
        },
        61: {
            title: "mRNA VOCID",
            description: "mRNA adds to 'LaBas Exponent' base, VOCID scaling/10.",
            cost: Decimal.pow(10,Decimal.pow(10,500)),
            effect(){
                let Dahyun = player.e.mm.max(10).log10().max(10).log10().max(10).log10().pow(0.05)
                return Dahyun.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",61))
            },
            unlocked() {
                return hasUpgrade("ct",104)
            }
        },
        62: {
            title: "CorVid CT",
            description: "CTNA boosts CorVid gain, 'CoronaBas' eff^300.",
            cost: Decimal.pow(10,Decimal.pow(10,666).mul(6.666)),
            effect(){
                let Chaeyoung = player.ct.points.max(10).log10().max(10).log10().pow(0.6)
                return Chaeyoung
            },
            effectDisplay(){
                return format(upgradeEffect("ct",62))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",106)
            }
        },
        63: {
            title: "CorVider",
            description: "<span style='font-size:9px'>Bought CorVids boost CorVid gain, 'CorVid Gain' exp+0.05, 'CTNA Boost' 1st exp+0.1</span>.",
            cost: Decimal.pow(10,Decimal.pow(10,777).mul(7.777)),
            effect(){
                let Tzuyu = player.ct.buyables[41].add(1).pow(0.5)
                return Tzuyu
            },
            effectDisplay(){
                return format(upgradeEffect("ct",63))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",62)
            }
        },
        64: {
            title: "LaBas VOCID",
            description: "Bought CorVids add to 'LaBas Gain' exp, LaBas eff^1.1, VOCID sc/10.",
            cost: Decimal.pow(10,Decimal.pow(10,999).mul(9.999)),
            effect(){
                let Jisoo = player.ct.buyables[41]
                return Jisoo
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",64))
            },
            unlocked() {
                return hasUpgrade("ct",63)
            }
        },
        65: {
            title: "MMNA Boostest",
            description: "<span style='font-size:9px'>MMNA boosts CTNA exp, MMNA Limit exp<sup>2</sup>^3, LaBas Exponents cost exp-1</span>.",
            cost: Decimal.pow(10,Decimal.pow(10,2926).mul(2929)),
            effect(){
                let Jennie = player.e.mm.max(10).log10().max(10).log10().pow(0.2)
                return Jennie
            },
            effectDisplay(){
                return format(upgradeEffect("ct",65))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",64)
            }
        },
        66: {
            title: "CorVid Milster",
            description: "<span style='font-size:8.5px'>Bt. CorVids add 'CRNA Bst' 1st exp, MMNA lim exp<sup>3</sup>^1.2, 'CorV Gain' exp+0.05, CorV cost exp-1, Mil 20 eff^1.15</span>.",
            cost: Decimal.pow(10,Decimal.pow(10,3936).mul(3939)),
            effect(){
                let Rosé = player.ct.buyables[41].max(10).log10().pow(1.5)
                return Rosé.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",66))
            },
            unlocked() {
                return hasUpgrade("ct",65)
            }
        },
        71: {
            title: "LaBas Corona",
            description: "LaBas boost Corona 1st effect.",
            cost: new Decimal(50),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Lisa = player.ct.LaBas.max(10).log10().pow(0.5)
                if (Lisa.gte(17)) Lisa = Lisa.div(17).pow(0.35).mul(17)
                if (Lisa.gte(28)) Lisa = Lisa.div(28).pow(0.2).mul(28)
                return Lisa
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",71))
            },
            unlocked() {
                return player.ct.buyables[42].gte(1)
            }
        },
        72: {
            title: "LaBas Boost",
            description: "LaBas add to 'CTNA Boost' 1st base, add 0.5 to 'LaBas Gain' exp.",
            cost: new Decimal(250),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Nayeon = player.ct.LaBas.max(10).log10().pow(0.1)
                return Nayeon.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",72))
            },
            unlocked() {
                return hasUpgrade("ct",71)
            }
        },
        73: {
            title: "CorVid Boost",
            description: "CorVids add to 'MMNA Boost' 1st base, add 0.34 to 'MMNA Boost' 1st exp, LaBas gain*4.",
            cost: new Decimal(600),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Jeongyeon = player.ct.CorVid.add(10).max(10).log10()
                return Jeongyeon.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",73))
            },
            unlocked() {
                return hasUpgrade("ct",72)
            }
        },
        74: {
            title: "LaBas Mult",
            description() {return "Each 'LaBas Gain' multiplies LaBas gain by "+format(tmp.ct.buyables[42].base2)+", MMNA eff exp<sup>2</sup>^1.01."},
            cost: new Decimal(3500),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Momo = tmp.ct.buyables[42].mul
                return Momo
            },
            effectDisplay(){
                return format(upgradeEffect("ct",74))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",73)
            }
        },
        75: {
            title: "Cormutated LaBas",
            description: "Corona Mutations boost LaBas gain.",
            cost: new Decimal(7000),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Sana = player.e.mu2.add(1).pow(0.4)
                if (Sana.gte(12)) Sana = powExp(Sana.div(1.2),5).mul(1.2)
                if (Sana.gte(1e15)) Sana = powExp(Sana.div(1e14),1.3).mul(1e14)
                if (Sana.gte(1e300)) Sana = powExp(Sana.div(1e299),1.3).mul(1e299)
                return Sana
            },
            effectDisplay(){
                return format(upgradeEffect("ct",75))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",74)
            }
        },
        76: {
            title: "Softer CTNA",
            description: "LaBas makes CTNA gain sc weaker, 'LaBas Gain' cost exp-2.",
            cost: new Decimal(2e5),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Jihyo = player.ct.LaBas.add(10).log10().pow(0.05)
                return Jihyo
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("ct",76))
            },
            unlocked() {
                return hasUpgrade("ct",75)
            }
        },
        81: {
            title: "CorVid Exp",
            description: "CorVids boost MMNA eff exp, +0.5 'LaBas Gain' exp, +0.1 'CTNA Boost' 1st exp.",
            cost: new Decimal(4e6),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Mina = player.ct.CorVid.add(10).log10().pow(1.25)
                if (hasUpgrade("ct",103)) Mina = Mina.pow(upgradeEffect("ct",103))
                return Mina
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",81))
            },
            unlocked() {
                return hasUpgrade("ct",76)
            }
        },
        82: {
            title: "Exponent Mult",
            description: "LaBas boost Corona 2nd effect, 'CRNA Exponent' adds and multiplies.",
            cost: new Decimal(1e12),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Dahyun = player.ct.LaBas.add(10).log10().pow(0.45)
                return Dahyun
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",82))
            },
            unlocked() {
                return hasUpgrade("ct",81)
            }
        },
        83: {
            title: "Total CorLaBas",
            description: "LaBas reduce Corona scaling, Corona effect is based on total, MMNA lim exp<sup>2</sup>^1.05.",
            cost: new Decimal(1e13),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Chaeyoung = player.ct.LaBas.add(10).log10().pow(0.3)
                return Chaeyoung
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("ct",83))
            },
            unlocked() {
                return hasUpgrade("ct",82)
            }
        },
        84: {
            title: "Upgraded LaBas",
            description: "LaBas boost Upg amt in 'Upgraded Log', After Exp sc is weaker, 'MMNA Boost' exp+0.2.",
            cost: new Decimal(1e15),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Tzuyu = player.ct.LaBas.add(10).log10().pow(0.2)
                return Tzuyu
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",84))
            },
            unlocked() {
                return hasUpgrade("ct",83)
            }
        },
        85: {
            title: "LaBas MMNA",
            description: "LaBas add to 'MMNA Boost' 1st base, 'MMNA Boost' 2nd exp+0.5.",
            cost: new Decimal(2e17),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Jisoo = powExp(player.ct.LaBas.add(10).log10().pow(0.15).mul(10),1.3).div(10)
                return Jisoo.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",85))
            },
            unlocked() {
                return hasUpgrade("ct",84)
            }
        },
        86: {
            title: "LaBas mRNA",
            description: "mRNA adds to LaBas Gain' exponent, 'MMNA Boost' 2nd exp+0.25.",
            cost: new Decimal(3e19),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Jennie = powExp(player.e.mrna.max(10).log10().max(10).log10().max(10).log10().mul(10),1.1).div(10).pow(0.3)
                if (Jennie.gte(1e50)) Jennie = Jennie.log10().mul(2).pow(25)
                return Jennie.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",86))
            },
            unlocked() {
                return hasUpgrade("ct",85)
            }
        },
        91: {
            title: "LaBas CorVid",
            description: "CorVids add to 'LaBas Gain' exp.",
            cost: new Decimal(5e52),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Rosé = player.ct.CorVid.max(10).log10().pow(1.2)
                return Rosé.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",91))
            },
            unlocked() {
                return hasUpgrade("ct",86)
            }
        },
        92: {
            title: "CorVid CTNA",
            description: "CorVids multiply CTNA gain exp, 'CTNA Boost' exp+0.02, Cor Mut exp+5.",
            cost: new Decimal(1e87),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Lisa = player.ct.CorVid.max(10).log10().mul(2)
                return Lisa
            },
            effectDisplay(){
                return format(upgradeEffect("ct",92))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",91)
            }
        },
        93: {
            title: "MMBas",
            description: "MMNA adds to 'LaBas Gain' exp, CRNA eff and MMNA lim exp<sup>2</sup>^1.1, LaBas eff^1.2.",
            cost: new Decimal(4e116),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Nayeon = player.e.mm.max(10).log10().max(10).log10().max(10).log10().pow(0.8)
                if (Nayeon.gte(1e90)) Nayeon = Nayeon.log10().add(10).pow(45)
                return Nayeon.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",93))
            },
            unlocked() {
                return hasUpgrade("ct",92)
            }
        },
        94: {
            title: "Upgrader Explog",
            description: "<span style='font-size:9px;'>MMNA boosts Upg amt in 'Upgraded Log', log10('Upgraded Log' eff) boosts CRNA exp, 'MMNA Boost' 2nd exp+2.25.</span>",
            cost: new Decimal(132e130),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Jeongyeon = player.e.mm.max(10).log10().max(10).log10().max(10).log10().pow(0.307)
                return Jeongyeon
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",94))
            },
            unlocked() {
                return hasUpgrade("ct",93)
            }
        },
        95: {
            title: "CoronaBas",
            description: "Coronas boost LaBas gain, VOCID scaling/3, 'MMNA Boost' 1st exp+1.",
            cost: new Decimal(265e263),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Momo = player.ct.corona.add(1).pow(3)
                if (hasUpgrade("ct",62)) Momo = Momo.pow(300)
                return Momo
            },
            effectDisplay(){
                return format(upgradeEffect("ct",95))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",94)
            }
        },
        96: {
            title: "CorMMNA",
            description: "Coronas add to 'MMNA Boost' 1st exp.",
            cost: Decimal.pow(10,428),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Sana = player.ct.corona.max(10).log10().pow(0.75)
                return Sana.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",96))
            },
            unlocked() {
                return hasUpgrade("ct",95)
            }
        },
        101: {
            title: "After Corexp",
            description: "Coronas boost LaBas eff, double After log exp.",
            cost: Decimal.pow(10,1267),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Jihyo = player.ct.corona.max(10).log10().add(10).log10().pow(0.6)
                if (Jihyo.gte(1.45)) Jihyo = Jihyo.div(1.45).pow(0.2).mul(1.45)
                return Jihyo
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",101))
            },
            unlocked() {
                return hasUpgrade("ct",96)
            }
        },
        102: {
            title: "Upgrader CTNA",
            description: "<span style='font-size:9px;'>Add 0.1 to 'LaBas Exponent' base, 'Upgraded CTNA' multiplies CTNA exp based on CTNA.</span>",
            cost: Decimal.pow(10,2466),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let exp = player.ct.points.max(10).log10().add(10).log10().add(10).log10().pow(3)
                let Mina = Decimal.pow(upgradeEffect("ct",44),exp)
                return Mina.max(1)
            },
            effectDisplay(){
                return format(upgradeEffect("ct",102))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",101)
            }
        },
        103: {
            title: "CorVid CRNA",
            description: "CorVids boost 'CorVid Exp', add 3.95 to 'CRNA Boost' 1st exp, MMNA lim exp<sup>2</sup>^1.4.",
            cost: Decimal.pow(10,4211).mul(2.5),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Dahyun = powExp(player.ct.CorVid.max(10).log10().add(10).log10().mul(20),3)
                return Dahyun
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",103))
            },
            unlocked() {
                return hasUpgrade("ct",102)
            }
        },
        104: {
            title: "CorVid Maxer",
            description: "CorVids add to 'LaBas Mult' base, +1000 Cor Mut exp, Buyable autobuyer buys max.",
            cost: Decimal.pow(10,19e3),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Chaeyoung = player.ct.CorVid.max(10).log10().tetrate(2)
                return Chaeyoung.sub(1)
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",104))
            },
            unlocked() {
                return hasUpgrade("ct",103)
            }
        },
        105: {
            title: "LaBas CostVid",
            description: "LaBas boost CorVid Gain, 'LaBas Gain' cost exp-2.",
            cost: Decimal.pow(10,28e3),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Tzuyu = player.ct.LaBas.max(10).log10().max(10).log10().pow(1.3)
                if (hasUpgrade("ct",111)) Tzuyu=Tzuyu.pow(upgradeEffect("ct",111))
                return Tzuyu
            },
            effectDisplay(){
                return format(upgradeEffect("ct",105))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",104)
            }
        },
        106: {
            title: "Mutated CorVid",
            description: "Corona Mutations boost CorVid Gain, 'CTNA Boost' 2nd exp+0.5, unlock a buyable.",
            cost: Decimal.pow(10,9e4),
            currencyInternalName: "LaBas",
            currencyDisplayName: "LaBas",
            currencyLayer: "ct",
            effect(){
                let Jisoo = player.e.mu2.add(1).pow(0.15)
                if (hasUpgrade("ct",111)) Jisoo=Jisoo.pow(upgradeEffect("ct",111))
                return Jisoo
            },
            effectDisplay(){
                return format(upgradeEffect("ct",106))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",105)
            }
        },
        111: {
            title: "CorVid Maskers",
            description: "Anti-Maskers boost 'LaBas CostVid' and 'Mutated CorVid'.",
            cost: new Decimal(1e271),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            effect(){
                let Jennie = player.ct.Am.add(10).log10().pow(4)
                if (Jennie.gte(1e4)) Jennie = Jennie.div(1e4).pow(0.3).mul(1e4)
                if (Jennie.gte(2e4)) Jennie = Jennie.div(2e4).pow(0.3).mul(2e4)
                return Jennie
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",111))
            },
            unlocked() {
                return player.ct.buyables[73].gte(1)
            }
        },
        112: {
            title: "Antier-Masks",
            description: "Anti-Maskers boost CorVid gain, Autobuy 'Anti-Masker'.",
            cost: Decimal.pow(10,542),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            effect(){
                let Rosé = powExp(player.ct.Am.add(1),2).pow(10)
                return Rosé
            },
            effectDisplay(){
                return format(upgradeEffect("ct",112))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",111)
            }
        },
        113: {
            title: "Anti-Casino",
            description: "Each Anti-Masker upgrade adds 0.01 to 'CorVid Gain' exp, Unlock Anti-Roulette.",
            cost: Decimal.pow(10,2181).mul(5),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            effect(){
                let Lisa = new Decimal(player.ct.upgrades.filter(number => (number>110 && number<170)).length*0.01)
                if (hasUpgrade("ct",152)) Lisa = Lisa.mul(2)
                return Lisa
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",113))
            },
            unlocked() {
                return hasUpgrade("ct",112)
            }
        },
        114: {
            title: "Bettor",
            description: "Double bet amount, add 0.25 to Even Bet payout, Unlock a buyable, Autobuy 'CorVid Boost'.",
            cost: Decimal.pow(10,11111).mul(1.111),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",113)
            }
        },
        115: {
            title: "Anti-Bets",
            description: "Anti-Maskers boost bet amount.",
            cost: Decimal.pow(10,33333).mul(3.333),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            effect(){
                let Nayeon = player.ct.Am.max(10).log10()
                if (hasUpgrade("ct",126)) Nayeon = Nayeon.pow(upgradeEffect("ct",126))
                if (Nayeon.gte(slogadd(1e30,2))) Nayeon = Nayeon.log10().log10().pow(3.33333e28).pow10()
                return Nayeon
            },
            effectDisplay(){
                return format(upgradeEffect("ct",115))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",114)
            }
        },
        116: {
            title: "CRNA Bets",
            description: "CRNA exp boosts bet amount, add 5% to AM gain.",
            cost: Decimal.pow(10,666666).mul(6.666),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            effect(){
                let Jeongyeon = tmp.e.crexp.max(10).log10().max(10).log10().pow(0.3)
                if (Jeongyeon.gte(1e100)) Jeongyeon = Jeongyeon.log10().pow(50)
                if (hasUpgrade("ct",123)) Jeongyeon = Jeongyeon.pow(upgradeEffect("ct",123))
                if (Jeongyeon.gte(tet10(4))) Jeongyeon = Jeongyeon.log10().log10().pow(1e9).pow10()
                if (Jeongyeon.gte(slogadd(1e30,2))) Jeongyeon = Jeongyeon.log10().log10().pow(3.33333e28).pow10()
                return Jeongyeon.min(slogadd(1e100,2))
            },
            effectDisplay(){
                return format(upgradeEffect("ct",116))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",115)
            }
        },
        121: {
            title: "Constanter Bet",
            description: "<span style = 'font-size:9px'>'Constant Bet' boosts itself, Upg amt exp^5, Roll time is 8s, Even Bet win chance is 50%.</span>",
            cost: Decimal.pow(10,3e6),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            effect(){
                let Momo = player.ct.buyables[91].add(1).ln().pow(4)
                return Momo
            },
            effectDisplay(){
                return format(upgradeEffect("ct",121))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",116)
            }
        },
        122: {
            title: "CorVid Bet",
            description: "CorVids boost bet amt, Roll time is 7s, add 0.01 to "+makeBlue("a")+" and 10% to AM gain",
            cost: Decimal.pow(10,3.9e6),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            effect(){
                let Sana = player.ct.CorVid.max(10).log10().max(10).log10().pow(2)
                if (hasUpgrade("ct",125)) Sana = Sana.pow(upgradeEffect("ct",125))
                if (Sana.gte(tet10(4))) Sana = Sana.log10().log10().pow(1e9).pow10()
                if (Sana.gte(slogadd(1e30,2))) Sana = Sana.log10().log10().pow(3.33333e28).pow10()
                return Sana.min(slogadd(1e300,2))
            },
            effectDisplay(){
                return format(upgradeEffect("ct",122))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",121)
            }
        },
        123: {
            title: "Upgrader Boost",
            description: makeRed("x")+" boosts 'CRNA Bets', Autobuy 'Upgrade Boost' and reduce its scaling.",
            cost: Decimal.pow(10,4.5e6),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            effect(){
                let Jihyo = tmp.ct.getX.max(10).log10().pow(0.5)
                if (hasUpgrade("ct",141)) Jihyo = Jihyo.pow(2)
                return Jihyo
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",123))
            },
            unlocked() {
                return hasUpgrade("ct",122)
            }
        },
        124: {
            title: "Antier-Casino",
            description: "'Anti-Casino' adds to 'Bet Multiplier' base, Roll time is 5s, add 0.5 to Even Bet payout.",
            cost: Decimal.pow(10,6e6),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",123)
            }
        },
        125: {
            title: makeBlue("<b>C</b>")+"orVid Chance",
            description: makeBlue("c")+" boosts 'CorVid Bet', add 5% to Even Win Chance.",
            cost: Decimal.pow(10,6.78e6),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            effect(){
                let Mina = tmp.ct.getC.max(10).log10().pow(0.4)
                if (hasUpgrade("ct",134)) Mina = Mina.pow(1.2)
                if (hasUpgrade("ct",141)) Mina = Mina.pow(2)
                if (hasUpgrade("ct",144)) Mina = Mina.pow(1.3)
                return Mina
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",125))
            },
            unlocked() {
                return hasUpgrade("ct",124)
            }
        },
        126: {
            title: makeBlue("<b>B</b>")+"et Root",
            description: makeBlue("b")+" boosts 'Anti-Bets', add 1 to square root mult.",
            cost: Decimal.pow(10,7.45e6),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            effect(){
                let Dahyun = tmp.ct.getB.max(10).log10().pow(0.5)
                if (hasUpgrade("ct",141)) Dahyun = Dahyun.pow(2)
                return Dahyun
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",126))
            },
            unlocked() {
                return hasUpgrade("ct",125)
            }
        },
        131: {
            title: makeBlue("<b>A</b>")+"uto-Bettor",
            description: "<span style = 'font-size:9px'>"+makeBlue("a")+" adds to 'Bet Multiplier' base, Unlock Auto-Roll, 'Constant Bet' costs nothing and autobuy it.</span>",
            cost: Decimal.pow(10,8.1e6),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            effect(){
                let Chaeyoung = tmp.ct.getA.mul(100).max(10).log10().pow(0.4).sub(1)
                return Chaeyoung
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",131))
            },
            unlocked() {
                return hasUpgrade("ct",126)
            }
        },
        132: {
            title: "AM Boost",
            description: makeRed("x")+" boosts AM effect, AM gain is 100%, 'Quadratic Bet' adds to square root mult.",
            cost: Decimal.pow(10,9.9e6),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            effect(){
                let Tzuyu = tmp.ct.getX.max(10).log10().pow(0.05)
                return Tzuyu
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",132))
            },
            unlocked() {
                return hasUpgrade("ct",131)
            }
        },
        133: {
            title: makeBlue("<b>A</b>")+"uto-Roller",
            description: makeBlue("abc")+makeRed("x")+" boosts bet amt, Auto-Roll is 8s, Autobuy 'Bet Mult', 'Lin Bet'.",
            cost: Decimal.pow(10,20.6e6),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            effect(){
                let Jisoo = tmp.ct.getX.mul(tmp.ct.getA).mul(tmp.ct.getB).mul(tmp.ct.getC)
                if (hasUpgrade("ct",162)) Jisoo = powExp(Jisoo,1.7)
                if (Jisoo.gte(slogadd(1e30,2))) Jisoo = Jisoo.log10().log10().pow(3.33333e28).pow10()
                return Jisoo
            },
            effectDisplay(){
                return format(upgradeEffect("ct",133))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",132)
            }
        },
        134: {
            title: "CorVider Bets",
            description: "CorVids boost AM effect, Const and Lin Bets amt eff^2, 'CorVid Chance'^1.2.",
            cost: Decimal.pow(10,27.3e6),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            effect(){
                let Jennie = player.ct.CorVid.max(10).log10().max(10).log10().pow(0.05)
                if (Jennie.gte(Decimal.pow(10,1e200))) Jennie = Jennie.log10().pow(5e197)
                return Jennie.min(tet10(20))
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",134))
            },
            unlocked() {
                return hasUpgrade("ct",133)
            }
        },
        135: {
            title: "Upgrade Scaler",
            description: "<span style = 'font-size:9px'>Reduce 'Upgrade Boost' scaling, its amt eff^1.2, 'Quadratic Bet' base+0.01  Auto-Roll is 6s</span>.",
            cost: Decimal.pow(10,58.8e6),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",134)
            }
        },
        136: {
            title: "Upgrade Boostest",
            description: "<span style = 'font-size:9px'>Reduce 'Upg Bstr' sc and its amt exp^2, sqrt mult+5 Autobuy AR buyables, Even Win Chance is 60%, AM gain is 200%</span>.",
            cost: Decimal.pow(10,135.85e6),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",135)
            }
        },
        141: {
            title: "Anti-Scaling",
            description: "Anti-Maskers reduce 'Upg Boost' scaling, square 'Upgrader Boost', 'CorVid Chance', 'Bet Root'.",
            cost: Decimal.pow(10,247.7e6),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            effect(){
                let Rosé = player.ct.Am.max(10).log10().pow(-0.025)
                return Rosé
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",141))
            },
            unlocked() {
                return hasUpgrade("ct",136)
            }
        },
        142: {
            title: "AM Bets",
            description() {return makeBlue("abc")+" boosts AM effect, Roll time is 4s, AM<sup>"+format(tmp.ct.getAexp,4)+"</sup> boosts bet amt, Bulk Buy x5."},
            cost: Decimal.pow(10,792.3e6),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            effect(){
                let Lisa = tmp.ct.getA.mul(tmp.ct.getB).mul(tmp.ct.getC).max(10).log10().pow(0.05)
                return Lisa
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",142))
            },
            unlocked() {
                return hasUpgrade("ct",141)
            }
        },
        143: {
            title: makeBlue("<b>C</b>")+"orvider Exp",
            description: makeBlue("c")+" adds to 'CorVid Exp' base, AM exp+0.01, Even Bet Payout+1.25.",
            cost: Decimal.pow(10,4581e6),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            effect(){
                let Nayeon = tmp.ct.getC.max(10).log10().pow(0.1).sub(1).div(100)
                return Nayeon
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",143))
            },
            unlocked() {
                return hasUpgrade("ct",142)
            }
        },
        144: {
            title: "Up"+makeBlue("<b>B</b>")+"ooster",
            description: makeBlue("b")+" boosts 'Upgrade Boost' amt, 'CorVid Chance'^1.3, Roll is 3s, Auto is 4s.",
            cost: Decimal.pow(10,14254e6),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            effect(){
                let Jeongyeon = tmp.ct.getB.max(10).log10().pow(0.05)
                return Jeongyeon
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",144))
            },
            unlocked() {
                return hasUpgrade("ct",143)
            }
        },
        145: {
            title: "Green Bets",
            description: "AM gain is 1000%, AM exp+0.01, You can bet on "+makeGreen("GREEN")+".",
            cost: Decimal.pow(10,58950e6),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",144)
            }
        },
        146: {
            title: "Even AM",
            description: "<span style = 'font-size:9px'>AM adds to Even Payout, Even Payout boosts AM effect, 'Bet Mult 2' ln is log2, Auto-Roll is 3s</span>.",
            cost: Decimal.pow(10,74350e6),
            currencyInternalName: "CorVid",
            currencyDisplayName: "CorVids",
            currencyLayer: "ct",
            effect(){
                let Momo = player.ct.Am.max(10).log10().pow(0.15)
                return Momo.sub(1)
            },
            effect2(){
                let Sana = tmp.ct.getEvenPay.add(10).log10()
                return Sana
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",146))+", ^"+format(tmp.ct.upgrades[146].effect2)
            },
            unlocked() {
                return hasUpgrade("ct",145)
            }
        },
        151: {
            title: "AR Bulker",
            description: "AM exp+0.01, Unlock an AM buyable, Bulk 5x AR buyables.",
            cost: Decimal.pow(10,4721),
            currencyInternalName: "Am",
            currencyDisplayName: "Anti-Maskers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",146)
            }
        },
        152: {
            title: "Casino Boost",
            description: "Double 'Anti-Casino', 'Bet Mult 2' log2 is log1.5, Even Chance is 65%, Green Chance is 4%, Roll time is 2s.",
            cost: Decimal.pow(10,5826),
            currencyInternalName: "Am",
            currencyDisplayName: "Anti-Maskers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",151)
            }
        },
        153: {
            title: "AntiBoost",
            description: "<span style = 'font-size:9px'>'AM Booster' 1st base+0.01, log10("+makeRed("x")+")^2 boosts AM %, AM % adds to 'AM Booster' 2nd base, Roll and Auto is 1.5s.</span>",
            cost: Decimal.pow(10,12093),
            currencyInternalName: "Am",
            currencyDisplayName: "Anti-Maskers",
            currencyLayer: "ct",
            effect(){
                let Jihyo = tmp.ct.getAmps.mul(100).log10().pow(1.5).sub(1).div(100)
                return Jihyo
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",153))
            },
            unlocked() {
                return hasUpgrade("ct",152)
            }
        },
        154: {
            title: "Even Boost",
            description: "'CorVid Exp' and 'Upgrade Booster' boost Even Payout, reduce their scaling, Autobuy.",
            cost: Decimal.pow(10,14817),
            currencyInternalName: "Am",
            currencyDisplayName: "Anti-Maskers",
            currencyLayer: "ct",
            effect(){
                let Mina = player.ct.buyables[73].mul(player.ct.buyables[82]).pow(0.1).pow10().pow(0.2)
                if (Mina.gte(Decimal.pow(10,1e9))) Mina = Mina.log10().mul(10).pow(1e8)
                if (Mina.gte(Decimal.pow(10,Decimal.pow(10,1e5)))) Mina = Mina.log10().log10().pow(2e4).pow10()
                if (Mina.gte(slogadd(1e30,2))) Mina = Mina.log10().log10().pow(3.33333e28).pow10()
                return Mina.min(slogadd(1e300,2))
            },
            effectDisplay(){
                return format(upgradeEffect("ct",154))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",153)
            }
        },
        155: {
            title: "Anti-Streak",
            description: "AM adds to SM base, SM boosts AM%^5 and Even Pay, Roll and Auto is 1s.",
            cost: Decimal.pow(10,15685),
            currencyInternalName: "Am",
            currencyDisplayName: "Anti-Maskers",
            currencyLayer: "ct",
            effect(){
                let Dahyun = player.ct.Am.max(10).log10().max(10).log10().pow(0.8).div(40)
                return Dahyun
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",155))
            },
            unlocked() {
                return hasUpgrade("ct",154)
            }
        },
        156: {
            title: "Anti-Bettor",
            description: "Bettors boost AM%, Reduce SM scaling, Roll and Auto is 0.5s, Bulk Buy 10x.",
            cost: Decimal.pow(10,21338),
            currencyInternalName: "Am",
            currencyDisplayName: "Anti-Maskers",
            currencyLayer: "ct",
            effect(){
                let Chaeyoung = player.ct.buyables[103].mul(player.ct.buyables[111]).mul(player.ct.buyables[122]).pow(1/15).pow10()
                if (Chaeyoung.gte(Decimal.pow(10,Decimal.pow(10,1e5)))) Chaeyoung = Chaeyoung.log10().log10().pow(2e4).pow10()
                return Chaeyoung
            },
            effectDisplay(){
                return format(upgradeEffect("ct",156))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",155)
            }
        },
        161: {
            title: makeBlue("<b>C</b>")+"onstant Boost",
            description: makeBlue("c")+" boosts Even Payout, 'Constant Bet' amt exp^1.5, Green Win Chance is 6%.",
            cost: Decimal.pow(10,47209),
            currencyInternalName: "Am",
            currencyDisplayName: "Anti-Maskers",
            currencyLayer: "ct",
            effect(){
                let Tzuyu = tmp.ct.getC.max(10).log10().pow(1.5).div(10)
                return Tzuyu
            },
            effectDisplay(){
                return format(upgradeEffect("ct",161))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",156)
            }
        },
        162: {
            title: "Streak "+makeBlue("<b>B</b>")+"ooster",
            description: makeBlue("b")+" boosts Even Payout, 'Linear Bet' amt exp^1.5 'AM Booster' sc/1.2, SM sc^0.8.",
            cost: Decimal.pow(10,70011),
            currencyInternalName: "Am",
            currencyDisplayName: "Anti-Maskers",
            currencyLayer: "ct",
            effect(){
                let Jisoo = tmp.ct.getB.max(10).log10().pow(1.6).div(10)
                return Jisoo
            },
            effectDisplay(){
                return format(upgradeEffect("ct",162))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",161)
            }
        },
        163: {
            title: makeBlue("<b>A</b>")+"nti-Even",
            description: "<span style = 'font-size:9px'>"+makeBlue("a")+" boosts Even Payout, "+makeBlue("a")+" exp^1.5, 'Auto-Roller' exp^1.7, AM exp adds to SM base, 'AM Booster' 1st base+0.005, add 5% to Even and Green Chance</span>.",
            cost: Decimal.pow(10,148451),
            currencyInternalName: "Am",
            currencyDisplayName: "Anti-Maskers",
            currencyLayer: "ct",
            effect(){
                let Jennie = tmp.ct.getA.max(10).log10().pow(2).div(5)
                return Jennie
            },
            effectDisplay(){
                return format(upgradeEffect("ct",163))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",162)
            }
        },
        164: {
            title: "Slogged AM",
            description: makeRed("x")+" adds to 'AM Booster' 1st base,CRNA amt slog in CTNA gain ^1.02, Bulk Buy x10, +5% Even Chance.",
            cost: Decimal.pow(10,379146),
            currencyInternalName: "Am",
            currencyDisplayName: "Anti-Maskers",
            currencyLayer: "ct",
            effect(){
                let Rosé = tmp.ct.getX.max(10).log10().max(10).log10().pow(3).div(1000)
                return Rosé
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",164))
            },
            unlocked() {
                return hasUpgrade("ct",163)
            }
        },
        165: {
            title: "Iterated AM",
            description: "<span style = 'font-size:9px'>Per iteration log10(AM) boosts AM%, reduce SM and 'Better Bets' scaling, +4% Green Chance, Bulk x40, Roll and Auto is 0.3s</span>.",
            cost: Decimal.pow(10,957300),
            currencyInternalName: "Am",
            currencyDisplayName: "Anti-Maskers",
            currencyLayer: "ct",
            effect(){
                let Lisa = player.ct.Am.max(10).log10().pow(tmp.ct.getIter)
                return Lisa
            },
            effectDisplay(){
                return format(upgradeEffect("ct",165))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",164)
            }
        },
        166: {
            title: "No Vaccine",
            description: "<span style = 'font-size:9px'>Multiply Green Exp by 'AM Booster'^2, reduce SM and AM % buyables sc, +10% Even and Green Chance, Bulk x100, Roll and Auto is 1 tick, You don't lose AMs on Even Loss, Unlock Anti-Vaxxers</span>.",
            cost: Decimal.pow(10,5696000),
            currencyInternalName: "Am",
            currencyDisplayName: "Anti-Maskers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",165)
            }
        },
        171: {
            title: "Vax Opposition",
            description: "Anti-Vaccines boost their gain, Reduce 'AM Booster' scaling and autobuy it.",
            cost: new Decimal(500),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let exp = decimalTwo
                if (hasUpgrade("ct",196)) exp = exp.add(2)
                let Nayeon = powExp(player.ct.Avaccines.max(10).log10().mul(10),exp).div(10)
                if (hasUpgrade("ct",202)) Nayeon = slogadd(Nayeon,0.2).pow(0.1)
                return Nayeon
            },
            effectDisplay(){
                return format(upgradeEffect("ct",171))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",166)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",171)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(500)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        172: {
            title: "Anti-Lose",
            description: "Anti-Vaccines divide Even Lose Chance, Highest Win Streak boosts Anti-Vaccine gain.",
            cost: new Decimal(1e6),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Jeongyeon = player.ct.Avaccines.max(10).log10().pow(0.4)
                return Jeongyeon
            },
            effect2(){
                let Momo = player.ct.highstreak.add(1).pow(2).div(100).add(1)
                if (Momo.gte(1e8)) Momo = Momo.div(1e8).pow(2).mul(1e8)
                return Momo
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("ct",172))+", "+format(tmp.ct.upgrades[172].effect2)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",171)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",172)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(1e6)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        173: {
            title: "Anti-Booster",
            description: "Anti-Vaccines add to 'AM Booster' 1st base, Anti-Vaxxers base is 100, Reduce SM scaling.",
            cost: new Decimal(1e8),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Sana = player.ct.Avaccines.max(10).log10().pow(0.7).sub(1).div(100)
                return Sana
            },
            effectDisplay(){
                return "+"+format(upgradeEffect("ct",173))
            },
            unlocked() {
                return hasUpgrade("ct",172)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",173)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(1e8)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        174: {
            title: "Anti-Loser",
            description: "AM divides Even Lose Chance, Bulk roll even bets, cost base is 3, Buy Max AR buyables.",
            cost: new Decimal(4e13),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Jihyo = player.ct.Am.max(10).log10().max(10).log10()
                return Jihyo
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("ct",174))
            },
            unlocked() {
                return hasUpgrade("ct",173)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",174)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(4e13)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        175: {
            title: "Upgraded AntiVax",
            description: "<span style = 'font-size:9px'>log10(log10(AM)) boosts Anti-Vax gain per upgrade, Remove 'AM Booster' 2nd softcap, Anti-Vaxxers cost exp-0.05.</span>",
            cost: new Decimal(1e21),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let exp = player.ct.upgrades.filter(number => number>170).length
                let Mina = player.ct.Am.max(10).log10().max(10).log10().pow(exp)
                return Mina
            },
            effectDisplay(){
                return format(upgradeEffect("ct",175))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",174)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",175)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(1e21)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        176: {
            title: "Iterated AntiVax",
            description: "<span style = 'font-size:9px'>log10(Sqrt mult) boosts Anti-Vax gain per Iteration/5, Anti-Vax effect boosts Even Pay.</span>",
            cost: new Decimal(6e29),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let exp = tmp.ct.getIter.div(5)
                let Dahyun = tmp.ct.getXmult.max(10).log10().pow(exp)
                if (Dahyun.gte(Decimal.pow(10,1e20))) Dahyun = Dahyun.log10().pow(5e18)
                return Dahyun
            },
            effectDisplay(){
                return format(upgradeEffect("ct",176))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",175)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",176)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(6e29)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        181: {
            title: "Vax%",
            description: "AM% boosts Anti-Vax gain, Reduce AM% buyables scaling, Anti-Vaxxers cost exp-0.05.",
            cost: new Decimal(5e38),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Chaeyoung = tmp.ct.getAmps.max(10).log10()
                return Chaeyoung
            },
            effectDisplay(){
                return format(upgradeEffect("ct",181))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",176)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",181)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(5e38)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        182: {
            title: "Green Vax",
            description: "AM boosts Anti-Vaxxer base, Green Chance is 18/37, You don't lose AMs on Green Loss.",
            cost: new Decimal(5e48),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Tzuyu = player.ct.Am.max(10).log10().max(10).log10().pow(1.2)
                return Tzuyu
            },
            effectDisplay(){
                return format(upgradeEffect("ct",182))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",181)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",182)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(5e48)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        183: {
            title: "Green Vaxxer",
            description: "Green Exponent boosts Anti-Vax gain, Anti-Vaxxer cost base is 2, Unlock a buyable.",
            cost: new Decimal(4e64),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Jisoo = tmp.ct.getGreenExp
                if (Jisoo.gte(1e5)) Jisoo = powExp(Jisoo.div(1e5),1.5).pow(1.5).mul(1e5)
                if (Jisoo.gte(1e18)) Jisoo = Jisoo.log10().div(18).pow(2).mul(18).pow10()
                return Jisoo
            },
            effectDisplay(){
                return format(upgradeEffect("ct",183))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",182)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",183)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(4e64)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        184: {
            title: "Greener Vax",
            description: "Anti-Vaccines boost Green Exponent, Anti-Vaccines effect exp+0.1.",
            cost: new Decimal(2e137),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Jennie = player.ct.Avaccines.max(10).log10()
                return Jennie
            },
            effectDisplay(){
                return format(upgradeEffect("ct",184))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",183)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",184)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(2e137)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        185: {
            title: "Vax Booster",
            description: "'AM Booster' effect boosts Anti-Vax gain, Unlock a buyable.",
            cost: new Decimal(1e183),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Rosé = powExp(tmp.ct.buyables[83].effect2,0.4)
                if (Rosé.gte(Decimal.pow(10,1e20))) Rosé = Rosé.log10().pow(5e18)
                return Rosé
            },
            effectDisplay(){
                return format(upgradeEffect("ct",185))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",184)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",185)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(1e183)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        186: {
            title: "Anti-Losest",
            description: "Anti-Vaxxers divide Even Lose Chance, Anti-Vaccines effect exp+0.1.",
            cost: Decimal.pow(10,522),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Lisa = Decimal.pow(1.2,player.ct.Avaxxers.pow(1.1))
                return Lisa
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("ct",186))
            },
            unlocked() {
                return hasUpgrade("ct",185)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",186)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(Decimal.pow(10,522))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        191: {
            title: "Anti-Base",
            description: "Anti-Vaccines reduce Anti-Vaxxer cost base, Anti-Vaccines effect exp+0.1.",
            cost: Decimal.pow(10,590),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Nayeon = player.ct.Avaccines.max(10).log10().max(10).log10().pow(-0.3)
                return Nayeon.max(1e-4)
            },
            effectDisplay(){
                return "^"+format(upgradeEffect("ct",191))
            },
            unlocked() {
                return hasUpgrade("ct",186)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",191)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(Decimal.pow(10,590))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        192: {
            title: "Base Streak",
            description: "Highest Green Streak boosts Anti-Vaxxer base, Green Chance is 55%.",
            cost: Decimal.pow(10,1032),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Jeongyeon = player.ct.ghighstreak.add(1).pow(2).add(1)
                if (Jeongyeon.gte(2e3)) Jeongyeon = Jeongyeon.div(2e3).pow(2.5).mul(2e3)
                return Jeongyeon
            },
            effectDisplay(){
                return format(upgradeEffect("ct",192))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",191)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",192)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(Decimal.pow(10,1032))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        193: {
            title: "Auto-Winner",
            description: "<span style ='font-size:9px'>Anti-Vaccines divide Green Lose chance, Anti-Vaccines effect exp+0.2, Auto-set Win Streak, Unlock a buyable.</span>",
            cost: Decimal.pow(10,1141),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Momo = player.ct.Avaccines.max(10).log10().pow(0.1)
                return Momo
            },
            effectDisplay(){
                return "/"+format(upgradeEffect("ct",193))
            },
            unlocked() {
                return hasUpgrade("ct",192)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",193)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(Decimal.pow(10,1141))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        194: {
            title: "Anti-Capped",
            description: "CTNA boosts cases after hardcap, cases boost Anti-Vax gain, Auto-change Bets",
            cost: Decimal.pow(10,1781).mul(5),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Sana = tmp.ct.aCapCtna
                let mult = decimalOne
                let plus = (player.ct.inC||hasUpgrade("ct",355))?tmp.ct.buyables[171].effect:decimalZero
                if (hasUpgrade("ct",221)) plus = plus.add(tmp.ct.upgrades[221].effect)
                if (hasUpgrade("ct",235)) plus = plus.add(tmp.ct.upgrades[235].effect)
                if (hasUpgrade("ct",264)) plus = plus.add(tmp.ct.upgrades[264].effect)
                if (hasUpgrade("ct",375)) plus = plus.add(tmp.ct.upgrades[375].effect)
                if (hasUpgrade("ct",265)) plus = plus.add(tmp.ct.getUIEff)
                if (hasUpgrade("ct",224)) mult = mult.mul(1.015)
                if (hasUpgrade("ct",226)) mult = mult.mul(1.005)
                Sana = tet10(slog(Sana).add(plus.mul(mult)).min(1.79769e308))
                if (inChallenge("ct",12)) Sana = decimalOne
                return Sana.min(tet10(1.79769e308))
            },
            effect2(){
                let Jihyo = tet10(slog(player.points).div(1.025).sub(8).max(0))
                if (Jihyo.gte(Decimal.pow(10,1e3))) Jihyo = Jihyo.log10().pow(333.3333)
                if (Jihyo.gte(Decimal.pow(10,2e4))) Jihyo = Jihyo.log10().div(2).pow(5e3)
                return Jihyo.min(tet10(3))
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[194].effect)+", "+format(tmp.ct.upgrades[194].effect2)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",193)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",194)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(Decimal.pow(10,1781).mul(5))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        195: {
            title: "Vax Bettor",
            description: "Anti-Vaccines boost bet amt, Autobuy Anti-Vax buyables",
            cost: Decimal.pow(10,2393).mul(5),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Mina = slogadd(player.ct.Avaccines.max(10),-0.3).pow(0.1)
                return Mina
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[195].effect)
            },
            unlocked() {
                return hasUpgrade("ct",194)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",195)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(Decimal.pow(10,2393).mul(5))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        196: {
            title: "Lose Opposer",
            description: "AM divides Green Lose Chance, 'Vax Opposition' exp+2, 'AM Booster' sc^0.7",
            cost: Decimal.pow(10,5033).mul(5),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Dahyun = player.ct.Am.max(10).log10().max(10).log10().pow(0.2)
                return Dahyun
            },
            effectDisplay(){
                return "/"+format(tmp.ct.upgrades[196].effect)
            },
            unlocked() {
                return hasUpgrade("ct",195)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",196)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(Decimal.pow(10,5033).mul(5))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        201: {
            title: "Slogged Vax",
            description: "Anti-Vaxxer cost exp-0.05, CRNA slog in CTNA gain^1.03",
            cost: Decimal.pow(10,7919),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",196)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",201)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(Decimal.pow(10,7919))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        202: {
            title: "Loser Opposer",
            description: "Anti-Vaxxers divide Green Lose Chance, 'Vax Opposition' effect slog+0.2 but effect^0.1",
            cost: Decimal.pow(10,16037),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Chaeyoung = Decimal.pow(1.1,player.ct.Avaxxers.pow(0.9))
                return Chaeyoung
            },
            effectDisplay(){
                return "/"+format(tmp.ct.upgrades[202].effect)
            },
            unlocked() {
                return hasUpgrade("ct",201)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",202)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(Decimal.pow(10,16037))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        203: {
            title: "Slogged Masker",
            description: "AM boosts CRNA slog in CTNA gain, Anti-Vaxxers produce Side Effects.",
            cost: Decimal.pow(10,31987),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Tzuyu = slog(player.ct.Am.max(10)).pow(1.5).sub(1).div(250).add(1)
                return Tzuyu.min(1.04)
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[203].effect)
            },
            unlocked() {
                return hasUpgrade("ct",202)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",203)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(Decimal.pow(10,31987))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        204: {
            title: "Side Vaccine",
            description: "Anti-Vaccines boost Side Effect gain.",
            cost: Decimal.pow(10,47e3),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Jisoo = player.ct.Avaccines.max(10).log10().pow(0.1)
                if (Jisoo.gte(Decimal.pow(10,1e7))) Jisoo = Jisoo.log10().div(1e7).pow(0.2).mul(1e7).pow10()
                return Jisoo
            },
            effectDisplay(){
                return format(upgradeEffect("ct",204))+"x"
            },
            unlocked() {
                return hasUpgrade("ct",203)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",204)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(Decimal.pow(10,47e3))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        205: {
            title: "Side ExpoVax",
            description: "Side Effects boost Anti-Vax effect exponent.",
            cost: Decimal.pow(10,50e3),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Jennie = player.ct.SideEff.max(10).log10().pow(0.3)
                if (hasUpgrade("ct",215)) Jennie = slogadd(Jennie,.2)
                if (hasUpgrade("ct",222))  Jennie = slogadd(Jennie,.2).pow(3)
                if (hasUpgrade("ct",225)) Jennie = slogadd(Jennie,.2).pow(2)
                if (hasUpgrade("ct",226)) Jennie = slogadd(Jennie,.2)
                return Jennie
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[205].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",204)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",205)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(Decimal.pow(10,50e3))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        206: {
            title: "Slogged Effects",
            description: "Side Effects boost CRNA slog in CTNA gain, unlock a buyable.",
            cost: Decimal.pow(10,110e3),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Rosé = slog(player.ct.SideEff.max(10)).pow(0.03)
                return Rosé.min(1.05)
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[206].effect)
            },
            unlocked() {
                return hasUpgrade("ct",205)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",206)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(Decimal.pow(10,110e3))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        211: {
            title: "Self Side",
            description: "Side Effects boost their gain.",
            cost: Decimal.pow(10,180e3),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Lisa = player.ct.SideEff.max(10).log10().pow(0.75)
                if (hasUpgrade("ct",214)) Lisa = slogadd(Lisa,.2)
                return Lisa
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[211].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",206)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",211)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(Decimal.pow(10,180e3))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        212: {
            title: "Green Effects",
            description: "Green Exponent boosts Side Effect gain.",
            cost: Decimal.pow(10,750e3),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Nayeon = slogadd(tmp.ct.getGreenExp.max(10),-0.75).pow(0.4)
                if (hasUpgrade("ct",223)) Nayeon = slogadd(Nayeon,.25).pow(2)
                if (hasUpgrade("ct",226)) Nayeon = slogadd(Nayeon,.3).pow(2)
                return Nayeon
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[212].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",211)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",212)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(Decimal.pow(10,750e3))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        213: {
            title: "Sider Vax",
            description: "'Side Vaxxer' adds to 'Vaxxer Base' base, Side Effect gain x20.",
            cost: Decimal.pow(10,11e5),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Jeongyeon = player.ct.buyables[151].pow(.5).mul(0.2)
                return Jeongyeon
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[213].effect)
            },
            unlocked() {
                return hasUpgrade("ct",212)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",213)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(Decimal.pow(10,11e5))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        214: {
            title: "Self Green",
            description: "Side Effects boost Green Exp, 'Anti-Capped' slog x1.01, 'Self-Side' slog+0.2.",
            cost: Decimal.pow(10,7.5e6),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Momo = slogadd(player.ct.SideEff.max(10),-0.2).pow(10)
                return Momo
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[214].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",213)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",214)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(Decimal.pow(10,7.5e6))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        215: {
            title: "ExpoEffect",
            description: "AM % boosts Side Effect gain, 'Side ExpoVax' slog +0.2, 'Side Vaxxer' base+0.1.",
            cost: Decimal.pow(10,25e6),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Sana = slogadd(tmp.ct.getAmps.max(10),-2.2)
                return Sana
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[215].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",214)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",215)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(Decimal.pow(10,25e6))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        216: {
            title: "Anti-Side",
            description: "Anti-Vaxxers boost Side Effect gain, unlock a buyable.",
            cost: Decimal.pow(10,115e6),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Jihyo = powExp(player.ct.Avaxxers,2).pow(0.2)
                return Jihyo
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[216].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",215)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",216)) {
                    let color = "#bf8f8f"
                    if (player.ct.Avaccines.gte(Decimal.pow(10,115e6))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        221: {
            title: "Side-Capped",
            description: "'Side Vaxxer' adds to 'Anti-Capped' slog.",
            cost: new Decimal(4e42),
            currencyInternalName: "SideEff",
            currencyDisplayName: "Side Effects",
            currencyLayer: "ct",
            effect(){
                let exp = decimalOne
                if (hasUpgrade("ct",234)) exp = exp.mul(2.3)
                let Mina = player.ct.buyables[151].max(10).log10().pow(exp).sub(1).div(2)
                if (Mina.gte(5)) Mina = Mina.div(5).pow(0.2).mul(5)
                if (Mina.gte(10)) Mina = powExp(Mina,0.8111)
                if (Mina.gte(30)) Mina = powExp(Mina.div(3),0.8).mul(3)
                return Mina.min(150)
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[221].effect)
            },
            unlocked() {
                return hasUpgrade("ct",216)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",221)) {
                    let color = "#bf8f8f"
                    if (player.ct.SideEff.gte(4e42)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        222: {
            title: "Sider Effects",
            description: "Side Effect boost exponent+1, 'Side ExpoVax' boosts SE gain, slog +0.2, eff^3.",
            cost: new Decimal(1e51),
            currencyInternalName: "SideEff",
            currencyDisplayName: "Side Effects",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",221)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",222)) {
                    let color = "#bf8f8f"
                    if (player.ct.SideEff.gte(1e51)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        223: {
            title: "Greener Effects",
            description: "'Green Effects' slog +0.25, eff^2, 'Side Vaxxer' base+0.1.",
            cost: new Decimal(1e65),
            currencyInternalName: "SideEff",
            currencyDisplayName: "Side Effects",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",222)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",223)) {
                    let color = "#bf8f8f"
                    if (player.ct.SideEff.gte(1e65)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        224: {
            title: "Side-Vaxxed",
            description: "'Side Gain' adds to 'Side Vaxxer' base, 'Anti-Capped' slog x1.015, unlock a buyable.",
            cost: new Decimal(5e109),
            currencyInternalName: "SideEff",
            currencyDisplayName: "Side Effects",
            currencyLayer: "ct",
            effect(){
                let Dahyun = player.ct.buyables[152].div(200)
                if (Dahyun.gte(0.3)) Dahyun = Dahyun.div(.3).pow(0.3).mul(.3)
                return Dahyun
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[224].effect)
            },
            unlocked() {
                return hasUpgrade("ct",223)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",224)) {
                    let color = "#bf8f8f"
                    if (player.ct.SideEff.gte(5e109)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        225: {
            title: "Side Streak",
            description: "HWS boosts Side Effect gain, 'Side ExpoVax' slog +0.2, eff^2.",
            cost: new Decimal(1e195),
            currencyInternalName: "SideEff",
            currencyDisplayName: "Side Effects",
            currencyLayer: "ct",
            effect(){
                let Chaeyoung = player.ct.highstreak.max(10).log10().pow(1.1)
                return Chaeyoung
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[225].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",224)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",225)) {
                    let color = "#bf8f8f"
                    if (player.ct.SideEff.gte(1e195)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        226: {
            title: "Side Streaker",
            description: "<span style='font-size:9px'>HGS boosts SE gain, 'Anti-Capped' slog x1.005, 'Green Effects' slog +0.3 eff^2, 'Side ExpoVax' slog+0.2.</span>",
            cost: Decimal.pow(10,347),
            currencyInternalName: "SideEff",
            currencyDisplayName: "Side Effects",
            currencyLayer: "ct",
            effect(){
                let Tzuyu = player.ct.ghighstreak.max(10).log10().pow(1.5)
                return Tzuyu
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[226].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",225)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",226)) {
                    let color = "#bf8f8f"
                    if (player.ct.SideEff.gte(Decimal.pow(10,347))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        231: {
            title: "Adverse Side",
            description: "Side Effects boost AE gain and base SE gain.",
            cost: new Decimal(1e3),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let add = new Decimal(-1.2)
                if (hasUpgrade("ct",236)) add = add.add(.5)
                let Jisoo = slogadd(player.ct.SideEff.max(10),add).pow(0.75)
                if (Jisoo.gte("eee15")) Jisoo = Jisoo.log10().log10().div(1e15).pow(0.2).mul(1e15).pow10().pow10()
                return Jisoo
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[231].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",226)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",231)) {
                    let color = "#bf8f8f"
                    if (player.ct.AdEff.gte(1e3)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        232: {
            title: "Adverse Self",
            description: "Adverse Effects boost their gain.",
            cost: new Decimal(1e7),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let Jennie = slogadd(player.ct.AdEff.max(10),-.5)
                if (hasUpgrade("ct",241)) Jennie = slogadd(Jennie,.25)
                if (hasUpgrade("ct",243)) Jennie = slogadd(Jennie,.175)
                return Jennie
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[232].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",231)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",232)) {
                    let color = "#bf8f8f"
                    if (player.ct.AdEff.gte(1e7)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        233: {
            title: "Adverser Side",
            description: "Adverse Effects boost base SE gain, SE boost exp x5, Anti-Vax 1st effect slog+3.",
            cost: new Decimal(5e10),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let Rosé = player.ct.AdEff.add(1).pow(0.7)
                return Rosé
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[233].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",232)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",233)) {
                    let color = "#bf8f8f"
                    if (player.ct.AdEff.gte(5e10)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        234: {
            title: "Adverse Booster",
            description: "<span style='font-size:9px'>AE boost SE boost exp, cases boost AE gain, CRNA slog^1.02, 'Side-Capped'^2.3, Autobuy SE buyables.</span>",
            cost: new Decimal(1e17),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let Lisa = player.ct.AdEff.max(10).log10().pow(0.7)
                return Lisa
            },
            effect2(){
                let Nayeon = slog(player.points.max(10)).div(10).pow(1.2).pow10().div(10).pow10()
                if (Nayeon.gte(1e100)) Nayeon = Nayeon.log10().div(100).pow(0.5).mul(100).pow10()
                if (Nayeon.gte(Decimal.pow(10,1e50))) Nayeon = Nayeon.log10().div(1e50).pow(0.5).mul(1e50).pow10()
                if (Nayeon.gte(Decimal.pow(10,1e100))) Nayeon = Nayeon.log10().div(1e100).pow(0.3).mul(1e100).pow10()
                if (Nayeon.gte(Decimal.pow(10,Decimal.pow(10,7e4)))) Nayeon = Nayeon.log10().log10().div(7e4).pow(0.2).mul(7e4).pow10().pow10()
                return Nayeon
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[234].effect)+"x, "+format(tmp.ct.upgrades[234].effect2)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",233)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",234)) {
                    let color = "#bf8f8f"
                    if (player.ct.AdEff.gte(1e17)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        235: {
            title: "Adverse Cap",
            description: "Adverse Effects add to 'Anti-Capped' slog, AE boost exp+5, unlock a buyable.",
            cost: new Decimal(1e74),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let exp = new Decimal(.6)
                if (hasUpgrade("ct",242)) exp = exp.mul(1.3)
                if (hasUpgrade("ct",246)) exp = exp.mul(1.4)
                let Jeongyeon = player.ct.AdEff.max(10).log10().max(10).log10().pow(exp)
                if (Jeongyeon.gte(1e15)) Jeongyeon = Jeongyeon.log10().sub(5).pow(15)
                if (Jeongyeon.gte(1e17)) Jeongyeon = Jeongyeon.div(1e17).pow(0.2).mul(1e17)
                return Jeongyeon.sub(1)
            },
            effectDisplay(){
                let dis = "+"+format(tmp.ct.upgrades[235].effect)
                if (tmp.ct.upgrades[235].effect.gte(1e15)) dis += " (softcapped)"
                return dis
            },
            unlocked() {
                return hasUpgrade("ct",234)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",235)) {
                    let color = "#bf8f8f"
                    if (player.ct.AdEff.gte(1e74)) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        236: {
            title: "Adverser Effect",
            description: "Adverse Effects add to AE gain exp, AE boost exp+5.",
            cost: Decimal.pow(2,512),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let exp = new Decimal(0.4875)
                if (hasUpgrade("ct",243)) exp = exp.mul(1.3)
                let Momo = player.ct.AdEff.max(10).log10().max(10).log10().pow(exp).sub(1)
                if (Momo.gte(1e4)) Momo = Momo.div(1e4).pow(0.5).mul(1e4)
                return Momo
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[236].effect)
            },
            unlocked() {
                return hasUpgrade("ct",235)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",236)) {
                    let color = "#bf8f8f"
                    if (player.ct.AdEff.gte(Decimal.pow(2,512))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        241: {
            title: "Adverser Self",
            description: "<span style='font-size:9px'>Anti-Vaxxers boost SE boost exp, 'Adverse Self' slog+0.25, Anti-Vax 1st eff slog x1.35</span>.",
            cost: Decimal.pow(2,1024),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let Sana = player.ct.Avaxxers.max(10).log10().pow(0.5).div(8.4).max(1)
                return Sana
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[241].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",236)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",241)) {
                    let color = "#bf8f8f"
                    if (player.ct.AdEff.gte(Decimal.pow(2,1024))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        242: {
            title: "Adverser Cap",
            description: "Anti-Vaxxers boost AE boost exp, AE boost slog+0.1, 'Adverse Cap'^1.3.",
            cost: Decimal.pow(2,2048),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let Jihyo = player.ct.Avaxxers.max(10).log10().pow(0.21063)
                if (Jihyo.gte(Decimal.pow(10,3e3))) Jihyo = Jihyo.log10().div(3e3).pow(0.2).mul(3e3).pow10()
                if (Jihyo.gte(Decimal.pow(10,1e5))) Jihyo = powExp(Jihyo.log10().pow(2),5)
                if (Jihyo.gte(Decimal.pow(10,2e6))) Jihyo = powExp(Jihyo.log10().div(2).mul(1e4),6).pow(2)
                return Jihyo
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[242].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",241)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",242)) {
                    let color = "#bf8f8f"
                    if (player.ct.AdEff.gte(Decimal.pow(2,2048))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        243: {
            title: "Adversest Self",
            description: "<span style='font-size:9px'>AE boosts its boost exp, 'Adverse Self' and 'Adverse Gain' slog+0.175, 'Adverser Effect'^1.3.</span>",
            cost: Decimal.pow(2,8192),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let Mina = player.ct.AdEff.max(10).log10().pow(0.3)
                return Mina
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[243].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",242)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",243)) {
                    let color = "#bf8f8f"
                    if (player.ct.AdEff.gte(Decimal.pow(2,8192))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        244: {
            title: "Misfortune",
            description: "AE adds to its boost slog, unlock a buyable, unlock Adversity.",
            cost: Decimal.pow(2,131072),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let exp = decimalHalf
                if (hasUpgrade("ct",246)) exp = exp.mul(1.4)
                let Dahyun = slog(player.ct.AdEff.max(10)).pow(exp).sub(1).div(20)
                return Dahyun
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[244].effect)
            },
            unlocked() {
                return hasUpgrade("ct",243)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",244)) {
                    let color = "#bf8f8f"
                    if (player.ct.AdEff.gte(Decimal.pow(2,131072))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        245: {
            title: "Trouble",
            description: "Adversities boost AE boost exp, Anti-Vax boost to AM slog^1.35.",
            cost: Decimal.pow(2,524288),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let Chaeyoung = powExp(player.ct.Adversity.max(10).log10().mul(10),1.2).div(10)
                return Chaeyoung
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[245].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",244)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",245)) {
                    let color = "#bf8f8f"
                    if (player.ct.AdEff.gte(Decimal.pow(2,524288))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        246: {
            title: "Hardship",
            description: "<span style='font-size:9px'>Anti-Vaxxers boost Adversity gain, 'Adverse Cap'^1.4, buy max 'Adverse Gain', 'Adverse Boost' base^10</span>.",
            cost: Decimal.pow(2,1048576),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let Tzuyu = powExp(player.ct.Avaxxers.max(10).log10(),1.3).pow(0.15)
                if (hasUpgrade("ct",266)) Tzuyu = powExp(Tzuyu,2)
                if (Tzuyu.gte(Decimal.pow(10,25000)) && hasUpgrade("ct",291)) Tzuyu = Tzuyu.log10().div(25000).pow(8).mul(25000).pow10()
                if (Tzuyu.gte(Decimal.pow(10,1e8))) Tzuyu = Tzuyu.log10().div(1e8).pow(0.2).mul(1e8).pow10()
                if (Tzuyu.gte(Decimal.pow(10,1e12))) Tzuyu = Tzuyu.log10().log10().div(12).pow(0.3).mul(12).pow10().pow10()
                return Tzuyu
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[246].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",245)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",246)) {
                    let color = "#bf8f8f"
                    if (player.ct.AdEff.gte(Decimal.pow(2,1048576))) color = "#8855cc"
                    return color
                    }
                }
            }
        },
        251: {
            title: "Distress",
            description: "Adversities add to 'Adverse Gain' slog, unlock a buyable.",
            cost: new Decimal(2e12),
            currencyInternalName: "Adversity",
            currencyDisplayName: "Adversities",
            currencyLayer: "ct",
            effect(){
                let Jisoo = player.ct.Adversity.max(10).log10().pow(0.15).sub(1).div(4)
                if (Jisoo.gte(0.15)) Jisoo = Jisoo.div(0.015).log10().pow(0.5).mul(0.15)
                if (hasUpgrade("ct",262)) Jisoo = Jisoo.mul(1.5)
                return Jisoo.min(0.67)
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[251].effect)
            },
            unlocked() {
                return hasUpgrade("ct",246)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",251)) {
                    let color = "#bf8f8f"
                    if (player.ct.Adversity.gte(2e12)) color = "#6688aa"
                    return color
                    }
                }
            }
        },
        252: {
            title: "Disaster",
            description: "Adversities boost their gain, 'Adverse Gain' tetration base is 11.",
            cost: new Decimal(2e32),
            currencyInternalName: "Adversity",
            currencyDisplayName: "Adversities",
            currencyLayer: "ct",
            effect(){
                let Jennie = powExp(player.ct.Adversity.max(10).log10(),2)
                return Jennie
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[252].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",251)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",252)) {
                    let color = "#bf8f8f"
                    if (player.ct.Adversity.gte(2e32)) color = "#6688aa"
                    return color
                    }
                }
            }
        },
        253: {
            title: "Suffering",
            description: "Adversities add to AE boost slog, Anti-Vax 1st effect beyond F25 is slog^10.",
            cost: new Decimal(1e66),
            currencyInternalName: "Adversity",
            currencyDisplayName: "Adversities",
            currencyLayer: "ct",
            effect(){
                let Rosé = slog(player.ct.Adversity.max(10)).pow(0.85).sub(1).div(18)
                return Rosé
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[253].effect)
            },
            unlocked() {
                return hasUpgrade("ct",252)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",253)) {
                    let color = "#bf8f8f"
                    if (player.ct.Adversity.gte(1e66)) color = "#6688aa"
                    return color
                    }
                }
            }
        },
        254: {
            title: "Affliction",
            description: "Adversities add to AE gain exp, 'Anti-Capped' CTNA slog x1.1.",
            cost: new Decimal(4.141e141),
            currencyInternalName: "Adversity",
            currencyDisplayName: "Adversities",
            currencyLayer: "ct",
            effect(){
                let Lisa = player.ct.Adversity.max(10).log10().max(10).log10().sub(1).div(2)
                return Lisa
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[254].effect)
            },
            unlocked() {
                return hasUpgrade("ct",253)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",254)) {
                    let color = "#bf8f8f"
                    if (player.ct.Adversity.gte(4.141e141)) color = "#6688aa"
                    return color
                    }
                }
            }
        },
        255: {
            title: "Sorrow",
            description: "Adversities boost 'Adverse Boost' base, 'Adverse Gain' tet base is 15, slog+0.05.",
            cost: new Decimal(2.08e208),
            currencyInternalName: "Adversity",
            currencyDisplayName: "Adversities",
            currencyLayer: "ct",
            effect(){
                let Nayeon = player.ct.Adversity.max(10).log10().max(10).log10().pow(0.33)
                return Nayeon
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[255].effect)
            },
            unlocked() {
                return hasUpgrade("ct",254)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",255)) {
                    let color = "#bf8f8f"
                    if (player.ct.Adversity.gte(2.08e208)) color = "#6688aa"
                    return color
                    }
                }
            }
        },
        256: {
            title: "Misery",
            description: "'Adverse Gain' base boosts Adversity gain exp, tet base+0.1 per 'Adverse Boost'.",
            cost: Decimal.pow(10,360).mul(3.6),
            currencyInternalName: "Adversity",
            currencyDisplayName: "Adversities",
            currencyLayer: "ct",
            effect(){
                let Jeongyeon = tmp.ct.buyables[161].base.max(10).log10().max(10).log10().sub(4.5).max(1).pow(0.25)
                if (Jeongyeon.gte(1e10)) Jeongyeon = Jeongyeon.log10().pow(5).mul(1e5)
                if (Jeongyeon.gte(1e20)) Jeongyeon = Jeongyeon.log10().div(20).pow(0.75).mul(20).pow10()
                if (Jeongyeon.gte(1e250)) Jeongyeon = Jeongyeon.log10().div(250).pow(0.75).mul(250).pow10()
                if (Jeongyeon.gte("e400")) Jeongyeon = Jeongyeon.log10().div(400).pow(0.6).mul(400).pow10()
                if (hasUpgrade("ct",286)) Jeongyeon = Jeongyeon.pow(3)
                if (hasUpgrade("ct",302)) Jeongyeon = Jeongyeon.pow(Decimal.pow(2,.5))
                if (hasUpgrade("ct",371)) Jeongyeon = Jeongyeon.pow(2)
                if (hasUpgrade("ct",476)) Jeongyeon = Jeongyeon.pow(tmp.ct.upgrades[476].effect)
                return Jeongyeon
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[256].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",255)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",256)) {
                    let color = "#bf8f8f"
                    if (player.ct.Adversity.gte(Decimal.pow(10,360).mul(3.6))) color = "#6688aa"
                    return color
                    }
                }
            }
        },
        261: {
            title: "Heartbreak",
            description: "Infecters boost Adv gain, Unlock a buyable, 'Adv Gain' cost base is 40, cost exp is 1.13.",
            cost: Decimal.pow(10,790).mul(7.9),
            currencyInternalName: "Adversity",
            currencyDisplayName: "Adversities",
            currencyLayer: "ct",
            effect(){
                let Momo = slog(player.e.points.max(10)).pow(1.1).tetrate(2)
                if (Momo.gte(Decimal.pow(10,550))) Momo = Momo.log10().div(550).pow(10).mul(550).pow10()
                if (Momo.gte(Decimal.pow(10,1e5))) Momo = Momo.log10().div(1e5).pow(0.3).mul(1e5).pow10()
                if (Momo.gte(Decimal.pow(10,5e6))) Momo = Momo.log10().div(5e6).pow(5).mul(5e6).pow10()
                if (Momo.gte(Decimal.pow(10,1e9))) Momo = Momo.log10().log10().div(9).pow(0.5).mul(9).pow10().pow10()
                return Momo
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[261].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",256)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",261)) {
                    let color = "#bf8f8f"
                    if (player.ct.Adversity.gte(Decimal.pow(10,790).mul(7.9))) color = "#6688aa"
                    return color
                    }
                }
            }
        },
        262: {
            title: "Tribulation",
            description: "'Distress' x1.5, 'Adversity Gain' cost exp is 1.12, Anti-Vax eff beyond 1F70 is slog^10.",
            cost: Decimal.pow(10,2253).mul(2.253),
            currencyInternalName: "Adversity",
            currencyDisplayName: "Adversities",
            currencyLayer: "ct",
            effect(){
                let Sana = tmp.ct.buyables[161].base.max(10).log10().max(10).log10().sub(4.5).max(1).pow(0.25)
                return Sana
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[262].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",261)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",262)) {
                    let color = "#bf8f8f"
                    if (player.ct.Adversity.gte(Decimal.pow(10,2253).mul(2.253))) color = "#6688aa"
                    return color
                    }
                }
            }
        },
        263: {
            title: "Trauma",
            description: "Adversities add to 'Adverse Gain' tet base, cost exp is 1.11, AE boost slog+0.01.",
            cost: Decimal.pow(10,5127),
            currencyInternalName: "Adversity",
            currencyDisplayName: "Adversities",
            currencyLayer: "ct",
            effect(){
                let Jihyo = player.ct.Adversity.max(10).log10().pow(0.9).sub(1).div(1000)
                if (Jihyo.gte(6)) Jihyo = Jihyo.div(6).pow(0.5).mul(6)
                if (Jihyo.gte(8)) Jihyo = Jihyo.div(8).pow(0.3).mul(8)
                if (Jihyo.gte(200)) Jihyo = Jihyo.div(2).log10().div(2).pow(0.5).mul(2).pow10().div(100).pow(0.3).mul(200)
                return Jihyo
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[263].effect)
            },
            unlocked() {
                return hasUpgrade("ct",262)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",263)) {
                    let color = "#bf8f8f"
                    if (player.ct.Adversity.gte(Decimal.pow(10,5127))) color = "#6688aa"
                    return color
                    }
                }
            }
        },
        264: {
            title: "Torment",
            description: "Advs add to 'Anti-Capped' slog, 'Adv Gain' cost exp is 1.1, Adversity eff exp+0.5.",
            cost: Decimal.pow(10,25282),
            currencyInternalName: "Adversity",
            currencyDisplayName: "Adversities",
            currencyLayer: "ct",
            effect(){
                let Mina = powExp(player.ct.Adversity.max(10).log10(),1.1).pow(0.3).sub(1).mul(1.2274)
                if (Mina.gte(100) && player.ct.inC) Mina = Mina.div(100).pow(0.17).mul(100)
                if (Mina.gte(900)) Mina = Mina.div(900).pow(0.1).mul(900)
                if (Mina.gte(2e7)) Mina = Mina.div(2e7).pow(0.4).mul(2e7)
                if (Mina.gte(5e7)) Mina = Mina.div(5).log10().add(3).pow(7).mul(5)
                if (Mina.gte(2e20)) Mina = Mina.div(2).log10().div(2).pow(20).mul(2)
                return Mina
            },
            effectDisplay(){
                let dis = "+"+format(tmp.ct.upgrades[264].effect)
                if (tmp.ct.upgrades[264].effect.gte(2e20)) dis += " (softcapped)"
                return dis
            },
            unlocked() {
                return hasUpgrade("ct",263)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",264)) {
                    let color = "#bf8f8f"
                    if (player.ct.Adversity.gte(Decimal.pow(10,25282))) color = "#6688aa"
                    return color
                    }
                }
            }
        },
        265: {
            title: "Wretchedness",
            description: "Unlock Vaccination, 'Adv Gain' cost exp is 1.1, Adversity eff exp+0.3.",
            cost: Decimal.pow(10,69696).mul(6.969),
            currencyInternalName: "Adversity",
            currencyDisplayName: "Adversities",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",264)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",265)) {
                    let color = "#bf8f8f"
                    if (player.ct.Adversity.gte(Decimal.pow(10,69696).mul(6.969))) color = "#6688aa"
                    return color
                    }
                }
            }
        },
        266: {
            title: "Torture",
            description: "Best Adversities boost Anti-Vaxxer gain, UV gain exp+1, 'Hardship' exp^2.",
            cost: Decimal.pow(10,76767).mul(7.676),
            currencyInternalName: "Adversity",
            currencyDisplayName: "Adversities",
            currencyLayer: "ct",
            effect(){
                let Dahyun = powExp(player.ct.bestAdv.max(10).log10().sub(7.5e4),1.5).pow(0.2)
                return Dahyun
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[266].effect)
            },
            unlocked() {
                return hasUpgrade("ct",265)
            },
            style: {
                "background-color"() {
                    if (!hasUpgrade("ct",266)) {
                    let color = "#bf8f8f"
                    if (player.ct.Adversity.gte(Decimal.pow(10,76767).mul(7.676))) color = "#6688aa"
                    return color
                    }
                }
            }
        },
        271: {
            title: "Mishap",
            description: "Cases boost Anti-Vaxxer gain.",
            cost: Decimal.pow(10,19900).mul(3),
            currencyInternalName: "Avaccines",
            currencyDisplayName: "Anti-Vaccines",
            currencyLayer: "ct",
            effect(){
                let Chaeyoung = slog(player.points.max(10)).sub(5).pow(0.25)
                if (hasUpgrade("ct",331)) Chaeyoung = Chaeyoung.pow(2).pow10()
                return Chaeyoung
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[271].effect)
            },
            unlocked() {
                return hasUpgrade("ct",265)
            },
            canAfford() {
                return player.ct.Avaccines.gte(Decimal.pow(10,19900).mul(3)) && player.ct.inC
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",271)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[271].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        272: {
            title: "Setback",
            description: "UI boost Anti-Vaxxer gain.",
            cost: Decimal.pow(10,5280),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let Tzuyu = player.ct.Ui.max(10).log10().pow(1.2)
                if (hasUpgrade("ct",354)) Tzuyu = Tzuyu.pow(.5).pow10()
                return Tzuyu
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[272].effect)
            },
            unlocked() {
                return hasUpgrade("ct",271)
            },
            canAfford() {
                return player.ct.AdEff.gte(Decimal.pow(10,5280)) && player.ct.inC
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",272)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[272].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        273: {
            title: "Crisis",
            description: "Best Adversities boost UI gain.",
            cost: Decimal.pow(10,41414),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let softcap = Decimal.pow(2,1024)
                let Jisoo = powExp(player.ct.bestAdv.max(10).log10().sub(9.7e4),0.9).pow(0.85)
                if (hasUpgrade("ct",296)) Jisoo = slogadd(Jisoo,0.4)
                if (Jisoo.gte(softcap)) Jisoo = Decimal.pow(2,Jisoo.log(2).div(softcap.log(2)).pow(0.5).mul(softcap.log(2)))
                if (Jisoo.gte("e2e13")) Jisoo = Jisoo.log10().div(2).log10().div(13).pow(0.35).mul(13).pow10().mul(2).pow10()
                if (Jisoo.gte("e3e13")) Jisoo = Jisoo.log10().div(3e3).log10().pow(13).mul(3).pow10()
                if (Jisoo.gte("e5e13")) Jisoo = Jisoo.log10().div(5).log10().div(13).pow(0.33).mul(13).pow10().mul(5).pow10()
                return Jisoo
            },
            effectDisplay(){
                let eff = tmp.ct.upgrades[273].effect
                let dis = format(eff)+"x"
                if (eff.gte(Decimal.pow(2,1024))) dis += " (softcapped)"
                return dis
            },
            unlocked() {
                return hasUpgrade("ct",272)
            },
            canAfford() {
                return player.ct.AdEff.gte(Decimal.pow(10,41414)) && player.ct.inC
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",273)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[273].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        274: {
            title: "Catastrophe",
            description: "Vaccination upgrades add to UV gain exp, Autobuy Adv buyables.",
            cost: Decimal.pow(10,51111),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let Jennie = player.ct.upgrades.filter(n=>n>270 && (n<292 || (n>330 && n<340))).length*0.3
                return Jennie
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[274].effect)
            },
            unlocked() {
                return hasUpgrade("ct",273)
            },
            canAfford() {
                return player.ct.AdEff.gte(Decimal.pow(10,51111)) && player.ct.inC
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",274)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[274].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        275: {
            title: "Tragedy",
            description: "UI boosts Adversity gain.",
            cost: Decimal.pow(10,57575),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let exp = new Decimal(2.5)
                if (hasUpgrade("ct",301)) exp = exp.add(1.2)
                if (hasUpgrade("ct",361)) exp = exp.add(1)
                if (hasUpgrade("ct",366)) exp = exp.add(3)
                if (hasUpgrade("ct",373)) exp = exp.add(4.2)
                if (hasUpgrade("ct",503)) exp = exp.mul(tmp.ct.upgrades[503].effect)
                let Rosé = powExp(player.ct.Ui.max(1),exp).pow(exp)
                if (hasUpgrade("ct",475)) Rosé = powExp2(Rosé,1.45)
                if (hasUpgrade("ct",494)) Rosé = powExp2(Rosé,1.2)
                if (player.ct.inC) Rosé = powExp(Rosé,0.2)
                if (Rosé.gte("ee5e9")) Rosé = Rosé.log10().log10().div(5e9).pow(0.4).mul(5e9).pow10().pow10()
                if (hasUpgrade("ct",476) && hasUpgrade("ct",256)) Rosé = Rosé.pow(tmp.ct.upgrades[256].effect)
                return Rosé
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[275].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",274)
            },
            canAfford() {
                return player.ct.AdEff.gte(Decimal.pow(10,57575)) && player.ct.inC
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",275)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[275].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        276: {
            title: "Calamity",
            description: "<span style='font-size:9px'>Social Distant infecter starts ^^11 later, 'Adv Gain' cost exp is 1.09, UV gain exp+0.5.</span>",
            cost: Decimal.pow(10,1133333),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",275)
            },
            canAfford() {
                return player.ct.AdEff.gte(Decimal.pow(10,1133333)) && player.ct.inC
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",276)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[276].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        281: {
            title: "Trial",
            description: "Anti-Vaxxers boost UI gain, 'Anti-Capped' CTNA slog x1.1, Autobuy 'Capped'.",
            cost: Decimal.pow(10,3737373),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let Lisa = player.ct.Avaxxers.max(10).log10().max(10).log10().pow(0.7)
                if (hasUpgrade("ct",381)) Lisa = slogadd(Lisa,0.42)
                if (Lisa.gte("e2e5")) Lisa = Lisa.log10().div(2e5).pow(0.5).mul(2e5).pow10()
                if (Lisa.gte("ee6")) Lisa = Lisa.log10().div(1e6).pow(0.4).mul(1e6).pow10()
                if (Lisa.gte("ee9")) Lisa = Lisa.log10().div(1e9).pow(0.2).mul(1e9).pow10()
                if (Lisa.gte("e2e9")) Lisa = powExp(Lisa.log10().mul(5),3).pow(2e6)
                return Lisa
            },
            effectDisplay(){
                let dis = format(tmp.ct.upgrades[281].effect)+"x"
                if (tmp.ct.upgrades[281].effect.gte("e2e5")) dis += " (softcapped)"
                return dis
            },
            unlocked() {
                return hasUpgrade("ct",276)
            },
            canAfford() {
                return player.ct.AdEff.gte(Decimal.pow(10,3737373)) && player.ct.inC
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",281)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[281].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        282: {
            title: "Burden",
            description: "'Adverse Boost' scaling/1.5, 'Anti-Capped' CTNA slog x1.1",
            cost: Decimal.pow(10,7600000),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",281)
            },
            canAfford() {
                return player.ct.AdEff.gte(Decimal.pow(10,7600000)) && player.ct.inC
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",282)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[282].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        283: {
            title: "Hassle",
            description: "UI boost their gain, UV boost to UI gain exp+0.3, 'Adv Gain' cost exp is 1.08",
            cost: Decimal.pow(10,42e6),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let exp = decimalTwo
                if (hasUpgrade("ct",353)) exp = exp.mul(tmp.ct.upgrades[353].effect)
                let Nayeon = powExp(player.ct.Ui.max(10).log10(),2).pow(exp)
                return Nayeon
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[283].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",282)
            },
            canAfford() {
                return player.ct.AdEff.gte(Decimal.pow(10,42e6)) && player.ct.inC
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",283)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[283].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        284: {
            title: "Stress",
            description: "Anti-Vaxxers boost their gain, UI effect^1.1, gain 100% of UV gain per second.",
            cost: Decimal.pow(10,133e6),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let Jeongyeon = powExp(player.ct.Avaxxers.max(10).log10().max(10).log10(),1.4).pow(1.5)
                return Jeongyeon
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[284].effect)
            },
            unlocked() {
                return hasUpgrade("ct",283)
            },
            canAfford() {
                return player.ct.AdEff.gte(Decimal.pow(10,133e6)) && player.ct.inC
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",284)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[284].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        285: {
            title: "Unvaxxed Slog",
            description: "Best Advs add to cases gain slog (unaffected by Vaccination), Adv Gain cost exp is 1.07.",
            cost: Decimal.pow(10,1345e6),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let Momo = player.ct.bestAdv.max(10).log10().sub(87e5).max(10).log10().pow(2).sub(1).div(5)
                return Momo
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[285].effect)
            },
            unlocked() {
                return hasUpgrade("ct",284)
            },
            canAfford() {
                return player.ct.AdEff.gte(Decimal.pow(10,1345e6)) && player.ct.inC
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",285)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[285].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        286: {
            title: "Miserable",
            description: "Best Advs add to UV gain exp, Adv Gain cost exp is 1.06, AE boost slog+0.015, 'Misery' eff^3.",
            cost: Decimal.pow(10,3.05e9),
            currencyInternalName: "AdEff",
            currencyDisplayName: "Adverse Effects",
            currencyLayer: "ct",
            effect(){
                let Sana = player.ct.bestAdv.max(10).log10().div(1e8).max(1).log10().add(1).pow(0.1).sub(1).mul(50)
                return Sana
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[286].effect)
            },
            unlocked() {
                return hasUpgrade("ct",285)
            },
            canAfford() {
                return player.ct.AdEff.gte(Decimal.pow(10,3.05e9)) && player.ct.inC
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",286)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[286].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        291: {
            title: "11",
            description: "UV boosts Anti-Vaxxer gain, UV boost to UI gain exp+0.1.",
            cost: new Decimal(20),
            currencyInternalName: "Av",
            currencyDisplayName: "Anti-Vaxxed Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Jihyo = powExp(player.ct.Uv.max(10).log10(),2).pow(2)
                return Jihyo
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[291].effect)
            },
            unlocked() {
                return hasUpgrade("ct",286) || player.ct.bestAdvax.gte(1)
            },
            canAfford() {
                return player.ct.Av.gte(20)
            },
            pay() {
                player.ct.Av = player.ct.Av.sub(20)
                player.ct.Aspent = player.ct.Aspent.add(20)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",291)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[291].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        292: {
            title: "21",
            description: "Add 0.2 to UV boost to UI gain exp.",
            cost: new Decimal(21),
            currencyInternalName: "Ui",
            currencyDisplayName: "Anti-Vaxxed Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",286) || player.ct.bestAdvax.gte(1)
            },
            canAfford() {
                return player.ct.Av.gte(21) && hasUpgrade("ct",291) && (!hasUpgrade("ct",293) || hasUpgrade("ct",355))
            },
            pay() {
                player.ct.Av = player.ct.Av.sub(21)
                player.ct.Aspent = player.ct.Aspent.add(21)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",292)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[292].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        293: {
            title: "22",
            description: "Add 0.42 to 'UI Gain' base.",
            cost: new Decimal(21),
            currencyInternalName: "Ui",
            currencyDisplayName: "Anti-Vaxxed Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",286) || player.ct.bestAdvax.gte(1)
            },
            canAfford() {
                return player.ct.Av.gte(21) && hasUpgrade("ct",291) && (!hasUpgrade("ct",292) || hasUpgrade("ct",355))
            },
            pay() {
                player.ct.Av = player.ct.Av.sub(21)
                player.ct.Aspent = player.ct.Aspent.add(21)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",293)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[293].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        294: {
            title: "31",
            description: "UI adds to UV boost to UI gain exp.",
            cost: new Decimal(26),
            currencyInternalName: "Ui",
            currencyDisplayName: "Anti-Vaxxed Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Mina = player.ct.Ui.max(10).log10().sub(280).max(1).pow(0.5).sub(1).div(24)
                if (Mina.gte(1.5)) Mina = Mina.div(1.5).pow(0.3).mul(1.5)
                return Mina
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[294].effect)
            },
            unlocked() {
                return hasUpgrade("ct",286) || player.ct.bestAdvax.gte(1)
            },
            canAfford() {
                return player.ct.Av.gte(26) && hasUpgrade("ct",292)
            },
            pay() {
                player.ct.Av = player.ct.Av.sub(26)
                player.ct.Aspent = player.ct.Aspent.add(26)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",294)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[294].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        295: {
            title: "32",
            description() {
                let a = " add to "
                if (hasUpgrade("ct",463)) a = " multiplies "
                return "UV"+a+"'UI Gain' base."
            },
            cost: new Decimal(26),
            currencyInternalName: "Ui",
            currencyDisplayName: "Anti-Vaxxed Vaxxers",
            currencyLayer: "ct",
            effect(){
                let exp = new Decimal(0.45)
                if (hasUpgrade("ct",301)) exp = exp.mul(1.05)
                let Dahyun = player.ct.Uv.max(10).log10().sub(114).max(1).pow(exp).sub(1).div(2.53)
                if (hasUpgrade("ct",332)) Dahyun = Dahyun.mul(1.15)
                if (hasUpgrade("ct",535)) Dahyun = slogadd(Dahyun,.8)
                return Dahyun
            },
            effectDisplay(){
                let dis = "+"+format(tmp.ct.upgrades[295].effect)
                if (hasUpgrade("ct",463)) dis = format(tmp.ct.upgrades[295].effect)+"x"
                return dis
            },
            unlocked() {
                return hasUpgrade("ct",286) || player.ct.bestAdvax.gte(1)
            },
            canAfford() {
                return player.ct.Av.gte(26) && hasUpgrade("ct",293)
            },
            pay() {
                player.ct.Av = player.ct.Av.sub(26)
                player.ct.Aspent = player.ct.Aspent.add(26)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",295)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[295].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        296: {
            title: "41",
            description: "Adversity eff slog+0.015, 'Crisis' slog+0.4, Distant UI Gain starts 100 later, Adversity Gain cost base is 35.",
            cost: new Decimal(71),
            currencyInternalName: "Ui",
            currencyDisplayName: "Anti-Vaxxed Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",286) || player.ct.bestAdvax.gte(1)
            },
            canAfford() {
                return player.ct.Av.gte(71) && (hasUpgrade("ct",294) || hasUpgrade("ct",295))
            },
            pay() {
                player.ct.Av = player.ct.Av.sub(71)
                player.ct.Aspent = player.ct.Aspent.add(71)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",296)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[296].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        301: {
            title: "51",
            description: "UI boost 'Adverse Boost' base, Distant UI Gain starts 150 later, 'Tragedy' exp+1.2.",
            cost: new Decimal(62),
            currencyInternalName: "Ui",
            currencyDisplayName: "Anti-Vaxxed Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Chaeyoung = player.ct.Ui.max(10).log10().sub(1e3).max(1).pow(0.195)
                return Chaeyoung
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[301].effect)
            },
            unlocked() {
                return hasUpgrade("ct",286) || player.ct.bestAdvax.gte(1)
            },
            canAfford() {
                return player.ct.Av.gte(62) && (hasUpgrade("ct",296))
            },
            pay() {
                player.ct.Av = player.ct.Av.sub(62)
                player.ct.Aspent = player.ct.Aspent.add(62)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",301)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[301].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        302: {
            title: "61",
            description: "'AG2' cost base is 1e8, cost exp is 1.13, Distant UI gain scaling is 1.5, 'Misery'^√2. Unlock Adverse Vaxxers",
            cost: new Decimal(105),
            currencyInternalName: "Ui",
            currencyDisplayName: "Anti-Vaxxed Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",286) || player.ct.bestAdvax.gte(1)
            },
            canAfford() {
                return player.ct.Av.gte(105) && (hasUpgrade("ct",301))
            },
            pay() {
                player.ct.Av = player.ct.Av.sub(105)
                player.ct.Aspent = player.ct.Aspent.add(105)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",302)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[302].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        303: {
            title: "71",
            description: "Multiplier to Adverse Vaxxers, decreasing over this reset.",
            cost: new Decimal(200),
            currencyInternalName: "Ui",
            currencyDisplayName: "Anti-Vaxxed Vaxxers",
            currencyLayer: "ct",
            effect(){
                let d = decimalFive
                let mult = new Decimal(1e3)
                if (hasUpgrade("ct",362)) d = d.mul(1.25)
                if (hasUpgrade("ct",365)) {
                    d = d.mul(2)
                    mult = mult.mul(5)
                }
                if (hasUpgrade("ct",374)) d = d.mul(1.25)
                if (hasUpgrade("ct",306)) {
                    d = d.mul(3)
                    mult = mult.mul(10)
                }
                if (hasUpgrade("ct",393)) {
                    d = d.mul(2)
                    mult = mult.mul(2)
                }
                let time = new Decimal(player.ct.AdvTime).max(0.0001).div(d)
                if (hasUpgrade("ct",423)) time = new Decimal(0.01)
                let eff = Decimal.div(mult,Decimal.pow(15,time.log10().mul(time.pow(0.3)))).max(1)
                if (hasUpgrade("ct",396)) eff = eff.pow(5)
                if (hasUpgrade("ct",405)) eff = eff.pow(5)
                if (hasUpgrade("ct",406)) eff = eff.pow(5)
                return eff
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[303].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",355)
            },
            canAfford() {
                return player.ct.Av.gte(200) && (hasUpgrade("ct",302)) && (!(hasUpgrade("ct",304) || hasUpgrade("ct",305)) || hasUpgrade("ct",365))
            },
            pay() {
                player.ct.Av = player.ct.Av.sub(200)
                player.ct.Aspent = player.ct.Aspent.add(200)
                layers.ct.clickables[32].onClick()
                
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",303)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[303].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        304: {
            title: "72",
            description: "Multiply Adverse Vaxxer gain.",
            cost: new Decimal(200),
            currencyInternalName: "Ui",
            currencyDisplayName: "Anti-Vaxxed Vaxxers",
            currencyLayer: "ct",
            effect(){
                let eff = new Decimal(1e3)
                if (hasUpgrade("ct",372)) eff = eff.mul(10)
                if (hasUpgrade("ct",306)) eff = eff.mul(3)
                if (hasUpgrade("ct",393)) eff = eff.mul(5)
                if (hasUpgrade("ct",396)) eff = eff.pow(5)
                if (hasUpgrade("ct",405)) eff = eff.pow(5)
                if (hasUpgrade("ct",406)) eff = eff.pow(5)
                return eff
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[304].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",355)
            },
            canAfford() {
                return player.ct.Av.gte(200) && (hasUpgrade("ct",302)) && (!(hasUpgrade("ct",303) || hasUpgrade("ct",305)) || hasUpgrade("ct",365))
            },
            pay() {
                player.ct.Av = player.ct.Av.sub(200)
                player.ct.Aspent = player.ct.Aspent.add(200)
                layers.ct.clickables[32].onClick()
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",304)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[304].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        305: {
            title: "73",
            description: "Multiplier to Adverse Vaxxers, increasing over this reset.",
            cost: new Decimal(200),
            currencyInternalName: "Ui",
            currencyDisplayName: "Anti-Vaxxed Vaxxers",
            currencyLayer: "ct",
            effect(){
                let cap = new Decimal(5e3)
                let d = decimalFive
                if (hasUpgrade("ct",362)) {
                    d = d.div(1.25)
                    cap = cap.mul(2)
                }
                if (hasUpgrade("ct",366)) {
                    d = d.div(1.5)
                    cap = cap.mul(5)
                }
                if (hasUpgrade("ct",393)) {
                    d = d.div(1.5)
                    cap = cap.mul(5)
                }
                if (hasUpgrade("ct",306)) d = d.div(1.5)
                if (hasUpgrade("ct",426)) d = d.div(10)
                let cTime = new Decimal(player.ct.AdvTime)
                if (cTime>3600) cTime = player.ct.AdvVaxTime
                if (cTime.gte(31556952e9)) cTime = cTime.div(31556952e9).pow(0.5).mul(31556952e9*.3).add(31556952e9*.7)
                if (cTime.gte(3600)) cTime = cTime.div(3600).pow(0.45).mul(300).add(3300)
                let time = new Decimal(cTime).max(0.0001).div(d)
                let eff = Decimal.pow(15,time.log10().mul(time.pow(0.3)))
                if (!hasUpgrade("ct",424)) eff = eff.min(cap)
                if (hasUpgrade("ct",396)) eff = eff.pow(5)
                if (hasUpgrade("ct",405)) eff = eff.pow(5)
                if (hasUpgrade("ct",406)) eff = eff.pow(5)
                if (hasUpgrade("ct",432)) eff = eff.pow(5)
                if (hasUpgrade("ct",435)) eff = eff.pow(10)
                if (hasUpgrade("ct",505)) eff = eff.pow(tmp.ct.upgrades[505].effect)
                return eff
            },
            effectDisplay(){
                let cTime = new Decimal(player.ct.AdvTime)
                if (cTime>3600) cTime = player.ct.AdvVaxTime
                let dis = format(tmp.ct.upgrades[305].effect)+"x"
                if (cTime.gte(3600)) dis += ' (softcapped)'
                return dis
            },
            unlocked() {
                return hasUpgrade("ct",355)
            },
            canAfford() {
                return player.ct.Av.gte(200) && (hasUpgrade("ct",302)) && (!(hasUpgrade("ct",303) || hasUpgrade("ct",304)) || hasUpgrade("ct",365))
            },
            pay() {
                player.ct.Av = player.ct.Av.sub(200)
                player.ct.Aspent = player.ct.Aspent.add(200)
                layers.ct.clickables[32].onClick()
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",305)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[305].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        306: {
            title: "81",
            description: "You can get UV out of Vaccination, Adverse Vaxxer gain exp is 1/308.",
            cost: new Decimal(900),
            currencyInternalName: "Ui",
            currencyDisplayName: "Anti-Vaxxed Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",376)
            },
            canAfford() {
                return player.ct.Av.gte(900) && (hasUpgrade("ct",303) || hasUpgrade("ct",304) || hasUpgrade("ct",305))
            },
            pay() {
                player.ct.Av = player.ct.Av.sub(900)
                player.ct.Aspent = player.ct.Aspent.add(900)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",306)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[306].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        311: {
            title: "91",
            description: "UI gain ^1.075.",
            cost: new Decimal(870),
            currencyInternalName: "Ui",
            currencyDisplayName: "Anti-Vaxxed Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",383)
            },
            canAfford() {
                return player.ct.Av.gte(870) && hasUpgrade("ct",306) && (!hasUpgrade("ct",312)||hasUpgrade("ct",412))
            },
            pay() {
                player.ct.Av = player.ct.Av.sub(870)
                player.ct.Aspent = player.ct.Aspent.add(870)
                updateTemp()
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",311)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[311].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        312: {
            title: "92",
            description: "UI gain ^1.25 in Challenges.",
            cost: new Decimal(870),
            currencyInternalName: "Ui",
            currencyDisplayName: "Anti-Vaxxed Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",383)
            },
            canAfford() {
                return player.ct.Av.gte(870) && hasUpgrade("ct",306) && (!hasUpgrade("ct",311)||hasUpgrade("ct",412))
            },
            pay() {
                player.ct.Av = player.ct.Av.sub(870)
                player.ct.Aspent = player.ct.Aspent.add(870)
                updateTemp()
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",312)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[312].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        313: {
            title: "101",
            description: "UI gain ^1.05, Unlock a challenge.",
            cost: new Decimal(1e3),
            currencyInternalName: "Ui",
            currencyDisplayName: "Anti-Vaxxed Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",391)
            },
            canAfford() {
                return player.ct.Av.gte(1e3) && (hasUpgrade("ct",311) || hasUpgrade("ct",312))
            },
            pay() {
                player.ct.Av = player.ct.Av.sub(1e3)
                player.ct.Aspent = player.ct.Aspent.add(1e3)
                updateTemp()
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",313)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[313].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        314: {
            title: "111",
            description() {
                let x = "3x"
                if (hasUpgrade("ct",466)) x = "1.39x"
                return "Social Distant UI Gain starts 5000 later and is "+x+" weaker, UnUnVaxxed reward multiplies, Unlock a challenge."
            },
            cost: new Decimal(6969),
            currencyInternalName: "Ui",
            currencyDisplayName: "Anti-Vaxxed Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",396)
            },
            canAfford() {
                return player.ct.Av.gte(6969) && hasUpgrade("ct",313)
            },
            pay() {
                player.ct.Av = player.ct.Av.sub(6969)
                player.ct.Aspent = player.ct.Aspent.add(6969)
                layers.ct.clickables[32].onClick()
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",314)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[314].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        331: {
            title: "Anti-Distant",
            description: "<span style='font-size:9px;'>UI makes SD IN start later, Adv Gain cost exp is 1.055, 'Mishap' eff 10^x<sup>2</sup>, 'Torment' is unaffected by Vaccination.</span>",
            cost: Decimal.pow(10,986),
            currencyInternalName: "Adversity",
            currencyDisplayName: "Adversities",
            currencyLayer: "ct",
            effect(){
                let Tzuyu = player.ct.Ui.max(10).log10().pow(0.5)
                return Tzuyu
            },
            effectDisplay(){
                return "^^"+format(tmp.ct.upgrades[331].effect)
            },
            unlocked() {
                return hasUpgrade("ct",286)
            },
            canAfford() {
                return player.ct.Adversity.gte(Decimal.pow(10,986)) && player.ct.inC
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",331)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[331].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        332: {
            title: "Adverse UI",
            description: "UI reduces 'Adversity Gain' cost base, Adverse Vaccine '32' effect x1.15,",
            cost: Decimal.pow(10,2838).mul(2.838),
            currencyInternalName: "Adversity",
            currencyDisplayName: "Adversities",
            currencyLayer: "ct",
            effect(){
                let Jisoo = player.ct.Ui.max(10).log10().sub(666).max(1).pow(0.8).sub(1).div(3)
                if (Jisoo.gte(25)) Jisoo = Jisoo.div(25).pow(0.2).mul(25)
                if (Jisoo.gte(30)) Jisoo = Jisoo.div(30).pow(0.3).mul(30)
                if (Jisoo.gte(33.75)) Jisoo = Decimal.sub(34,Jisoo.div(33.75).recip().pow(5).mul(.25))
                return Jisoo.min(33.99)
            },
            effectDisplay(){
                return "-"+format(tmp.ct.upgrades[332].effect)
            },
            unlocked() {
                return hasUpgrade("ct",331)
            },
            canAfford() {
                return player.ct.Adversity.gte(Decimal.pow(10,2838).mul(2.838)) && player.ct.inC
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",332)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[332].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        341: {
            title: "V",
            description: "Buy Max 'UI Gain'.",
            cost: decimalOne,
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxer",
            currencyLayer: "ct",
            canAfford() {
                return player.ct.Advaxxers.gte(1)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",341)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[341].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        342: {
            title: "A",
            description: "Keep 1st row of Vaccination upgrades.",
            cost: decimalOne,
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxer",
            currencyLayer: "ct",
            canAfford() {
                return player.ct.Advaxxers.gte(1)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",342)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[342].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        343: {
            title: "x",
            description: "Buy Max 'UI Vaxxer', Distant UI Vaxxer scale slower.",
            cost: decimalTwo,
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            canAfford() {
                return player.ct.Advaxxers.gte(2)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",343)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[343].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        344: {
            title: "X",
            description: "Adverse Vaxxers boost UV gain.",
            cost: decimalTwo,
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Jennie = player.ct.Advaxxers.add(2).mul(3).pow(1.5)
                return Jennie
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[344].effect)+"x"
            },
            canAfford() {
                return player.ct.Advaxxers.gte(2)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",344)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[344].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        345: {
            title: "E",
            description: "Keep 2nd row of Vaccination upgrades.",
            cost: decimalTwo,
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",342)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(2)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",345)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[345].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        346: {
            title: "R",
            description: "Keep Adverse Vaccines and Anti-Vaxxed Vaxxers.",
            cost: decimalFive,
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",345)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(5)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",346)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[346].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        351: {
            title: "Adverse Infecter",
            description: "Adverse Vaxxers make Social Distant infecter start later.",
            cost: new Decimal(30),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Rosé = player.ct.Advaxxers.add(1).pow(.2).mul(10)
                if (Rosé.gte(50)) Rosé = Rosé.mul(2).log10().mul(25)
                if (Rosé.gte(5e8)) Rosé = Rosé.div(5e8).pow(0.4).mul(5e8)
                return Rosé
            },
            effectDisplay(){
                return "^^"+format(tmp.ct.upgrades[351].effect)
            },
            unlocked() {
                return hasUpgrade("ct",346)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(30)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",351)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[351].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        352: {
            title: "Adverse Distance",
            description: "Adverse Vaxxers make Distant UI Gain start later.",
            cost: new Decimal(50),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let exp = 0.25
                if (hasUpgrade("ct",415)) exp = 0.4
                let Lisa = player.ct.Advaxxers.add(1).pow(.2222).mul(25)
                if (Lisa.gte(200)) Lisa = Lisa.div(2).log10().mul(100)
                if (Lisa.gte(4e3)) Lisa = Lisa.div(4e3).pow(0.5).mul(4e3)
                if (Lisa.gte(1e4)) Lisa = Lisa.div(1e4).pow(exp).mul(1e4)
                if (hasUpgrade("ct",403)) Lisa = Lisa.pow(1.1)
                if (hasUpgrade("ct",421)) Lisa = Lisa.pow(1.1)
                if (hasUpgrade("ct",433)) Lisa = Lisa.pow(1.05)
                if (hasUpgrade("ct",443)) Lisa = Lisa.pow(1.05)
                return Lisa
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[352].effect)
            },
            unlocked() {
                return hasUpgrade("ct",351)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(50)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",352)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[352].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        353: {
            title: "Adverse Hassle",
            description: "Adverse Vaxxers boost 'Hassle', keep 3rd row of Vaccination upgrades.",
            cost: new Decimal(69),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Nayeon = player.ct.Advaxxers.max(10).log10().mul(2)
                if (Nayeon.gte(100)) Nayeon = Nayeon.div(100).pow(0.3).mul(100)
                return Nayeon
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[353].effect)
            },
            unlocked() {
                return hasUpgrade("ct",352)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(69)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",353)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[353].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        354: {
            title: "Adverse Setback",
            description: "Adverse Vaxxers reduce Distant UI gain base, 'Setback' eff 10^√x, Adverse Vaxxer gain x5.",
            cost: new Decimal(100),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Jeongyeon = player.ct.Advaxxers.max(10).log10().pow(0.2).sub(1).div(4)
                if (Jeongyeon.gte(0.485)) Jeongyeon = Decimal.sub(0.499,Jeongyeon.recip().mul(0.097)).add(0.186)
                if (Jeongyeon.gte(0.493)) Jeongyeon = Jeongyeon.div(0.493).pow(0.07).mul(0.493)
                return Jeongyeon.min(0.495)
            },
            effectDisplay(){
                return "-"+format(tmp.ct.upgrades[354].effect)
            },
            unlocked() {
                return hasUpgrade("ct",353)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(100)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",354)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[354].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        355: {
            title: "Adverse Capper",
            description: "<span style = 'font-size:9px'>Gain 50% of best AdVaxr/hr, You can pick both paths, You can buy 'Capped' out of Vax, Unlock more AdVax, Respec does an AdVaxr reset</span>.",
            cost: new Decimal(1e3),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Momo = player.ct.bestAps.div(2)
                return Momo
            },
            effectDisplay(){
                let dis = ""
                let ap = tmp.ct.upgrades[355].effect
                if (ap.gte(10)) dis += "<br>" + format(ap) + "/s"
                else if (ap.gte(1/6)) dis += "<br>" + format(ap.mul(60)) + "/min"
                else dis += "<br>" + format(ap.mul(3600)) + "/hr"
                return dis
            },
            unlocked() {
                return hasUpgrade("ct",354)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(1e3)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",355)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[355].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        356: {
            title: "Cased UI",
            description: "Cases boost UI gain.",
            cost: new Decimal(3e7),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Sana = slog(player.points.max(10)).pow(0.5050505).pow10()
                if (Sana.gte("e2e17")) Sana = Sana.log10().div(2e17).pow(0.5).mul(2e17).pow10().div("e2e17").pow(0.5).mul("e2e17")
                return Sana
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[356].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",355)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(3e7)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",356)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[356].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        361: {
            title: "Auto UI",
            description: "Autobuy 'UI Gain', 'Tragedy' exp+1.",
            cost: new Decimal(1e10),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",356)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(1e10)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",361)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[361].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        362: { // Karina, Giselle, Winter, Ningning, Jisoo, Jennie, Rosé, Lisa
            title: "Infected UI",
            description: "IN boost UI gain, Double 'Anti-Capped' CTNA slog, CRNA slog^1.05, AdVaxr gain exp is 1/400.",
            cost: new Decimal(5e10),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Karina = slog(player.e.points.max(10)).pow(0.63).pow10()
                return Karina
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[362].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",361)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(5e10)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",362)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[362].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        363: {
            title: "Capped Vaxxers",
            description: "Adverse Vaxxers add to 'Capped' exp, UV boost to UI gain exp+1, Adversity slog+0.01.",
            cost: new Decimal(2e13),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Giselle = player.ct.Advaxxers.max(10).log10().div(3).max(1).pow(0.25).sub(1).div(3)
                if (Giselle.gte(0.23)) Giselle = Giselle.div(.23).pow(0.1).mul(.23)
                if (Giselle.gte(0.26)) Giselle = Giselle.div(.26).pow(0.4).mul(.26)
                return Giselle
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[363].effect)
            },
            unlocked() {
                return hasUpgrade("ct",362)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(2e13)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",363)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[363].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        364: {
            title: "Anti-UI",
            description: "Unspent Anti-Vaxxed Vaxxers boost UI gain.",
            cost: new Decimal(1e17),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let av = player.ct.Av
                if (hasUpgrade("ct",402)) av = av.pow(1.25)
                let Winter = Decimal.pow(30,av)
                return Winter
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[364].effect)+'x'
            },
            unlocked() {
                return hasUpgrade("ct",363)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(1e17)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",364)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[364].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        365: {
            title: "AdAnti",
            description: "You can pick all paths in the 3 way split, '71' time is 2x slower, mult x5.",
            cost: new Decimal(1e20),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",364)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(1e20)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",365)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[365].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        366: {
            title: "Adverse Exp",
            description: "Adverse Vaxxers add to UV boost to UI gain exp, UI eff^1.05, '73' time is 1.5x faster, cap x5.",
            cost: new Decimal(1.525e25),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Ningning = player.ct.Advaxxers.max(10).log10().div(5).max(1).pow(0.3).sub(1).div(3)
                return Ningning
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[366].effect)
            },
            unlocked() {
                return hasUpgrade("ct",365)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(1.525e25)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",366)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[366].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        371: {
            title: "Adverse Advaxxer",
            description: "Best Adversities boost AdVaxr gain, AG exp is 1.053, AG2 cost base is 1e6, exp is 1.1.",
            cost: new Decimal(1e32),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Jisoo = powExp(player.ct.bestAdv.max(10).log10(),.9).pow(0.15)
                return Jisoo
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[371].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",366)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(1e32)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",371)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[371].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        372: {
            title: "UI AdVax",
            description: "Adverse Vaxxers boost UI effect, AE boost slog+0.01, '72' eff x10.",
            cost: new Decimal(3.838e38),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Jennie = player.ct.Advaxxers.max(10).log10().max(10).log10().pow(0.1)
                return Jennie
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[372].effect)
            },
            unlocked() {
                return hasUpgrade("ct",371)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(3.838e38)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",372)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[372].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        373: {
            title: "AdCases",
            description: "Cases boost Adverse Vaxxer gain, AdVaxr gain exp is 1/350, Unlock AdVaccines.",
            cost: new Decimal(5.151e51),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let exp = 2
                if (hasUpgrade("ct",423)) exp = 2.2
                let Rosé = slog(player.points.max(10)).pow(0.13).pow10()
                if (hasUpgrade("ct",396)) Rosé = Rosé.pow(tmp.ct.upgrades[396].effect.pow(exp))
                if (Rosé.gte("ee6")) Rosé = Rosé.log10().div(1e6).pow(0.5).mul(1e6).pow10()
                return Rosé
            },
            effectDisplay(){
                let dis = format(tmp.ct.upgrades[373].effect)+"x"
                if (tmp.ct.upgrades[373].effect.gte("ee6")) dis += " (softcapped)"
                return dis
            },
            unlocked() {
                return hasUpgrade("ct",372)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(5.151e51)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",373)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[373].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        374: {
            title: "AdUI",
            description: "AdVaxxed Vaccines boost UI gain.",
            cost: new Decimal(5e77),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Lisa = player.ct.AdVax.add(1).pow(50)
                return Lisa
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[374].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",373)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(5e77)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",374)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[374].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        375: {
            title: "AdSlog",
            description: "AdVaxxed Vaccines(AdVaxd) add to AC slog, AdVaxr boosts AdVaxd gain.",
            cost: new Decimal(8.282e82),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Karina = player.ct.AdVax.max(10).log10().pow(1.4).mul(500)
                return Karina
            },
            effect2(){
                let Giselle = powExp(player.ct.Advaxxers.max(10).log10(),1.1).pow(1.2)
                return Giselle
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[375].effect)+", "+format(tmp.ct.upgrades[375].effect2)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",374)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(8.282e82)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",375)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[375].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        376: {
            title: "AdVersity",
            description: "Best Adversities boost AdVaxd gain, AdVaxd boost AC CTNA slog, Unlock an AdVax.",
            cost: new Decimal(2.92e92),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Winter = powExp(player.ct.bestAdv.max(10).log10(),.82).pow(0.15)
                return Winter
            },
            effect2(){
                let Ningning = player.ct.AdVax.max(10).log10().pow(.2)
                return Ningning
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[376].effect)+"x, "+format(tmp.ct.upgrades[376].effect2)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",375)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(2.92e92)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",376)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[376].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        381: {
            title: "AdExp",
            description: "AdVaxxed Vaccines add to UV boost to UI exp, gain 1% of AdVaxr gain per second.",
            cost: new Decimal(1.111e111),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Jisoo = player.ct.AdVax.max(10).log10().pow(0.2).sub(1)
                return Jisoo
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[381].effect)
            },
            unlocked() {
                return hasUpgrade("ct",376)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(1.111e111)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",381)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[381].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        382: {
            title: "Anti-Vaxxed AdVax",
            description: "Unspent Anti-Vaxxed Vaxxers boost AdVaxd gain, unlock Challenges.",
            cost: new Decimal(1.616e161),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let av = player.ct.Av
                if (hasUpgrade("ct",402)) av = av.pow(1.25)
                let Jennie = Decimal.pow(1.02,av.add(500))
                return Jennie
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[382].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",381)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(1.616e161)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",382)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[382].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        383: {
            title: "AdVaxxed UI",
            description: "UI boost AdVaxd gain and Anti-Vax eff exp<sup>3</sup>.",
            cost: new Decimal(2.424e242),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Rosé = powExp(player.ct.Ui.add(1),1/3).pow(2/9)
                return Rosé
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[383].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",382)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(2.424e242)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",383)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[383].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        384: {
            title: "Challenged Vaccines",
            description() {return "Multiply AdVaccines by Challenge 1,2,3 comps^^"+(hasUpgrade("ct",391)?"1.8":(hasUpgrade("ct",386)?"1.7":"1.5"))+"."},
            cost: Decimal.pow(10,363).mul(3.636),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let chall = player.ct.challenges[11]+player.ct.challenges[12]+player.ct.challenges[21]
                if (hasUpgrade("ct",394)) chall +=(player.ct.challenges[22]+player.ct.challenges[31])
                let tet = 1.5
                if (hasUpgrade("ct",386)) tet+=0.2
                if (hasUpgrade("ct",391)) tet+=0.1
                let Lisa = Decimal.tetrate(chall,tet)
                return Lisa
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[384].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",383)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(Decimal.pow(10,363).mul(3.636))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",384)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[384].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        385: {
            title: "Anti-Masked Vaccines",
            description: "Anti-Maskers boost AdVaccines, unlock a challenge.",
            cost: Decimal.pow(10,393).mul(3.939),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let s = -4.25
                if (hasUpgrade("ct",422)) s +=0.2
                let Karina = slogadd(player.ct.Am.max(tet10(4)),s).pow(0.2)
                if (Karina.gte("ee11")) Karina = Karina.log10().div(1e11).pow(0.4).mul(1e11).pow10()
                return Karina
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[385].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",384)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(Decimal.pow(10,393).mul(3.939))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",385)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[385].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        386: {
            title: "Type Boost",
            description: "<span style='font-size:9px;'>Anti-Vax types boost previous type gain based on AdVaxr, Anti-Vax type gain x5, comps tetration is 1.7.</span>",
            cost: Decimal.pow(10,452).mul(4.52),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Giselle = player.ct.Advaxxers.max(10).log10().max(10).log10().pow(1.5).sub(1).div(15)
                if (player.ct.challenges[31]>4) Giselle = Giselle.mul(1.2)
                return Giselle
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[386].effect)
            },
            unlocked() {
                return hasUpgrade("ct",385)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(Decimal.pow(10,452).mul(4.52))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",386)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[386].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        391: {
            title: "AdVaxxer",
            description: "Anti-Vax type gain x5, comps tetration is 1.8, unlock an AdVax.",
            cost: Decimal.pow(10,505).mul(5.05),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",386)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(Decimal.pow(10,505).mul(5.05))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",391)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[391].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        392: {
            title: "AdType",
            description: "Adverse Vaxxers boost Anti-Vax type gain, unlock an AdVaccine.",
            cost: Decimal.pow(10,525).mul(5.25),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Winter = player.ct.Advaxxers.max(1).pow(0.002)
                return Winter
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[392].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",391)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(Decimal.pow(10,525).mul(5.25))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",392)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[392].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        393: {
            title: "Soft Vaccines",
            description: "Row 7 Adverse Vaccine upgrades are applied after softcap, Anti-Vax 1st eff is stronger out of Challs, Anti-Vax type gain x10.",
            cost: Decimal.pow(10,562).mul(5.62),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",392)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(Decimal.pow(10,562).mul(5.62))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",393)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[393].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        394: {
            title: "Challenger",
            description: "'Challenged Vaccines' counts Challenge 4 and 5 comps.",
            cost: Decimal.pow(10,848).mul(8.484),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",393)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(Decimal.pow(10,848).mul(8.484))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",394)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[394].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        395: {
            title: "Slogger",
            description: "Cases boost UI effect and Anti-Vaccine 1st effect slog, AdVaccines cost nothing.",
            cost: Decimal.pow(10,979).mul(9.797),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Ningning = slog(player.points.max(10)).max(10).log10().pow(0.5).div(35).add(1).max(1)
                return Ningning
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[395].effect)
            },
            unlocked() {
                return hasUpgrade("ct",394)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(Decimal.pow(10,979).mul(9.797))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",395)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[395].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        396: {
            title: "AdBases",
            description: "Cases boost type base gain and 'AdCases' (^2 effect), Row 7 upgs ^5, unlock an A-V vaxxer upgrade.",
            cost: Decimal.pow(10,1919).mul(1.919),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Jisoo = slog(player.points.max(10)).max(10).log10().pow(2.5).div(80).add(1).max(1)
                if (hasUpgrade("ct",405)) Jisoo = Jisoo.pow(1.1)
                if (hasUpgrade("ct",406)) Jisoo = Jisoo.pow(1.2)
                if (hasUpgrade("ct",451)) Jisoo = Jisoo.pow(1.2)
                if (hasMilestone("uv",15)) Jisoo = Jisoo.pow(1.3)
                if (hasMilestone("uv",17)) Jisoo = Jisoo.pow(1.1)
                return Jisoo
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[396].effect)
            },
            unlocked() {
                return hasUpgrade("ct",395)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(Decimal.pow(10,1919).mul(1.919))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",396)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[396].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        401: {
            title: "AdAfter",
            description: "Adverse Vaccines boost cases gain after slog.",
            cost: Decimal.pow(10,3683),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Jennie = powExp(player.ct.Advaxxers.div("e3600").max(1),0.7).pow(0.025)
                if (hasUpgrade("ct",463)) Jennie = powExp(Jennie,1.5)
                if (hasUpgrade("ct",475)) Jennie = powExp(Jennie,1.3)
                return Jennie
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[401].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",396)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(Decimal.pow(10,3683))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",401)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[401].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        402: {
            title: "Anti-UI Boost",
            description: "UI amount in 'Anti-UI' and 'Anti-Vaxxed AdVax' is ^1.25, base cases gain slog +0.05 in 'Booster Vaccine'.",
            cost: Decimal.pow(10,4777),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",401)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(Decimal.pow(10,4777))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",402)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[402].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        403: {
            title: "Near",
            description: "Distant UI Gain is 2x weaker and 'Adverse Distance' effect^1.1, 'AdCases' is applied after softcap, Unvaxxed viruses base gain^1.2.",
            cost: Decimal.pow(10,6550),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",402)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(Decimal.pow(10,6550))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",403)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[403].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        404: {
            title: "Type Base",
            description: "Multiply base cases gain in 'Booster Vaccine' by 1.01 per 'Anti-Type Boost'.",
            cost: Decimal.pow(10,8528),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            effect(){
                let Rosé = Decimal.pow(1.01,player.ct.buyables[221])
                return Rosé
            },
            effectDisplay(){
                let dis = format(tmp.ct.upgrades[404].effect)+"x"
                return dis
            },
            unlocked() {
                return hasUpgrade("ct",403)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(Decimal.pow(10,8528))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",404)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[404].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        405: {
            title: "AdBaser",
            description: "'AdBases' eff^1.1, Row 7 upgrades eff^5, Vaccination exp+0.05.",
            cost: Decimal.pow(10,14730),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",404)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(Decimal.pow(10,14730))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",405)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[405].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        406: {
            title: "AdBasest",
            description: "'AdBases' eff^1.2, Row 7 upgrades eff^5, Vaccination exp+0.05.",
            cost: Decimal.pow(10,47777),
            currencyInternalName: "Advaxxers",
            currencyDisplayName: "Adverse Vaxxers",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",405)
            },
            canAfford() {
                return player.ct.Advaxxers.gte(Decimal.pow(10,47777))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",406)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[406].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        411: {
            title: "AdBooster",
            description: "Best cases in 'Booster Vaccine' boost AdVaxr gain, each Booster upgrade doubles cases gain.",
            cost: new Decimal(1e6),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let Lisa = powExp(tmp.ct.getBest.max(1),1.5).pow(5)
                if (Lisa.gte("e1000")) Lisa = Lisa.log10().div(1e3).pow(0.35).mul(1e3).pow10()
                if (Lisa.gte("e15e6")) Lisa = Lisa.log10().div(15e6).pow(0.35).mul(15e6).pow10()
                if (Lisa.gte("e4e7")) Lisa = Lisa.log10().mul(250).pow(4e6)
                if (hasUpgrade("ct",435)) Lisa = powExp(Lisa,1.15)
                if (hasUpgrade("ct",506)) Lisa = powExp(Lisa,1.15)
                if (hasUpgrade("ct",444)) Lisa = powExp(Lisa,1.15)
                if (hasUpgrade("ct",446)) Lisa = powExp(Lisa,1.15)
                return Lisa
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[411].effect)+"x"
            },
            unlocked() {
                return true
            },
            canAfford() {
                return player.points.gte(1e6) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(1e6)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",411)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[411].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        412: { 
            title: "999",
            description: "You can get both Row 9 upgrades, '92' works out of challenges at 20% effect.",
            cost: new Decimal(1e11),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            unlocked() {
                return hasUpgrade("ct",411)
            },
            canAfford() {
                return player.points.gte(1e11) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(1e11)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",412)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[412].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        413: { 
            title: "Social Cases",
            description: "Best cases make Social Distant UI Gain start later, UI effect^1.1 in 'Booster Vaccine'.",
            cost: new Decimal(6.02214076e23), // mol
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let Mol = tmp.ct.getBest.max(1).log10().pow(2).mul(20)
                if (Mol.gte(2e4)) Mol = Mol.div(2e4).pow(0.25).mul(2e4)
                if (Mol.gte(15e4)) Mol = Mol.div(15e4).pow(0.5).mul(15e4)
                if (Mol.gte(3e5)) Mol = Mol.div(3e5).pow(0.4).mul(3e5)
                if (Mol.gte(15e5)) Mol = Mol.div(15).log10().mul(2).pow(6).mul(1.5)
                return Mol
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[413].effect)
            },
            unlocked() {
                return hasUpgrade("ct",412)
            },
            canAfford() {
                return player.points.gte(6.02214076e23) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(6.02214076e23)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",413)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[413].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        414: { 
            title: "aRNA Boost",
            description: "Dilate aRNA effect to 1.1, Anti-Vaccine effect slog^1.05.",
            cost: new Decimal(1e72),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            unlocked() {
                return hasUpgrade("ct",413)
            },
            canAfford() {
                return player.points.gte(1e72) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(1e72)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",414)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[414].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        415: { 
            title: "AdVaxxed Boost",
            description: "Best cases boost AdVaxxed Vaccine effect, 'UI Gain' base^1.5, eff. Booster Upgs^2.",
            cost: new Decimal(1e109),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let Cov = tmp.ct.getBest.max(10).log10().max(10).log10().pow(5).div(200).add(1)
                if (Cov.gte(3)) Cov = Cov.div(3).pow(0.2).mul(3)
                if (Cov.gte(4)) Cov = Cov.div(4).pow(0.5).mul(4)
                if (hasUpgrade("ct",445)) Cov = Cov.pow(2)
                return Cov
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[415].effect)
            },
            unlocked() {
                return hasUpgrade("ct",414)
            },
            canAfford() {
                return player.points.gte(1e109) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(1e109)
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",415)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[415].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        416: { 
            title: "Auto-Type",
            description: "Best cases add to 'Anti-Type Boost' base, Max all buys 'Anti-Type Boost'.",
            cost: Decimal.pow(10,686),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let Id = tmp.ct.getBest.max(10).log10().max(10).log10().pow(3).div(200)
                if (Id.gte(8.5)) Id = Id.add(1.5).log10().mul(8.5)
                return Id
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[416].effect)
            },
            unlocked() {
                return hasUpgrade("ct",415)
            },
            canAfford() {
                return player.points.gte(Decimal.pow(10,686)) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(Decimal.pow(10,686))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",416)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[416].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        421: { 
            title: "Far",
            description: "'Adverse Distance' is raised to 1.1, Autobuy 'UI Vaxxer'.",
            cost: Decimal.pow(10,6363),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            unlocked() {
                return hasUpgrade("ct",416)
            },
            canAfford() {
                return player.points.gte(Decimal.pow(10,6363)) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(Decimal.pow(10,6363))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",421)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[421].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        422: {
            title: "Anti-Masked Boost",
            description: "'Anti-Masked Vaccines' slog+0.2, eff. Booster Upgs^2, unlock Anti-Boosters.",
            cost: Decimal.pow(10,121e3),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            unlocked() {
                return hasUpgrade("ct",421)
            },
            canAfford() {
                return player.points.gte(Decimal.pow(10,121e3)) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(Decimal.pow(10,121e3))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",422)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[422].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        423: {
            title: "AdBasest",
            description: "'AdBases' boost to 'AdCases' exp is 2.2, '71' does not decrease.",
            cost: Decimal.pow(10,146146),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            unlocked() {
                return hasUpgrade("ct",422)
            },
            canAfford() {
                return player.points.gte(Decimal.pow(10,146146)) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(Decimal.pow(10,146146))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",423)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[423].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        424: {// Yeji, Lia, Ryujin, Chaeryeong, Yuna, Karina, Giselle, Winter, Ningning
            title: "Anti-Best",
            description: "Best cases boost Anti-Booster gain, '73' does not cap.",
            cost: Decimal.pow(10,203e3),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let Yeji = tmp.ct.getBest.max(10).log10().pow(0.4)
                if (Yeji.gte(200)) Yeji = Yeji.div(200).pow(5).mul(200)
                if (Yeji.gte(1e10)) Yeji = Yeji.div(1e10).pow(100).mul(1e10)
                if (Yeji.gte(1e250)) Yeji = Yeji.log10().div(2.5).pow(125)
                if (hasUpgrade("ct",452)) Yeji = slogadd(Yeji,0.35)
                if (hasUpgrade("ct",453)) Yeji = slogadd(Yeji,0.02)
                return Yeji
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[424].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",423)
            },
            canAfford() {
                return player.points.gte(Decimal.pow(10,203e3)) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(Decimal.pow(10,203e3))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",424)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[424].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        425: {
            title: "Best UI",
            description: "Best cases boost 'UI Gain' base, '73' does not cap.",
            cost: Decimal.pow(10,3285e3),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let Lia = powExp(tmp.ct.getBest.max(10).log10(),1.3)
                return Lia
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[425].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",424)
            },
            canAfford() {
                return player.points.gte(Decimal.pow(10,3285e3)) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(Decimal.pow(10,3285e3))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",425)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[425].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        426: {
            title: "A-Quarantine",
            description: "<span style = 'font-size:9px'>Best cases make Quarantined Infecter start later, '73' is 10x faster.</span>",
            cost: Decimal.pow(10,1329e4),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let Ryujin = tmp.ct.getBest.max(10).log10().max(10).log10().div(3).max(1).pow(2)
                return Ryujin
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[426].effect)+"x slog"
            },
            unlocked() {
                return hasUpgrade("ct",424)
            },
            canAfford() {
                return player.points.gte(Decimal.pow(10,1329e4)) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(Decimal.pow(10,1329e4))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",426)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[426].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        431: {
            title: "Best Slog",
            description: "Best cases boost cases slog.",
            cost: Decimal.pow(10,27e7),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let Chaeryeong = tmp.ct.getBest.max(10).log10().max(10).log10().pow(0.7).div(10).add(1)
                return Chaeryeong
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[431].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",426)
            },
            canAfford() {
                return player.points.gte(Decimal.pow(10,27e7)) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(Decimal.pow(10,27e7))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",431)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[431].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        432: {
            title: "Best AntiBoost",
            description: "Best cases boost Anti-Booster buyable bases, '73' effect^5.",
            cost: Decimal.pow(10,156e7),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let Yuna = tmp.ct.getBest.max(10).log10().max(10).log10().pow(0.5).div(100).add(1)
                return Yuna
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[432].effect)
            },
            unlocked() {
                return hasUpgrade("ct",431)
            },
            canAfford() {
                return player.points.gte(Decimal.pow(10,156e7)) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(Decimal.pow(10,156e7))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",432)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[432].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        433: {
            title: "Farther",
            description: "Best cases divide replicant interval, 'Adverse Distance' ^1.05.",
            cost: Decimal.pow(10,Math.E*1e9),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let Karina = tmp.ct.getBest.max(10).log10().pow(0.1)
                return Karina
            },
            effectDisplay(){
                return "/"+format(tmp.ct.upgrades[433].effect)
            },
            unlocked() {
                return hasUpgrade("ct",432)
            },
            canAfford() {
                return player.points.gte(Decimal.pow(10,Math.E*1e9)) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(Decimal.pow(10,Math.E*1e9))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",433)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[433].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        434: {
            title: "Auto-Booster",
            description: "Dilate 'UI Gain' base^1.1 out of 'Booster Vaccine', autobuy 'Anti-Booster' buyables.",
            cost: Decimal.pow(10,58e9),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            unlocked() {
                return hasUpgrade("ct",433)
            },
            canAfford() {
                return player.points.gte(Decimal.pow(10,58e9)) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(Decimal.pow(10,58e9))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",434)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[434].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        435: {
            title: "AdVooster",
            description: "Dilate 'AdBooster' base^1.15, '73' effect^10.",
            cost: Decimal.pow(10,3e20),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            unlocked() {
                return hasUpgrade("ct",434)
            },
            canAfford() {
                return player.points.gte(Decimal.pow(10,3e20)) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(Decimal.pow(10,3e20))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",435)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[435].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        436: {
            title: "AdSoft",
            description: "Adverse Vaxxer gain softcap is weaker, unlock a buyable.",
            cost: Decimal.pow(10,115e57),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            unlocked() {
                return hasUpgrade("ct",435)
            },
            canAfford() {
                return player.points.gte(Decimal.pow(10,115e57)) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(Decimal.pow(10,115e57))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",436)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[436].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        441: {
            title: "AdSofter",
            description: "Adverse Vaxxer gain softcap is weaker.",
            cost: Decimal.pow(10,1e261),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            unlocked() {
                return hasUpgrade("ct",436)
            },
            canAfford() {
                return player.points.gte(Decimal.pow(10,1e261)) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(Decimal.pow(10,1e261))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",441)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[441].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        442: {
            title: "AdSoftest",
            description: "Adverse Vaxxer gain softcap is weaker.",
            cost: Decimal.pow(10,Decimal.pow(10,3225e4)),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            unlocked() {
                return hasUpgrade("ct",441)
            },
            canAfford() {
                return player.points.gte(Decimal.pow(10,Decimal.pow(10,3225e4))) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(Decimal.pow(10,Decimal.pow(10,3225e4)))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",442)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[442].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        443: {
            title: "Farthest",
            description: "'Adverse Distance' is raised to 1.05, autobuy 'Antier-Booster Gainer', unlock Anti-Distancing.",
            cost: Decimal.pow(10,Decimal.pow(10,27675e6)),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            unlocked() {
                return hasUpgrade("ct",442)
            },
            canAfford() {
                return player.points.gte(Decimal.pow(10,Decimal.pow(10,27675e6))) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(Decimal.pow(10,Decimal.pow(10,27675e6)))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",443)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[443].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        444: {
            title: "AdBoostest",
            description: "'AdBooster' is dilated to 1.15, autobuy 'Antier-Booster Gainest'.",
            cost: Decimal.pow(10,Decimal.pow(10,355e12)),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            unlocked() {
                return hasUpgrade("ct",443)
            },
            canAfford() {
                return player.points.gte(Decimal.pow(10,Decimal.pow(10,355e12))) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(Decimal.pow(10,Decimal.pow(10,355e12)))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",444)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[444].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        445: {
            title: "AdVaxxed Booster",
            description: "'AdVaxxed Boost' is squared.",
            cost: Decimal.pow(10,Decimal.pow(10,2e18)),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            unlocked() {
                return hasUpgrade("ct",444)
            },
            canAfford() {
                return player.points.gte(Decimal.pow(10,Decimal.pow(10,2e18))) && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub(Decimal.pow(10,Decimal.pow(10,2e18)))
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",445)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[445].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        446: {
            title: "AsVoost",
            description: "'AdBooster' and ASV effects are dilated to 1.15.",
            cost: new Decimal("eee2067"),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            unlocked() {
                return hasUpgrade("ct",445)
            },
            canAfford() {
                return player.points.gte("eee2067") && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub("eee2067")
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",446)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[446].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        451: {
            title: "AnSoft",
            description: "Start with 30 minutes reset time, Adverse Vaxxer softcap is weaker, 'AdBases'^1.2.",
            cost: new Decimal("eee9800"),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            unlocked() {
                return hasUpgrade("ct",446)
            },
            canAfford() {
                return player.points.gte("eee9800") && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub("eee9800")
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",451)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[451].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        452: {
            title: "An-Distance",
            description: "Best cases boost base Anti-Distance gain, 'Anti-Best' slog+0.35.",
            cost: new Decimal("eee2e15"),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let Giselle = tmp.ct.getBest.max(10).log10().div(1e50).max(1).pow(0.2)
                return Giselle
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[452].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",451)
            },
            canAfford() {
                return player.points.gte("eee2e15") && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub("eee2e15")
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",452)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[452].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        453: {
            title: "Best Speed",
            description: "Best cases boost time speed, 'Anti-Best' slog+0.02, Quarantined Infecter start slog*5.",
            cost: new Decimal("eee26e18"),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            effect(){
                let Winter = powExp(tmp.ct.getBest.max(10).log10(),0.8).div(1e24).max(1).pow(0.3)
                return Winter
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[453].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",452)
            },
            canAfford() {
                return player.points.gte("eee26e18") && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub("eee26e18")
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",453)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[453].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        454: {
            title: "Type Divider",
            description: "'Distance Divider' exponent+0.005, 'Anti-Type Boost' cost exponent-0.2.",
            cost: new Decimal("eeee154e3"),
            currencyDisplayName: "cases in 'Booster Vaccine'",
            unlocked() {
                return hasUpgrade("ct",452)
            },
            canAfford() {
                return player.points.gte("eeee154e3") && inChallenge("ct",32)
            },
            pay() {
                player.points = player.points.sub("eeee154e3")
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",454)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[454].canAfford) color = "radial-gradient(#383434, #153d63)"
                    return color
                    }
                }
            }
        },
        461: { 
            title: "An",
            description() {
                let x = "5x"
                if (hasUpgrade("ct",466)) x = "1.62x"
                return "Dilate 'UI Gain' base to 1.25, Social Distant scaling is "+x+" weaker, Anti-Vaccine 1st effect slog^1.111."
            },
            cost: new Decimal(1e6),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",422)
            },
            canAfford() {
                return player.ct.aBoost.gte(1e6) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",461)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[461].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        462: { 
            title: "Ti",
            description: "Dilate 'Vaccinated' reward to 2 and 'Capped Vaccines' reward to 1.4.",
            cost: new Decimal(1e14),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",461)
            },
            canAfford() {
                return player.ct.aBoost.gte(1e14) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",462)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[462].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        463: { 
            title: "Bo",
            description: "Dilate 'AdAfter' effect to 1.5 and '32' multiplies, keep Unvaxxed virus upgrades and milestones.",
            cost: new Decimal(2424e21),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",462)
            },
            canAfford() {
                return player.ct.aBoost.gte(2424e21) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",463)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[463].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        464: { //Irene, Seulgi, Wendy, Joy, Yeri
            title: "Os",
            description: "Infecters boost Anti-Booster gain and dilate 'Vaccinated' reward to 1.2.",
            cost: new Decimal(1e80),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Irene = powExp(slog(player.e.points).div(2e7).max(1),2)
                if (hasUpgrade("ct",502)) Irene = Irene.pow(tmp.ct.upgrades[502].effect)
                return Irene
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[464].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",463)
            },
            canAfford() {
                return player.ct.aBoost.gte(1e80) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",464)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[464].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        465: { 
            title: "Te",
            description: "Anti-Maskers boost Anti-Booster gain, start with first 4 UI milestones, you can buy max 'Base Multiplier'.",
            cost: new Decimal(1e137),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Seulgi = slogadd(player.ct.Am.max(tet10(4)),-4.5).pow(0.05)
                if (hasUpgrade("ct",502)) Seulgi = Seulgi.pow(tmp.ct.upgrades[502].effect)
                return Seulgi
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[465].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",464)
            },
            canAfford() {
                return player.ct.aBoost.gte(1e137) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",465)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[465].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        466: { 
            title: "R",
            description: "CTNA boosts Anti-Booster gain, Social Distant 'UI Gain' scaling is weaker.",
            cost: new Decimal(1e170),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Wendy = powExp(slog(player.ct.points).div(1e8).pow(1.5),2)
                if (hasUpgrade("ct",502)) Wendy = Wendy.pow(tmp.ct.upgrades[502].effect)
                return Wendy
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[466].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",465)
            },
            canAfford() {
                return player.ct.aBoost.gte(1e170) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",466)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[466].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        471: { 
            title: "Ad",
            description: "Best Anti-Boosters boost base cases gain in 'Booster Vaccine', dilate 'UnUnVaxxed' reward to 1.5.",
            cost: new Decimal(2e182),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Joy = powExp(player.ct.bestBoost.max(1),0.6).pow(0.1)
                if (hasUpgrade("ct",483)) Joy = powExp(Joy,1.5)
                return Joy
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[471].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",466)
            },
            canAfford() {
                return player.ct.aBoost.gte(2e182) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",471)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[471].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        472: { 
            title: "Ve",
            description: "CTNA boosts Anti-Booster buyable bases, start with 28 UR milestone.",
            cost: new Decimal(1e207),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Yeri = slog(player.ct.points.max(1)).div(1e8).max(10).log10().pow(2).div(20).add(1)
                return Yeri
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[472].effect)
            },
            unlocked() {
                return hasUpgrade("ct",471)
            },
            canAfford() {
                return player.ct.aBoost.gte(1e207) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",472)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[472].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        473: { 
            title: "Rs",
            description: "Anti-Boosters boost Anti-Vaccine 1st effect slog, bulk buy UR.",
            cost: Decimal.pow(2,1024),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Irene = player.ct.aBoost.max(10).log10().max(10).log10().div(100).add(1)
                return Irene
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[473].effect)
            },
            unlocked() {
                return hasUpgrade("ct",472)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(2,1024)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",473)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[473].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        474: { 
            title: "E",
            description: "Infecters boost Anti-Vaccine 1st effect slog.",
            cost: Decimal.pow(10,380),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Seulgi = slog(player.e.points).max(10).log10().pow(1.05).div(500).add(1)
                return Seulgi
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[474].effect)
            },
            unlocked() {
                return hasUpgrade("ct",473)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,380)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",474)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[474].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        475: { 
            title: "Vax",
            description: "Raise 'Anti-Anti-Capped' reward to 3.5, 'Anti-Adverse' reward to 1.4, dilate 'AdAfter' to 1.3.",
            cost: Decimal.pow(10,500),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",474)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,500)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",475)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[475].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        476: { 
            title: "Xer",
            description: "Anti-Boosters boost 'Misery', 'Misery' boosts 'Tragedy', keep 56 UR milestone.",
            cost: Decimal.pow(10,745),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Wendy = player.ct.aBoost.max(10).log10().pow(0.88).div(50).add(1)
                return Wendy
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[476].effect)
            },
            unlocked() {
                return hasUpgrade("ct",475)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,745)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",476)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[476].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        481: { 
            title: "V",
            description: "Adversities boost Anti-Booster gain, replicant interval is 5x faster, keep UI upgrades.",
            cost: Decimal.pow(10,900),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Joy = player.ct.Adversity.max(10).log10().pow(0.01)
                if (Joy.gte("e6e4")) Joy = Joy.log10().div(6e4).pow(.8).mul(6e4).pow10()
                return Joy
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[481].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",476)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,900)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",481)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[481].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        482: { 
            title: "o",
            description: "Adversities boost effective challenge completions, replicant interval is 2x faster.",
            cost: Decimal.pow(10,1150),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Yeri = player.ct.Adversity.max(10).log10().max(10).log10().pow(.6).div(300).add(1)
                if (Yeri.gte(2)) Yeri = Yeri.div(2).pow(0.3).mul(2)
                if (Yeri.gte(3.55)) Yeri = Yeri.div(3.55).pow(0.25).mul(3.55)
                return Yeri
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[482].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",481)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,1150)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",482)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[482].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        483: { 
            title: "r",
            description: "Dilate 'Ad' to 1.5, keep UR upgrades, UR resets nothing.",
            cost: Decimal.pow(10,1730),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",482)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,1730)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",483)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[483].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        484: { 
            title: "O",
            description: "Keep UI and first 8 UR milestones, interval scaling starts at 1e1000, buy max UR buyables.",
            cost: Decimal.pow(10,2050),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",483)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,2050)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",484)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[484].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        485: { 
            title: "n",
            description: "Anti-Boosters boost Adverse Vaxxer gain after softcap and dilate AAV eff to 1.15 at 20 'Aer-B Gest's.",
            cost: Decimal.pow(10,2930),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Irene = player.ct.aBoost.add(1).pow(50)
                return Irene
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[485].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",484)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,2930)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",485)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[485].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        486: { 
            title: "a",
            description: "Anti-Boosters boost CTNA gain slog, interval/2.",
            cost: Decimal.pow(10,7660),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Seulgi = player.ct.aBoost.max(10).log10().max(10).log10().pow(5).div(2e3).add(1)
                return Seulgi
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[486].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",485)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,7660)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",486)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[486].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        491: { 
            title: "I",
            description: "Adverse Vaxxers boost Anti-Booster gain, dilate Anti-Vax eff slog^1.015.",
            cost: Decimal.pow(10,12500),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Wendy = powExp(player.ct.Advaxxers.add(1),0.5).pow(0.01)
                if (hasUpgrade("ct",515)) Wendy = powExp(Wendy,1.5)
                if (hasUpgrade("ct",521)) Wendy = powExp(Wendy,1.15)
                return Wendy
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[491].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",486)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,12500)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",491)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[491].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        492: { 
            title: "N",
            description: "Dilate 'UnUnVaxxed' reward^1.5, base cases slog+0.001 in 'Booster Vaccine', cap exponent+1.",
            cost: Decimal.pow(10,14500),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",491)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,14500)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",492)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[492].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        493: { 
            title: "F",
            description: "Best Anti-Boosters boost cases in 'Booster Vaccine', base cases slog+0.002.",
            cost: Decimal.pow(10,15400),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Joy = player.ct.bestBoost.max(10).log10().div(15000).max(1).pow(5)
                if (hasUpgrade("ct",505) && player.points.gte("ee6060")) Joy = powExp(Joy,2)
                if (hasUpgrade("ct",506)) Joy = powExp(Joy,1.5)
                if (hasUpgrade("ct",506) && player.points.gte("eee6")) Joy = powExp(Joy,2.5)
                if (hasUpgrade("ct",516) && player.points.gte("eee10")) Joy = powExp(Joy,1.4)
                if (hasUpgrade("ct",522) && player.points.gte("eee14")) Joy = powExp(Joy,1.3)
                if (hasUpgrade("ct",524) && player.points.gte("eee18")) Joy = powExp(Joy,1.25)
                return Joy
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[493].effect)
            },
            unlocked() {
                return hasUpgrade("ct",492)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,15400)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",493)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[493].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        494: { 
            title: "e",
            description: "UI boost to 'Tragedy' exp<sup>2</sup>^1.2, keep first 6 UP milestones, buy max 'Prion Multiplier' and it costs nothing, slog+0.003.",
            cost: Decimal.pow(10,16280),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",493)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,16280)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",494)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[494].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        495: { 
            title: "C",
            description: "<span style = 'font-size:9px'>Dilate Anti-Vax eff slog^1.005, keep first 11 UP milestones, buy max Prion and Protein buyables and they cost nothing, slog+0.004, UP and F exp+1, 'Prion Exponent' base^1.05.</span>",
            cost: Decimal.pow(10,18600),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",494)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,18600)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",495)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[495].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        496: { 
            title: "T",
            description: "Dilate Anti-Vax eff slog^1.002, keep Main UP upgs, miles, and challs, buy max 1st row PrP buyables and 'PrPSc Multiplier', PrPSc exp+0.5.",
            cost: Decimal.pow(10,26300),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",495)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,26300)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",496)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[496].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        501: { 
            title: "D",
            description: "Autobuy 1st row PrP buyables, 'PrPSc Exponent' bulk*5, PrPSc and PrPres exp+1.",
            cost: Decimal.pow(10,32645),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",496)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,32645)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",501)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[501].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        502: { 
            title: "i",
            description: "Anti-Boosters boost 1st row upgrades, autobuy 'Antier-Booster Gain'.",
            cost: Decimal.pow(10,36700),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Yeri = player.ct.aBoost.max(10).log10().pow(0.85).div(1000).max(1)
                return Yeri
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[502].effect)
            },
            unlocked() {
                return hasUpgrade("ct",501)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,36700)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",502)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[502].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        503: { 
            title: "s",
            description: "Anti-Boosters boost UI boost to 'Tragedy' exp, keep PrP upgs, first 3 and 7th UU miles, UU base+0.1.",
            cost: Decimal.pow(10,42400),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Irene = player.ct.aBoost.max(10).log10().pow(0.75).div(2000).max(1)
                return Irene
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[503].effect)
            },
            unlocked() {
                return hasUpgrade("ct",502)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,42400)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",503)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[503].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        504: { 
            title: "ea",
            description: "'Antiest-Booster Gain' boosts itself, Dilate AV 1st slog^1.01.",
            cost: Decimal.pow(10,58350),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Seulgi = player.ct.buyables[251].add(1).log10().pow(2).div(5).add(1)
                return Seulgi
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[504].effect)
            },
            unlocked() {
                return hasUpgrade("ct",503)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,58350)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",504)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[504].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        505: { 
            title: "S",
            description() {return "<span style='font-size:9px'>A-Bs boost '73' eff, keep 1st row UU upgs, first 8 and 14th UU miles, PrPres eff softcap 1.1x later, 'UnPower Gain' base*1.1, Dilate 'F' eff^2 at "+format("ee6060")+" cases.</span>"},
            cost: Decimal.pow(10,70500),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Wendy = player.ct.aBoost.max(10).log10().pow(0.9).div(3333).max(1)
                if (Wendy.gte(1e3)) Wendy = Wendy.div(1e3).pow(0.5).mul(1e3)
                if (Wendy.gte(1e4)) Wendy = Wendy.div(1e4).pow(0.5).mul(1e4)
                return Wendy
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[505].effect)
            },
            unlocked() {
                return hasUpgrade("ct",504)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,70500)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",505)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[505].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        506: { 
            title: "es",
            description() {return "<span style='font-size:9px'>Buy max Power buyables, UncPow exp+1, enzyme exp+0.5, 'AdBooster' exp^1.15, keep 2nd row UU upgs, first 16 UU miles, Dilate 'F' eff^1.5 and at "+format("eee6")+" cases, dilate^2.5</span>."},
            cost: Decimal.pow(10,98500),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",505)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,98500)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",506)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[506].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        511: { 
            title: "Anti-Dist",
            description() {return "Distance boosts 'Antiest-Booster Gain'."},
            cost: Decimal.pow(10,143400),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Joy = tmp.ct.getDist.div(1.8288).pow(-0.2)
                if (Joy.gte(6)) Joy = Joy.div(6).pow(0.3).mul(6)
                return Joy
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[511].effect)
            },
            unlocked() {
                return hasUpgrade("ct",506)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,143400)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",511)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[511].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        512: { 
            title: "Distance Booster",
            description() {return "Anti-Boosters divide distance, extra 'Aer-B Gest' eff^1.1."},
            cost: Decimal.pow(10,152100),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Yeri = player.ct.aBoost.max(10).log10().max(10).log10().div(5.15).pow(2.5)
                return Yeri
            },
            effectDisplay(){
                return "/"+format(tmp.ct.upgrades[512].effect)
            },
            unlocked() {
                return hasUpgrade("ct",511)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,152100)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",512)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[512].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        513: { 
            title: "Boostainer",
            description() {return "Anti-Bstrs produce 'Antiest-Booster Gain' (Aest-B G)s, extra Aest-B Gs boost Aest-B G mult."},
            cost: Decimal.pow(10,163000),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let exp = decimalOne
                if (hasUpgrade("ct",531) && player.ct.aBoost.gte("e5925000")) exp = exp.add(1)
                if (hasUpgrade("ct",532) && player.ct.aBoost.gte("e731e4")) exp = exp.add(0.5)
                if (hasUpgrade("ct",534)) exp = exp.add(tmp.ct.upgrades[534].effect)
                let Irene = powExp(player.ct.aBoost.add(1),0.5).pow(0.01).div(1e4).pow(exp)
                if (hasUpgrade("ct",514)) Irene = Irene.mul(tmp.ct.upgrades[514].effect)
                if (hasUpgrade("ct",523)) Irene = Irene.mul(tmp.ct.upgrades[523].effect)
                if (hasUpgrade("ct",541)) Irene = Irene.mul(tmp.ct.upgrades[541].effect)
                return Irene
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[513].effect)+"/s, "+format(tmp.ct.extraBoostEff)+"x" 
            },
            unlocked() {
                return hasUpgrade("ct",512)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,163000)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",513)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[513].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        514: { 
            title: "Boosterain",
            description() {return "Each Anti-Distancing buyable boosts 'Boostainer' by 1.2x."},
            cost: Decimal.pow(10,180000),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let exp = decimalZero
                for (i = 0; i < player.ct.distBuyId.length; i++){
                    exp = exp.add(player.ct.buyables[player.ct.distBuyId[i]])
                }
                let Seulgi = Decimal.pow(1.2,exp)
                return Seulgi
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[514].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",513)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,180000)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",514)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[514].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        515: { 
            title: "AntI",
            description() {return "'Anti-Booster Gain' exp-0.01, dilate 'I' ^1.5."},
            cost: Decimal.pow(10,248000),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",514)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,248000)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",515)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[515].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        516: { 
            title: "EnzymExp",
            description() {return "<span style='font-size:9px'>Buy max 'Enzyme Multiplier', enzyme exp+1, keep Main UU upgs, first 22 UU miles, Dilate 'F' eff^1.4 at "+format("eee10")+" cases</span>."},
            cost: Decimal.pow(10,410200),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",515)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,410200)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",516)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[516].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        521: { 
            title: "AntIdIstance",
            description() {return "Distance boosts 'Boostainer' 2nd effect, dilate 'I' ^1.15."},
            cost: Decimal.pow(10,612000),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Wendy = tmp.ct.getDist.div(1.8288).pow(-0.17)
                if (Wendy.gte(40)) Wendy = Wendy.div(40).pow(0.5).mul(40)
                if (Wendy.gte(50)) Wendy = Wendy.add(100).div(3)
                return Wendy
            },
            effectDisplay(){
                return "^"+format(tmp.ct.upgrades[521].effect)
            },
            unlocked() {
                return hasUpgrade("ct",516)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,612000)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",521)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[521].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        522: { 
            title: "Unquarantined Exp",
            description() {return "<span style='font-size:9px'>Buy max Enzyme buyables, enzyme exp+1, keep 1st row Enzyme UU upgs, 1st 24 miles, Unquarantined Cases gain*10, Dilate 'F' eff^1.3 at "+format("eee14")+" cases</span>."},
            cost: Decimal.pow(10,8e5),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",521)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,8e5)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",522)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[522].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        523: { 
            title: "Boosterainer",
            description() {return "Each 'Antiest-Booster Gain' boosts 'Boostainer' by "+format(tmp.ct.getBstMult)+"x."},
            cost: Decimal.pow(10,1125e3),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let exp = player.ct.buyables[251]
                let Joy = Decimal.pow(tmp.ct.getBstMult,exp)
                return Joy
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[523].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",522)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,1125e3)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",523)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[523].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        524: { 
            title: "MaxQuarantine",
            description() {return "<span style='font-size:9px'>Buy max 'Unquarantined Enzymes', keep 2nd row Enzyme UU upgs, UC gain*10, Dilate 'F' eff^1.25 at "+format("eee18")+" cases</span>."},
            cost: Decimal.pow(10,1515e3),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",523)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,1515e3)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",524)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[524].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        525: { 
            title: "ASV Boost",
            description() {return "Dilate ASV Vax eff^2.5, 'Distance Divider' base+0.01 at "+format("e3132000")+"/ "+format("e3494000")+" A-Bs."},
            cost: Decimal.pow(10,2937e3),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",524)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,2937e3)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",525)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[525].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        526: { 
            title: "Anti-RNA",
            description() {return "Best Anti-Boosters boost RNA gain, keep 3rd row Enzyme upgs, 1st 27 miles."},
            cost: Decimal.pow(10,4069e3),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Yeri = powExp(player.ct.bestBoost.div("e4e6").add(1),0.85).pow(0.0001)
                return Yeri
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[526].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",525)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,4069e3)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",526)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[526].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        531: { 
            title: "BoostainExp",
            description() {return "'A-B Gain' exp-0.01 and again at "+format("e5573000")+"/ "+format("e5705000")+" A-Bs, Boostainer exp+1 at "+format("e5925000")+" A-Bs."},
            cost: Decimal.pow(10,5333333),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",526)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,5333333)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",531)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[531].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        532: { 
            title: "Divider Boost",
            description() {return "'Distance Divider' base+0.005 and again at "+format("e68e5")+" A-Bs, Boostainer exp+0.5 at "+format("e731e4")+" A-Bs."},
            cost: Decimal.pow(10,6386000),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",531)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,6386000)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",532)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[532].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        533: { 
            title: "MaxEnzyme",
            description() {return "<span style='font-size:9px'>Buy max 3rd row Enzyme buyables, keep all UU and 1st US milestones, atom gain*3</span>."},
            cost: Decimal.pow(10,7815e3),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",532)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,7815e3)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",533)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[533].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        534: { 
            title: "Boostainance",
            description() {return "<span style='font-size:9px'>Distance adds to 'Boostainer' exp, 'A-B Gain' exp-0.01 at "+format("e1009e4")+"/ "+format("e1103e4")+" A-Bs.</span>"},
            cost: Decimal.pow(10,9185e3),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let LaBas = tmp.ct.getDist.div(1.8288).pow(-0.1).sub(1).div(1.5)
                return LaBas
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[534].effect)
            },
            unlocked() {
                return hasUpgrade("ct",533)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,9185e3)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",534)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[534].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        535: { 
            title: "AB32",
            description() {return "'32' slog+0.8, 'A-B Gain' exp-0.01 at "+format("e14745e3")+" A-Bs."},
            cost: Decimal.pow(10,1406e4),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",534)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,1406e4)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",535)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[535].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        536: { 
            title: "Anti-Atom",
            description() {return "Best Anti-Boosters boost unv.sev. and atom gain, keep 4th row Enzyme upgs, 2nd US mile."},
            cost: Decimal.pow(10,1541e4),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let CorVid = powExp(player.ct.bestBoost.div("e15e6").add(1),0.8).pow(0.00002).min(5)
                CorVid = CorVid.mul(powExp(player.ct.bestBoost.div("e3e7").add(1),0.777).pow(0.000006))
                CorVid = CorVid.mul(powExp(player.ct.bestBoost.div("e4.7e7").add(1),0.8).pow(0.00001))
                CorVid = CorVid.mul(powExp(player.ct.bestBoost.div("e7.5e7").add(1),0.83).pow(0.00005))
                return CorVid
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[536].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",535)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,1541e4)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",536)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[536].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        541: { //Taeyeon
            title: "AnDistain",
            description() {return "<span style='font-size:9px'>Anti-Vax eff boosts 'Boostainer', 'Boostainance' affects 2nd effect, AAV eff is exp<sup>4</sup>, unlock Anti-Distance.</span>"},
            cost: Decimal.pow(10,1778e4),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Taeyeon = slog(tmp.ct.getAVaxEff).div(1.5e14).pow(1.5).pow10()
                return Taeyeon
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[541].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",536)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,1778e4)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",541)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[541].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        542: {
            title: "Antirainer",
            description() {return "Anti-Distance adds to 'Boosterainer' base, 'A-B Gain' exp-0.01 at "+format("e2927e4")+" A-Bs."},
            cost: Decimal.pow(10,2427e4),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Taeyeon = tmp.ct.getAntiDist.div(1.616255e-35).add(1).log10().div(100)
                return Taeyeon
            },
            effectDisplay(){
                return "+"+format(tmp.ct.upgrades[542].effect)
            },
            unlocked() {
                return hasUpgrade("ct",541)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,2427e4)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",542)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[542].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        543: {
            title: "mRUS",
            description() {return "Keep 5th row Main UU upgs and 7th US mile, buy max US and main US buyables, mRNA gain*5, exp*1.3."},
            cost: Decimal.pow(10,3395e4),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",542)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,3395e4)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",543)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[543].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        544: {
            title: "Anti-mRNA",
            description() {return "'Distance Divider' exp+0.01, keep 8th US mile,  √'Anti-Atom'/40 boosts mRNA."},
            cost: Decimal.pow(10,4452e4),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Taeyeon = tmp.ct.upgrades[536].effect.pow(0.5).div(40).max(1)
                return Taeyeon
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[544].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",543)
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,4452e4)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",544)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[544].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        545: {
            title: "UB2023",
            description() {return "UnBoosted Virus gain base is 20,232,024, double MMNA gain and tRNA Mutation attempt amount."},
            cost: Decimal.pow(10,1625e5),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",544) && player.uv.uvUnlocked
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,1625e5)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",545)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[545].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        546: {
            title: "Divided",
            description() {return "'Distance Divider' exp+0.01, MMNA gain*3 and effect^1.5 at "+format("e216e6")+" / "+format("e326e6")+" (^2) Anti-Boosters."},
            cost: Decimal.pow(10,19e7),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",545) && player.uv.uvUnlocked
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,19e7)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",546)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[546].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        551: {
            title: "AnDi-Vaccine",
            description() {return "Anti-Distance boosts Anti-Vax 1st eff slog, Qntd. Infecter start slog*1.57 at "+format("e549e6")+" A-Bs."},
            cost: Decimal.pow(10,515e6),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Taeyeon = tmp.ct.getAntiDist.mul(1e27).add(10).log10().pow(2).sub(1).mul(2).add(1)
                if (Taeyeon.gte(4)) Taeyeon = Taeyeon.div(4).pow(0.3).mul(4)
                if (Taeyeon.gte(5)) Taeyeon = Taeyeon.div(5).pow(0.3).mul(5)
                return Taeyeon
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[551].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",546) && player.uv.uvUnlocked
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,515e6)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",551)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[551].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        552: {
            title: "Anti-MMNA",
            description() {return "Best Anti-Boosters boost MMNA gain, limit, and mutated rRNA gain."},
            cost: Decimal.pow(10,164e7),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Taeyeon = powExp(player.ct.bestBoost.div("e155e7").add(1),0.77).pow(4e-7)
                Taeyeon = Taeyeon.mul(powExp(player.ct.bestBoost.div("e49e8").add(1),0.79).pow(4e-6))
                return Taeyeon
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[552].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",551) && player.uv.uvUnlocked
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,164e7)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",552)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[552].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        553: {
            title: "A-CRNA Exp",
            description() {return "CRNA gain exponent+0.5."},
            cost: Decimal.pow(10,483e7),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",552) && player.uv.uvUnlocked
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,483e7)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",553)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[553].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        554: {
            title: "Anti-UnBoosted",
            description() {return "Best Anti-Boosters boost UnBoosted Virus gain."},
            cost: Decimal.pow(10,715e7),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            effect(){
                let Taeyeon = powExp(player.ct.bestBoost.div("e7e9").add(1),0.75).pow(1.5e-7).mul(10)
                return Taeyeon
            },
            effectDisplay(){
                return format(tmp.ct.upgrades[554].effect)+"x"
            },
            unlocked() {
                return hasUpgrade("ct",553) && player.uv.uvUnlocked
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,715e7)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",554)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[554].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
        555: {
            title: "Anti-Quarantine",
            description() {return "Quarantined Infecter scaling starts 2x slog later."},
            cost: Decimal.pow(10,158e8),
            currencyInternalName: "aBoost",
            currencyDisplayName: "Anti-Boosters",
            currencyLayer: "ct",
            unlocked() {
                return hasUpgrade("ct",554) && player.uv.uvUnlocked
            },
            canAfford() {
                return player.ct.aBoost.gte(Decimal.pow(10,158e8)) 
            },
            style: {
                "background"() {
                    if (!hasUpgrade("ct",555)) {
                    let color = "#bf8f8f"
                    if (tmp.ct.upgrades[555].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                    return color
                    }
                }
            }
        },
    },
    challenges: { 
        rows: 3,
        cols: 2,
        11: {
            name: "Vaccinated",
            currencyDisplayName: "cases",
            completionLimit: 5,
            challengeDescription: function() {
                let c11 = "UI effect is 0. Cases gain slog is ^0.5."
                if (inChallenge("ct", 11)) c11 = c11 + " (In Challenge)"
                c11 += "<br>Completed:" + challengeCompletions("ct",11) + "/" + tmp.ct.challenges[11].completionLimit
                return c11
            },
            onStart(testInput=false) { 
                if (testInput) {
                    startCTChallenge(11)
                }
            },
            goal(){
                let c11 = challengeCompletions("ct", 11)
                if (c11>=2) c11 = c11 - 0.25
                return tet10((311*c11)+800)
            },
            rewardDescription() {
                let dis = "Cases boost AdVaxxed Vaccine gain. Unlock aRNA Vaccines at 3 completions. aRNA effect is ^1.1 and base gain^2 at 5 completions"
                return dis
            },
            rewardEffect() {
                let c11 = challengeCompletions("ct", 11)
                if (hasUpgrade("uv",14)) c11 = Decimal.mul(c11,tmp.uv.upgrades[14].effect)
                if (hasUpgrade("ct",482)) c11 = Decimal.mul(c11,tmp.ct.upgrades[482].effect)
                let eff = slog(player.points.max(10)).pow(Decimal.max(c11,1))
                if (hasUpgrade("ct",462)) eff = powExp(eff,2)
                if (hasUpgrade("ct",464)) eff = powExp(eff,1.2)
                return eff
            },
            rewardDisplay() {
                return format(this.rewardEffect())+"x"
            },
            unlocked(){
                return hasUpgrade("ct", 382)
            }
        },
        12: {
            name: "Anti-Anti-Capped",
            currencyDisplayName: "cases",
            completionLimit: 5,
            challengeDescription: function() {
                let c11 = "'Anti-Capped' effect is 1. Anti-Vaccine effect boosts cases gain. Cases gain slog is ^0.6."
                if (inChallenge("ct", 12)) c11 = c11 + " (In Challenge)"
                c11 += "<br>Completed:" + challengeCompletions("ct",12) + "/" + tmp.ct.challenges[12].completionLimit
                return c11
            },
            onStart(testInput=false) { 
                if (testInput) {
                    startCTChallenge(12)
                }
            },
            goal(){
                let c12 = challengeCompletions("ct", 12)
                if (c12>=4) c12 = c12 - 0.74
                if (c12>=3) c12 = c12 - 0.35
                if (c12>=2) c12 = c12 - 0.46
                return tet10((230*c12)+815)
            },
            rewardDescription() {
                let dis = "UV boost 'Anti-Capped' slog from CTNA. Unlock AAV Vaccines at 3 completions. AAV effect is dilated ^1.1 and base gain^2 at 5 completions"
                return dis
            },
            rewardEffect() {
                let c11 = challengeCompletions("ct", 12)
                if (hasUpgrade("uv",14)) c11 = Decimal.mul(c11,tmp.uv.upgrades[14].effect)
                if (hasUpgrade("ct",482)) c11 = Decimal.mul(c11,tmp.ct.upgrades[482].effect)
                let eff = player.ct.Uv.max(10).log10().div(10).max(1).pow(Decimal.max(c11,1).pow(0.6).mul(0.04))
                if (hasUpgrade("ct",475)) eff = eff.pow(3.5)
                if (eff.gte(1e9)) eff = eff.log10().div(9).pow(0.6).mul(9).pow10()
                if (eff.gte(1e10)) eff = eff.log10().div(10).pow(0.6).mul(10).pow10()
                return eff
            },
            rewardDisplay() {
                return format(this.rewardEffect(),4)+"x"
            },
            unlocked(){
                return hasUpgrade("ct", 382)
            }
        },
        21: {
            name: "UnUnVaxxed",
            currencyDisplayName: "UI",
            currencyInternalName: "Ui",
            currencyLayer: "ct",
            completionLimit: 5,
            challengeDescription: function() {
                let c11 = "'UI Gain' effect is 1. UI gain is dilated ^0.8. Cases gain slog is ^0.5."
                if (inChallenge("ct", 21)) c11 = c11 + " (In Challenge)"
                c11 += "<br>Completed:" + challengeCompletions("ct",21) + "/" + tmp.ct.challenges[21].completionLimit
                return c11
            },
            onStart(testInput=false) { 
                if (testInput) {
                    startCTChallenge(21)
                }
            },
            goal(){
                let c12 = challengeCompletions("ct", 21)
                if (c12>=4) c12 = (c12 + 0.4)  * 1.45
                if (c12>=3) c12 = (c12 + 0.4)  * 1.2
                if (c12>=2) c12 = (c12 + 1.3)  * 1.1
                return Decimal.pow(10,c12*666+3434)
            },
            rewardDescription() {
                let a = "add to "
                if (hasUpgrade("ct",314)) a = "multiplies "
                let dis = "UI "+a+"'UI Gain' base. Unlock AIV Vaccines at 3 completions. AIV effect is dilated ^1.05 and base gain^2 at 5 completions"
                return dis
            },
            rewardEffect() {
                let c11 = challengeCompletions("ct", 21)
                if (hasUpgrade("uv",14)) c11 = Decimal.mul(c11,tmp.uv.upgrades[14].effect)
                if (hasUpgrade("ct",482)) c11 = Decimal.mul(c11,tmp.ct.upgrades[482].effect)
                let eff = player.ct.Ui.max(10).log10().pow(Decimal.max(c11,1).pow(0.5).mul(1/6)).sub(1)
                if (hasUpgrade("ct",471)) eff = powExp(eff,1.5)
                if (hasUpgrade("ct",492)) eff = powExp(eff,1.5)
                return eff
            },
            rewardDisplay() {
                let a = "+"+format(this.rewardEffect(),4)
                if (hasUpgrade("ct",314)) a = format(this.rewardEffect(),4)+"x"
                return a
            },
            unlocked(){
                return hasUpgrade("ct", 382)
            }
        },
        22: {
            name: "Anti-Adverse",
            currencyDisplayName: "UI",
            currencyInternalName: "Ui",
            currencyLayer: "ct",
            completionLimit: 5,
            challengeDescription: function() {
                let c11 = "Adverse Vaxxer effect is 1. UI gain is dilated ^0.75. Cases gain slog is ^0.5."
                if (inChallenge("ct", 22)) c11 = c11 + " (In Challenge)"
                c11 += "<br>Completed:" + challengeCompletions("ct",22) + "/" + tmp.ct.challenges[22].completionLimit
                return c11
            },
            onStart(testInput=false) { 
                if (testInput) {
                    startCTChallenge(22)
                }
            },
            goal(){
                let c12 = challengeCompletions("ct", 22)
                if (c12>=4) c12 = (c12 + 0.1)  * 1.1
                if (c12>=3) c12 = (c12 + 0.63)  * 1.1
                if (c12>=2) c12 = (c12 + 1)  * 1.175
                return Decimal.pow(10,c12*520+2727)
            },
            rewardDescription() {
                let dis = "AdVaxxed Vaccines boost Adverse Vaxxer effect. Unlock ASV Vaccines at 3 completions. ASV effect is multiplied by 1.1 and base gain^2 at 5 completions"
                return dis
            },
            rewardEffect() {
                let c11 = challengeCompletions("ct", 22)
                if (hasUpgrade("uv",14)) c11 = Decimal.mul(c11,tmp.uv.upgrades[14].effect)
                if (hasUpgrade("ct",482)) c11 = Decimal.mul(c11,tmp.ct.upgrades[482].effect)
                let eff = player.ct.AdVax.max(10).log10().pow(Decimal.max(c11,1).pow(0.6).mul(1/25))
                if (hasUpgrade("ct",475)) eff = eff.pow(1.4)
                if (eff.gte(5e3)) eff = eff.mul(2).log10().div(4).pow(0.6).mul(4).pow10().div(2)
                if (eff.gte(15e3)) eff = eff.mul(2/4).log10().div(4).pow(0.6).mul(4).pow10().div(2/3)
                return eff
            },
            rewardDisplay() {
                return "^"+format(this.rewardEffect(),4)
            },
            unlocked(){
                return hasUpgrade("ct", 385)
            }
        },
        31: {
            name: "Capped Vaccines",
            currencyDisplayName: "cases",
            completionLimit: 5,
            countsAs: [11, 12],
            challengeDescription: function() {
                let asv = "ASV vaccines<sup>0.4</sup>."
                if (challengeCompletions("ct",31)>1) asv = "ASV vaccines<sup>0.3</sup>/420."
                if (challengeCompletions("ct",31)>2) asv = "ASV vaccines<sup>0.15</sup>/2,022."
                if (challengeCompletions("ct",31)>3) asv = "ASV vaccines<sup>0.123</sup>/"+format(1e9)+"."
                let c11 = "'Vaccinated' and 'Anti-Anti-Capped' are applied at once. Cases gain is multiplied by "+asv
                if (inChallenge("ct", 31)) c11 = c11 + " (In Challenge)"
                c11 += "<br>Completed:" + challengeCompletions("ct",31) + "/" + tmp.ct.challenges[22].completionLimit
                return c11
            },
            onStart(testInput=false) { 
                if (testInput) {
                    startCTChallenge(31)
                }
            },
            goal(){
                let c12 = challengeCompletions("ct", 31)
                if (c12>=4) c12 = (c12 + 0.093)  * 1.3
                if (c12>=3) c12 = (c12 + 0.1)  * 1.3
                if (c12>=2) c12 = (c12 + 1.11003)  * 2
                return tet10(c12*1.37+39.32)
            },
            rewardDescription() {
                let dis = "Infecters boost Anti-Vaccine type gain. Unlock a buyable at 3 completions. 'Type Boost' effect is multiplied by 1.2 at 5 completions."
                return dis
            },
            rewardEffect() {
                let c11 = challengeCompletions("ct", 31)
                if (hasUpgrade("uv",14)) c11 = Decimal.mul(c11,tmp.uv.upgrades[14].effect)
                if (hasUpgrade("ct",482)) c11 = Decimal.mul(c11,tmp.ct.upgrades[482].effect)
                let eff = slog(player.e.points.max(10)).pow(0.25).pow10().pow(Decimal.max(c11,1).div(20))
                if (hasUpgrade("ct",462)) eff = powExp(eff,1.4)
                return eff
            },
            rewardDisplay() {
                return format(this.rewardEffect())+"x"
            },
            unlocked(){
                return hasUpgrade("ct", 313)
            }
        },
        32: {
            name: "Booster Vaccine",
            currencyDisplayName: "cases",
            completionLimit: 1,
            challengeDescription: function() {
                let c11 = "Cases gain is slog10(gain)/"+format(1e9)+". Infectivity, severity, death, fatality, and IN multiplier from normal layers is 1."
                if (inChallenge("ct", 32)) c11 = c11 + " (In Challenge)"
                return c11
            },
            onStart(testInput=false) { 
                if (testInput) {
                    startCTChallenge(32)
                }
            },
            onExit() { 
                player.uv.virus = player.uv.virus.add(tmp.uv.clickables[31].gain).round()
                player.uv.virusTotal = player.uv.virusTotal.add(tmp.uv.clickables[31].gain)
                layers.ct.clickables[32].onClick()
            },
            goal(){
                return tet10(Decimal.pow(2,1024).log10())
            },
            rewardDescription() {
                let dis = "Unlock a layer."
                return dis
            },
            unlocked(){
                return hasUpgrade("ct", 314)
            },
            style: {"color":"#153d63"},
            buttonColor: '#153d63',
        },
    },
    buyables: {
        respec() {
            if (player.subtabs.ct.mainTabs=="Coronas") {player.ct.spent=decimalZero
            player.ct.buyables[31]=decimalZero
            player.ct.buyables[32]=decimalZero
            player.ct.buyables[33]=decimalZero
            doReset(this.layer, true)
            }
            else {
                player.ct.upgrades = player.ct.upgrades.filter(n => n<290 || n>330)
                player.ct.Av = player.ct.Av.add(player.ct.Aspent)
                player.ct.Aspent = decimalZero
                if (hasUpgrade("ct",355)) layers.ct.clickables[32].onClick()
                else layers.ct.clickables[31].onClick()
                player.ct.inC = false
            }
            
		},
        showRespec() { return player.subtabs.ct.mainTabs=="Coronas" || (player.subtabs.ct.Anti=="Adverse Vaccines" && player.subtabs.ct.Av=="Anti-Vaxxed Vaxxers")},
        respecText() { return player.subtabs.ct.mainTabs=="Coronas"?"Respec Coronas":"Respec Adverse Vaccines"},
		rows: 19,
        cols: 4,
        11: {
			title: "CRNA Exponent",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(180)) x = x.div(180).pow(2).mul(180)
                if (x.gte(80)) x = x.div(80).pow(2).mul(80)
                let cost = Decimal.pow(2, x.pow(1.8)).mul(1e13)
                return cost.floor()
            },
            base() { 
                let base = tmp.ct.buyables[21].effect2.add(0.2)
                if (hasMilestone("Ud",6)) base = base.mul(player.Ud.milestones.length+1)
                if (hasUpgrade("uv",96)) base = base.mul(3)
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 11)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Buyables") return
                let extra = ""
                let dis = "Increase CRNA gain exponent by "+format(this.base())
                return dis + ".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" CTNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 11)) + extra
            },
            unlocked() { return hasMilestone("ct", 6) }, 
            canAfford() {
                    return player.ct.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",12)) player.ct.points = player.ct.points.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.points
                let target = Decimal.log10(s.div(1e13)).div(Decimal.log10(2)).root(1.8)
                if (target.gte(80)) target = target.div(80).pow(0.5).mul(80)
                if (target.gte(180)) target = target.div(180).pow(0.5).mul(180)
                target = target.ceil()
                let cost = Decimal.pow(2, target.sub(1).pow(1.8)).mul(1e13)
                let diff = target.sub(player.ct.buyables[11])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",12)) player.ct.points = player.ct.points.sub(cost).max(0)
                    player.ct.buyables[11] = player.ct.buyables[11].add(diff)
                }
            },
            style: {"width":"150px","height":"150px"}
        },
        12: {
			title: "CRNA Log",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(110)) x = x.div(110).pow(1.1).mul(110)
                if (x.gte(62)) x = Decimal.pow(1.04,x.sub(62)).mul(62)
                let cost = Decimal.pow(3, x.pow(1.8)).mul(25e32)
                return cost.floor()
            },
            base() { 
                let base = new Decimal(0.03)
                return base.add(tmp.ct.buyables[22].effect2)
            },
            total() {
                let total = getBuyableAmount("ct", 12)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x.pow(0.5));
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Buyables") return
                let extra = ""
                let dis = "Reduce CRNA gain log by "+format(this.base())+"x<sup>0.5</sup>"
                return dis + ".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" CTNA\n\
                Effect: -" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 12)) + extra
            },
            unlocked() { return hasMilestone("ct", 7) }, 
            canAfford() {
                    return player.ct.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",12)) player.ct.points = player.ct.points.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.points
                let target = Decimal.log10(s.div(25e32)).div(Decimal.log10(3)).root(1.8)
                if (target.gte(62)) target = target.div(62).log(1.04).add(62)
                if (target.gte(110)) target = target.div(110).root(1.1).mul(110)
                target = target.ceil()
                let cost = Decimal.pow(3, target.sub(1).pow(1.8)).mul(25e32)
                let diff = target.sub(player.ct.buyables[12])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",12)) player.ct.points = player.ct.points.sub(cost).max(0)
                    player.ct.buyables[12] = player.ct.buyables[12].add(diff)
                }
            },
            style: {"width":"150px","height":"150px"}
        },
        13: {
			title: "After Exp",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(1e6)) x = Decimal.pow(1.0001,x.sub(1e6)).mul(1e6)
                if (x.gte(120)) x = x.div(120).pow(2).mul(120)
                if (x.gte(50)) x = x.div(50).pow(2).mul(50)
                let cost = Decimal.pow(5, x.pow(1.8)).mul(5e125)
                return cost.floor()
            },
            base() { 
                let base = new Decimal(0.04)
                return base.add(tmp.ct.buyables[23].effect2)
            },
            total() {
                let total = getBuyableAmount("ct", 13)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x.pow(0.5));
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Buyables") return
                let extra = ""
                let dis = "Increase After log exp by "+format(this.base())+"x<sup>0.5</sup>"
                return dis + ".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" CTNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 13)) + extra
            },
            unlocked() { return hasMilestone("ct", 8) }, 
            canAfford() {
                    return player.ct.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",12)) player.ct.points = player.ct.points.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.points
                let target = Decimal.log10(s.div(5e125)).div(Decimal.log10(5)).root(1.8)
                if (target.gte(50)) target = target.div(50).pow(0.5).mul(50)
                if (target.gte(120)) target = target.div(120).pow(0.5).mul(120)
                if (target.gte(1e6)) target = target.div(1e6).log(1.0001).add(1e6)
                target = target.ceil()
                let cost = Decimal.pow(5, target.sub(1).pow(1.8)).mul(5e125)
                let diff = target.sub(player.ct.buyables[13])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",12)) player.ct.points = player.ct.points.sub(cost).max(0)
                    player.ct.buyables[13] = player.ct.buyables[13].add(diff)
                }
            },
            style: {"width":"150px","height":"150px"}
        },
        21: {
			title: "MMNA Boost",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(1e150)) x = x.log10().div(150).pow(2.5).mul(150).pow10()
                if (x.gte(350)) x = x.div(350).pow(2.5).mul(350)
                if (x.gte(120)) x = x.div(120).pow(2).mul(120)
                let cost = Decimal.pow(10, x.pow(2.5).add(812))
                return cost.floor()
            },
            base() { 
                let base = decimalTwo
                if (hasMilestone("ct",12)) base = base.add(0.3)
                if (hasUpgrade("ct",73)) base = base.add(upgradeEffect("ct",73))
                if (hasUpgrade("ct",85)) base = base.add(upgradeEffect("ct",85))
                if (hasMilestone("ct",19)) base = base.mul(milestoneEffect("ct",19))
                return base
            },
            base2() { 
                let base = new Decimal(0.005)
                return base
            },
            exp() { 
                let exp = new Decimal(1.3)
                if (hasMilestone("ct",12)) exp = exp.add(0.36)
                if (hasUpgrade("ct",73)) exp = exp.add(0.34)
                if (hasUpgrade("ct",84)) exp = exp.add(0.2)
                if (hasUpgrade("ct",95)) exp = exp.add(1)
                if (hasUpgrade("ct",55)) exp = exp.add(upgradeEffect("ct",55))
                if (hasUpgrade("ct",56)) exp = exp.add(upgradeEffect("ct",56))
                if (hasUpgrade("ct",96)) exp = exp.add(upgradeEffect("ct",96))
                if (hasMilestone("ct",19)) exp = exp.mul(milestoneEffect("ct",19))
                return exp
            },
            exp2() { 
                let exp = decimalOne
                if (hasUpgrade("ct",85)) exp = exp.add(0.5)
                if (hasUpgrade("ct",86)) exp = exp.add(0.25)
                if (hasUpgrade("ct",94)) exp = exp.add(2.25)
                if (hasMilestone("ct",16)) exp = exp.add(21)
                if (hasMilestone("ct",19)) exp = exp.mul(milestoneEffect("ct",19))
                return exp
            },
            total() {
                let total = getBuyableAmount("ct", 21)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x.pow(tmp.ct.buyables[21].exp));
            },
            effect2() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base2
                return Decimal.mul(base, x.pow(tmp.ct.buyables[21].exp2));
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Buyables") return
                let extra = ""
                let exp = "x<sup>"+format(tmp.ct.buyables[21].exp2)+"</sup>"
                if (tmp.ct.buyables[21].exp2.eq(1)) exp = ""
                let dis = "Raise MMNA effect to "+format(this.base())+"^x<sup>"+format(tmp.ct.buyables[21].exp)+"</sup>, and increase 'CRNA Exponent' base by "+format(this.base2())
                dis += exp
                return dis + ".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" CTNA\n\
                Effect: ^" + format(tmp[this.layer].buyables[this.id].effect)+", +"+format(tmp[this.layer].buyables[this.id].effect2)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 21)) + extra
            },
            unlocked() { return hasMilestone("ct", 9) }, 
            canAfford() {
                    return player.ct.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",12)) player.ct.points = player.ct.points.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.points
                let target = Decimal.log10(s.div(Decimal.pow(10,812))).root(2.5)
                if (target.gte(120)) target = target.div(120).pow(0.5).mul(120)
                if (target.gte(350)) target = target.div(350).pow(0.4).mul(350)
                if (target.gte(1e150)) target = target.log10().div(150).pow(0.4).mul(150).pow10()
                target = target.ceil()
                let cost = Decimal.pow(10, target.sub(1).pow(2.5)).mul(Decimal.pow(10,812))
                let diff = target.sub(player.ct.buyables[21])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",12)) player.ct.points = player.ct.points.sub(cost).max(0)
                    player.ct.buyables[21] = player.ct.buyables[21].add(diff)
                }
            },
            style: {"width":"150px","height":"150px"}
        },
        22: {
			title: "CRNA Boost",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(1e150)) x = x.log10().div(150).pow(2.5).mul(150).pow10()
                if (x.gte(250)) x = x.div(250).pow(2.5).mul(250)
                if (x.gte(80)) x = x.div(80).pow(2).mul(80)
                let cost = Decimal.pow(1000, x.pow(2.5).add(1091))
                return cost.floor()
            },
            base() { 
                let base = new Decimal(1.5)
                if (hasMilestone("ct",12)) base = base.add(0.3)
                if (hasUpgrade("ct",51)) base = base.add(upgradeEffect("ct",51))
                return base
            },
            base2() { 
                let base = new Decimal(5e-4)
                return base
            },
            exp() { 
                let exp = new Decimal(0.75)
                if (hasMilestone("ct",12)) exp = exp.add(0.3)
                if (hasUpgrade("ct",103)) exp = exp.add(3.95)
                if (hasUpgrade("ct",66)) exp = exp.add(upgradeEffect("ct",66))
                return exp
            },
            exp2() { 
                let exp = decimalHalf
                if (hasUpgrade("ct",51)) exp = exp.add(0.15)
                return exp
            },
            total() {
                let total = getBuyableAmount("ct", 22)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x.pow(tmp.ct.buyables[22].exp));
            },
            effect2() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base2
                let eff = Decimal.mul(base, x.pow(tmp.ct.buyables[22].exp2))
                if (eff.gte(0.575)) eff = eff.div(0.575).log10().add(0.575)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Buyables") return
                let extra = ""
                let dis = "Raise CRNA effect to "+format(this.base())+"^x<sup>"+format(tmp.ct.buyables[22].exp)+"</sup>, and increase 'CRNA Log' base by "+format(this.base2())+"x<sup>"+format(tmp.ct.buyables[22].exp2)+"</sup>"
                return dis + ".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" CTNA\n\
                Effect: ^" + format(tmp[this.layer].buyables[this.id].effect)+", +"+format(tmp[this.layer].buyables[this.id].effect2)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 22)) + extra
            },
            unlocked() { return hasMilestone("ct", 10) }, 
            canAfford() {
                    return player.ct.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",12)) player.ct.points = player.ct.points.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.points
                let target = Decimal.log10(s.div(Decimal.pow(10,3273))).div(3).root(2.5)
                if (target.gte(80)) target = target.div(80).pow(0.5).mul(80)
                if (target.gte(250)) target = target.div(250).pow(0.4).mul(250)
                if (target.gte(1e150)) target = target.log10().div(150).pow(0.4).mul(150).pow10()
                target = target.ceil()
                let cost = Decimal.pow(1e3, target.sub(1).pow(2.5)).mul(Decimal.pow(10,3273))
                let diff = target.sub(player.ct.buyables[22])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",12)) player.ct.points = player.ct.points.sub(cost).max(0)
                    player.ct.buyables[22] = player.ct.buyables[22].add(diff)
                }
            },
            style: {"width":"150px","height":"150px"}
        },
        23: {
			title: "CTNA Boost",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(1e40)) x = x.div(1e40).pow(3).mul(1e40)
                if (x.gte(3e6)) x = Decimal.pow(1.000001,x.sub(3e6)).mul(3e6)
                if (x.gte(5e4)) x = x.div(5e4).pow(3).mul(5e4)
                if (x.gte(150)) x = x.div(150).pow(2.5).mul(150)
                if (x.gte(50)) x = x.div(50).pow(2).mul(50)
                let cost = Decimal.pow(1e10, x.pow(2.5).add(1505.95))
                return cost.floor()
            },
            base() { 
                let base = new Decimal(1.1)
                if (hasUpgrade("ct",46)) base = base.add(0.2)
                if (hasUpgrade("ct",72)) base = base.add(upgradeEffect("ct",72))
                return base
            },
            base2() { 
                let base = new Decimal(0.001)
                return base
            },
            exp() { 
                let exp = new Decimal(0.4)
                if (hasUpgrade("ct",46)) exp = exp.add(0.2)
                if (hasUpgrade("ct",81)) exp = exp.add(0.1)
                if (hasUpgrade("ct",92)) exp = exp.add(0.02)
                if (hasUpgrade("ct",63)) exp = exp.add(0.1)
                if (hasMilestone("ct",17)) exp = exp.add(0.18)
                return exp
            },
            exp2() { 
                let exp = decimalHalf
                if (hasUpgrade("ct",106)) exp = exp.add(0.5)
                return exp
            },
            total() {
                let total = getBuyableAmount("ct", 23)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x.pow(tmp.ct.buyables[23].exp));
            },
            effect2() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base2
                let eff = Decimal.mul(base, x.pow(tmp.ct.buyables[23].exp2))
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Buyables") return
                let extra = ""
                let dis = "Raise CTNA effect to "+format(this.base())+"^x<sup>"+format(tmp.ct.buyables[23].exp)+"</sup>, and increase 'After Exp' base by "+format(this.base2())+"x<sup>"+format(tmp.ct.buyables[23].exp2)+"</sup>"
                return dis + ".\n\
                Cost: " + format(tmp[this.layer].buyables[this.id].cost)+" CTNA\n\
                Effect: ^" + format(tmp[this.layer].buyables[this.id].effect)+", +"+format(tmp[this.layer].buyables[this.id].effect2)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 23)) + extra
            },
            unlocked() { return hasMilestone("ct", 11) }, 
            canAfford() {
                    return player.ct.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",12)) player.ct.points = player.ct.points.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.points
                let target = Decimal.log10(s.div(Decimal.pow(10,15059.5))).div(10).root(2.5)
                if (target.gte(50)) target = target.div(50).pow(0.5).mul(50)
                if (target.gte(150)) target = target.div(150).pow(0.4).mul(150)
                if (target.gte(5e4)) target = target.div(5e4).pow(1/3).mul(5e4)
                if (target.gte(3e6)) target = target.div(3e6).log(1.000001).add(3e6)
                if (target.gte(1e40)) target = target.div(1e40).pow(1/3).mul(1e40)
                target = target.ceil()
                let cost = Decimal.pow(1e10, target.sub(1).pow(2.5)).mul(Decimal.pow(10,15059.5))
                let diff = target.sub(player.ct.buyables[23])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",12)) player.ct.points = player.ct.points.sub(cost).max(0)
                    player.ct.buyables[23] = player.ct.buyables[23].add(diff)
                }
            },
            style: {"width":"150px","height":"150px"}
        },
        31: {
			title: "Corona Booster",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = x.add(1).pow(4).add(2)
                return cost.floor()
            },
            base() { 
                let base = new Decimal(0.058)
                return base
            },
            exp() { 
                let exp = new Decimal(0.35)
                return exp
            },
            total() {
                let total = getBuyableAmount("ct", 31)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x.pow(tmp.ct.buyables[31].exp));
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Coronas") return
                let extra = ""
                let dis = "Reduce CRNA log by "+format(this.base())+"x<sup>"+format(tmp.ct.buyables[31].exp)+"</sup>"
                if (player.ct.buyables[31].gte(2)) dis += " (MAXED)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Coronas\n\
                Effect: -" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 31)) + extra
            },
            unlocked() { return hasMilestone("ct", 12) }, 
            canAfford() {
                    return player.ct.corona.gte(tmp[this.layer].buyables[this.id].cost) && player.ct.buyables[31].lt(2) && !player.ct.inC},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.corona = player.ct.corona.sub(cost).max(0)
                    player.ct.spent = player.ct.spent.add(cost).max(0)
                    updateTemp()
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            style: {"width":"150px","height":"150px"}
        },
        32: {
			title: "Corona Booster",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = x.add(1).pow(4).add(2)
                return cost.floor()
            },
            base() { 
                let base = new Decimal(0.035)
                return base
            },
            base2() { 
                let base = new Decimal(0.24)
                return base
            },
            exp() { 
                let exp = new Decimal(0.35)
                return exp
            },
            total() {
                let total = getBuyableAmount("ct", 32)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x.pow(tmp.ct.buyables[32].exp));
            },
            effect2() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base2
                return Decimal.mul(base, x.pow(3));
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Coronas") return
                let extra = ""
                let dis = "Reduce CRNA log by "+format(this.base())+"x<sup>"+format(tmp.ct.buyables[32].exp)+"</sup> and increase After log exponent by " +format(this.base2())+"x<sup>3</sup>"
                if (player.ct.buyables[32].gte(2)) dis += " (MAXED)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Coronas\n\
                Effect: -" + format(tmp[this.layer].buyables[this.id].effect)+", +" + format(tmp[this.layer].buyables[this.id].effect2)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 32)) + extra
            },
            unlocked() { return hasMilestone("ct", 12) }, 
            canAfford() {
                    return player.ct.corona.gte(tmp[this.layer].buyables[this.id].cost) && player.ct.buyables[32].lt(2) && !player.ct.inC},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.corona = player.ct.corona.sub(cost).max(0)
                    player.ct.spent = player.ct.spent.add(cost).max(0)
                    updateTemp()
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            style: {"width":"150px","height":"150px"}
        },
        33: {
			title: "Corona Booster",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = x.add(1).pow(4).add(2)
                return cost.floor()
            },
            base() { 
                let base = new Decimal(0.287)
                return base
            },
            exp() { 
                let exp = decimalThree
                return exp
            },
            total() {
                let total = getBuyableAmount("ct", 33)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x.pow(tmp.ct.buyables[33].exp));
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Coronas") return
                let extra = ""
                let dis = "Increase After log exponent by "+format(this.base())+"x<sup>"+format(tmp.ct.buyables[33].exp)+"</sup>"
                if (player.ct.buyables[33].gte(2)) dis += " (MAXED)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Coronas\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 33)) + extra
            },
            unlocked() { return hasMilestone("ct", 12) }, 
            canAfford() {
                    return player.ct.corona.gte(tmp[this.layer].buyables[this.id].cost) && player.ct.buyables[33].lt(2) && !player.ct.inC},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.corona = player.ct.corona.sub(cost).max(0)
                    player.ct.spent = player.ct.spent.add(cost).max(0)
                    updateTemp()
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            style: {"width":"150px","height":"150px"}
        },
        41: {
			title: "CorVid",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(1e50)) x = x.div(1e50).pow(3).mul(1e50)
                if (x.gte(1e7)) x = x.div(1e7).pow(2).mul(1e7)
                if (x.gte(150)) x = Decimal.pow(1.03,x.sub(150)).mul(150)
                if (x.gte(20)) x = x.div(20).pow(3).mul(20)
                let cost = x.pow(this.cexp()).mul(6477025).add(1e10).pow10()
                return cost.floor()
            },
            cexp(){
                let exp = 5
                if (hasUpgrade("ct",66)) exp-=1
                return exp
            },
            total() {
                let total = getBuyableAmount("ct", 41)
                return total
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "CorVids") return
                let extra = ""
                let dis = "Gain 1 CorVid"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" CTNA\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 41)) + extra
            },
            unlocked() { return hasMilestone("ct", 13) }, 
            canAfford() {
                    return player.ct.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",15)) player.ct.points = player.ct.points.sub(cost).max(0)
                    player.ct.CorVid = player.ct.CorVid.add(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.points
                let target = s.log10().sub(1e10).div(6477025).root(this.cexp())
                if (target.gte(20)) target = target.div(20).pow(1/3).mul(20)
                if (target.gte(150)) target = target.div(150).log(1.03).add(150)
                if (target.gte(1e7)) target = target.div(1e7).pow(1/2).mul(1e7)
                if (target.gte(1e50)) target = target.div(1e50).pow(1/3).mul(1e50)
                target = target.ceil()
                let cost = target.sub(1).pow(5).mul(6477025).add(1e10).pow10()
                let diff = target.sub(player.ct.buyables[41])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",13)) player.ct.points = player.ct.points.sub(cost).max(0)
                    player.ct.buyables[41] = player.ct.buyables[41].add(diff)
                    player.ct.CorVid = player.ct.CorVid.add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        42: {
			title: "LaBas Gain",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let exp = 5
                if (hasUpgrade("ct",76)) exp -=2
                if (hasUpgrade("ct",105)) exp -=2
                if (x.gte(1e120)) x = x.log10().div(120).pow(2).mul(120).pow10()
                if (x.gte(1e100)) x = x.div(1e100).pow(3).mul(1e100)
                if (x.gte(200)) x = x.div(200).pow(2).mul(200)
                if (x.gte(100)) x = Decimal.pow(1.02,x.sub(100)).mul(100)
                if (x.gte(20)) x = x.div(20).pow(3).mul(20)
                let cost = x.pow(exp).mul(3e9).add(13560952591).pow10()
                return cost.floor()
            },
            base() { 
                let base = new Decimal(0.25)
                if (hasUpgrade("ct",73)) base = base.mul(4)
                if (hasUpgrade("ct",75)) base = base.mul(upgradeEffect("ct",75))
                if (hasUpgrade("ct",95)) base = base.mul(upgradeEffect("ct",95))
                return base.mul(tmp.ct.buyables[51].effect).mul(tmp.ct.buyables[62].effect).mul(tmp.ct.buyables[63].effect)
            },
            base2() { 
                let base = new Decimal(1.5)
                if (hasUpgrade("ct",104)) base = base.add(upgradeEffect("ct",104))
                return base
            },
            exp() { 
                let exp = decimalOne
                let x = player.ct.milestones.length*player.ct.upgrades.length
                if (hasUpgrade("ct",72)) exp = exp.add(0.5)
                if (hasUpgrade("ct",81)) exp = exp.add(0.5)
                if (hasUpgrade("ct",55)) exp = exp.add(2)
                if (hasUpgrade("ct",54)) exp = exp.add(upgradeEffect("ct",54))
                if (hasUpgrade("ct",56)) exp = exp.add(tmp.e.crme)
                if (hasUpgrade("ct",64)) exp = exp.add(upgradeEffect("ct",64))
                if (hasUpgrade("ct",86)) exp = exp.add(upgradeEffect("ct",86))
                if (hasUpgrade("ct",91)) exp = exp.add(upgradeEffect("ct",91))
                if (hasUpgrade("ct",93)) exp = exp.add(upgradeEffect("ct",93))
                if (hasMilestone("ct",14)) exp = exp.add(x*0.005)
                if (hasMilestone("ct",15)) exp = exp.add(x*0.01)
                if (hasMilestone("ct",16)) exp = exp.add(x*0.05)
                if (hasMilestone("ct",17)) exp = exp.add(x*0.1)
                return exp.add(tmp.ct.buyables[43].effect).add(tmp.ct.buyables[52].effect).add(tmp.ct.buyables[53].effect)
            },
            mul() { 
                let x = tmp[this.layer].buyables[this.id].total
                let base2 = tmp[this.layer].buyables[this.id].base2
                let mul = Decimal.pow(base2,x)
                return mul
            },
            total() {
                let total = getBuyableAmount("ct", 42)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let mul = tmp[this.layer].buyables[this.id].mul
                if (!hasUpgrade("ct",74)) mul = decimalOne
                return Decimal.mul(base, x.mul(player.ct.CorVid.pow(tmp.ct.buyables[42].exp))).mul(mul);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "CorVids") return
                let extra = ""
                let exp = "<sup>"+format(tmp.ct.buyables[42].exp)+"</sup>"
                if (tmp.ct.buyables[42].exp.eq(1)) exp = ""
                let dis = "Gain "+ format(this.base()) +" LaBas/s per CorVid"+exp
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" CTNA\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"/s\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 42)) + extra
            },
            unlocked() { return player.ct.buyables[41].gte(4) }, 
            canAfford() {
                    return player.ct.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",15)) player.ct.points = player.ct.points.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.points
                let exp = 5
                if (hasUpgrade("ct",76)) exp -=2
                if (hasUpgrade("ct",105)) exp -=2
                let target = s.log10().sub(13560952591).div(3e9).root(exp)
                if (target.gte(20)) target = target.div(20).pow(1/3).mul(20)
                if (target.gte(100)) target = target.div(100).log(1.02).add(100)
                if (target.gte(200)) target = target.div(200).pow(0.5).mul(200)
                if (target.gte(1e100)) target = target.div(1e100).pow(1/3).mul(1e100)
                if (target.gte(1e120)) target = target.log10().div(120).pow(1/2).mul(120).pow10()
                target = target.ceil()
                let cost = target.sub(1).pow(5).mul(6448564).add(1e10).pow10()
                let diff = target.sub(player.ct.buyables[42])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",13)) player.ct.points = player.ct.points.sub(cost).max(0)
                    player.ct.buyables[42] = player.ct.buyables[42].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        43: {
			title: "LaBas Exponent",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(5500)) x = x.div(5500).pow(this.cexp()).mul(5500)
                let cost = Decimal.pow(2,x.pow(1.45)).mul(1e48)
                return cost.floor()
            },
            base() { 
                let base = new Decimal(0.2)
                if (hasUpgrade("ct",102)) base = base.add(0.1)
                if (hasUpgrade("ct",61)) base = base.add(upgradeEffect("ct",61))
                return base
            },
            cexp(){
                let exp = 3
                if (hasUpgrade("ct",65)) exp--
                return exp
            },
            total() {
                let total = getBuyableAmount("ct", 43)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "CorVids") return
                let extra = ""
                let dis = "Add "+ format(this.base()) +" to 'LaBas Gain' exponent"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" LaBas\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 43)) + extra
            },
            unlocked() { return hasMilestone("ct",14) }, 
            canAfford() {
                    return player.ct.LaBas.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",15)) player.ct.LaBas = player.ct.LaBas.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.LaBas
                let target = s.div(1e48).log(2).root(1.45)
                if (target.gte(5500)) target = target.div(5500).root(this.cexp()).mul(5500)
                target = target.ceil()
                let cost = Decimal.pow(2,target.sub(1).pow(1.45)).mul(1e48)
                let diff = target.sub(player.ct.buyables[43])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",15)) player.ct.LaBas = player.ct.LaBas.sub(cost).max(0)
                    player.ct.buyables[43] = player.ct.buyables[43].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        51: {
			title: "LaBas Gain 2",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(20,x.pow(1.35)).mul(5e165)
                return cost.floor()
            },
            base() { 
                let base = tmp.ct.buyables[42].exp
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 51)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "CorVids") return
                let extra = ""
                let dis = "Multiply LaBas gain by "+ format(this.base()) +" ('LaBas Gain' exponent)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" LaBas\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 51)) + extra
            },
            unlocked() { return hasMilestone("ct",15) }, 
            canAfford() {
                    return player.ct.LaBas.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",15)) player.ct.LaBas = player.ct.LaBas.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.LaBas
                let target = s.div(5e165).log(20).root(1.35)
                target = target.ceil()
                let cost = Decimal.pow(20,target.sub(1).pow(1.35)).mul(5e165)
                let diff = target.sub(player.ct.buyables[51])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",15)) player.ct.LaBas = player.ct.LaBas.sub(cost).max(0)
                    player.ct.buyables[51] = player.ct.buyables[51].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        52: {
			title: "LaBas Exponent 2",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(500)) x = x.div(500).pow(this.cexp()).mul(500)
                let cost = Decimal.pow(25,x.pow(1.5)).mul(3e176)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = x.div(75).add(1.3).ln().pow(0.9).mul(1.5)
                return base
            },
            cexp(){
                let exp = 3
                if (hasUpgrade("ct",65)) exp--
                return exp
            },
            total() {
                let total = getBuyableAmount("ct", 52)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "CorVids") return
                let extra = ""
                let dis = "Add "+ format(this.base()) +" to 'LaBas Gain' exponent"
                let shift = shiftDown?" (ln(1.3+x/75)^0.9*1.5)":""
                return dis + shift + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" LaBas\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 52)) + extra
            },
            unlocked() { return player.ct.buyables[51].gte(3) }, 
            canAfford() {
                    return player.ct.LaBas.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",15)) player.ct.LaBas = player.ct.LaBas.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.LaBas
                let target = s.div(3e176).log(25).root(1.5)
                if (target.gte(500)) target = target.div(500).root(this.cexp()).mul(500)
                target = target.ceil()
                let cost = Decimal.pow(25,target.sub(1).pow(1.5)).mul(3e176)
                let diff = target.sub(player.ct.buyables[52])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",15)) player.ct.LaBas = player.ct.LaBas.sub(cost).max(0)
                    player.ct.buyables[52] = player.ct.buyables[52].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        53: {
			title: "LaBas Exponent 3",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(1e40)) x = x.div(1e40).pow(3).mul(1e40)
                if (x.gte(500)) x = x.div(500).pow(this.cexp()).mul(500)
                let cost = Decimal.pow(1e5,x.pow(1.6)).mul(Decimal.pow(10,2411)).mul(3)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = x.div(100).add(1)
                return base
            },
            cexp(){
                let exp = 3
                if (hasUpgrade("ct",65)) exp--
                return exp
            },
            total() {
                let total = getBuyableAmount("ct", 53)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "CorVids") return
                let extra = ""
                let dis = "Add "+ format(this.base()) +" to 'LaBas Gain' exponent"
                let shift = shiftDown?" (1+x/100)":""
                return dis + shift + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" LaBas\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 53)) + extra
            },
            unlocked() { return hasMilestone("ct",16) }, 
            canAfford() {
                    return player.ct.LaBas.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",15)) player.ct.LaBas = player.ct.LaBas.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.LaBas
                let target = s.div(Decimal.pow(10,2411).mul(3)).log(1e5).root(1.6)
                if (target.gte(500)) target = target.div(500).root(this.cexp()).mul(500)
                if (target.gte(1e40)) target = target.div(1e40).root(3).mul(1e40)
                target = target.ceil()
                let cost = Decimal.pow(1e5,target.sub(1).pow(1.6)).mul(Decimal.pow(10,2411).mul(3))
                let diff = target.sub(player.ct.buyables[53])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",15)) player.ct.LaBas = player.ct.LaBas.sub(cost).max(0)
                    player.ct.buyables[53] = player.ct.buyables[53].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        61: {
			title: "CorVid Gain",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(tet10(10))) x = tet10(slog(x).div(10).root(0.6).mul(10))
                if (x.gte(1e15)) x = x.div(1e15).pow(2).mul(1e15)
                if (x.gte(1e8)) x = Decimal.pow(1.008,x.sub(1e8).div(1e6)).mul(1e8)
                let cost = Decimal.pow(1e10,x.pow(1.7)).mul(Decimal.pow(10,13061))
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = x.pow(x.pow(this.exp())).div(100).add(1)
                if (hasUpgrade("ct",105)) base = base.mul(upgradeEffect("ct",105))
                if (hasUpgrade("ct",106)) base = base.mul(upgradeEffect("ct",106))
                if (hasUpgrade("ct",62)) base = base.mul(upgradeEffect("ct",62))
                if (hasUpgrade("ct",63)) base = base.mul(upgradeEffect("ct",63))
                if (hasUpgrade("ct",112)) base = base.mul(upgradeEffect("ct",112))
                if (hasMilestone("ct",20)) base = base.mul(milestoneEffect("ct",20))
                return base.mul(tmp.ct.buyables[63].effect2).mul(tmp.ct.buyables[71].effect).mul(tmp.ct.buyables[81].effect)
            },
            exp() {
                let exp = new Decimal(0.05)
                if (hasUpgrade("ct",63)) exp = exp.add(0.05)
                if (hasUpgrade("ct",66)) exp = exp.add(0.05)
                if (hasUpgrade("ct",113)) exp = exp.add(upgradeEffect("ct",113))
                return exp.add(tmp.ct.buyables[73].effect)
            },
            total() {
                let total = getBuyableAmount("ct", 61)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "CorVids") return
                let extra = ""
                let dis = "Gain "+ format(this.base()) +" CorVids per second"
                let shift = shiftDown?" (1+x^x<sup>"+ format(this.exp()) +"</sup>/100)":""
                return dis + shift + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" LaBas\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 61)) + extra
            },
            unlocked() { return hasMilestone("ct",17) }, 
            canAfford() {
                    return player.ct.LaBas.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",15)) player.ct.LaBas = player.ct.LaBas.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.LaBas
                let target = s.div(Decimal.pow(10,13061)).log(1e10).root(1.7)
                if (target.gte(1e8)) target = target.div(1e8).log(1.008).mul(1e6).add(1e8)
                if (target.gte(1e15)) target = target.div(1e15).pow(.5).mul(1e15)
                if (target.gte(tet10(10))) target = tet10(slog(target).div(10).pow(0.6).mul(10))
                target = target.ceil()
                let cost = Decimal.pow(1e10,target.sub(1).pow(1.7)).mul(Decimal.pow(10,13061))
                let diff = target.sub(player.ct.buyables[61])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",15)) player.ct.LaBas = player.ct.LaBas.sub(cost).max(0)
                    player.ct.buyables[61] = player.ct.buyables[61].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        62: {
			title: "LaBas Gain 3",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(100,x.pow(1.4)).mul(Decimal.pow(10,11.5e4))
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.LaBas.max(10).log10()
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 62)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "CorVids") return
                let extra = ""
                let dis = "Multiply LaBas gain by "+ format(this.base()) +" (based on LaBas)"
                let shift = shiftDown?" (log10(x))":""
                return dis + shift + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" LaBas\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 62)) + extra
            },
            unlocked() { return hasUpgrade("ct",106) }, 
            canAfford() {
                    return player.ct.LaBas.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",15)) player.ct.LaBas = player.ct.LaBas.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.LaBas
                let target = s.div(Decimal.pow(10,11.5e4)).log(100).root(1.4)
                target = target.ceil()
                let cost = Decimal.pow(100,target.sub(1).pow(1.4)).mul(Decimal.pow(10,11.5e4))
                let diff = target.sub(player.ct.buyables[62])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",15)) player.ct.LaBas = player.ct.LaBas.sub(cost).max(0)
                    player.ct.buyables[62] = player.ct.buyables[62].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        63: {
			title: "CorVid LaBaser",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(2e6)) x = x.div(2e6).pow(3).mul(2e6)
                if (x.gte(1e6)) x = Decimal.pow(1.000003,x.sub(1e6)).mul(1e6)
                if (x.gte(2e5)) x = x.div(2e5).pow(3).mul(2e5)
                if (x.gte(400)) x = x.div(400).pow(3).mul(400)
                if (x.gte(100)) x = x.div(100).pow(2).mul(100)
                let cost = Decimal.pow(Decimal.pow(10,1000),x.pow(2)).mul(Decimal.pow(10,1111111))
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = powExp(player.ct.CorVid.add(1),3)
                return base
            },
            base2(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.LaBas.max(10).log10().max(10).log10().pow(0.175)
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 63)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            effect2() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base2
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "CorVids") return
                let extra = ""
                let dis = "Multiply LaBas gain by "+ format(this.base()) +" (based on CorVids) and CorVid gain by "+ format(this.base2()) +" (based on LaBas)"
                let shift = shiftDown?"<br>LaBas: (10^(log10(CorVids+1)^3)), CorVids: (log10(log10(LaBas+10)+10)^0.175)":""
                return dis + shift + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" LaBas\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x, "+format(tmp[this.layer].buyables[this.id].effect2)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 63)) + extra
            },
            unlocked() { return hasMilestone("ct",19) }, 
            canAfford() {
                    return player.ct.LaBas.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",15)) player.ct.LaBas = player.ct.LaBas.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.LaBas
                let target = s.div(Decimal.pow(10,1111111)).log(Decimal.pow(10,1000)).root(2)
                if (target.gte(100)) target = target.div(100).root(2).mul(100)
                if (target.gte(400)) target = target.div(400).root(3).mul(400)
                if (target.gte(2e5)) target = target.div(2e5).root(3).mul(2e5)
                if (target.gte(1e6)) target = target.div(1e6).log(1.000003).add(1e6)
                if (target.gte(2e6)) target = target.div(2e6).root(3).mul(2e6)
                target = target.ceil()
                let cost = Decimal.pow(Decimal.pow(10,1000),target.sub(1).pow(2)).mul(Decimal.pow(10,1111111))
                let diff = target.sub(player.ct.buyables[63])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",15)) player.ct.LaBas = player.ct.LaBas.sub(cost).max(0)
                    player.ct.buyables[63] = player.ct.buyables[63].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        71: {
			title: "Anti-Masker",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(tet10(6.9))) x = tet10(slog(x).div(6.9).root(0.1).mul(6.9))
                if (x.gte(tet10(5.34))) x = tet10(slog(x).div(5.34).root(0.2).mul(5.34))
                if (x.gte(tet10(5.2))) x = tet10(slog(x).div(5.2).root(0.3).mul(5.2))
                if (x.gte(slogadd(1e3,3))) x = tet10(slog(x).div(Decimal.log10(1e3).log10().add(4)).pow(5).mul(Decimal.log10(1e3).log10().add(4)))
                if (x.gte(slogadd(1e300,2))) x = x.log10().root(3.33333e297).pow10().pow10()
                if (x.gte(slogadd(1e30,2))) x = x.log10().root(3.33333e28).pow10().pow10()
                if (x.gte(Decimal.pow(10,Decimal.pow(10,1e5)))) x = Decimal.pow(1.0001,x.log10().log10().sub(1e5)).mul(1e5).pow10().pow10()
                if (x.gte(Decimal.pow(10,1e9))) x = Decimal.pow(1.02,x.log10().div(1e7).sub(100)).mul(1e9).pow10()
                let cost = Decimal.pow(10,x.pow(1.25)).mul(1e58)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.Am.add(1).pow(0.5).add(1)
                if (base.gte(1e4)) base = base.log10().add(6).pow(4)
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 71)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers") return
                let extra = ""
                let dis = "Multiply CorVid gain by "+ format(this.base()) +" (based on Anti-Maskers)"
                let shift = shiftDown?(this.base().gte(1e4)?" (log10((x+1)^0.5+1)+6)^4":" ((x+1)^0.5+1)"):""
                return dis + shift + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" CorVids\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 71)) + extra
            },
            unlocked() { return hasMilestone("ct",20) }, 
            canAfford() {
                    return player.ct.CorVid.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",112)) player.ct.CorVid = player.ct.CorVid.sub(cost).max(0)
                    player.ct.Am = player.ct.Am.add(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {//10^(1.01^(log10(x)/1e7-100)*1e9)
                let s = player.ct.CorVid
                let target = s.div(1e58).log(10).root(1.25)
                if (target.gte(Decimal.pow(10,1e9))) target = target.log10().div(1e9).log(1.02).add(100).mul(1e7).pow10()
                if (target.gte(Decimal.pow(10,Decimal.pow(10,1e5)))) target = target.log10().log10().div(1e5).log(1.0001).add(1e5).pow10().pow10()
                if (target.gte(slogadd(1e30,2))) target = target.log10().log10().pow(3.33333e28).pow10()
                if (target.gte(slogadd(1e300,2))) target = target.log10().log10().pow(3.33333e297).pow10()
                if (target.gte(slogadd(1e3,3))) target = tet10(slog(target).div(Decimal.log10(1e3).log10().add(4)).pow(.2).mul(Decimal.log10(1e3).log10().add(4)))
                if (target.gte(tet10(5.2))) target = tet10(slog(target).div(5.2).pow(0.3).mul(5.2))
                if (target.gte(tet10(5.34))) target = tet10(slog(target).div(5.34).pow(0.2).mul(5.34))
                if (target.gte(tet10(6.9))) target = tet10(slog(target).div(6.9).pow(0.1).mul(6.9))
                target = target.ceil()
                let cost = Decimal.pow(10,target.sub(1).pow(1.25)).mul(1e58)
                let diff = target.sub(player.ct.buyables[71])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",112)) player.ct.CorVid = player.ct.CorVid.sub(cost).max(0)
                    player.ct.Am = player.ct.Am.add(diff)
                    player.ct.buyables[71] = player.ct.buyables[71].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        72: {
			title: "Upgrade Boost",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(tet10(6.9))) x = tet10(slog(x).div(6.9).root(0.1).mul(6.9))
                if (x.gte(tet10(5.34))) x = tet10(slog(x).div(5.34).root(0.2).mul(5.34))
                if (x.gte(tet10(5.2))) x = tet10(slog(x).div(5.2).root(0.3).mul(5.2))
                if (x.gte(slogadd(1e3,3))) x = tet10(slog(x).div(Decimal.log10(1e3).log10().add(4)).pow(5).mul(Decimal.log10(1e3).log10().add(4)))
                if (x.gte(slogadd(1e300,2))) x = x.log10().root(3.33333e297).pow10().pow10()
                if (x.gte(slogadd(1e30,2))) x = x.log10().root(3.33333e28).pow10().pow10()
                if (x.gte(Decimal.pow(10,Decimal.pow(10,1e5)))) x = Decimal.pow(1.0001,x.log10().log10().sub(1e5)).mul(1e5).pow10().pow10()
                if (x.gte(75)) x = x.div(75).pow(1.3).mul(75)
                if (x.gte(50)) x = Decimal.pow(1.05,x.sub(50).pow(tmp.ct.buyables[72].costExp)).mul(50)
                let cost = Decimal.pow(1e3,x.pow(1.4)).mul(1e113)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.CorVid.add(10).log10().add(10).log10()
                return base.add(tmp.ct.buyables[82].effect.mul(x))
            },
            costExp() {
                let exp = decimalOne
                if (hasUpgrade("ct",123)) exp = exp.mul(0.85)
                if (hasUpgrade("ct",135)) exp = exp.mul(0.9)
                if (hasUpgrade("ct",141)) exp = exp.mul(upgradeEffect("ct",141))
                return exp
            },
            total() {
                let total = getBuyableAmount("ct", 72)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let exp = decimalOne
                if (hasUpgrade("ct",135)) exp = exp.add(0.2)
                if (hasUpgrade("ct",144)) exp = exp.mul(upgradeEffect("ct",144))
                return Decimal.pow(base, x.pow(exp));
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers") return
                let extra = ""
                let dis = "Raise 'Upgraded Log' upg amt to "+ format(this.base()) +" (based on CorVids)"
                let shift = shiftDown?" (log10(log10(x+10)+10))":""
                return dis + shift + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" CorVids\n\
                Effect: ^" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 72)) + extra
            },
            unlocked() { return player.ct.buyables[71].gte(25) }, 
            canAfford() {
                    return player.ct.CorVid.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.CorVid = player.ct.CorVid.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() { //log1.05(t/50)^(1/y)+50=x
                let s = player.ct.CorVid
                let target = s.div(1e113).log(1e3).root(1.4)
                let exp = tmp.ct.buyables[72].costExp
                if (target.gte(50)) target = target.div(50).log(1.05).root(exp).add(50)
                if (target.gte(75)) target = target.div(75).root(1.3).mul(75)
                if (target.gte(Decimal.pow(10,Decimal.pow(10,1e5)))) target = target.log10().log10().div(1e5).log(1.0001).add(1e5).pow10().pow10()
                if (target.gte(slogadd(1e30,2))) target = target.log10().log10().pow(3.33333e28).pow10()
                if (target.gte(slogadd(1e300,2))) target = target.log10().log10().pow(3.33333e297).pow10()
                if (target.gte(slogadd(1e3,3))) target = tet10(slog(target).div(Decimal.log10(1e3).log10().add(4)).pow(.2).mul(Decimal.log10(1e3).log10().add(4)))
                if (target.gte(tet10(5.2))) target = tet10(slog(target).div(5.2).pow(0.3).mul(5.2))
                if (target.gte(tet10(5.34))) target = tet10(slog(target).div(5.34).pow(0.2).mul(5.34))
                if (target.gte(tet10(6.9))) target = tet10(slog(target).div(6.9).pow(0.1).mul(6.9))
                target = target.ceil()
                let cost = Decimal.pow(1e3,target.sub(1).pow(1.4)).mul(1e113)
                let diff = target.sub(player.ct.buyables[72])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",123)) player.ct.CorVid = player.ct.CorVid.sub(cost).max(0)
                    player.ct.buyables[72] = player.ct.buyables[72].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        73: {
			title: "CorVid Exp",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(10,Decimal.pow(1.3,x.pow(tmp.ct.buyables[73].costexp).pow(1.2))).mul(1e176)
                return cost.floor()
            },
            costexp() { 
                let exp = decimalOne
                if (hasUpgrade("ct",154)) exp = exp.mul(0.75)
                return exp
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = new Decimal(0.005)
                if (hasUpgrade("ct",143)) base = base.add(upgradeEffect("ct",143))
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 73)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.mul(base, x)
                if (eff.gte(2)) eff = eff.div(2).pow(0.3).mul(2)
                return eff
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers") return
                let extra = ""
                let dis = "Add "+ format(this.base()) + " to 'CorVid Gain' exponent"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" CorVids\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 73)) + extra
            },
            unlocked() { return player.ct.buyables[72].gte(9) }, 
            canAfford() {
                    return player.ct.CorVid.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.CorVid = player.ct.CorVid.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.CorVid
                let target = s.div(1e176).log(10).log(1.3).root(1.2).root(tmp.ct.buyables[73].costexp)
                target = target.ceil()
                let cost = Decimal.pow(10,target.sub(1).pow(1.2)).mul(1e176)
                let diff = target.sub(player.ct.buyables[73])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",15)) player.ct.CorVid = player.ct.CorVid.sub(cost).max(0)
                    player.ct.buyables[73] = player.ct.buyables[73].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        81: {
			title: "CorVid Boost",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1e9,x.pow(1.45)).mul(Decimal.pow(10,875))
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.buyables[41].add(1)
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 81)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers") return
                let extra = ""
                let dis = "Multiply CorVid gain by "+ format(this.base()) + " (Bought CorVids)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" CorVids\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 81)) + extra
            },
            unlocked() { return player.ct.buyables[73].gte(15) }, 
            canAfford() {
                    return player.ct.CorVid.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.CorVid = player.ct.CorVid.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.CorVid
                let target = s.div(Decimal.pow(10,875)).log(1e9).root(1.45)
                target = target.ceil()
                let cost = Decimal.pow(1e9,target.sub(1).pow(1.45)).mul(Decimal.pow(10,875))
                let diff = target.sub(player.ct.buyables[81])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",114)) player.ct.CorVid = player.ct.CorVid.sub(cost).max(0)
                    player.ct.buyables[81] = player.ct.buyables[81].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        82: {
			title: "Upgrade Booster",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1e100,Decimal.pow(1.5,x.pow(tmp.ct.buyables[82].costexp).pow(1.25))).mul(Decimal.pow(10,1314))
                return cost.floor()
            },
            costexp() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let exp = decimalOne
                if (hasUpgrade("ct",136)) exp = exp.mul(0.75)
                if (hasUpgrade("ct",154)) exp = exp.mul(0.75)
                return exp
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = new Decimal(0.002)
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 82)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let exp = decimalOne
                if (hasUpgrade("ct",136)) exp = exp.add(1)
                return Decimal.mul(base, x.pow(exp));
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers") return
                let extra = ""
                let dis = "Add "+ format(this.base()) + " to 'Upgrade Boost' base per 'Upgrade Boost'"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" CorVids\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 82)) + extra
            },
            unlocked() { return player.ct.buyables[81].gte(17) }, 
            canAfford() {
                    return player.ct.CorVid.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.CorVid = player.ct.CorVid.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {//1e100^1.5^x^y*1e1314
                let s = player.ct.CorVid
                let target = s.div(Decimal.pow(10,1314)).log(1e100).log(1.5).root(tmp.ct.buyables[82].costexp).root(1.25)
                target = target.ceil()
                let cost = Decimal.pow(1e100,Decimal.pow(1.5,target.sub(1).pow(tmp.ct.buyables[82].costexp).pow(1.25))).mul(Decimal.pow(10,1314))
                let diff = target.sub(player.ct.buyables[82])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasMilestone("ct",15)) player.ct.CorVid = player.ct.CorVid.sub(cost).max(0)
                    player.ct.buyables[82] = player.ct.buyables[82].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        83: {
			title: "AM Booster",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                x = x.mul(tmp.ct.buyables[83].scaling).pow(tmp.ct.buyables[83].costexp)
                let y = x
                if (hasUpgrade("ct",171)) y = x.div(5).add(1)
                let cost = Decimal.pow(Decimal.pow(10,1000),y.pow(x.div(5).add(1))).mul(Decimal.pow(10,5249))
                return cost.floor()
            },
            scaling() { 
                let exp = decimalOne
                if (hasUpgrade("ct",163)) exp = exp.div(1.2)
                return exp
            },
            costexp() { 
                let exp = decimalOne
                if (hasUpgrade("ct",196)) exp = exp.mul(0.7)
                return exp
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = new Decimal(0.01)
                if (hasUpgrade("ct",153)) base = base.add(0.01)
                if (hasUpgrade("ct",163)) base = base.add(0.005)
                if (hasUpgrade("ct",164)) base = base.add(upgradeEffect("ct",164))
                if (hasUpgrade("ct",173)) base = base.add(upgradeEffect("ct",173))
                return base
            },
            base2(x=player[this.layer].buyables[this.id]) { 
                let base = new Decimal(1.2)
                if (hasUpgrade("ct",153)) base = base.add(upgradeEffect("ct",153))
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 83)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let exp = decimalOne
                let eff = Decimal.mul(base, x.pow(exp))
                if (eff.gte(0.5)) eff = Decimal.sub(1,eff.recip().div(4)).mul(0.92).add(0.04)
                if (eff.gte(0.7) && !hasUpgrade("ct",175)) eff = eff.pow(2).mul(0.58).add(0.42)
                return eff.min(0.959999)
            },
            effect2() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base2
                let exp = decimalOne
                return Decimal.pow(base, x.pow(exp));
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers") return
                let extra = ""
                let sc=""
                let dis = "Add "+ format(tmp.ct.buyables[83].base) + " to AM exponent and raise AM effect to "+ format(tmp.ct.buyables[83].base2)
                if (tmp.ct.buyables[83].effect.gte(0.5)) sc = " (softcapped)"
                if (tmp.ct.buyables[83].effect.gte(0.7) && !hasUpgrade("ct",175)) sc = " (softcapped)<sup>2</sup>"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Maskers\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect,4)+sc+", ^" + format(tmp[this.layer].buyables[this.id].effect2)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 83)) + extra
            },
            unlocked() { return hasUpgrade("ct",151) }, 
            canAfford() {
                    return player.ct.Am.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",171)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() { 
                let s = player.ct.Am
                let target = s.div(Decimal.pow(10,5249)).log(10).div(1e3).ssqrt().sub(1).mul(5).root(tmp.ct.buyables[83].costexp).div(tmp.ct.buyables[83].scaling)
                target = target.ceil()
                let cost = Decimal.pow(10,target.sub(1).pow(1.25)).mul(1e177)
                let diff = target.sub(player.ct.buyables[83])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",171)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player.ct.buyables[83] = player.ct.buyables[83].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        91: {
			title: "Constant Bet",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1.2,x.pow(1.1)).mul(1e3)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = tmp.ct.buyables[103].effect.mul(x).add(200)
                if (hasUpgrade("ct",121)) base = base.mul(upgradeEffect("ct",121))
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 91)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let exp = decimalOne
                let exp2 = decimalOne
                if (hasUpgrade("ct",134)) exp = exp.add(1)
                if (hasUpgrade("ct",161)) exp2 = exp2.add(.5)
                return Decimal.mul(base, powExp(x.pow(exp),exp2));
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Roulette") return
                let extra = ""
                let dis = "Add "+ format(this.base()) + " to "+makeBlue("c")
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Maskers\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 91)) + extra
            },
            unlocked() { return hasUpgrade("ct",113) }, 
            canAfford() {
                    return player.ct.Am.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",131)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(x) {
                let s = player.ct.Am
                let target = s.div(1e3).log(1.2).root(1.1)
                target = target.ceil()
                let cost = Decimal.pow(1.2,target.sub(1).pow(1.1)).mul(1e3)
                let diff = target.sub(player.ct.buyables[91]).min(x)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",131)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player.ct.buyables[91] = player.ct.buyables[91].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        92: {
			title: "Bet Multiplier",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(5000)) x = x.div(5000).pow(2).mul(5000)
                if (x.gte(500)) x = x.div(500).pow(1.25).mul(500)
                let cost = Decimal.pow(2,x.pow(1.1)).mul(1e4)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = new Decimal(1.5)
                if (hasUpgrade("ct",124)) base = base.add(upgradeEffect("ct",113))
                if (hasUpgrade("ct",131)) base = base.add(upgradeEffect("ct",131))
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 92)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Roulette") return
                let extra = ""
                let dis = "Multiply bet amount by "+ format(this.base())
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Maskers\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 92)) + extra
            },
            unlocked() { return hasUpgrade("ct",114) }, 
            canAfford() {
                    return player.ct.Am.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",133)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(x) { 
                let s = player.ct.Am
                let target = s.div(1e4).log(2).root(1.1)
                if (target.gte(500)) target = target.div(500).pow(0.8).mul(500)
                if (target.gte(5000)) target = target.div(5000).pow(.5).mul(5000)
                target = target.ceil()
                let cost = Decimal.pow(2,target.sub(1).pow(1.1)).mul(1e4)
                let diff = target.sub(player.ct.buyables[92]).min(x)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",133)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player.ct.buyables[92] = player.ct.buyables[92].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        93: {
			title: "Linear Bet",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1.3,x.pow(1.2)).mul(3e7)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.buyables[72].div(20).add(tmp.ct.buyables[111].effect.mul(player.ct.buyables[101]))
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 93)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let exp = decimalOne
                let exp2 = decimalOne
                if (hasUpgrade("ct",134)) exp = exp.add(1)
                if (hasUpgrade("ct",162)) exp2 = exp2.add(.5)
                return Decimal.mul(base, powExp(x.pow(exp),exp2));
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Roulette") return
                let extra = ""
                let dis = "Add "+ format(this.base()) + " to "+makeBlue("b")+" (0.05 per 'Upgrade Boost')"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Maskers\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 93)) + extra
            },
            unlocked() { return player.ct.buyables[92].gte(10) }, 
            canAfford() {
                    return player.ct.Am.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",133)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(x) {
                let s = player.ct.Am
                let target = s.div(3e7).log(1.3).root(1.2)
                target = target.ceil()
                let cost = Decimal.pow(1.3,target.sub(1).pow(1.2)).mul(3e7)
                let diff = target.sub(player.ct.buyables[93]).min(x)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",133)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player.ct.buyables[93] = player.ct.buyables[93].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        101: {
			title: "Bet Multiplier 2",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(10,x.pow(1.25)).mul(1e13)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.buyables[91].max(2).ln()
                if (hasUpgrade("ct",146)) base = player.ct.buyables[91].max(2).log(2)
                if (hasUpgrade("ct",152)) base = player.ct.buyables[91].max(2).log(1.5)
                return base
                
            },
            total() {
                let total = getBuyableAmount("ct", 101)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Roulette") return
                let extra = ""
                let dis = "Multiply bet amount by "+ format(this.base()) + " (based on 'Constant Bet')"
                let shift = shiftDown?(hasUpgrade("ct",152)?" (log1.5(x))":hasUpgrade("ct",146)?" (log2(x))":" (ln(x))"):""
                return dis + shift + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Maskers\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 101)) + extra
            },
            unlocked() { return player.ct.buyables[93].gte(25) }, 
            canAfford() {
                    return player.ct.Am.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(x) {
                let s = player.ct.Am
                let target = s.div(1e13).log(10).root(1.25)
                target = target.ceil()
                let cost = Decimal.pow(10,target.sub(1).pow(1.25)).mul(1e13)
                let diff = target.sub(player.ct.buyables[101]).min(x)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player.ct.buyables[101] = player.ct.buyables[101].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        102: {
			title: "Streak Multiplier",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                x = x.pow(tmp.ct.buyables[102].costexp)
                let cost = Decimal.pow(10,x.pow(x)).mul(1e25)
                return cost.floor()
            },
            costexp() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let exp = decimalOne
                if (hasUpgrade("ct",156)) exp = exp.mul(0.8)
                if (hasUpgrade("ct",163)) exp = exp.mul(0.8)
                if (hasUpgrade("ct",165)) exp = exp.mul(0.8)
                if (hasUpgrade("ct",166)) exp = exp.mul(0.7)
                if (hasUpgrade("ct",174)) exp = exp.mul(0.8)
                return exp
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = new Decimal(1.2)
                if (hasUpgrade("ct",155)) base = base.add(upgradeEffect("ct",155))
                if (hasUpgrade("ct",162)) base = base.add(tmp.ct.getAexp)
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 102)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Roulette") return
                let extra = ""
                let dis = "Multiply Win Streak multiplier by "+ format(this.base())
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Maskers\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 102)) + extra
            },
            unlocked() { return player.ct.buyables[101].gte(8) }, 
            canAfford() {
                    return player.ct.Am.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(x) {
                let s = player.ct.Am
                let target = s.div(1e25).log(10).ssqrt().root(tmp.ct.buyables[102].costexp)
                target = target.ceil()
                let cost = Decimal.pow(10,target.sub(1).tetrate(2)).mul(1e25)
                let diff = target.sub(player.ct.buyables[102]).min(x)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player.ct.buyables[102] = player.ct.buyables[102].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        103: {
			title: "Constant Bettor",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(5,x.pow(1.25)).mul(1e36)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = decimalOne
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 103)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Roulette") return
                let extra = ""
                let dis = "Add "+ format(this.base()) + " to 'Constant Bet' base per 'Constant Bet'"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Maskers\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 103)) + extra
            },
            unlocked() { return player.ct.buyables[101].gte(13) }, 
            canAfford() {
                    return player.ct.Am.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(x) {
                let s = player.ct.Am
                let target = s.div(1e36).log(5).root(1.25)
                target = target.ceil()
                let cost = Decimal.pow(5,target.sub(1).pow(1.25)).mul(1e36)
                let diff = target.sub(player.ct.buyables[103]).min(x)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player.ct.buyables[103] = player.ct.buyables[103].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        111: {
			title: "Linear Bettor",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(7,x.pow(1.25)).mul(1e45)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = decimalOne
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 111)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Roulette") return
                let extra = ""
                let dis = "Add "+ format(this.base()) + " to 'Linear Bet' base per 'Bet Multiplier 2'"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Maskers\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 111)) + extra
            },
            unlocked() { return player.ct.buyables[103].gte(9) }, 
            canAfford() {
                    return player.ct.Am.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(x) {
                let s = player.ct.Am
                let target = s.div(1e45).log(7).root(1.25)
                target = target.ceil()
                let cost = Decimal.pow(7,target.sub(1).pow(1.25)).mul(1e45)
                let diff = target.sub(player.ct.buyables[111]).min(x)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player.ct.buyables[111] = player.ct.buyables[111].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        112: {
			title: "Quadratic Bet",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(4,x.pow(1.3)).mul(2.5e72)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = tmp.ct.buyables[122].effect.mul(player.ct.buyables[113]).add(0.01)
                if (hasUpgrade("ct",135)) base = base.add(0.01)
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 112)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Roulette") return
                let extra = ""
                let dis = "Add "+ format(this.base()) + " to "+makeBlue("a")
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Maskers\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 112)) + extra
            },
            unlocked() { return player.ct.buyables[111].gte(15) }, 
            canAfford() {
                    return player.ct.Am.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(x) {
                let s = player.ct.Am
                let target = s.div(2.5e72).log(4).root(1.3)
                target = target.ceil()
                let cost = Decimal.pow(4,target.sub(1).pow(1.3)).mul(2.5e72)
                let diff = target.sub(player.ct.buyables[112]).min(x)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player.ct.buyables[112] = player.ct.buyables[112].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        113: {
			title: "Bet Multiplier 3",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(100,x.pow(1.35)).mul(1e145)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = tmp.ct.getXmult
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 113)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Roulette") return
                let extra = ""
                let dis = "Multiply bet amount by "+ format(this.base()) + " (Square Root multiplier)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Maskers\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 113)) + extra
            },
            unlocked() { return player.ct.buyables[112].gte(40) }, 
            canAfford() {
                    return player.ct.Am.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(x) {
                let s = player.ct.Am
                let target = s.div(1e145).log(100).root(1.35)
                target = target.ceil()
                let cost = Decimal.pow(100,target.sub(1).pow(1.35)).mul(1e145)
                let diff = target.sub(player.ct.buyables[113]).min(x)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player.ct.buyables[113] = player.ct.buyables[113].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        121: {
			title: "Better Bets",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(1e5)) x = x.log10().div(5).pow(1.5).mul(5).pow10()
                x = x.pow(tmp.ct.buyables[121].costexp)
                let cost = Decimal.pow(1e25,x.add(1).pow(x.add(1))).mul(Decimal.pow(10,446))
                return cost.floor()
            },
            costexp() { 
                let base = decimalOne
                if (hasUpgrade("ct",165)) base = base.mul(0.8)
                return base
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = decimalOne
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 121)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Roulette") return
                let extra = ""
                let dis = "Increase iterations by "+ formatWhole(this.base())
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Maskers\n\
                Effect: +" + formatWhole(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 121)) + extra
            },
            unlocked() { return player.ct.buyables[113].gte(44) }, 
            canAfford() {
                    return player.ct.Am.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(x) {
                let s = player.ct.Am
                let target = s.div(Decimal.pow(10,446)).log(1e25).ssqrt().sub(1).root(tmp.ct.buyables[121].costexp)
                if (target.gte(1e5)) target = target.log10().div(5).root(1.5).mul(5).pow10()
                target = target.ceil()
                let cost = Decimal.pow(1e25,target.tetrate(2)).mul(Decimal.pow(10,446))
                let diff = target.sub(player.ct.buyables[121]).min(x)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player.ct.buyables[121] = player.ct.buyables[121].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        122: {
			title: "Quadratic Bettor",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1e5,x.pow(1.4)).mul(Decimal.pow(10,1493))
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = new Decimal(1e-5)
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 122)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Roulette") return
                let extra = ""
                let dis = "Add "+ format(this.base()) + " to 'Quadratic Bet' base per 'Bet Multiplier 3'"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Maskers\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 122)) + extra
            },
            unlocked() { return player.ct.buyables[113].gte(125) }, 
            canAfford() {
                    return player.ct.Am.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(x) {
                let s = player.ct.Am
                let target = s.div(Decimal.pow(10,1493)).log(1e5).root(1.4)
                target = target.ceil()
                let cost = Decimal.pow(1e5,target.sub(1).pow(1.4)).mul(Decimal.pow(10,1493))
                let diff = target.sub(player.ct.buyables[122]).min(x)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player.ct.buyables[122] = player.ct.buyables[122].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        123: {
			title: "Bet Multiplier 4",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1e50,x.pow(1.5)).mul(Decimal.pow(10,1821))
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = tmp.ct.getX.add(1)
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 123)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Roulette") return
                let extra = ""
                let dis = "Multiply bet amount by "+ format(this.base()) + " ("+makeRed("x")+")"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Maskers\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 123)) + extra
            },
            unlocked() { return player.ct.buyables[122].gte(20) }, 
            canAfford() {
                    return player.ct.Am.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(x) {
                let s = player.ct.Am
                let target = s.div(Decimal.pow(10,1821)).log(1e50).root(1.5)
                target = target.ceil()
                let cost = Decimal.pow(1e50,target.sub(1).pow(1.5)).mul(Decimal.pow(10,1821))
                let diff = target.sub(player.ct.buyables[123]).min(x)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player.ct.buyables[123] = player.ct.buyables[123].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        131: {
			title: "Bet Multiplier 5",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1e3,x.pow(1.5)).mul(Decimal.pow(10,21260))
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = tmp.ct.getEvenPay
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 131)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Roulette") return
                let extra = ""
                let dis = "Multiply bet amount by "+ format(this.base()) + " (Even Payout)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Maskers\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 131)) + extra
            },
            unlocked() { return player.ct.buyables[122].gte(54) }, 
            canAfford() {
                    return player.ct.Am.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(x) {
                let s = player.ct.Am
                let target = s.div(Decimal.pow(10,21260)).log(1e3).root(1.5)
                target = target.ceil()
                let cost = Decimal.pow(1e3,target.sub(1).pow(1.5)).mul(Decimal.pow(10,21260))
                let diff = target.sub(player.ct.buyables[131]).min(x)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player.ct.buyables[131] = player.ct.buyables[131].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        132: {
			title: "AM %",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                x = x.pow(tmp.ct.buyables[132].costexp)
                let cost = Decimal.pow(1e300,Decimal.pow(1.3,x)).mul(Decimal.pow(10,53465))
                return cost.floor()
            },
            costexp() { 
                let base = decimalOne
                if (hasUpgrade("ct",166)) base = base.mul(0.65)
                if (hasUpgrade("ct",181)) base = base.mul(0.6)
                return base
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = tmp.ct.getEvenPay.max(10).log10().pow(0.5)
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 132)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Roulette") return
                let extra = ""
                let dis = "Multiply AM gain % by "+ format(this.base())+" (based on Even Payout)"
                let shift = shiftDown?"(log10(x)^0.5)":""
                return dis + shift + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Maskers\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 132)) + extra
            },
            unlocked() { return player.ct.buyables[131].gte(490) }, 
            canAfford() {
                    return player.ct.Am.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(x) {
                let s = player.ct.Am
                let target = s.div(Decimal.pow(10,53465)).log(1e300).log(1.3).root(tmp.ct.buyables[132].costexp)
                target = target.ceil()
                let cost = Decimal.pow(1e300,Decimal.pow(1.3,target.sub(1))).mul(Decimal.pow(10,53465))
                let diff = target.sub(player.ct.buyables[132]).min(x)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player.ct.buyables[132] = player.ct.buyables[132].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        133: {
			title: "AM %2",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                x = x.pow(tmp.ct.buyables[133].costexp)
                let cost = Decimal.pow(1e100,Decimal.pow(1.4,x).mul(5)).mul(Decimal.pow(10,138480))
                return cost.floor()
            },
            costexp() { 
                let base = decimalOne
                if (hasUpgrade("ct",166)) base = base.mul(0.6)
                if (hasUpgrade("ct",181)) base = base.mul(0.6)
                return base
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.Am.max(10).log10().max(10).log10()
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 133)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Roulette") return
                let extra = ""
                let dis = "Multiply AM gain % by "+ format(this.base())+" (based on AM)"
                let shift = shiftDown?"(log10(log10(x)))":""
                return dis + shift + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Maskers\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 133)) + extra
            },
            unlocked() { return player.ct.buyables[131].gte(1155) }, 
            canAfford() {
                    return player.ct.Am.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(x) {
                let s = player.ct.Am
                let target = s.div(Decimal.pow(10,138480)).log(1e100).div(5).log(1.4).root(tmp.ct.buyables[133].costexp)
                target = target.ceil()
                let cost = Decimal.pow(1e3,target.sub(1).pow(1.5)).mul(Decimal.pow(10,138480))
                let diff = target.sub(player.ct.buyables[133]).min(x)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",136)) player.ct.Am = player.ct.Am.sub(cost).max(0)
                    player.ct.buyables[133] = player.ct.buyables[133].add(diff)
                }
            },
            style: {"width":"160px","height":"160px"}
        },
        141: {
			title: "Vaxxer Base",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(100)) x = x.div(100).pow(2).mul(100)
                let cost = Decimal.pow(10,x.pow(1.3)).mul(1e86)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = new Decimal(1.5)
                if (hasUpgrade("ct",213)) base = base.add(tmp.ct.upgrades[213].effect)
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 141)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Vaxxers") return
                let extra = ""
                let dis = "Multiply Anti-Vaxxer base by "+ format(this.base())
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Vaccines\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 141)) + extra
            },
            unlocked() { return hasUpgrade("ct",183) }, 
            canAfford() {
                    return player.ct.Avaccines.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",195)) player.ct.Avaccines = player.ct.Avaccines.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.Avaccines
                let target = s.div(1e86).log(10).root(1.3)
                if (target.gte(100)) target = target.div(100).pow(0.5).mul(100)
                target = target.ceil()
                let cost = Decimal.pow(10,target.sub(1).pow(1.3)).mul(1e86)
                let diff = target.sub(player.ct.buyables[141])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",195)) player.ct.Avaccines = player.ct.Avaccines.sub(cost).max(0)
                    player.ct.buyables[141] = player.ct.buyables[141].add(diff)
                }
            },
            style: {"width":"160px","height":"160px",
            'background-color'() {
                let color = "#000000"
                if (tmp.ct.buyables[141].canAfford) color = "#8855cc"
                else color = "#bf8f8f"
                return color
                }
            }
        },
        142: {
			title: "Vaccine Gain",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1e3,x.pow(1.3)).mul(1e255)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.Avaccines.max(10).log10()
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 142)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Vaxxers") return
                let extra = ""
                let dis = "Multiply Anti-Vaccine gain by "+ format(this.base()) + " (based on Anti-Vaccines)"
                let shift = shiftDown?" (log10(x))":""
                return dis + shift + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Vaccines\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 142)) + extra
            },
            unlocked() { return hasUpgrade("ct",185) }, 
            canAfford() {
                    return player.ct.Avaccines.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",195)) player.ct.Avaccines = player.ct.Avaccines.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.Avaccines
                let target = s.div(1e255).log(1e3).root(1.3)
                target = target.ceil()
                let cost = Decimal.pow(1e3,target.sub(1).pow(1.5)).mul(1e255)
                let diff = target.sub(player.ct.buyables[142])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",195)) player.ct.Avaccines = player.ct.Avaccines.sub(cost).max(0)
                    player.ct.buyables[142] = player.ct.buyables[142].add(diff)
                }
            },
            style: {"width":"160px","height":"160px",
            'background-color'() {
                let color = "#000000"
                if (tmp.ct.buyables[142].canAfford) color = "#8855cc"
                else color = "#bf8f8f"
                return color
                }
            }
        },
        143: {
			title: "Vaccine Boost",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1e7,x.pow(1.7)).mul(Decimal.pow(10,1385))
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.Avaccines.max(10).log10().max(10).log10().pow(0.9).sub(1).div(100)
                return base
            },
            base2(x=player[this.layer].buyables[this.id]) { 
                let base = tmp.ct.buyables[102].effect.max(10).log10().pow(2)
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 143)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            effect2() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base2
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Vaxxers") return
                let extra = ""
                let dis = "Increase Anti-Vax effect exponent by "+ format(this.base()) + " (based on Anti-Vax) and multiply Anti-Vax gain by "+ format(this.base2()) +" (based on Streak Mult)"
                return dis  + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Vaccines\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+", "+format(tmp[this.layer].buyables[this.id].effect2)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 143)) + extra
            },
            unlocked() { return hasUpgrade("ct",193) }, 
            canAfford() {
                    return player.ct.Avaccines.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",195)) player.ct.Avaccines = player.ct.Avaccines.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.Avaccines
                let target = s.div(Decimal.pow(10,1385)).log(1e7).root(1.7)
                target = target.ceil()
                let cost = Decimal.pow(1e3,target.sub(1).pow(1.5)).mul(Decimal.pow(10,138480))
                let diff = target.sub(player.ct.buyables[143])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",195)) player.ct.Avaccines = player.ct.Avaccines.sub(cost).max(0)
                    player.ct.buyables[143] = player.ct.buyables[143].add(diff)
                }
            },
            style: {"width":"160px","height":"160px",
            'background-color'() {
                let color = "#000000"
                if (tmp.ct.buyables[143].canAfford) color = "#8855cc"
                else color = "#bf8f8f"
                return color
                }
            }
        },
        151: {
			title: "Side Vaxxer",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(10)) x= x.div(10).pow(2.5).mul(10)
                let cost = Decimal.pow(1.5,x.pow(1.2)).mul(5e4)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = new Decimal(0.1)
                if (hasUpgrade("ct",215)) base = base.add(0.1)
                if (hasUpgrade("ct",223)) base = base.add(0.1)
                if (hasUpgrade("ct",224)) base = base.add(tmp.ct.upgrades[224].effect)
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 151)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Vaxxers") return
                let extra = ""
                let dis = "Increase Side Effect gain exponent by "+ format(this.base())
                return dis  + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Side Effects\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 151)) + extra
            },
            unlocked() { return hasUpgrade("ct",206) }, 
            canAfford() {
                    return player.ct.SideEff.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",234)) player.ct.SideEff = player.ct.SideEff.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.SideEff
                let target = s.div(5e4).log(1.5).root(1.2)
                if (target.gte(10)) target= target.div(10).pow(.4).mul(10)
                target = target.ceil()
                let cost = Decimal.pow(1e3,target.sub(1).pow(1.5)).mul(Decimal.pow(10,138480))
                let diff = target.sub(player.ct.buyables[151])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",234)) player.ct.SideEff = player.ct.SideEff.sub(cost).max(0)
                    player.ct.buyables[151] = player.ct.buyables[151].add(diff)
                }
            },
            style: {"width":"160px","height":"160px",
            'background-color'() {
                let color = "#000000"
                if (tmp.ct.buyables[151].canAfford) color = "#8855cc"
                else color = "#bf8f8f"
                return color
                }
            }
        },
        152: {
			title: "Side Gain",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(30,x.pow(1.5)).mul(2e36)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.SideEff.max(10).log10()
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 152)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || !player.subtabs.ct.Anti == "Anti-Vaxxers") return
                let extra = ""
                let dis = "Multiply Side Effect gain by "+ format(this.base())+" (based on Side Effects)"
                let shift = shiftDown?" (log10(x))":""
                return dis + shift + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Side Effects\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 152)) + extra
            },
            unlocked() { return hasUpgrade("ct",216) }, 
            canAfford() {
                    return player.ct.SideEff.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",234)) player.ct.SideEff = player.ct.SideEff.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.SideEff
                let target = s.div(2e36).log(30).root(1.5)
                target = target.ceil()
                let cost = Decimal.pow(1e3,target.sub(1).pow(1.5)).mul(Decimal.pow(10,138480))
                let diff = target.sub(player.ct.buyables[152])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",234)) player.ct.SideEff = player.ct.SideEff.sub(cost).max(0)
                    player.ct.buyables[152] = player.ct.buyables[152].add(diff)
                }
            },
            style: {"width":"160px","height":"160px",
            'background-color'() {
                let color = "#000000"
                if (tmp.ct.buyables[152].canAfford) color = "#8855cc"
                else color = "#bf8f8f"
                return color
                }
            }
        },
        153: {
			title: "Side Boost",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = Decimal.pow(1e3,x.pow(1.6)).mul(1e144)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.SideEff.max(10).log10().max(10).log10().pow(1.1).sub(1).div(10)
                return base
            },
            base2(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.Avaccines.max(10).log10().max(10).log10().pow(2)
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 153)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            effect2() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base2
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Anti != "Anti-Vaxxers") return
                let extra = ""
                let dis = "Increase Side Effect boost exponent by "+ format(this.base()) + " (based on Side Effects) and multiply Side Effect gain by "+ format(this.base2()) +" (based on Anti-Vax)"
                return dis  + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Side Effects\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+", "+format(tmp[this.layer].buyables[this.id].effect2)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 153)) + extra
            },
            unlocked() { return hasUpgrade("ct",224) }, 
            canAfford() {
                    return player.ct.SideEff.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",234)) player.ct.SideEff = player.ct.SideEff.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let s = player.ct.SideEff
                let target = s.div(1e144).log(1e3).root(1.6)
                target = target.ceil()
                let cost = Decimal.pow(1e3,target.sub(1).pow(1.5)).mul(Decimal.pow(10,138480))
                let diff = target.sub(player.ct.buyables[153])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",234)) player.ct.SideEff = player.ct.SideEff.sub(cost).max(0)
                    player.ct.buyables[153] = player.ct.buyables[153].add(diff)
                }
            },
            style: {"width":"160px","height":"160px",
            'background-color'() {
                let color = "#000000"
                if (tmp.ct.buyables[153].canAfford) color = "#8855cc"
                else color = "#bf8f8f"
                return color
                }
            }
        },
        161: {
			title: "Adverse Gain",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(5e4)) x = x.mul(2).log10().div(5).pow(1.5).mul(5).pow10().div(2)
                let cost = Decimal.pow(1e3,x.pow(1.4)).mul(1e119)
                return cost.floor()
            },
            slog() { 
                let slog = new Decimal(-.9)
                if (hasUpgrade("ct",243)) slog = slog.add(0.175)
                if (hasUpgrade("ct",251)) slog = slog.add(tmp.ct.upgrades[251].effect)
                if (hasUpgrade("ct",255)) slog = slog.add(0.05)
                return slog
            },
            tetbase() { 
                let base = decimalTen
                if (hasUpgrade("ct",252)) base = base.add(1)
                if (hasUpgrade("ct",255)) base = base.add(4)
                if (hasUpgrade("ct",256)) base = base.add(player.ct.buyables[162].mul(0.15))
                if (hasUpgrade("ct",263)) base = base.add(tmp.ct.upgrades[263].effect)
                return base
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let b = tmp.ct.buyables[161].tetbase
                let base = Decimal.tetrate(b,slog(player.ct.AdEff.max(10)).add(tmp.ct.buyables[161].slog))
                if (base.gte(Decimal.pow(10,1e100)))base = base.log10().div(1e100).pow(0.2).mul(1e100).pow10()
                if (base.gte(Decimal.pow(10,1e150))) base = base.log10().log10().div(150).pow(0.4).mul(150).pow10().pow10()
                if (base.gte(Decimal.pow(10,1e220))) base = base.log10().log10().div(220).pow(0.2).mul(220).pow10().pow10()
                if (base.gte(Decimal.pow(10,Decimal.pow(10,1e3)))) base = base.log10().log10().log10().div(3).pow(0.15).mul(3).pow10().pow10().pow10()
                if (base.gte(Decimal.pow(10,Decimal.pow(10,3e6)))) base = base.log10().log10().div(3).mul(1e4).pow(3e5).pow10()
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 161)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x)
                if (eff.gte(tet10(4.1))) eff = tet10(slog(eff).div(4.1).log10().add(4.1))
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Anti != "Adverse Effects") return
                let extra = ""
                let eff = tmp[this.layer].buyables[this.id].effect
                let dis = "Multiply Adverse Effect gain by "+ format(this.base())+" (based on Adverse Effects)"
                let shift = shiftDown?" ("+format(tmp.ct.buyables[161].tetbase)+"^^(slog10(x)"+format(tmp.ct.buyables[161].slog)+"))":""
                return dis + shift + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Adverse Effects\n\
                Effect: " + format(eff)+"x"+(eff.gte(tet10(4.1))?" (softcapped)":"")+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 161)) + extra
            },
            unlocked() { return hasUpgrade("ct",235) }, 
            canAfford() {
                    return player.ct.AdEff.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",243)) player.ct.AdEff = player.ct.AdEff.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(x) {
                let s = player.ct.AdEff
                let target = s.div(1e119).log(1e3).root(1.4)
                if (target.gte(5e4)) target = target.mul(2).log10().div(5).root(1.5).mul(5).pow10().div(2)
                target = target.ceil()
                let cost = Decimal.pow(1e3,target.sub(1).pow(1.4)).mul(1e119)
                let diff = target.sub(player.ct.buyables[161]).min(x.mul(player.ms/50).ceil())
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",243)) player.ct.AdEff = player.ct.AdEff.sub(cost).max(0)
                    player.ct.buyables[161] = player.ct.buyables[161].add(diff)
                }
            },
            style: {"width":"160px","height":"160px",
            'background-color'() {
                let color = "#000000"
                if (tmp.ct.buyables[161].canAfford) color = "#8855cc"
                else color = "#bf8f8f"
                return color
                }
            }
        },
        162: {
			title: "Adverse Boost",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (hasUpgrade("ct",282)) x = x.div(1.5)
                if (x.gte(3e4)) x = x.div(3e4).pow(2).mul(3e4)
                if (x.gte(25)) x = x.div(25).pow(1.5).mul(25)
                let cost = Decimal.pow(1e100,Decimal.pow(2,x.pow(1.2)).mul(10)).mul(Decimal.pow(10,65685))
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.AdEff.max(10).log10().max(10).log10().pow(0.05)
                if (hasUpgrade("ct",246)) base = base.pow(10)
                if (hasUpgrade("ct",255)) base = base.pow(tmp.ct.upgrades[255].effect)
                if (hasUpgrade("ct",301)) base = base.pow(tmp.ct.upgrades[301].effect)
                return base
            },
            base2(x=player[this.layer].buyables[this.id]) { 
                let base = slogadd(player.ct.SideEff.max(1e10),-3).pow(0.2).sub(1).div(5)
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 162)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            effect2() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base2
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Anti != "Adverse Effects") return
                let extra = ""
                let dis = "Multiply AE boost exponent by "+ format(this.base())+" (based on Adverse Effects) and increase AE gain exponent by "+ format(this.base2())+" (based on Side Effects)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Adverse Effects\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x, +"+format(tmp[this.layer].buyables[this.id].effect2)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 162)) + extra
            },
            unlocked() { return hasUpgrade("ct",244) }, 
            canAfford() {
                    return player.ct.AdEff.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[162].maxAfford
                let b = max.sub(player.ct.buyables[162]).max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasAchievement("a",183)) player.ct.AdEff = player.ct.AdEff.sub(cost).max(0)
                    if (hasAchievement("a",183)) player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(b).max(1)
                    else player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.ct.AdEff
                let target = s.div(Decimal.pow(10,65685)).log(1e100).div(10).log(2).root(1.2)
                if (target.gte(25)) target = target.div(25).root(1.5).mul(25)
                if (hasUpgrade("ct",282)) target = target.mul(1.5)
                return target.ceil()
            },
            buyMax(x) {
                let s = player.ct.AdEff
                let target = s.div(Decimal.pow(10,65685)).log(1e100).div(10).log(2).root(1.2)
                if (target.gte(25)) target = target.div(25).root(1.5).mul(25)
                if (target.gte(3e4)) target = target.div(3e4).root(2).mul(3e4)
                if (hasUpgrade("ct",282)) target = target.mul(1.5)
                target = target.ceil()
                let cost = Decimal.pow(1e3,target.sub(1).pow(1.4)).mul(1e119)
                let diff = target.sub(player.ct.buyables[162]).min(x.mul(player.ms/50).ceil())
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",276)) player.ct.AdEff = player.ct.AdEff.sub(cost).max(0)
                    player.ct.buyables[162] = player.ct.buyables[162].add(diff)
                }
            },
            style: {"width":"160px","height":"160px",
            'background-color'() {
                let color = "#000000"
                if (tmp.ct.buyables[162].canAfford) color = "#8855cc"
                else color = "#bf8f8f"
                return color
                }
            }
        },
        163: {
			title: "Adversity Gain",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.ct.buyables[163].costbase
                let exp = tmp.ct.buyables[163].costexp
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e14)
                return cost.floor()
            },
            costbase() { 
                let base = new Decimal(50)
                if (hasUpgrade("ct",261)) base= new Decimal(40)
                if (hasUpgrade("ct",296)) base= new Decimal(35)
                if (hasUpgrade("ct",332)) base=base.sub(tmp.ct.upgrades[332].effect)
                return base
            },
            costexp() { 
                let exp = 1.15
                if (hasUpgrade("ct",261)) exp=1.13
                if (hasUpgrade("ct",262)) exp=1.12
                if (hasUpgrade("ct",263)) exp=1.11
                if (hasUpgrade("ct",264)) exp=1.1
                if (hasUpgrade("ct",276)) exp=1.09
                if (hasUpgrade("ct",283)) exp=1.08
                if (hasUpgrade("ct",285)) exp=1.07
                if (hasUpgrade("ct",286)) exp=1.06
                if (hasUpgrade("ct",331)) exp=1.055
                if (hasUpgrade("ct",371)) exp=1.053
                if (hasUpgrade("ct",395)) exp=1.02
                if (player.ct.inC)exp +=0.1
                return exp
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = slog(player.points)
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 163)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Anti != "Adverse Effects") return
                let extra = ""
                let dis = "Multiply Adversity gain by "+ format(this.base()) + " (based on cases)"
                let shift = shiftDown?" (slog10(x))":""
                let cost = shiftDown?" (1e14*"+format(tmp.ct.buyables[163].costbase)+"^x<sup>"+format(tmp.ct.buyables[163].costexp)+"</sup>)<br>":""
                return dis + shift + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Adversities\n\
                "+cost+"Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 163)) + extra
            },
            unlocked() { return hasUpgrade("ct",251) }, 
            canAfford() {
                    return player.ct.Adversity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",261)) player.ct.Adversity = player.ct.Adversity.sub(cost).max(0)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax(x) {
                let base = tmp.ct.buyables[163].costbase
                let exp = tmp.ct.buyables[163].costexp
                let s = player.ct.Adversity
                let target = s.div(1e14).log(base).root(exp)
                target = target.ceil()
                let cost = Decimal.pow(base,target.sub(1).pow(exp)).mul(1e14)
                let diff = target.sub(player.ct.buyables[163]).min(x.mul(player.ms/50).ceil())
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",261)) player.ct.Adversity = player.ct.Adversity.sub(cost).max(0)
                    player.ct.buyables[163] = player.ct.buyables[163].add(diff)
                }
            },
            style: {"width":"160px","height":"160px",
            'background-color'() {
                let color = "#000000"
                if (tmp.ct.buyables[163].canAfford) color = "#6688aa"
                else color = "#bf8f8f"
                return color
                }
            }
        },
        164: {
			title: "Adversity Gain 2",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.ct.buyables[164].costbase
                let exp = tmp.ct.buyables[164].costexp
                let cost = Decimal.pow(base,x.pow(exp)).mul(Decimal.pow(10,2097))
                return cost.floor()
            },
            costbase() { 
                let base = 1e10
                if (hasUpgrade("ct",302)) base = 1e8
                if (hasUpgrade("ct",371)) base = 1e6
                return base
            },
            costexp() { 
                let exp = 1.15
                if (hasUpgrade("ct",302)) exp = 1.13
                if (hasUpgrade("ct",371)) exp = 1.1
                if (hasUpgrade("ct",395)) exp = 1.03
                if (player.ct.inC)exp +=0.1
                return exp
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = powExp(player.ct.Adversity.max(10).log10(),1.3)
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 164)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Anti != "Adverse Effects") return
                let extra = ""
                let dis = "Multiply Adversity gain by "+ format(this.base()) + " (based on Adversities)"
                let shift = shiftDown?" (10^(log10(log10(x))^1.3))":""
                let cost = shiftDown?" (1e2097*"+format(tmp.ct.buyables[164].costbase)+"^x<sup>"+format(tmp.ct.buyables[164].costexp)+"</sup>)<br>":""
                return dis + shift + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Adversities\n\
                "+cost+"Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 164)) + extra
            },
            unlocked() { return hasUpgrade("ct",261) }, 
            canAfford() {
                    return player.ct.Adversity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[164].maxAfford
                let b = max.sub(player.ct.buyables[164]).max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",263)) player.ct.Adversity = player.ct.Adversity.sub(cost).max(0)
                    if (hasUpgrade("ct",263)) player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(b).max(1)
                    else player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let base = tmp.ct.buyables[164].costbase
                let exp = tmp.ct.buyables[164].costexp
                let s = player.ct.Adversity
                let target = s.div(Decimal.pow(10,2097)).log(base).root(exp)
                return target.ceil()
            },
            buyMax(x) {
                let base = tmp.ct.buyables[164].costbase
                let exp = tmp.ct.buyables[164].costexp
                let s = player.ct.Adversity
                let target = s.div(Decimal.pow(10,2097)).log(base).root(exp)
                target = target.ceil()
                let cost = Decimal.pow(base,target.sub(1).pow(exp)).mul(Decimal.pow(10,2097))
                let diff = target.sub(player.ct.buyables[164]).min(x.mul(player.ms/50).ceil())
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.Adversity = player.ct.Adversity.sub(cost).max(0)
                    player.ct.buyables[164] = player.ct.buyables[164].add(diff)
                }
            },
            style: {"width":"160px","height":"160px",
            'background-color'() {
                let color = "#000000"
                if (tmp.ct.buyables[164].canAfford) color = "#6688aa"
                else color = "#bf8f8f"
                return color
                }
            }
        },
        171: {
			title: "Capped",
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(5e4)) x= x.div(5e4).pow(5).mul(5e4)
                let exp = 3
                let s = 5e3
                if (player.ct.inC) {
                    exp = 7
                    s = 1500
                }
                if (x.gte(s)) x= x.div(s).pow(exp).mul(s)
                if (x.gte(1e3)) x= x.root(3).sub(7).pow10()
                let cost = Decimal.pow(10,Decimal.pow(10,x.pow(1.1))).mul(1.7504e10)
                return cost.floor()
            },
            base() { 
                let exp = tmp.ct.buyables[171].exp
                let d = tmp.ct.buyables[171].basediv
                let base = slog(player.points.max(10)).pow(exp).div(d)
                if (player.ct.inC) {
                    if (base.gte(1e6)) base = base.div(1e6).pow(0.5).mul(1e6)
                }
                return base
            },
            exp() {
                let exp = new Decimal(0.6)
                if (hasUpgrade("ct",296)) exp = exp.add(0.3)
                if (!player.ct.inC) exp = exp.sub(0.5)
                if (hasUpgrade("ct",363)) exp = exp.add(tmp.ct.upgrades[363].effect)
                return exp
            },
            basediv() {
                let d = new Decimal(20)
                if (!player.ct.inC) d = d.mul(10)
                return d
            },
            total() {
                let total = getBuyableAmount("ct", 171)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers") return
                let extra = ""
                let dis = "Add "+format(this.base()) + " to 'Anti-Capped' slog (based on cases)"
                let shift = shiftDown?" (slog10(x)<sup>"+format(tmp.ct.buyables[171].exp)+"</sup>/"+format(tmp.ct.buyables[171].basediv)+")":""
                return dis + shift+ ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Vaxxers\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 171)) + extra
            },
            unlocked() { return (hasUpgrade("ct", 265) && player.ct.inC) || hasUpgrade("ct",355) }, 
            canAfford() {
                    return player.ct.Avaxxers.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            buyMax() {
                let a = player.ct.Avaxxers
                let exp = 3
                let s = 5e3
                if (player.ct.inC) {
                    exp = 7
                    s = 1500
                }
                let target = a.div(1.7504e10).log(10).log10().root(1.1)
                if (target.gte(1e3)) target= target.log10().add(7).pow(3)
                if (target.gte(s)) target= target.div(s).root(exp).mul(s)
                if (target.gte(5e4)) target= target.div(5e4).root(5).mul(5e4)
                target = target.ceil()
                let diff = target.sub(player.ct.buyables[171])
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.buyables[171] = player.ct.buyables[171].add(diff)
                }
            },
            style: {"width":"150px","height":"150px"}
        },
        181: {
			title(){
                return (player.ct.Uib.gte(tmp.ct.buyables[181].sstart)?"Social Distant ":player.ct.Uib.gte(tmp.ct.buyables[181].start)?"Distant ":"")+"UI Gain"
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                let sc = tmp.ct.buyables[181].sstart
                let z = x.sub(sc)
                let sb = tmp.ct.buyables[181].sbase
                if (x.gte(sc)) {
                    if(hasUpgrade("ct",466)) x = x.log10().div(sc.log10()).pow(sb).mul(sc.log10()).pow10()
                    else x = Decimal.pow(sb,z).mul(x)
                }
                let cost = Decimal.pow(10,x).mul(1e10)
                let y = x.sub(tmp.ct.buyables[181].start)
                let base = tmp.ct.buyables[181].dbase
                if (x.gte(tmp.ct.buyables[181].start)) cost = cost.mul(Decimal.pow(base,y.mul(y.add(1).div(2))))
                return cost.floor()
            },
            dbase() { 
                let base = decimalTwo
                if (hasUpgrade("ct",302)) base = base.sub(0.5)
                if (hasUpgrade("ct",354)) base = base.sub(tmp.ct.upgrades[354].effect)
                if (hasUpgrade("ct",403)) base = base.root(2)
                return base
            },
            sbase() { 
                let base = new Decimal(1.0001)
                if (hasUpgrade("ct",466)) {
                    base = decimalFour
                    if (hasUpgrade("ct",314)) base = base.root(3**0.3)
                    if (hasUpgrade("ct",461)) base = base.root(5**0.3)
                }
                else {
                if (hasUpgrade("ct",314)) base = base.root(3)
                if (hasUpgrade("ct",461)) base = base.root(5)
                }
                return base
            },
            base() { 
                let base = decimalTwo
                if (hasUpgrade("ct",293)) base = base.add(0.42)
                if (hasUpgrade("ct",295)) {
                    if (hasUpgrade("ct",463)) base = base.mul(tmp.ct.upgrades[295].effect.max(1))
                    base = base.add(tmp.ct.upgrades[295].effect)
                }
                if (hasChallenge("ct",21)) {
                    if (hasUpgrade("ct",314)) base = base.mul(tmp.ct.challenges[21].rewardEffect.max(1))
                    else base = base.add(tmp.ct.challenges[21].rewardEffect)
                }
                if (hasUpgrade("ct",425)) base = base.mul(tmp.ct.upgrades[425].effect)
                if (hasUpgrade("ct",415)) base = base.pow(1.5)
                if (hasUpgrade("uv",15)) base = base.pow(tmp.uv.upgrades[15].effect)
                if (hasUpgrade("ct",461)) base = powExp(base,1.25)
                if (hasUpgrade("ct",434) && !inChallenge("ct",32)) base = powExp(base,1.1)
                if (inChallenge("ct",32)) {
                    if (base.gte("e500")) base = base.log10().div(500).pow(0.3).mul(500).pow10()
                }
                return base
            },
            start() { 
                let start = new Decimal(298)
                if (hasUpgrade("ct",331)) start = start.add(50)
                if (hasUpgrade("ct",296)) start = start.add(100)
                if (hasUpgrade("ct",301)) start = start.add(150)
                if (hasUpgrade("ct",352)) start = start.add(tmp.ct.upgrades[352].effect)
                if (hasUpgrade("uv",21)) start = start.mul(tmp.uv.upgrades[21].effect)
                return start.min(tmp.ct.buyables[181].sstart)
            },
            sstart() { 
                let start = new Decimal(1e4)
                if (hasUpgrade("ct",314)) start = start.add(5e3)
                if (hasUpgrade("ct",413)) start = start.add(tmp.ct.upgrades[413].effect)
                if (hasUpgrade("uv",21)) start = start.mul(tmp.uv.upgrades[21].effect)
                return start
            },
            total() {
                let total = getBuyableAmount("ct", 181)
                return total
            },
			effect() { // Effects of owning x of the items, x is a decimal
                let x = tmp[this.layer].buyables[this.id].total
                let base = tmp[this.layer].buyables[this.id].base
                if (inChallenge("ct",21)) return decimalOne
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers") return
                let extra = ""
                let dis = "Multiply UI gain by "+format(this.base())
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Unvaccinated Infections\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 181)) + extra
            },
            unlocked() { return hasUpgrade("ct", 276) }, 
            canAfford() {
                    return player.ct.Ui.gte(tmp[this.layer].buyables[this.id].cost) && player.ct.Uib.eq(player.ct.buyables[181])
            },
            maxAfford() {
                let f = player.ct.Ui 
                let z = tmp.ct.buyables[181].dbase.log10()
                let m = tmp.ct.buyables[181].start 
                let c = tmp.ct.buyables[181].sstart 
                let s = f.max(1).div(Decimal.pow(10,m.add(10))).log10()
                let b = tmp.ct.buyables[181].sbase
                let max = f.div(1e10).max(10).log10().ceil().min(m)
                if (max.gte(m)) max = max.add(s.mul(2).add(1).max(1).mul(4).mul(z).add(z.pow(2)).add(4).pow(0.5).sub(z).sub(2).div(z.mul(2))).ceil()
                if (max.gte(tmp.ct.buyables[181].sstart)) {
                    if (hasUpgrade("ct",466)) max = max.log10().div(c.log10()).root(b).mul(c.log10()).pow10()
                    else max = Decimal.lambertw(max.mul(b.pow(c).mul(b.ln()))).div(b.ln())
                }
                return max
            },    
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[181].maxAfford
                let b = max.sub(player.ct.buyables[181]).max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",361)) player.ct.Ui = player.ct.Ui.sub(cost)
                    if (hasUpgrade("ct",331) || hasUpgrade("ct",341)) {
                        player.ct.Uib = player.ct.Uib.add(b).max(1)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(b).max(1)
                    }else{
                    player.ct.Uib = player.ct.Uib.add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            buyMax(x) {
                let f = player.ct.Ui
                let z = Decimal.log10(2)
                let s = f.div(Decimal.pow(10,308)).log10()
                let m = tmp.ct.buyables[181].start
                let max = f.div(1e10).max(10).log10().ceil().min(m)
                if (max.gte(m)) max = max.add(s.mul(2).add(1).max(1).mul(4).mul(z).add(z.pow(2)).add(4).pow(0.5).sub(z).sub(2).div(z.mul(2))).ceil()
                let diff = max.sub(player.f.mult).min(x.mul(player.ms/50).ceil())
                let cost = Decimal.pow(10,max).mul(1e10).mul(Decimal.pow(10,max.sub(298).mul(max.sub(297))))
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.Ui = player.ct.Ui.sub(cost).max(0)
                    player.ct.buyables[181] = player.ct.buyables[181].add(diff)
                    player.ct.Uib = player.ct.Uib.add(diff)
                }
            },
            style: {"width":"150px","height":"150px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[181].canAfford) color = "radial-gradient(#383434, #153d63)"
                return color
                }
            }
        },
        191: {
			title(){
                return (player.ct.buyables[191].gte(298)?"Distant ":"")+"UI Vaxxer"
            },
			cost(x=player[this.layer].buyables[this.id]) { // cost for buying xth buyable, can be an object if there are multiple currencies
                if (x.gte(298) && hasUpgrade("ct",343)) x = x.div(298).pow(1.9).mul(298)
                let cost = Decimal.pow(50,x.pow(1.1)).mul(1e130)
                let y = x.sub(298)
                if (x.gte(298) && !hasUpgrade("ct",343)) {
                    cost = cost.mul(Decimal.pow(10,y.mul(y.add(1).div(2))))
                }
                return cost.floor()
            },
            base() { 
                let base = decimalTwo
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 191)
                return total
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers") return
                let extra = ""
                let dis = "Get 1 Anti-Vaxxed Vaxxer"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Unvaccinated Infections\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 191)) + extra
            },
            unlocked() { return hasUpgrade("ct", 286) || player.ct.bestAdvax.gte(1)}, 
            canAfford() {
                    return player.ct.Ui.gte(tmp[this.layer].buyables[this.id].cost)},
            maxAfford() {
                let base = 50
                let exp = 1.1
                let s = player.ct.Ui
                let target = s.div(1e130).log(base).root(exp)
                if (target.gte(298)) target = target.div(298).root(1.9).mul(298)
                return target.ceil()
            },   
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[191].maxAfford
                let b = max.sub(player.ct.buyables[191]).max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.Ui = player.ct.Ui.sub(cost)
                    if (hasUpgrade("ct",343)) {
                        player.ct.Av = player.ct.Av.add(b).max(1)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(b).max(1)
                    }else{
                    player.ct.Av = player.ct.Av.add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            style: {"width":"150px","height":"150px"},
        },
        201: {
			title: "AdVaxxed Vaxxer",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player.ct.AdV0
                let cost = Decimal.pow(100,x).mul(1e72)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = tmp.ct.AdVaxBase
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 201)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.AdV0
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x).mul(tmp.ct.AdVaccineMult);
            },
            gain() {
                let gain = tmp.ct.buyables[201].total.mul(tmp.ct.buyables[201].effect)
                return gain
            },
            arna() {
                let gain = player.ct.AdVax0.div(1e66).max(10).log10().sub(1)
                if (challengeCompletions("ct",11)>=5) gain = gain.pow(2)
                if (hasUpgrade("ct",396)) gain = gain.pow(tmp.ct.upgrades[396].effect)
                if (hasMilestone("uv",15)) gain = powExp(gain,1.5)
                if (hasMilestone("uv",17)) gain = powExp(gain,1.1)
                if (hasUpgrade("ct",386)) gain = gain.mul(player.ct.aav.add(1).pow(tmp.ct.upgrades[386].effect))
                return gain.mul(tmp.ct.typeGain)
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "AdVaccines") return
                let extra = ""
                let dis = "Produces AdVaxxed Vaccines"
                if (player.ct.challenges[11]>=3) dis += " and <span style='color:#aa0000'>aRNA Vaccines</span>"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Adverse Vaxxers\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 201)) + "("+formatWhole(player.ct.AdV0)+")"
            },
            unlocked() { return hasUpgrade("ct",373) }, 
            canAfford() {
                    return player.ct.Advaxxers.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[201].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",395)) player.ct.Advaxxers = player.ct.Advaxxers.sub(cost).max(0)
                    player.ct.AdV0 = player.ct.AdV0.add(1).max(1)
                    player.ct.AdVax0 = player.ct.AdVax0.add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {// logr(s(r-1)/a1+1)=(n)
                let s = player.ct.Advaxxers
                let target = s.div(tmp.ct.buyables[201].cost).mul(99).add(1).log10().div(2)
                return target.floor()
            },
            buyMax() { //Sn=a1(1-r^n)/(1-r)
                let target = tmp.ct.buyables[201].maxAfford
                let cost = Decimal.sub(1,Decimal.pow(100,target)).mul(tmp.ct.buyables[201].cost).div(-99)
                let diff = target
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",395)) player.ct.Advaxxers = player.ct.Advaxxers.sub(cost).max(0)
                    player.ct.AdV0 = player.ct.AdV0.add(diff)
                    player.ct.AdVax0 = player.ct.AdVax0.add(diff)
                    player.ct.buyables[201] = player.ct.buyables[201].add(diff)
                    if (!hasUpgrade("ct",395)) updateTemp()
                }
                
            },
            style: {"width":"150px","height":"150px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[201].canAfford) color = "radial-gradient(#383434, #153d63)"
                return color
                }
            }
        },
        202: {
			title: "AdVaxxed AdVaxxer",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player.ct.AdV1
                let cost = Decimal.pow(1000,x).mul(1e75)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = tmp.ct.AdVaxBase
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 202)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.AdV1
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x).mul(tmp.ct.AdVaccineMult);
            },
            gain () {
                let gain = tmp.ct.buyables[202].total.mul(tmp.ct.buyables[202].effect)
                return gain
            },
            aav() {
                let gain = player.ct.AdVax1.div(1e52).max(10).log10().sub(1)
                if (challengeCompletions("ct",12)>=5) gain = gain.pow(2)
                if (hasUpgrade("ct",396)) gain = gain.pow(tmp.ct.upgrades[396].effect)
                if (hasMilestone("uv",15)) gain = powExp(gain,1.5)
                if (hasMilestone("uv",17)) gain = powExp(gain,1.1)
                if (hasUpgrade("ct",386)) gain = gain.mul(player.ct.aiv.add(1).pow(tmp.ct.upgrades[386].effect))
                return gain.mul(tmp.ct.typeGain)
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "AdVaccines") return
                let extra = ""
                let dis = "Produces AdVaxxed Vaxxers"
                if (player.ct.challenges[12]>=3) dis += " and <span style='color:#aa5500'>AAV Vaccines</span>"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Adverse Vaxxers\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 202)) + "("+formatWhole(player.ct.AdV1)+")"
            },
            unlocked() { return hasUpgrade("ct",373) }, 
            canAfford() {
                    return player.ct.Advaxxers.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[202].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",395)) player.ct.Advaxxers = player.ct.Advaxxers.sub(cost).max(0)
                    player.ct.AdV1 = player.ct.AdV1.add(1).max(1)
                    player.ct.AdVax1 = player.ct.AdVax1.add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.ct.Advaxxers
                let target = s.div(tmp.ct.buyables[202].cost).mul(999).add(1).log10().div(3)
                return target.floor()
            },
            buyMax() { // logr(s(r-1)/a1+1)=(n)
                let target = tmp.ct.buyables[202].maxAfford
                let cost = Decimal.sub(1,Decimal.pow(1000,target)).mul(tmp.ct.buyables[202].cost).div(-999)
                let diff = target
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",395)) player.ct.Advaxxers = player.ct.Advaxxers.sub(cost).max(0)
                    player.ct.AdV1 = player.ct.AdV1.add(diff)
                    player.ct.AdVax1 = player.ct.AdVax1.add(diff)
                    player.ct.buyables[202] = player.ct.buyables[202].add(diff)
                    if (!hasUpgrade("ct",395)) updateTemp()
                }
            },
            style: {"width":"150px","height":"150px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[202].canAfford) color = "radial-gradient(#383434, #153d63)"
                return color
                }
            }
        },
        203: {
			title: "AnVaxxed Vaccine",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player.ct.AdV2
                let cost = Decimal.pow(10000,x).mul(1e80)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = tmp.ct.AdVaxBase
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 203)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.AdV2
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x).mul(tmp.ct.AdVaccineMult);
            },
            gain () {
                let gain = tmp.ct.buyables[203].total.mul(tmp.ct.buyables[203].effect)
                return gain
            },
            aiv() {
                let gain = player.ct.AdVax2.div(1e31).max(10).log10().sub(1)
                if (challengeCompletions("ct",21)>=5) gain = gain.pow(2)
                if (hasUpgrade("ct",396)) gain = gain.pow(tmp.ct.upgrades[396].effect)
                if (hasMilestone("uv",15)) gain = powExp(gain,1.5)
                if (hasMilestone("uv",17)) gain = powExp(gain,1.1)
                if (hasUpgrade("ct",386)) gain = gain.mul(player.ct.asv.add(1).pow(tmp.ct.upgrades[386].effect))
                return gain.mul(tmp.ct.typeGain)
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "AdVaccines") return
                let extra = ""
                let dis = "Produces AdVaxxed AdVaxxers"
                if (player.ct.challenges[21]>=3) dis += " and <span style='color:#00aa55'>AIV Vaccines</span>"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Adverse Vaxxers\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 203)) + "("+formatWhole(player.ct.AdV2)+")"
            },
            unlocked() { return hasUpgrade("ct",373) }, 
            canAfford() {
                    return player.ct.Advaxxers.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[203].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",395)) player.ct.Advaxxers = player.ct.Advaxxers.sub(cost).max(0)
                    player.ct.AdV2 = player.ct.AdV2.add(1).max(1)
                    player.ct.AdVax2 = player.ct.AdVax2.add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.ct.Advaxxers
                let target = s.div(tmp.ct.buyables[203].cost).mul(9999).add(1).log10().div(4)
                return target.floor()
            },
            buyMax() { // logr(s(r-1)/a1+1)=(n)
                let target = tmp.ct.buyables[203].maxAfford
                let cost = Decimal.sub(1,Decimal.pow(10000,target)).mul(tmp.ct.buyables[203].cost).div(-9999)
                let diff = target
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",395)) player.ct.Advaxxers = player.ct.Advaxxers.sub(cost).max(0)
                    player.ct.AdV2 = player.ct.AdV2.add(diff)
                    player.ct.AdVax2 = player.ct.AdVax2.add(diff)
                    player.ct.buyables[203] = player.ct.buyables[203].add(diff)
                    if (!hasUpgrade("ct",395)) updateTemp()
                }
            },
            style: {"width":"150px","height":"150px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[203].canAfford) color = "radial-gradient(#383434, #153d63)"
                return color
                }
            }
        },
        204: {
			title: "AnVaxxed Vaxxer",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player.ct.AdV3
                let cost = Decimal.pow(1e6,x).mul(1e90)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = tmp.ct.AdVaxBase
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 204)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.AdV3
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x).mul(tmp.ct.AdVaccineMult);
            },
            gain () {
                let gain = tmp.ct.buyables[204].total.mul(tmp.ct.buyables[204].effect)
                return gain
            },
            asv() {
                let gain = player.ct.AdVax3.div(1e16).max(10).log10().sub(1)
                if (challengeCompletions("ct",22)>=5) gain = gain.pow(2)
                if (hasUpgrade("ct",396)) gain = gain.pow(tmp.ct.upgrades[396].effect)
                if (hasMilestone("uv",15)) gain = powExp(gain,1.5)
                if (hasMilestone("uv",17)) gain = powExp(gain,1.1)
                return gain.mul(tmp.ct.typeGain).div(1000)
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "AdVaccines") return
                let extra = ""
                let dis = "Produces AnVaxxed Vaccines"
                if (player.ct.challenges[22]>=3) dis += " and <span style='color:#00aaaa'>ASV Vaccines</span>"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Adverse Vaxxers\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 204)) + "("+formatWhole(player.ct.AdV3)+")"
            },
            unlocked() { return hasUpgrade("ct",373) }, 
            canAfford() {
                    return player.ct.Advaxxers.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[204].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",395)) player.ct.Advaxxers = player.ct.Advaxxers.sub(cost).max(0)
                    player.ct.AdV3 = player.ct.AdV3.add(1).max(1)
                    player.ct.AdVax3 = player.ct.AdVax3.add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.ct.Advaxxers
                let target = s.div(tmp.ct.buyables[204].cost).mul(999999).add(1).log10().div(6)
                return target.floor()
            },
            buyMax() { // logr(s(r-1)/a1+1)=(n)
                let target = tmp.ct.buyables[204].maxAfford
                let cost = Decimal.sub(1,Decimal.pow(1e6,target)).mul(tmp.ct.buyables[204].cost).div(-999999)
                let diff = target
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",395)) player.ct.Advaxxers = player.ct.Advaxxers.sub(cost).max(0)
                    player.ct.AdV3 = player.ct.AdV3.add(diff)
                    player.ct.AdVax3 = player.ct.AdVax3.add(diff)
                    player.ct.buyables[204] = player.ct.buyables[204].add(diff)
                    if (!hasUpgrade("ct",395)) updateTemp()
                }
            },
            style: {"width":"150px","height":"150px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[204].canAfford) color = "radial-gradient(#383434, #153d63)"
                return color
                }
            }
        },
        211: {
			title: "AnVaxxed AdVaxxer",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player.ct.AdV4
                let cost = Decimal.pow(1e10,x).mul("e555")
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = tmp.ct.AdVaxBase
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 211)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.AdV4
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x).mul(tmp.ct.AdVaccineMult).div(1e15);
            },
            gain () {
                let gain = tmp.ct.buyables[211].total.mul(tmp.ct.buyables[211].effect)
                return gain
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "AdVaccines") return
                let extra = ""
                let dis = "Produces AnVaxxed Vaxxers"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Adverse Vaxxers\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 211)) + "("+formatWhole(player.ct.AdV4)+")"
            },
            unlocked() { return hasUpgrade("ct",392) }, 
            canAfford() {
                    return player.ct.Advaxxers.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[211].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",395)) player.ct.Advaxxers = player.ct.Advaxxers.sub(cost).max(0)
                    player.ct.AdV4 = player.ct.AdV4.add(1).max(1)
                    player.ct.AdVax4 = player.ct.AdVax4.add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.ct.Advaxxers
                let target = s.div(tmp.ct.buyables[211].cost).mul(9999999999).add(1).log10().div(10)
                return target.floor()
            },
            buyMax() { // logr(s(r-1)/a1+1)=(n)
                let target = tmp.ct.buyables[211].maxAfford
                let cost = Decimal.sub(1,Decimal.pow(1e10,target)).mul(tmp.ct.buyables[211].cost).div(-9999999999)
                let diff = target
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!hasUpgrade("ct",395)) player.ct.Advaxxers = player.ct.Advaxxers.sub(cost).max(0)
                    player.ct.AdV4 = player.ct.AdV4.add(diff)
                    player.ct.AdVax4 = player.ct.AdVax4.add(diff)
                    player.ct.buyables[211] = player.ct.buyables[211].add(diff)
                    if (!hasUpgrade("ct",395)) updateTemp()
                }
            },
            style: {"width":"150px","height":"150px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[211].canAfford) color = "radial-gradient(#383434, #153d63)"
                return color
                }
            }
        },
        221: {
			title: "Anti-Type Boost",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player.ct.Atb
                let exp = tmp.ct.buyables[221].coste
                let cost = Decimal.pow(1e6,x.pow(exp)).mul("e1111")
                return cost.floor()
            },
            coste() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1.3)
                if (hasUpgrade("ct",454)) cost = cost.sub(0.2)
                return cost
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = decimalThree
                if (hasUpgrade("ct",416)) base = base.add(tmp.ct.upgrades[416].effect)
                return base
            },
            total() {
                let total = getBuyableAmount("ct", 221)
                return total
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.Atb
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "AdVaccines") return
                let extra = ""
                let dis = "Multiply Anti-Vaccine type gain by "+format(tmp.ct.buyables[221].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Adverse Vaxxers\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 221))
            },
            unlocked() { return player.ct.challenges[31]>2 }, 
            canAfford() {
                    return player.ct.Advaxxers.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[221].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.Atb = player.ct.Atb.add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.ct.Advaxxers
                let exp = tmp.ct.buyables[221].coste
                let target = s.div("e1111").log10().div(6).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.ct.buyables[221].maxAfford
                let exp = tmp.ct.buyables[221].coste
                let cost = Decimal.pow(1e6,target.pow(exp)).mul("e1111")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.Atb = player.ct.Atb.max(target)
                    player.ct.buyables[221] = player.ct.buyables[221].max(target)
                }
            },
            style: {"width":"150px","height":"150px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[221].canAfford) color = "radial-gradient(#383434, #153d63)"
                return color
                }
            }
        },
        231: {
			title: "Anti-Booster Gain",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player.ct.aB
                let exp = tmp.ct.buyables[231].exp
                let cost = Decimal.pow(1e300,x.pow(exp)).mul("e155155")
                return cost.floor()
            },
            exp() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let exp = 1.6
                if (hasUpgrade("ct",515)) exp = 1.59
                if (hasUpgrade("ct",531)) {
                    exp = 1.58
                    if (player.ct.aBoost.gte("e5573000")) exp = 1.57
                    if (player.ct.aBoost.gte("e5705000")) exp = 1.56
                }
                if (hasUpgrade("ct",534)) {
                    if (player.ct.aBoost.gte("e1009e4")) exp = 1.55
                    if (player.ct.aBoost.gte("e1103e4")) exp = 1.54
                }
                if (hasUpgrade("ct",535)) {
                    if (player.ct.aBoost.gte("e14745e3")) exp = 1.53
                }
                if (hasUpgrade("ct",542)) {
                    if (player.ct.aBoost.gte("e2927e4")) exp = 1.52
                }
                return exp
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.aBoost.max(10).log10().pow(0.4).add(1)
                if (hasUpgrade("ct",472)) base = base.pow(tmp.ct.upgrades[472].effect)
                if (hasUpgrade("ct",432)) base = base.pow(tmp.ct.upgrades[432].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let amt = player.ct.buyables[231]
                let mult = tmp[this.layer].buyables[this.id].mult
                let base = tmp[this.layer].buyables[this.id].base
                let exp = tmp.ct.getDistEff
                if (hasUpgrade("uv",24)) exp = exp.mul(tmp.uv.upgrades[24].effect)
                return mult.mul(amt).mul(base).pow(exp);
            },
            mult() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.aB
                let base = tmp[this.layer].buyables[this.id].base
                let mult = tmp.ct.getABmult
                let eff = Decimal.pow(base, x.sub(1).max(0)).mul(mult)
                if (hasUpgrade("ct",424)) eff = eff.mul(tmp.ct.upgrades[424].effect)
                if (hasUpgrade("ct",464)) eff = eff.mul(tmp.ct.upgrades[464].effect)
                if (hasUpgrade("ct",465)) eff = eff.mul(tmp.ct.upgrades[465].effect)
                if (hasUpgrade("ct",466)) eff = eff.mul(tmp.ct.upgrades[466].effect)
                if (hasUpgrade("ct",481)) eff = eff.mul(tmp.ct.upgrades[481].effect)
                if (hasUpgrade("ct",491)) eff = eff.mul(tmp.ct.upgrades[491].effect)
                if (hasAchievement("a",214)) eff = eff.mul(player.a.points)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "Anti-Boosters") return
                let amt = getBuyableAmount("ct", 231)
                let base = format(tmp.ct.buyables[231].base)
                let dis = "Gain "+base+" Anti-Boosters per second and multiply base gain by "+base+" (based on Anti-Boosters)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Adverse Vaxxers\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"/s\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].mult)+"x\n\
                Amount: " + formatWhole(amt)+"("+formatWhole(player.ct.aB)+")"
            },
            unlocked() { return hasUpgrade("ct",422) }, 
            canAfford() {
                    return player.ct.Advaxxers.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[231].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.aB = player.ct.aB.add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.ct.Advaxxers
                let exp = tmp.ct.buyables[231].exp
                let target = s.div("e155155").log10().div(300).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.ct.buyables[231].maxAfford
                let exp = tmp.ct.buyables[231].exp
                let cost = Decimal.pow(1e300,target.pow(exp)).mul("e155155")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.aB = player.ct.aB.max(target)
                    player.ct.buyables[231] = player.ct.buyables[231].max(target)
                }
            },
            style: {"width":"180px","height":"180px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[231].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                return color
                }
            }
        },
        232: {
			title: "Anti-Booster Gainer",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player.ct.aB2
                let cost = Decimal.pow(10,x.pow(1.4)).mul(1e10)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.buyables[231].max(10).log10().pow(0.4).add(1)
                if (hasUpgrade("ct",472)) base = base.pow(tmp.ct.upgrades[472].effect)
                if (hasUpgrade("ct",432)) base = base.pow(tmp.ct.upgrades[432].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let amt = player.ct.buyables[232]
                let mult = tmp[this.layer].buyables[this.id].mult
                let base = tmp[this.layer].buyables[this.id].base
                return mult.mul(amt).mul(base);
            },
            mult() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.aB2
                let base = tmp[this.layer].buyables[this.id].base
                let mult = tmp.ct.getABmult
                return Decimal.pow(base, x.sub(1).max(0)).mul(mult);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "Anti-Boosters") return
                let amt = getBuyableAmount("ct", 232)
                let base = format(tmp.ct.buyables[232].base)
                let dis = "Gain "+base+" 'Anti-Booster Gain's per second and multiply base gain by "+base+" (based on 'Anti-Booster Gain's)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Boosters\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"/s\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].mult)+"x\n\
                Amount: " + formatWhole(amt)+"("+formatWhole(player.ct.aB2)+")"
            },
            unlocked() { return hasUpgrade("ct",422) }, 
            canAfford() {
                    return player.ct.aBoost.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[232].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.aBoost = player.ct.aBoost.sub(cost)
                    player.ct.aB2 = player.ct.aB2.add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.ct.aBoost
                let target = s.div(1e10).log10().root(1.4)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.ct.buyables[232].maxAfford
                let cost = Decimal.pow(10,target.pow(1.4)).mul(1e10)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.aB2 = player.ct.aB2.max(target)
                    player.ct.buyables[232] = player.ct.buyables[232].max(target)
                }
            },
            style: {"width":"180px","height":"180px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[232].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                return color
                }
            }
        },
        233: {
			title: "Anti-Booster Gainest",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player.ct.aB3
                let cost = Decimal.pow(30,x.pow(1.4)).mul(1e61)
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.buyables[231].max(10).log10().pow(0.6).add(2)
                if (hasUpgrade("ct",472)) base = base.pow(tmp.ct.upgrades[472].effect)
                if (hasUpgrade("ct",432)) base = base.pow(tmp.ct.upgrades[432].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let amt = player.ct.buyables[233]
                let mult = tmp[this.layer].buyables[this.id].mult
                let base = tmp[this.layer].buyables[this.id].base
                return mult.mul(amt).mul(base);
            },
            mult() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.aB3
                let base = tmp[this.layer].buyables[this.id].base
                let mult = tmp.ct.getABmult
                return Decimal.pow(base, x.sub(1).max(0)).mul(mult);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "Anti-Boosters") return
                let amt = getBuyableAmount("ct", 233)
                let base = format(tmp.ct.buyables[233].base)
                let dis = "Gain "+base+" 'Anti-Booster Gainer's per second and multiply base gain by "+base+" (based on 'Anti-Booster Gain's)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Boosters\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"/s\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].mult)+"x\n\
                Amount: " + formatWhole(amt)+"("+formatWhole(player.ct.aB3)+")"
            },
            unlocked() { return hasUpgrade("ct",422) }, 
            canAfford() {
                    return player.ct.aBoost.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[233].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.aBoost = player.ct.aBoost.sub(cost)
                    player.ct.aB3 = player.ct.aB3.add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.ct.aBoost
                let target = s.div(1e61).log(30).root(1.4)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.ct.buyables[233].maxAfford
                let cost = Decimal.pow(30,target.pow(1.4)).mul(1e61)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.aB3 = player.ct.aB3.max(target)
                    player.ct.buyables[233] = player.ct.buyables[233].max(target)
                }
            },
            style: {"width":"180px","height":"180px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[233].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                return color
                }
            }
        },
        241: {
			title: "Antier-Booster Gain",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player.ct.aB4
                let cost = Decimal.pow(1e3,x.pow(1.4)).mul("e420")
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.buyables[233].max(10).log10().pow(0.5).add(1)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let amt = player.ct.buyables[241]
                let mult = tmp[this.layer].buyables[this.id].mult
                let base = tmp[this.layer].buyables[this.id].base
                return mult.mul(amt).mul(base);
            },
            mult() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.aB4
                let base = tmp[this.layer].buyables[this.id].base
                let mult = tmp.ct.getAerBmult
                return Decimal.pow(base, x.sub(1).max(0)).mul(mult);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "Anti-Boosters") return
                let amt = getBuyableAmount("ct", 241)
                let base = format(tmp.ct.buyables[241].base)
                let dis = "Gain "+base+" 'Anti-Booster Gainest (A-B Gest)'s per second and multiply base gain by "+base+" (based on 'A-B Gest's) and extra 'A-B Gest' buyables multiply all 'A-B' buyable multipliers"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Boosters\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"/s\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].mult)+"x\n\
                Amount: " + formatWhole(amt)+"("+formatWhole(player.ct.aB4)+")"
            },
            unlocked() { return hasUpgrade("ct",422) }, 
            canAfford() {
                    return player.ct.aBoost.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[241].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.aBoost = player.ct.aBoost.sub(cost)
                    player.ct.aB4 = player.ct.aB4.add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.ct.aBoost
                let target = s.div("e420").log(1e3).root(1.4)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.ct.buyables[241].maxAfford
                let cost = Decimal.pow(1e3,target.pow(1.4)).mul("e420")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.aB4 = player.ct.aB4.max(target)
                    player.ct.buyables[241] = player.ct.buyables[241].max(target)
                }
            },
            style: {"width":"180px","height":"180px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[241].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                return color
                }
            }
        },
        242: {
			title: "Antier-Booster Gainer",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player.ct.aB5
                let cost = Decimal.pow(1e10,x.pow(1.4)).mul("e1375")
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.buyables[241].max(10).log10().pow(0.5).add(1)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let amt = player.ct.buyables[242]
                let mult = tmp[this.layer].buyables[this.id].mult
                let base = tmp[this.layer].buyables[this.id].base
                return mult.mul(amt).mul(base);
            },
            mult() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.aB5
                let base = tmp[this.layer].buyables[this.id].base
                let mult = tmp.ct.getAerBmult
                return Decimal.pow(base, x.sub(1).max(0)).mul(mult);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "Anti-Boosters") return
                let amt = getBuyableAmount("ct", 242)
                let base = format(tmp.ct.buyables[242].base)
                let dis = "Gain "+base+" 'Antier-Booster Gain (Aer-B G)'s per second and multiply base gain by "+base+" (based on 'Aer-B G's) and extra 'Aer-B G' buyables<sup>2</sup> multiply all 'A-B' buyable multipliers"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Boosters\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"/s\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].mult)+"x\n\
                Amount: " + formatWhole(amt)+"("+formatWhole(player.ct.aB5)+")"
            },
            unlocked() { return hasUpgrade("ct",422) }, 
            canAfford() {
                    return player.ct.aBoost.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[242].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.aBoost = player.ct.aBoost.sub(cost)
                    player.ct.aB5 = player.ct.aB5.add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.ct.aBoost
                let target = s.div("e1375").log(1e10).root(1.4)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.ct.buyables[242].maxAfford
                let cost = Decimal.pow(1e10,target.pow(1.4)).mul("e1375")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.aB5 = player.ct.aB5.max(target)
                    player.ct.buyables[242] = player.ct.buyables[242].max(target)
                }
            },
            style: {"width":"180px","height":"180px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[242].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                return color
                }
            }
        },
        243: {
			title: "Antier-Booster Gainest",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player.ct.aB6
                let cost = Decimal.pow(1e40,x.pow(1.4)).mul("e3110")
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.buyables[242].max(10).log10().pow(0.75).add(1)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let amt = player.ct.buyables[243]
                let mult = tmp[this.layer].buyables[this.id].mult
                let base = tmp[this.layer].buyables[this.id].base
                return mult.mul(amt).mul(base);
            },
            mult() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.aB6
                let base = tmp[this.layer].buyables[this.id].base
                let mult = tmp.ct.getAerBmult
                return Decimal.pow(base, x.sub(1).max(0)).mul(mult);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "Anti-Boosters") return
                let amt = getBuyableAmount("ct", 243)
                let base = format(tmp.ct.buyables[243].base)
                let dis = "Gain "+base+" 'Antier-Booster Gainer (Aer-B Ger)'s per second and multiply base gain by "+base+" (based on 'Aer-B Ger's) and extra 'Aer-B Ger' buyables<sup>3</sup> multiply all 'A-B' buyable multipliers"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Boosters\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"/s\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].mult)+"x\n\
                Amount: " + formatWhole(amt)+"("+formatWhole(player.ct.aB6)+")"
            },
            unlocked() { return hasUpgrade("ct",422) }, 
            canAfford() {
                    return player.ct.aBoost.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[243].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.aBoost = player.ct.aBoost.sub(cost)
                    player.ct.aB6 = player.ct.aB6.add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.ct.aBoost
                let target = s.div("e3110").log(1e40).root(1.4)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.ct.buyables[243].maxAfford
                let cost = Decimal.pow(1e40,target.pow(1.4)).mul("e3110")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.ct.aB6 = player.ct.aB6.max(target)
                    player.ct.buyables[243] = player.ct.buyables[243].max(target)
                }
            },
            style: {"width":"180px","height":"180px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[243].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                return color
                }
            }
        },
        251: {
			title: "Antiest-Booster Gain",
			cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player.ct.aB7
                if (x.gte(1e3)) x = x.mul(1.5).sub(500).div(1e3).pow(1.2).mul(1e3)
                if (x.gte(540)) x = x.mul(1.5).sub(270).div(540).pow(1.1).mul(540)
                let cost = Decimal.pow(1e6,x.pow(1.5)).mul("e500")
                return cost.floor()
            },
            base(x=player[this.layer].buyables[this.id]) { 
                let base = player.ct.buyables[243].max(10).log10().pow(0.6).add(1)
                if (hasUpgrade("ct",504)) base = base.pow(tmp.ct.upgrades[504].effect)
                if (hasUpgrade("ct",511)) base = base.pow(tmp.ct.upgrades[511].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let amt = player.ct.buyables[251].add(player.ct.extraBoost)
                let mult = tmp[this.layer].buyables[this.id].mult
                let base = tmp[this.layer].buyables[this.id].base
                return mult.mul(amt).mul(base);
            },
            mult() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.aB7
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x.sub(1).max(0)).mul(tmp.ct.extraBoostEff);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "Anti-Boosters") return
                let amt = getBuyableAmount("ct", 251).add(player.ct.extraBoost)
                let base = format(tmp.ct.buyables[251].base)
                let dis = "Gain "+base+" 'Antier-Booster Gainest (Aer-B Gest)'s per second and multiply base gain by "+base+" (based on 'Aer-B Gest's) and extra 'Aer-B Gest' buyables multiply all 'Aer-B' buyable multipliers"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" 'Antier-Booster Gain's\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"/s\n\
                Multiplier: " + format(tmp[this.layer].buyables[this.id].mult)+"x\n\
                Amount: " + formatWhole(amt)+"("+formatWhole(player.ct.aB7)+")"
            },
            unlocked() { return hasUpgrade("ct",436) }, 
            canAfford() {
                    return player.ct.buyables[241].gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[251].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("uv", 15)) {
                        player.ct.aB7 = b
                        player[this.layer].buyables[this.id] = b
                    }
                    else {
                    player.ct.buyables[241] = player.ct.buyables[241].sub(cost)
                    player.ct.aB7 = player.ct.aB7.add(1).max(1)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.ct.buyables[241]
                let target = s.div("e500").log(1e6).root(1.5)
                if (target.gte(540)) target = target.div(540).root(1.1).mul(540).add(270).div(1.5)
                if (target.gte(1e3)) target = target.div(1e3).root(1.2).mul(1e3).add(500).div(1.5)
                return target.floor().add(1)
            },
            style: {"width":"180px","height":"180px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[251].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                return color
                }
            }
        },
        261: {
            title: "Distance Divider",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.ct.buyables[261].costb
                let exp = tmp.ct.buyables[261].coste
                let x = player.ct.buyables[261]
                if (x.gte(300)) x = Decimal.pow(1+1/300*1.2,x.sub(300)).mul(300)
                if (x.gte(180)) x = x.mul(1.5).sub(90)
                let cost = Decimal.pow(base,x.pow(exp)).mul("e116000")
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal("e2022")
                return cost
            },
            coste() { 
                let cost = new Decimal(1.7)
                return cost
            },
            base() { 
                let base = new Decimal(1.03)
                if (hasUpgrade("ct",525)) {
                    if (player.ct.aBoost.gte("e3132000")) base = base.add(0.01)
                    if (player.ct.aBoost.gte("e3494000")) base = base.add(0.01)
                }
                if (hasUpgrade("ct",532)) {
                    base = base.add(0.005)
                    if (player.ct.aBoost.gte("e68e5")) base = base.add(0.005)
                }
                return base
            },
            exp() { // Effects of owning x of the items, x is a decimal
                let exp = .5
                if (hasUpgrade("ct",544)) exp = .51
                if (hasUpgrade("ct",546)) exp = .52
                if (hasMilestone("uv",21)) exp = .525
                if (hasUpgrade("ct",454)) exp += .005
                return exp;
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.buyables[261]
                let base = tmp[this.layer].buyables[this.id].base
                let exp = tmp[this.layer].buyables[this.id].exp
                return Decimal.pow(base, x.pow(exp));
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "Anti-Distancing") return
                let extra = ""
                let dis = "Divide the distance between people by "+format(tmp.ct.buyables[261].base)+"<sup>x<sup>"+format(tmp.ct.buyables[261].exp)+"</sup></sup>"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Boosters\n\
                Effect: /" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 261))
            },
            unlocked() { return hasUpgrade("ct",443) }, 
            canAfford() {
                    return player.ct.aBoost.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[261].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        player.ct.aBoost = player.ct.aBoost.sub(cost)
                        player.ct.distBuy[0] = player.ct.distBuy[0].add(1).max(1)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.ct.aBoost
                let base = tmp.ct.buyables[261].costb
                let exp = tmp.ct.buyables[261].coste
                let target = s.div("e116000").log(base).root(exp)
                return target.floor().add(1)
            },
            style: {"width":"180px","height":"180px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[261].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                return color
                }
            }
        },
        262: {
            title: "Closer Contact",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.ct.buyables[262].costb
                let exp = tmp.ct.buyables[262].coste
                let x = player.ct.buyables[262]
                if (x.gte(230)) x = Decimal.pow(1+1/230*1.2,x.sub(230)).mul(230)
                if (x.gte(140)) x = x.mul(1.5).sub(70)
                let cost = Decimal.pow(base,x.pow(exp)).mul("e120500")
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal("e3000")
                return cost
            },
            coste() { 
                let cost = new Decimal(1.71)
                return cost
            },
            base() { 
                let base = player.ct.buyables[261].add(100).log10().div(2).sub(1).mul(5).add(1)
                if (base.gte(1.13)) base = base.div(1.13).pow(0.2).mul(1.13)
                if (base.gte(1.2)) base = base.div(1.2).pow(0.35).mul(1.2)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.buyables[262]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x.pow(0.4));
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "Anti-Distancing") return
                let extra = ""
                let dis = "Divide the distance between people by "+format(tmp.ct.buyables[262].base)+"<sup>x<sup>0.4</sup></sup> (based on 'Distance Divider' amount)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Boosters\n\
                Effect: /" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 262))
            },
            unlocked() { return hasUpgrade("ct",443) }, 
            canAfford() {
                    return player.ct.aBoost.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[262].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        player.ct.aBoost = player.ct.aBoost.sub(cost)
                        player.ct.distBuy[1] = player.ct.distBuy[1].add(1).max(1)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.ct.aBoost
                let base = tmp.ct.buyables[262].costb
                let exp = tmp.ct.buyables[262].coste
                let target = s.div("e120500").log(base).root(exp)
                return target.floor().add(1)
            },
            style: {"width":"180px","height":"180px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[262].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                return color
                }
            }
        },
        263: {
            title: "Group Gatherer",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.ct.buyables[263].costb
                let exp = tmp.ct.buyables[263].coste
                let x = player.ct.buyables[263]
                if (x.gte(204)) x = Decimal.pow(1+1/204*1.2,x.sub(204)).mul(204)
                if (x.gte(125)) x = x.mul(1.5).sub(62.5)
                let cost = Decimal.pow(base,x.pow(exp)).mul("e127000")
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal("e3500")
                return cost
            },
            coste() { 
                let cost = new Decimal(1.72)
                return cost
            },
            base() { 
                let base = player.ct.buyables[251].add(100).log10().div(2).pow(0.5)
                if (base.gte(1.1)) base = base.div(1.1).pow(0.3).mul(1.1)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.buyables[263]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x.pow(0.45));
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "Anti-Distancing") return
                let extra = ""
                let dis = "Divide the distance between people by "+format(tmp.ct.buyables[263].base)+"<sup>x<sup>0.45</sup></sup> (based on 'Antiest-Booster Gain' amount)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Boosters\n\
                Effect: /" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 263))
            },
            unlocked() { return hasUpgrade("ct",443) }, 
            canAfford() {
                    return player.ct.aBoost.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[263].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        player.ct.aBoost = player.ct.aBoost.sub(cost)
                        player.ct.distBuy[2] = player.ct.distBuy[2].add(1).max(1)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.ct.aBoost
                let base = tmp.ct.buyables[263].costb
                let exp = tmp.ct.buyables[263].coste
                let target = s.div("e120500").log(base).root(exp)
                return target.floor().add(1)
            },
            style: {"width":"180px","height":"180px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[263].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                return color
                }
            }
        },
        271: {
            title: "Physical Contacter",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.ct.buyables[271].costb
                let exp = tmp.ct.buyables[271].coste
                let x = player.ct.buyables[271]
                if (x.gte(182)) x = Decimal.pow(1+1/182*1.2,x.sub(182)).mul(182)
                if (x.gte(110)) x = x.mul(1.5).sub(55)
                let cost = Decimal.pow(base,x.pow(exp)).mul("e170300")
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal("e4000")
                return cost
            },
            coste() { 
                let cost = new Decimal(1.73)
                return cost
            },
            base() { 
                let base = player.ct.extraBoost.add(10).log10().pow(0.02)
                if (base.gte(1.12)) base = base.div(1.12).pow(0.2).mul(1.12)
                if (base.gte(1.139)) base = base.div(1.139).pow(0.3).mul(1.139)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.buyables[271]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x.pow(0.525));
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "Anti-Distancing") return
                let extra = ""
                let dis = "Divide the distance between people by "+format(tmp.ct.buyables[271].base)+"<sup>x<sup>0.525</sup></sup> (based on 'Antiest-Booster Gain' extra amount)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Boosters\n\
                Effect: /" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 271))
            },
            unlocked() { return player.ct.aB7.gte(59) }, 
            canAfford() {
                    return player.ct.aBoost.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[271].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        player.ct.aBoost = player.ct.aBoost.sub(cost)
                        player.ct.distBuy[3] = player.ct.distBuy[3].add(1).max(1)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.ct.aBoost
                let base = tmp.ct.buyables[271].costb
                let exp = tmp.ct.buyables[271].coste
                let target = s.div("e170300").log(base).root(exp)
                return target.floor().add(1)
            },
            style: {"width":"180px","height":"180px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[271].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                return color
                }
            }
        },
        272: {
            title: "Movement Unestricter",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.ct.buyables[272].costb
                let exp = tmp.ct.buyables[272].coste
                let x = player.ct.buyables[272]
                if (x.gte(165)) x = Decimal.pow(1+1/165*1.2,x.sub(165)).mul(165)
                if (x.gte(100)) x = x.mul(1.5).sub(50)
                let cost = Decimal.pow(base,x.pow(exp)).mul("e192000")
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal("e4500")
                return cost
            },
            coste() { 
                let cost = new Decimal(1.74)
                return cost
            },
            base() { 
                let base = slog(player.points.max(10)).max(10).log10().div(24).max(1).pow(0.35)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.buyables[272]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x.pow(0.475));
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "Anti-Distancing") return
                let extra = ""
                let dis = "Divide the distance between people by "+format(tmp.ct.buyables[272].base)+"<sup>x<sup>0.475</sup></sup> (based on cases)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Boosters\n\
                Effect: /" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 272))
            },
            unlocked() { return player.ct.aB7.gte(65) }, 
            canAfford() {
                    return player.ct.aBoost.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[272].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        player.ct.aBoost = player.ct.aBoost.sub(cost)
                        player.ct.distBuy[4] = player.ct.distBuy[4].add(1).max(1)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.ct.aBoost
                let base = tmp.ct.buyables[272].costb
                let exp = tmp.ct.buyables[272].coste
                let target = s.div("e192000").log(base).root(exp)
                return target.floor().add(1)
            },
            style: {"width":"180px","height":"180px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[272].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                return color
                }
            }
        },
        273: {
            title: "People Interacter",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.ct.buyables[273].costb
                let exp = tmp.ct.buyables[273].coste
                let x = player.ct.buyables[273]
                if (x.gte(152)) x = Decimal.pow(1+1/152*1.2,x.sub(152)).mul(152)
                if (x.gte(95)) x = x.mul(1.5).sub(47.5)
                let cost = Decimal.pow(base,x.pow(exp)).mul("e341000")
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal("e5000")
                return cost
            },
            coste() { 
                let cost = new Decimal(1.75)
                return cost
            },
            base() { 
                let base = player.ct.Advaxxers.max(10).log10().max(10).log10().div(8.3).max(1).pow(2)
                if (base.gte(1.11)) base = base.div(1.11).pow(0.25).mul(1.11)
                if (base.gte(1.3)) base = base.div(1.3).pow(0.3).mul(1.3)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.buyables[273]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x.pow(0.425));
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "Anti-Distancing") return
                let extra = ""
                let dis = "Divide the distance between people by "+format(tmp.ct.buyables[273].base)+"<sup>x<sup>0.425</sup></sup> (based on Adverse Vaxxers)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" Anti-Boosters\n\
                Effect: /" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 273))
            },
            unlocked() { return player.ct.aB7.gte(95) }, 
            canAfford() {
                    return player.ct.aBoost.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[273].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        player.ct.aBoost = player.ct.aBoost.sub(cost)
                        player.ct.distBuy[5] = player.ct.distBuy[5].add(1).max(1)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.ct.aBoost
                let base = tmp.ct.buyables[273].costb
                let exp = tmp.ct.buyables[273].coste
                let target = s.div("e341000").log(base).root(exp)
                return target.floor().add(1)
            },
            style: {"width":"180px","height":"180px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[273].canAfford) color = "radial-gradient(#fa5f9c, #9a3d72)"
                return color
                }
            }
        },
        281: {
            title: "Anti-Base Mult",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.ct.buyables[281].costb
                let exp = tmp.ct.buyables[281].coste
                let x = player.ct.buyables[281]
                if (x.gte(100)) x = x.mul(1.3).sub(30).div(100).pow(1.3).mul(100)
                if (x.gte(98)) x = x.add(1)
                if (x.gte(85)) x = x.mul(1.3).sub(25.5).div(85).pow(1.3).mul(85)
                if (x.gte(45)) x = x.mul(1.2).sub(9)
                if (x.gte(40)) x = x.mul(1.35).sub(14)
                let cost = Decimal.pow(base,x.pow(exp)).mul(1.616255e-35*3)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1.1)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.075)
                return cost
            },
            base() { 
                let base = powExp(tmp.ct.getAntiDist.div(1.616255e-35).add(10).log10().pow(2).mul(10),1.5).div(10).add(0.5)
                if (base.gte(3)) base = base.div(3).pow(0.2).mul(3).sub(3).div(1.5).add(3)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.buyables[281]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "Anti-Distancing") return
                let extra = ""
                let dis = "Multiply base anti-distance gain by "+format(tmp.ct.buyables[281].base)+" (based on Anti-Distance)"
                return dis + ".\n\
                Req: " + distShort(tmp[this.layer].buyables[this.id].cost)+" Anti-Distance\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 281))
            },
            unlocked() { return hasUpgrade("ct",541) }, 
            canAfford() {
                    return tmp.ct.getAntiDist.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[281].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        player.ct.distBuy[6] = player.ct.distBuy[6].add(1).max(1)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = tmp.ct.getAntiDist
                let base = tmp.ct.buyables[281].costb
                let exp = tmp.ct.buyables[281].coste
                let target = s.div(1.616255e-35*3).log(base).root(exp)
                return target.floor().add(1)
            },
            style: {"width":"180px","height":"180px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[281].canAfford) color = "radial-gradient(#05a063, #65c28d)"
                return color
                }
            }
        },
        282: {
            title: "Anti-Base Exp",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.ct.buyables[282].costb
                let exp = tmp.ct.buyables[282].coste
                let x = player.ct.buyables[282]
                if (x.gte(100)) x = x.mul(1.3).sub(30).div(100).pow(1.3).mul(100)
                if (x.gte(96)) x = x.add(1)
                if (x.gte(85)) x = x.mul(1.3).sub(25.5).div(85).pow(1.3).mul(85)
                if (x.gte(45)) x = x.mul(1.2).sub(9)
                if (x.gte(40)) x = x.mul(1.35).sub(14)
                let cost = Decimal.pow(base,x.pow(exp)).mul(1.616255e-35*4)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1.1)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.08)
                return cost
            },
            base() { 
                let base = Decimal.div(0.002,tmp.ct.getDist).add(1).log10().add(1).pow(0.8).sub(1).mul(5)
                if (base.gte(2.9)) base = base.div(2.9).pow(0.5).mul(2.9).sub(2.9).div(2).add(2.9)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.buyables[282]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "Anti-Distancing") return
                let extra = ""
                let dis = "Increase base anti-distance gain exponent by "+format(tmp.ct.buyables[282].base)+" (based on Distance)"
                return dis + ".\n\
                Req: " + distShort(tmp[this.layer].buyables[this.id].cost)+" Anti-Distance\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 282))
            },
            unlocked() { return hasUpgrade("ct",541) }, 
            canAfford() {
                    return tmp.ct.getAntiDist.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[282].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        player.ct.distBuy[7] = player.ct.distBuy[7].add(1).max(1)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = tmp.ct.getAntiDist
                let base = tmp.ct.buyables[282].costb
                let exp = tmp.ct.buyables[282].coste
                let target = s.div(1.616255e-35*4).log(base).root(exp)
                return target.floor().add(1)
            },
            style: {"width":"180px","height":"180px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[282].canAfford) color = "radial-gradient(#05a063, #65c28d)"
                return color
                }
            }
        },
        283: {
            title: "Anti-Exp",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.ct.buyables[283].costb
                let exp = tmp.ct.buyables[283].coste
                let x = player.ct.buyables[283]
                if (x.gte(17)) x = x.mul(1.2).sub(3.4)
                let cost = Decimal.pow(base,x.pow(exp)).mul(1.616255e-35*4.9)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1.2)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.7)
                return cost
            },
            base() { 
                let base = player.ct.aBoost.max(10).log10().max(10).log10().pow(2).sub(1).div(5e3)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.ct.buyables[283]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "ct" || player.subtabs.ct.mainTabs != "Anti-Maskers" || player.subtabs.ct.Av != "Anti-Distancing") return
                let extra = ""
                let dis = "Increase anti-distance gain exponent by "+format(tmp.ct.buyables[283].base)+" (based on Anti-Boosters)"
                return dis + ".\n\
                Req: " + distShort(tmp[this.layer].buyables[this.id].cost)+" Anti-Distance\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("ct", 283))
            },
            unlocked() { return hasUpgrade("ct",541) }, 
            canAfford() {
                    return tmp.ct.getAntiDist.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.ct.buyables[283].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        player.ct.distBuy[8] = player.ct.distBuy[8].add(1).max(1)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = tmp.ct.getAntiDist
                let base = tmp.ct.buyables[283].costb
                let exp = tmp.ct.buyables[283].coste
                let target = s.div(1.616255e-35*4.9).log(base).root(exp)
                return target.floor().add(1)
            },
            style: {"width":"180px","height":"180px","background"() {
                let color = "#bf8f8f"
                if (tmp.ct.buyables[283].canAfford) color = "radial-gradient(#05a063, #65c28d)"
                return color
                }
            }
        },
    },
    clickables: {
        rows: 4,
        cols: 3,
        11: {
            display() {
                return formatWhole(player.ct.number)
            },
            canClick() {return false},
            onClick() {
                
            },
            style: {'height':'120px', 'width':'120px','color':'#ffffff','font-size':'30px',
            'background-color'() {
                let color = "#000000"
                if (player.ct.number == 0) color = "#00aa00"
                else if (player.ct.red.includes(player.ct.number)) color = "#aa0000"
                return color
            }
        },
        },
        12: {
            display() {
                return "<h2>Roll</h2><br>"+formatTime(player.ct.rolltime)
            },
            canClick() {return (player.ct.Am.gte(tmp.ct.getBetAmt)||hasUpgrade("ct",166)) && player.ct.rolltime==0 && tmp.ct.getBetAmt.gt(0)},
            onClick() {
                if (!hasUpgrade("ct",166)) player.ct.Am = player.ct.Am.sub(tmp.ct.getBetAmt).max(0)
                if (hasUpgrade("ct",166) && player.ct.bet<3) player.ct.win = decimalZero
                else if (hasUpgrade("ct",182) && player.ct.bet==3) player.ct.win = decimalZero
                else player.ct.win = tmp.ct.getBetAmt.neg()
                let starttime = 10
                if (hasUpgrade("ct",121)) starttime -=2
                if (hasUpgrade("ct",122)) starttime -=1
                if (hasUpgrade("ct",124)) starttime -=2
                if (hasUpgrade("ct",142)) starttime -=1
                if (hasUpgrade("ct",144)) starttime -=1
                if (hasUpgrade("ct",152)) starttime -=1
                if (hasUpgrade("ct",153)) starttime -=.5
                if (hasUpgrade("ct",155)) starttime -=.5
                if (hasUpgrade("ct",156)) starttime -=.5
                if (hasUpgrade("ct",165)) starttime -=.2
                if (hasUpgrade("ct",166)) starttime =0
                player.ct.rolltime = starttime
                player.ct.number = Math.floor(Math.random()*37)
                let chance = tmp.ct.getWinChance
                let gchance = tmp.ct.getGreenChance
                let y = (chance-1)*37/19+1
                let z = (gchance-1)*37/36+1
                let win = tmp.ct.getBetAmt
                let EvenWin = tmp.ct.getEvenPay.sub(1).mul(tmp.ct.getStreakMultNext).add(1)
                let GreenWin = tmp.ct.getGreenPay.sub(1).mul(tmp.ct.getStreakGreenNext).add(1)
                let num = Math.random()
                if (num<y) {
                    if (player.ct.bet==1) player.ct.number = player.ct.red[Math.floor(Math.random() * 18)]
                    else if (player.ct.bet==2) player.ct.number = player.ct.black[Math.floor(Math.random() * 18)]
                }
                if (num<z) {
                    if (player.ct.bet==3) player.ct.number = 0
                }
                if (player.ct.number == 0) {
                    if (player.ct.bet==3) {
                        player.ct.Am = player.ct.Am.add(win.mul(GreenWin))
                        player.ct.win = player.ct.win.add(win.mul(GreenWin))
                    }
                }
                else {
                    if (player.ct.red.includes(player.ct.number)) {
                        if (player.ct.bet == 1) {
                            player.ct.Am = player.ct.Am.add(win.mul(EvenWin))
                            player.ct.win = player.ct.win.add(win.mul(EvenWin))
                        }
                    }
                    else if (player.ct.bet == 2) {
                        player.ct.Am = player.ct.Am.add(win.mul(EvenWin))
                        player.ct.win = player.ct.win.add(win.mul(EvenWin))
                    }
                }
                if (player.ct.buyables[102].gte(1)) {
                if (player.ct.win.gt(0)) {
                    if (player.ct.bet == 3) {
                        if (hasUpgrade("ct",193)) player.ct.gwinstreak=getTimesRequired(tmp.ct.getGreenLoseChance,0.001)
                        else player.ct.gwinstreak++
                        player.ct.glosestreak=0
                    }
                    else {
                        if (hasUpgrade("ct",193)) player.ct.winstreak=getTimesRequired(tmp.ct.getLoseChance,0.001)
                        else if (hasUpgrade("ct",174)) {
                        player.ct.winstreak=bulkRoll(tmp.ct.getLoseChance,player.ms)
                        }
                        else player.ct.winstreak++
                        player.ct.losestreak=0
                    }
                }
                else {
                    if (player.ct.bet == 3) {
                        player.ct.glosestreak++
                        player.ct.gwinstreak=0
                    }
                    else {
                        player.ct.losestreak++
                        player.ct.winstreak=0
                    }
                }
                }
            },
            style: {'height':'120px', 'width':'120px'},
        },
        13: {
            display() {
                return "<h2>Auto-Roll<br>"+(player.ct.autoroll?"ON":"OFF")+"<br></h2>"+formatTime(player.ct.autorolltime)
            },
            canClick() {return true},
            onClick() {
                player.ct.autoroll=(player.ct.autoroll?false:true)
            },
            unlocked() {return hasUpgrade("ct",131)},
            style: {'height':'120px', 'width':'120px'},
        },
        21: {
            display() {
                return "<h1>RED</h1>"
            },
            canClick() {return true},
            onClick() {
                player.ct.bet=1
            },
            style: {'height':'120px', 'width':'120px','background-color':'#aa0000','color':'#ffffff'},
        },
        22: {
            display() {
                return "<h1>BLACK</h1>"
            },
            canClick() {return true},
            onClick() {
                player.ct.bet=2
            },
            style: {'height':'120px', 'width':'120px','background-color':'#000000','color':'#ffffff'},
        },
        23: {
            display() {
                return "<h1>GREEN</h1>"
            },
            canClick() {return true},
            onClick() {
                player.ct.bet=3
            },
            unlocked() {return hasUpgrade("ct",145)},
            style: {'height':'120px', 'width':'120px','background-color':'#00aa00','color':'#ffffff'},
        },
        31: {
            display() {
                let gain = tmp.ct.clickables[31].gain.sub(player.ct.Uv).max(0)
                let dis = "Cases gain slog is ^" + format(tmp.ct.clickables[31].exp) + ", Cases gain beyond 1F30 is slog exp^"+ format(tmp.ct.clickables[31].exp) +", Anti-Vaccine effect is 1."
                if (player.ct.inC) dis += "(IN)<br>"
                if (player.ct.inC) dis += "+<h3>" + formatWhole(gain)+"</h3> Unvaccinated "+pluralize(gain,'Vaxxer','Vaxxers',true)+"<br>"
                if (tmp.ct.clickables[31].gain.sub(player.ct.Uv).lt(1e6) && player.ct.inC) dis += "Next at " + formatWhole(tmp.ct.clickables[31].next)
                return dis
            },
            gain() {
                let p = player.points
                if (!player.ct.inC) {
                    p = powSlog(p,tmp.ct.clickables[31].exp)
                    if (p.gte(tet10(30))) p = tet10(slog(p).log10().div(Decimal.log10(30)).pow(tmp.ct.clickables[31].exp).mul(Decimal.log10(30)).pow10())
                }
                let gain = slog(p.max(10)).div(10.2).pow10().div(10).pow(tmp.ct.clickables[31].gainexp)
                if (gain.gte(1e120)) gain = gain.log10().div(120).pow(0.5).mul(120).pow10()
                if (gain.gte(1e200)) gain = gain.div(1e200).pow(2/3).mul(1e200)
                if (gain.gte(Decimal.pow(2,1024))) gain = Decimal.pow(2,gain.log(2).div(1024).pow(0.9).mul(1024))
                gain = gain.mul(tmp.ct.clickables[31].gainmult)
                if (player.points.lt(tet10(10))) gain = decimalZero
                return gain.floor()
            },
            gainmult() {
                let mult = tmp.ct.AIVeff
                if (hasAchievement("a",191)) mult = mult.mul(Decimal.pow(2,player.ct.upgrades.filter(n=>n>340).length))
                if (hasAchievement("a",192)) mult = mult.mul(2)
                if (hasAchievement("a",195)) mult = mult.mul(player.ct.Uv.max(10).log10())
                if (hasAchievement("a",196)) mult = mult.mul(player.ct.Uv.max(10).log10())
                if (hasAchievement("a",201)) mult = mult.mul(player.ct.Uv.max(10).log10())
                if (hasAchievement("a",202)) mult = mult.mul(player.ct.Uv.max(10).log10())
                if (hasUpgrade("ct",344)) mult= mult.mul(tmp.ct.upgrades[344].effect)
                return mult
            },
            gainexp() {
                let exp = decimalTwo
                if (hasUpgrade("ct",266)) exp = exp.add(1)
                if (hasUpgrade("ct",274)) exp = exp.add(tmp.ct.upgrades[274].effect)
                if (hasUpgrade("ct",276)) exp = exp.add(0.5)
                if (hasUpgrade("ct",286)) exp = exp.add(tmp.ct.upgrades[286].effect)
                return exp
            },
            exp() {
                let exp = new Decimal(0.8)
                if (hasUpgrade("ct",405)) exp = exp.add(0.05)
                if (hasUpgrade("ct",406)) exp = exp.add(0.05)
                return exp
            },
            next() {
                let gain = tmp.ct.clickables[31].gain.max(player.ct.Uv).div(tmp.ct.clickables[31].gainmult)
                if (gain.gte(Decimal.pow(2,1024))) gain = Decimal.pow(2,gain.log(2).div(1024).root(0.9).mul(1024))
                if (gain.gte(1e200)) gain = gain.div(1e200).pow(1.5).mul(1e200)
                if (gain.gte(1e120)) gain = gain.log10().div(120).pow(2).mul(120).pow10()
                let next = tet10(gain.add(1).max(1).root(tmp.ct.clickables[31].gainexp).mul(10).log10().mul(10.2))
                return next
            },
            canClick() {return true},
            onClick() {
                player.ct.inC = player.ct.inC ? false : true
                if (player.ct.inC) {
                    doReset("ct",true)
                    layerDataReset("ct",["upgrades","milestones","challenges","inC","auto","autom","autoc","autov","autoroll","Uv","Ui","bestAdv","Uib","Av","Aspent","Advaxxers","bestAdvax","AdvTime","AdvVaxTime","bestAps","AdVax","arna","aav","aiv","asv","AdV0","AdVax0","AdV1","AdVax1","AdV2","AdVax2","AdV3","AdVax3","AdV4","AdVax4","Atb","bestCases","aBoost","bestBoost","autoaest","extraBoost","aB","aB2","aB3","aB4","aB5","aB6","aB7","distBuy","AntiDist"])
                    player.ct.buyables[211]= player.ct.AdV4
                    player.ct.buyables[221]= player.ct.Atb
                    player.ct.buyables[231]= player.ct.aB
                    player.ct.buyables[232]= player.ct.aB2
                    player.ct.buyables[233]= player.ct.aB3
                    player.ct.buyables[241]= player.ct.aB4
                    player.ct.buyables[242]= player.ct.aB5
                    player.ct.buyables[243]= player.ct.aB6
                    player.ct.buyables[251]= player.ct.aB7
                    for (i = 0; i < player.ct.distBuyId.length; i++){
                        player.ct.buyables[player.ct.distBuyId[i]]= player.ct.distBuy[i]
                    }
                    updateTemp()
                    updateTemp()
                } else {
                    player.ct.Uv = tmp.ct.clickables[31].gain.max(player.ct.Uv)
                    player.ct.buyables[31] = decimalTwo
                    player.ct.buyables[32] = decimalTwo
                    player.ct.buyables[33] = decimalTwo
                    updateTemp()
                    updateTemp()
                }
            },
            style: {'height':'160px', 'width':'215px', 'font-size':'13px','background':"radial-gradient(#383434, #153d63)"
            }
        },
        32: {
            display() {
                let gain = tmp.ct.clickables[32].gainb
                let cTime = player.ct.AdvTime
                if (cTime>=1e308) cTime = player.ct.AdvVaxTime
                let aps = tmp.ct.clickables[32].gain.div(Decimal.max(cTime,0.0001))
                let dis = "Reset Vaccination for <h3>"+formatWhole(tmp.ct.clickables[32].gain)+"</h3> Adverse "+pluralize(tmp.ct.clickables[32].gain,'Vaxxer','Vaxxers',true)+"<br>"
                if (gain.gte(Decimal.pow(2,1024))) dis += " (softcapped)"
                if (gain.gte("e5e6")) dis += "<sup>3</sup>"
                else if (gain.gte("e55e4")) dis += "<sup>2</sup>"
                if (tmp.ct.clickables[32].gain.lt(1e6)) dis += "Next at " + formatWhole(tmp.ct.clickables[32].next)+"<br>"
                if (aps.gte(10)) dis += "<br>" + format(aps) + "/s"
                else if (aps.gte(1/6)) dis += "<br>" + format(aps.mul(60)) + "/min"
                else dis += "<br>" + format(aps.mul(3600)) + "/hr"
                return dis
            },
            gain() {
                let gain = tmp.ct.clickables[32].gainb
                gain = gain.mul(tmp.ct.clickables[32].aftermult)
                if (player.ct.Ui.lt(Decimal.pow(2,4096))) gain = decimalZero
                return gain.floor()
            },
            gainb() {
                let exp = tmp.ct.clickables[32].gainexp
                let mult = tmp.ct.clickables[32].gainmult
                let ex = .75
                if (hasUpgrade("ct",436)) ex = 0.8
                if (hasUpgrade("ct",441)) ex = 0.81
                if (hasUpgrade("ct",442)) ex = 0.815
                if (hasUpgrade("ct",451)) ex = 0.82
                let gain = player.ct.Ui.div(Decimal.pow(2,4096)).pow(exp).mul(mult)
                if (gain.gte(Decimal.pow(2,1024))) gain = Decimal.pow(2,gain.log(2).div(1024).pow(ex).mul(1024))
                if (gain.gte("e55e4")) gain = Decimal.pow(10,gain.log(10).div(55e4).pow(0.8).mul(55e4))
                if (gain.gte("e5e6")) gain = Decimal.pow(10,gain.log(10).div(5e6).pow(0.6).mul(5e6))
                if (player.ct.Ui.lt(Decimal.pow(2,4096))) gain = decimalZero
                return gain.floor()
            },
            gainmult() {
                let mult = tmp.ct.AdVaxEff
                if (hasAchievement("a",192)) mult = mult.mul(2)
                if (hasAchievement("a",193)) mult = mult.mul(2)
                if (hasAchievement("a",195)) mult = mult.mul(2)
                if (hasAchievement("a",196)) mult = mult.mul(2)
                if (hasAchievement("a",201)) mult = mult.mul(player.ct.Advaxxers.max(10).log10())
                if (hasAchievement("a",202)) mult = mult.mul(player.ct.Advaxxers.max(10).log10())
                if (hasAchievement("a",203)) mult = mult.mul(tmp.a.achievements[203].effect)
                if (hasUpgrade("ct",354)) mult = mult.mul(5)
                if (hasUpgrade("ct",355)) mult = mult.mul(3)
                if (!hasUpgrade("ct",393)) {
                if (hasUpgrade("ct",303)) mult = mult.mul(tmp.ct.upgrades[303].effect)
                if (hasUpgrade("ct",304)) mult = mult.mul(tmp.ct.upgrades[304].effect)
                if (hasUpgrade("ct",305)) mult = mult.mul(tmp.ct.upgrades[305].effect)
                }
                if (hasUpgrade("ct",371)) mult = mult.mul(tmp.ct.upgrades[371].effect)
                if (hasUpgrade("ct",373) && !hasUpgrade("ct",403)) mult = mult.mul(tmp.ct.upgrades[373].effect)
                if (hasUpgrade("ct",411)) mult = mult.mul(tmp.ct.upgrades[411].effect)
                return mult
            },
            aftermult() {
                let mult = decimalOne
                if (hasUpgrade("ct",393)) {
                if (hasUpgrade("ct",303)) mult = mult.mul(tmp.ct.upgrades[303].effect)
                if (hasUpgrade("ct",304)) mult = mult.mul(tmp.ct.upgrades[304].effect)
                if (hasUpgrade("ct",305)) mult = mult.mul(tmp.ct.upgrades[305].effect)
                }
                if (hasUpgrade("ct",485)) mult = mult.mul(tmp.ct.upgrades[485].effect)
                if (hasUpgrade("ct",403)) {
                    if (hasUpgrade("ct",373)) mult = mult.mul(tmp.ct.upgrades[373].effect)
                }
                return mult
            },
            gainexp() {
                let exp = new Decimal(1/512)
                if (hasUpgrade("ct",362)) exp = new Decimal(1/400)
                if (hasUpgrade("ct",373)) exp = new Decimal(1/350)
                if (hasUpgrade("ct",306)) exp = new Decimal(1/308)
                return exp
            },
            next() {
                let gain = tmp.ct.clickables[32].gain
                let exp = tmp.ct.clickables[32].gainexp
                let mult = tmp.ct.clickables[32].gainmult
                let next = gain.add(1).div(mult).max(1).root(exp).mul(Decimal.pow(2,4096))
                return next
            },
            unlocked() {
                return hasUpgrade("ct",302) || player.ct.bestAdvax.gte(1)
            },
            canClick() {return player.ct.Ui.gte(Decimal.pow(2,4096))},
            onClick() {
                let a = 270
                let keep = ["upgrades","milestones","challenges","auto","autom","autoc","autov","autoroll","Advaxxers","bestAdvax","bestAps","arna","aav","aiv","asv","AdV0","AdV1","AdV2","AdV3","AdVax4","AdV4","Atb","bestCases","aB","aB2","aB3","aB4","aB5","aB6","aB7","bestBoost","autoaest","distBuy","AntiDist"]
                if (hasUpgrade("ct",342)) a = 280
                if (hasUpgrade("ct",345)) a = 290
                if (hasUpgrade("ct",346)) {
                    a = 330
                    keep.push("Av","Aspent")
                }
                if (hasUpgrade("ct",353)) a = 340
                player.ct.Advaxxers = player.ct.Advaxxers.add(tmp.ct.clickables[32].gain)
                player.ct.bestAps = player.ct.bestAps.max(tmp.ct.clickables[32].gain.div(Decimal.max(player.ct.AdvTime,0.0001)))
                doReset("ct",true)
                layerDataReset("ct",keep)
                for (i = 0; i < player.ct.distBuyId.length; i++){
                    player.ct.buyables[player.ct.distBuyId[i]]= player.ct.distBuy[i]
                }
                player.ct.upgrades = player.ct.upgrades.filter(n=>(n<a || n>340))
                player.ct.AdVax0 = player.ct.AdV0
                player.ct.AdVax1 = player.ct.AdV1
                player.ct.AdVax2 = player.ct.AdV2
                player.ct.AdVax3 = player.ct.AdV3
                player.ct.AdVax4 = player.ct.AdV4
                player.ct.buyables[221] = player.ct.Atb
                player.ct.buyables[231] = player.ct.aB
                player.ct.buyables[232]= player.ct.aB2
                player.ct.buyables[233]= player.ct.aB3
                player.ct.buyables[241]= player.ct.aB4
                player.ct.buyables[242]= player.ct.aB5
                player.ct.buyables[243]= player.ct.aB6
                player.ct.buyables[251]= player.ct.aB7
                if (hasAchievement("a",192)) player.ct.Uv = new Decimal(1e50)
                player.ct.buyables[31] = decimalTwo
                player.ct.buyables[32] = decimalTwo
                player.ct.buyables[33] = decimalTwo
                if (hasUpgrade("ct",451)) player.ct.AdvTime = 1800
                if (hasMilestone("uv",22)) player.ct.AdvTime = 435e15
                updateTemp()
                updateTemp()
            },
            style: {'height':'130px', 'width':'175px', 'font-size':'13px',"background"() {
                let color = "#bf8f8f"
                if (tmp.ct.clickables[32].canClick) color = "radial-gradient(#383434, #153d63)"
                return color
                }
            }
        },
        33: {
            display() {
                let dis = "<h3>Max All (A)</h3><br>"
                return dis
            },
            unlocked() {
                return hasUpgrade("ct",373)
            },
            canClick() {return true},
            onClick() {
                layers.ct.buyables[201].buyMax()
                //updateTemp()
                layers.ct.buyables[202].buyMax()
                //updateTemp()
                layers.ct.buyables[203].buyMax()
                //updateTemp()
                layers.ct.buyables[204].buyMax()
                if (hasUpgrade("ct",392)) layers.ct.buyables[211].buyMax()
                if (hasUpgrade("ct",416)) layers.ct.buyables[221].buyMax()
            },
            style: {'height':'130px', 'width':'130px', 'font-size':'13px',"background"() {
                let color = "#bf8f8f"
                if (tmp.ct.clickables[33].canClick) color = "radial-gradient(#383434, #153d63)"
                return color
                }
            }
        },
        41: {
            display() {
                return "Set Even win chance to 60%"
            },
            canClick() {return true},
            unlocked() {
                return tmp.ct.WinChance>=0.6
            },
            onClick() {
                player.ct.wset = 0
                player.ct.wchance = .6
            },
            style: {'height':'120px', 'width':'120px','background-color':'#aa0000','color':'#ffffff'},
        },
        42: {
            display() {
                return "Set Even win chance to 75%"
            },
            canClick() {return true},
            unlocked() {
                return tmp.ct.WinChance>=0.75
            },
            onClick() {
                player.ct.wset = 0
                player.ct.wchance = .75
            },
            style: {'height':'120px', 'width':'120px','background-color':'#000000','color':'#ffffff'},
        },
        43: {
            display() {
                return "Set Even win chance to Highest win chance ("+format(tmp.ct.WinChance*100)+"%+)"
            },
            canClick() {return true},
            unlocked() {
                return true
            },
            onClick() {
                player.ct.wset = 1
                player.ct.wchance = 1
            },
            style: {'height':'120px', 'width':'120px','background-color':'#00aa00','color':'#ffffff'},
        },
    }
})
addLayer("Uv", {
    name: "unvaxxed viruses",
    symbol: "UV",
    position: 0,
    startData() { return {
        points: decimalZero,
        best: decimalZero,
        total: decimalZero,
        time: 0,
    unlocked: true,
    total: decimalZero
    }},
    color: "#235654",
    requires: decimalOne,
    resource: "unvaxxed viruses",
    baseResource: "cases",
    baseSingular: "case",
    baseAmount() { return player.points },
    type: "normal",
    exponent() {
        let exp = 0.3
        if (hasUpgrade("ct",403)) exp = exp*1.2
        if (hasUpgrade("Uv",32)) exp = exp*1.1
        if (hasUpgrade("Uv",33)) exp = exp*1.1
        return exp
    },
    softcap: Decimal.pow(10,5e4),
    softcapPower: 0.5,
    hotkeys: [
        {
            key:"V", description: "Shift+V:Reset for unvaxxed viruses", onPress() {
                if (canReset(this.layer) && shiftDown)
                    doReset(this.layer)
            },
            unlocked() {return player.uv.points.gte(1) && inChallenge("ct",32)}
        },
    ],
    update(diff) {
        player.Uv.time+=diff
        if (hasMilestone("Ui", 2)) generatePoints("Uv", diff)
        if (hasMilestone("Ui", 3)) {
            layers.Uv.buyables[11].buyMax()
            layers.Uv.buyables[12].buyMax()
        }
        if (player.uv.virus.gt(player.uv.virusBest)) player.uv.virusBest = player.uv.virus
    },
    canReset(){
        return player.Uv.time >= 1.5 && player.points.gte(1)
},
    doReset(resettingLayer) {
        let keep = [];
        if (hasMilestone("Ui",0) || hasMilestone("Up",0)) keep.push("upgrades")
        if (hasMilestone("Ui",1) || hasMilestone("Up",0)) keep.push("milestones")
        if (resettingLayer == "Uv") player.Uv.time = 0
        if (layers[resettingLayer].row > this.row) layerDataReset(this.layer, keep)
    },
    effect(){
        let eff = player.Uv.points.add(1).max(1).pow(0.5)
        if (eff.gte("ee40")) eff = eff.log10().div(1e40).pow(0.9).mul(1e40).pow10()
        return eff
    },
    effectDescription() {
        let dis = "which "+pluralize(player.Uv.points,'boosts','boost',true)+" cases gain after slog by "+layerText("h2", "Uv", format(tmp.Uv.effect))
        if (tmp.Uv.effect.gte("ee40")) dis += ' (softcapped)'
        return dis
    },
    gainMult() {
        let mult = tmp.Uv.buyables[12].effect.mul(tmp.uv.virusEff)
        if (hasUpgrade("Uv",13)) mult = mult.mul(tmp.Uv.upgrades[13].effect)
        return mult
    },
    gainExp() {
        let exp = decimalOne
        return exp
    },
    row: 0,
    layerShown() {
        return player.uv.tree == "unvaxxed" && player.uv.points.gte(1)
    },
    milestones: {
        0: {
            requirementDescription: "500 total unvaxxed viruses",
            effectDescription: "Unlock a buyable.",
            done() { return player.Uv.total.gte(500) }
        },
        1: {
            requirementDescription() {return format(1e55)+" total unvaxxed viruses"},
            effectDescription: "Unlock a buyable.",
            done() { return player.Uv.total.gte(1e55) }
        },
        2: {
            requirementDescription() {return format(1e157)+" total unvaxxed viruses"},
            effectDescription: "'Food Contamination' is raised to 4.5.",
            done() { return player.Uv.total.gte(1e157) }
        },
    },
    tabFormat: {
        "Main": {
        content:[
            function() {if (player.tab == "Uv") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Uv") return "resource-display"},
            "blank",
            ["display-text", 
                function() {
                     return "There is a 1.5 second cooldown (" + formatTime(Math.max(0,1.5-player.Uv.time))+")"
                }
                ],
            "upgrades"
            ]
        },
        "Milestones": {
            content:[
                function() {if (player.tab == "Uv") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Uv") return "resource-display"},
            "blank",
            "milestones"
            ],
        },
        "Buyables": {
            content:[
                function() {if (player.tab == "Uv") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Uv") return "resource-display"},
            "blank",
                "buyables"
            ],
            unlocked() {return hasMilestone("Uv",0)}
        },
    },
    upgrades: {
        rows: 3,
        cols: 3,
        11: {
            title: "Virus Cases",
            description: "VP boosts cases gain after slog.",
            cost: decimalTen,
            effect(){
                let eff = player.v.points.div("e8780").max(1).pow(0.1)
                if (eff.gte(1e4)) eff = eff.div(1e4).pow(0.5).mul(1e4)
                if (eff.gte(1e15)) eff = eff.div(1e15).pow(0.3).mul(1e15)
                if (eff.gte(1e150)) eff = eff.log10().div(150).pow(0.7).mul(150).pow10()
                if (eff.gte("e1e135")) eff = eff.log10().div(1e135).pow(0.9).mul(1e135).pow10()
                if (eff.gte("eee16")) eff = eff.log10().log10().div(1e16).pow(0.8).mul(1e16).pow10().pow10()
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uv.upgrades[11].effect)+"x"
                if (tmp.Uv.upgrades[11].effect.gte(1e150)) dis += " (softcapped)"
                return dis
            },
        },
        12: {
            title: "Unvaxxed Boost",
            description: "Unvaxxed viruses boost VP gain.",
            cost: new Decimal(20),
            effect(){
                let eff = player.Uv.points.add(2).max(1).pow(3)
                return eff
            },
            effectDisplay(){
                return format(tmp.Uv.upgrades[12].effect)+"x"
            },
        },
        13: {
            title: "UVP Boost",
            description: "VP boosts unvaxxed viruses gain.",
            cost: new Decimal(30),
            effect(){
                let eff = player.v.points.div("e8785").max(1).pow(0.15)
                if (eff.gte(1e4)) eff = eff.div(1e4).pow(0.5).mul(1e4)
                if (eff.gte(1e20)) eff = eff.div(1e20).pow(0.3).mul(1e20)
                if (eff.gte(1e150)) eff = eff.log10().div(150).pow(0.7).mul(150).pow10()
                if (eff.gte("eee16")) eff = eff.log10().log10().div(1e16).pow(0.8).mul(1e16).pow10().pow10()
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uv.upgrades[13].effect)+"x"
                if (tmp.Uv.upgrades[13].effect.gte(1e150)) dis += " (softcapped)"
                return dis
            },
        },
        21: {
            title: "VP Booster",
            description: "Unvaxxed viruses boost 'VP Boost'.",
            cost: new Decimal(7.8e9),
            effect(){
                let eff = player.Uv.points.div(1e8).max(10).log10().pow(0.7)
                if (eff.gte(70)) eff = eff.div(70).pow(0.5).mul(70)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Uv.upgrades[21].effect)
                if (tmp.Uv.upgrades[21].effect.gte(70)) dis += " (softcapped)"
                return dis
            },
        },
        22: {
            title: "Infect Base",
            description: "Infectivity boosts base cases gain.",
            cost: new Decimal(1e11),
            effect(){
                let eff = player.i.points.max(10).log10().pow(0.4)
                if (eff.gte(4e3)) eff = eff.div(4).log10().add(7).pow(3).mul(4)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Uv.upgrades[22].effect)
                if (tmp.Uv.upgrades[22].effect.gte(4e3)) dis += " (softcapped)"
                return dis
            },
        },
        23: {
            title: "Case Booster",
            description: "Each 'Cases Multiplier' adds 0.05 to its base.",
            cost: new Decimal(1e35),
            effect(){
                let amt = player.Uv.buyables[11]
                if (hasUpgrade("Ui",13)) amt = amt.pow(1.5)
                if (hasUpgrade("Ui",23)) amt = amt.pow(1.5)
                let eff = amt.div(20)
                return eff
            },
            effectDisplay(){
                return "+"+format(tmp.Uv.upgrades[23].effect)
            },
        },
        31: {
            title: "Replicated Virus",
            description: "Replicators 1st effect is applied after slog at ^0.05 effect.",
            cost: new Decimal(1e41),
            effect(){
                let eff = tmp.r.effect.pow(0.05)
                return eff
            },
            effectDisplay(){
                return format(tmp.Uv.upgrades[31].effect)+"x"
            },
        },
        32: {
            title: "UnScaled Cases",
            description: "'Case Multiplier' cost base is 10, unvaxxed virus base gain^1.1.",
            cost: new Decimal(1e60),
        },
        33: {
            title: "UnScaled Infectivity",
            description: "'Infectivity Multiplier' cost base is 100, unvaxxed virus base gain^1.1.",
            cost: new Decimal(1e98),
        },
    },
    buyables:{
        11: {
            title: "Case Multiplier",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Uv.buyables[11].costb
                let exp = tmp.Uv.buyables[11].coste
                let x = player.Uv.buyables[11]
                let cost = Decimal.pow(base,x.pow(exp)).mul(500)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(20)
                if (hasUpgrade("Uv",32)) cost = decimalTen
                return cost
            },
            coste() { 
                let cost = new Decimal(1.5)
                if (hasMilestone("Ui",8)) cost = new Decimal(1.4)
                if (hasMilestone("Ui",9)) cost = new Decimal(1.385)
                return cost
            },
            base() { 
                let base = decimalTwo
                if (hasUpgrade("Uv",23)) base = base.add(tmp.Uv.upgrades[23].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Uv.buyables[11]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Uv" || player.subtabs.Uv.mainTabs != "Buyables") return
                let extra = ""
                let dis = "Multiply cases gain after slog by "+format(tmp.Uv.buyables[11].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed viruses\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Uv", 11))
            },
            unlocked() { return hasMilestone("Uv",0) }, 
            canAfford() {
                    return player.Uv.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Uv.buyables[11].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uv.points = player.Uv.points.sub(cost)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.Uv.points
                let base = tmp.Uv.buyables[11].costb
                let exp = tmp.Uv.buyables[11].coste
                let target = s.div(500).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Uv.buyables[11].maxAfford
                let base = tmp.Uv.buyables[11].costb
                let exp = tmp.Uv.buyables[11].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(500)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uv.buyables[11] = player.Uv.buyables[11].max(target)
                
                }
            },
    },
    12: {
        title: "Infectivity Multiplier",
        cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
            let x = player.Uv.buyables[12]
            let base = tmp.Uv.buyables[12].costb
            let exp = tmp.Uv.buyables[12].coste
            let cost = Decimal.pow(base,x.pow(exp)).mul(1e55)
            return cost
        },
        costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
            let cost = new Decimal(1e3)
            if (hasUpgrade("Uv",33)) cost = new Decimal(100)
            return cost
        },
        coste() { 
            let cost = new Decimal(1.5)
            if (hasMilestone("Ui",8)) cost = new Decimal(1.4)
            if (hasMilestone("Ui",9)) cost = new Decimal(1.385)
            return cost
        },
        base() { 
            let base = decimalFive
            if (hasMilestone("Ui",7)) base = base.add(player.Uv.buyables[12].pow(1.2).div(50))
            if (hasUpgrade("uv",12)) base = base.mul(tmp.uv.upgrades[12].effect2)
            return base
        },
        effect() { // Effects of owning x of the items, x is a decimal
            let x = player.Uv.buyables[12]
            let base = tmp[this.layer].buyables[this.id].base
            return Decimal.pow(base, x);
        },
        display() { // Everything else displayed in the buyable button after the title
            if (player.tab != "Uv" || player.subtabs.Uv.mainTabs != "Buyables") return
            let extra = ""
            let dis = "Multiply infectivity and unvaxxed vaxxer gain by "+format(tmp.Uv.buyables[12].base)
            return dis + ".\n\
            Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed viruses\n\
            Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
            Amount: " + formatWhole(getBuyableAmount("Uv", 12))
        },
        unlocked() { return hasMilestone("Uv",1) }, 
        canAfford() {
                return player.Uv.points.gte(tmp[this.layer].buyables[this.id].cost)},
        buy() { 
            cost = tmp[this.layer].buyables[this.id].cost
            let max = tmp.Uv.buyables[12].maxAfford
            let b = max.max(1)
            if (tmp[this.layer].buyables[this.id].canAfford) {
                player.Uv.points = player.Uv.points.sub(cost)
                player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
            }
        },
        maxAfford() {
            let s = player.Uv.points
            let base = tmp.Uv.buyables[12].costb
            let exp = tmp.Uv.buyables[12].coste
            let target = s.div(1e55).log(base).root(exp)
            return target.floor().add(1)
        },
        buyMax() { 
            let target = tmp.Uv.buyables[12].maxAfford
            let base = tmp.Uv.buyables[12].costb
            let exp = tmp.Uv.buyables[12].coste
            let cost = Decimal.pow(base,target.pow(exp)).mul(1e55)
            if (tmp[this.layer].buyables[this.id].canAfford) {
                player.Uv.buyables[12] = player.Uv.buyables[12].max(target)
            
            }
        },
},
}
})
addLayer("Ui", {
    name: "unvaxxed infectivity",
    symbol: "UI",
    position: 0,
    startData() { return {
        points: decimalZero,
        best: decimalZero,
        total: decimalZero,
        pathogens: decimalZero,
        path1: decimalZero,
        path2: decimalZero,
        path3: decimalZero,
        path4: decimalZero,
        path5: decimalZero,
        time: 0,
    unlocked: true,
    total: decimalZero
    }},
    color: "#ad6391",
    requires: new Decimal(1e270),
    resource: "unvaxxed infectivity",
    baseResource: "unvaxxed viruses",
    baseSingular: "unvaxxed virus",
    branches: ["Uv"],
    baseAmount() { return player.Uv.points },
    type: "normal",
    exponent() {
        let exp = 0.01
        return exp
    },
    softcap: new Decimal(1e100),
    softcapPower: 0.5,
    hotkeys: [
        {
            key:"I", description: "Shift+I:Reset for unvaxxed infectivity", onPress() {
                if (canReset(this.layer) && shiftDown)
                    doReset(this.layer)
            },
            unlocked() {return player.uv.points.gte(2) && inChallenge("ct",32)}
        },
    ],
    update(diff) {
        player.Ui.time+=diff
        if (hasMilestone("Ur", 1)) generatePoints("Ui", diff)
        if (hasMilestone("Ui",5)) {
            player.Ui.pathogens = player.Ui.pathogens.add(tmp.Ui.buyables[21].effect.mul(diff))
            player.Ui.path1 = player.Ui.path1.add(tmp.Ui.buyables[22].effect.mul(diff))
            player.Ui.path2 = player.Ui.path2.add(tmp.Ui.buyables[23].effect.mul(diff))
            player.Ui.path3 = player.Ui.path3.add(tmp.Ui.buyables[31].effect.mul(diff))
            player.Ui.path4 = player.Ui.path4.add(tmp.Ui.buyables[32].effect.mul(diff))
            player.Ui.path5 = player.Ui.path5.add(tmp.Ui.buyables[33].effect.mul(diff))
        }
    },
    canReset(){
        return player.Ui.time >= 5 && player.Uv.points.gte(1e270)
},
    doReset(resettingLayer) {
        let keep = [];
        if (hasMilestone("Up",1)) {
            keep.push("upgrades")
            keep.push("milestones")
        }
        if (resettingLayer == "Ui") {
            player.Ui.time = 0
            player.i.points = decimalZero
            player.r.points = decimalZero
            player.Ui.pathogens = decimalZero
            player.Ui.path1 = decimalZero
            player.Ui.path2 = decimalZero
            player.Ui.path3 = decimalZero
            player.Ui.path4 = decimalZero
            player.Ui.path5 = decimalZero
            player.s.severity = decimalZero
        }
        if (layers[resettingLayer].row > this.row) layerDataReset(this.layer, keep)
    },
    effect(){
        let eff = player.Ui.points.add(1).max(1).pow(1.5)
        if (hasUpgrade("Ur",11)) eff = eff.pow(tmp.Ur.upgrades[11].effect)
        return eff
    },
    effectDescription() {
        let dis = "which boosts cases gain after slog and infectivity gain by "+layerText("h2", "Ui", format(tmp.Ui.effect))
        return dis
    },
    gainMult() {
        let mult = tmp.uv.virusEff
        if (hasUpgrade("Ui",22)) mult = mult.mul(tmp.Ui.upgrades[22].effect)
        return mult
    },
    directMult() {
        let mult = tmp.Ur.effect
        return mult
    },
    gainExp() {
        let exp = decimalOne
        return exp
    },
    pathEff() {
        let eff = player.Ui.pathogens.add(1).pow(50)
        if (hasUpgrade("Ur",22)) eff = eff.pow(tmp.Ur.upgrades[22].effect)
        return eff
    },
    row: 1,
    layerShown() {
        return player.uv.tree == "unvaxxed" && player.uv.points.gte(2)
    },
    tabFormat: {
        "Main": {
        content:[
            function() {if (player.tab == "Ui") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Ui") return "resource-display"},
            "blank",
            ["display-text", 
                function() {
                    let a = tmp.Ui.resetGain.gte(1e100)?"Unvaxxed infectivity gain is (softcapped) at "+format(1e100)+"<br>":""
                    let c = tmp.Ui.resetGain.gte("ee4")?"Unvaxxed infectivity gain is (softcapped)<sup>2</sup> at "+format("ee4")+"<br>":""
                    let d = tmp.Ui.resetGain.gte("e25e5")?"Unvaxxed infectivity gain is (softcapped)<sup>3</sup> at "+format("e25e5")+"<br><br>":""
                    let b = "There is a 5 second cooldown (" + formatTime(Math.max(0,5-player.Uv.time))+")"
                     return a+c+d+b
                }
                ],
            "upgrades"
            ]
        },
        "Milestones": {
            content:[
                function() {if (player.tab == "Ui") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Ui") return "resource-display"},
            "blank",
            "milestones"
            ],
        },
        "Buyables": {
            content:[
                function() {if (player.tab == "Ui") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Ui") return "resource-display"},
            "blank",
            ["buyables",[1]],
            ],
            unlocked() {return hasUpgrade("Ui",21)}
        },
        "Pathogens": {
            content:[
                function() {if (player.tab == "Ui") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Ui") return "resource-display"},
            "blank",
            ["display-text", 
                function() {
                    let a = "You have "+layerText("h2", "Ui", formatWhole(player.Ui.pathogens))+" unvaxxed "+pluralize(player.Ui.pathogens,'pathogen','pathogens',true)+", which "+pluralize(player.Ui.pathogens,'boosts','boost',true)+" cases and infectivity gain by "+layerText("h2", "Ui", format(tmp.Ui.pathEff))
                     return a
                }
                ],
            ["buyables",[2,3]],
            ],
            unlocked() {return hasMilestone("Ui",5)}
        },
    },
    milestones: {
        0: {
            requirementDescription: "3 total unvaxxed infectivity (1)",
            effectDescription: "Keep unvaxxed virus upgrades on reset.",
            done() { return player.Ui.total.gte(3) }
        },
        1: {
            requirementDescription: "5 total unvaxxed infectivity (2)",
            effectDescription: "Keep unvaxxed virus milestones on reset.",
            done() { return player.Ui.total.gte(5) }
        },
        2: {
            requirementDescription: "25 total unvaxxed infectivity (3)",
            effectDescription: "Gain 100% of unvaxxed virus gain per second.",
            done() { return player.Ui.total.gte(25) }
        },
        3: {
            requirementDescription: "1,000 total unvaxxed infectivity (4)",
            effectDescription: "Autobuy unvaxxed virus buyables and they cost nothing.",
            done() { return player.Ui.total.gte(1000) }
        },
        4: {
            requirementDescription: "2,000,000 total unvaxxed infectivity (5)",
            effect() {
                let eff = tmp.u.effect.pow(0.001)
                if (hasMilestone("Ui",5)) eff = eff.pow(5)
                return eff
            },
            effectDescription() {
                return "Uncoater effect boosts cases after slog and infectivity at ^0.001 effect.<br>Currently: "+format(milestoneEffect("Ui",4))+"x"}
                ,
            done() { return player.Ui.total.gte(2e6) }
        },
        5: {
            requirementDescription() {return format(1e103)+" total unvaxxed infectivity (6)"},
            effectDescription: "Unlock Unvaxxed Pathogens, Previous milestone is raised to 5, 'Coated' reward is raised and dilated to 1.1, 'Synergy' 2nd effect is raised to 10, 2nd effect is raised to 5 and dilated to 3.",
            done() { return player.Ui.total.gte(1e103) }
        },
        6: {
            requirementDescription() {return format("5e317")+" total unvaxxed infectivity (7)"},
            effectDescription: "'Base Multiplier' cost base is 1.9.",
            done() { return player.Ui.total.gte("5e317") }
        },
        7: {
            requirementDescription() {return format("e440")+" total unvaxxed infectivity (8)"},
            effect() {
                let eff = player.s.points.pow(1.15).div(15).add(1)
                if (hasMilestone("Up",9)) eff = eff.pow(2)
                return eff
            },
            effectDescription() {
                return "Symptoms boost Pathogen bases, each 'Infectivity Multiplier'<sup>1.2</sup> adds 0.02 to its base.<br>Currently: ^"+format(milestoneEffect("Ui",7))}
                ,
            done() { return player.Ui.total.gte("e440") }
        },
        8: {
            requirementDescription() {return format("e607")+" total unvaxxed infectivity (9)"},
            effectDescription: "'Case Multiplier' and 'Infectivity Multiplier' cost exponent is 1.4.",
            done() { return player.Ui.total.gte("e607") }
        },
        9: {
            requirementDescription() {return format("e1448")+" total unvaxxed infectivity (10)"},
            effectDescription: "'Case Multiplier' and 'Infectivity Multiplier' cost exponent is 1.385.",
            done() { return player.Ui.total.gte("e1448") }
        },
        10: {
            requirementDescription() {return format("e8247")+" total unvaxxed infectivity (11)"},
            effectDescription: "Unlock a Pathogen buyable.",
            done() { return player.Ui.total.gte("e8247") }
        },
        11: {
            requirementDescription() {return format("e15754")+" total unvaxxed infectivity (12)"},
            effectDescription: "Multiply Unvaxxed Replicator base by 10.",
            done() { return player.Ui.total.gte("e15754") }
        },
        12: {
            requirementDescription() {return format("e20260")+" total unvaxxed infectivity (13)"},
            base () {
                let base = new Decimal(1.1)
                if (hasUpgrade("Ur",31)) base = base.add(tmp.Ur.upgrades[31].effect)
                return base
            },
            effect() {
                let eff = Decimal.pow(tmp.Ui.milestones[12].base,tmp.s.buyables[11].total)
                return eff
            },
            effectDescription() {
                return "Each 'Severity Gain' multiplies severity by "+format(tmp.Ui.milestones[12].base)+".<br>Currently: "+format(milestoneEffect("Ui",12))+"x"}
                ,
            done() { return player.Ui.total.gte("e20260") }
        },
    },
    upgrades: {
        rows: 3,
        cols: 3,
        11: {
            title: "Unvaxxed Inflicator",
            description: "Unvaxxed Infectivity boosts replicator base, 'Genome Replication' ^2.",
            cost: decimalFour,
            effect(){
                let eff = player.Ui.points.add(2).pow(2.5)
                if (eff.gte("e700")) eff = eff.log10().div(700).pow(0.6).mul(700).pow10()
                if (eff.gte("e2000")) eff = eff.log10().div(2000).pow(0.8).mul(2000).pow10()
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Ui.upgrades[11].effect)+"x"
                if (tmp.Ui.upgrades[11].effect.gte("e700")) dis += " (softcapped)"
                return dis
            },
        },
        12: {
            title: "Unvaxxed Base",
            description: "Unvaxxed Infectivity boosts base cases gain.",
            cost: new Decimal(256),
            effect(){
                let eff = player.Ui.points.add(10).log10().pow(0.5).div(10).add(1)
                if (eff.gte(200)) eff = eff.div(2).log10().mul(5).pow(2).mul(2)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Ui.upgrades[12].effect)
                if (tmp.Ui.upgrades[12].effect.gte(200)) dis += " (softcapped)"
                return dis
            },
        },
        13: {
            title: "Case Boosterer",
            description: "'Case Booster' buyable amount is raised to 1.5.",
            cost: new Decimal(1e4),
        },
        21: {
            title: "Genome Boost",
            description: "Dilate 'Genome Replication' to 1.1, unlock a buyable.",
            cost: new Decimal(1e9),
        },
        22: {
            title: "UIVP",
            description: "VP boosts unvaxxed infectivity gain.",
            cost: new Decimal(15e11),
            effect(){
                let eff = powExp(player.v.points,0.5).pow(0.01)
                if (hasUpgrade("Ui",31)) eff = eff.pow(2)
                if (eff.gte("eee22")) eff = eff.log10().log10().div(1e22).pow(0.8).mul(1e22).pow10().pow10()
                return eff
            },
            effectDisplay(){
                return format(tmp.Ui.upgrades[22].effect)+"x"
            },
        },
        23: {
            title: "Case Boostest",
            description: "'Case Booster' buyable amount is raised to 1.5.",
            cost: new Decimal(3e18),
        },
        31: {
            title: "Severe Pathogens",
            description: "Severity boosts unvaxxed pathogen gain, 'UIVP' is squared.",
            cost: new Decimal("e325"),
            effect(){
                let eff = player.s.severity.add(1).pow(5)
                return eff
            },
            effectDisplay(){
                return format(tmp.Ui.upgrades[31].effect)+"x"
            },
        },
        32: {
            title: "Unvaxxed Severity",
            description: "Unvaxxed Pathogens boost severity gain.",
            cost: new Decimal("e355"),
            effect(){
                let eff = powExp(player.Ui.pathogens.add(1),0.8).pow(0.1)
                if (eff.gte("e2000")) eff = eff.log10().div(2e3).pow(0.6).mul(2e3).pow10()
                if (eff.gte("ee50")) eff = eff.log10().div(1e50).pow(0.6).mul(1e50).pow10()
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Ui.upgrades[32].effect)+"x"
                if (tmp.Ui.upgrades[32].effect.gte("e2000")) dis += " (softcapped)"
                return dis
            },
        },
        33: {
            title: "Severe Symptoms",
            description: "Symptoms boost severity gain at ^0.002 effect, Pathogen cost exp is 1.4.",
            cost: new Decimal("e369"),
            effect(){
                let eff = tmp.s.effbase.pow(player.s.points).pow(0.002)
                if (hasUpgrade("Ur",22)) eff = eff.pow(5)
                if (eff.gte("e1e9")) eff = eff.log10().div(1e9).pow(0.6).mul(1e9).pow10()
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Ui.upgrades[33].effect)+"x"
                if (tmp.Ui.upgrades[33].effect.gte("ee9")) dis += " (softcapped)"
                return dis
            },
        },
    },
    buyables:{
        11: {
            title: "Base Multiplier",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Ui.buyables[11].costb
                let x = player.Ui.buyables[11]
                if (x.gte("e5e3")) x = x.log10().div(5e3).pow(3).mul(5e3).pow10()
                if (x.gte(250)) x = x.div(250).pow(2).mul(250)
                let cost = Decimal.pow(base,x.pow(1.5)).mul(1e10)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = decimalTwo
                if (hasMilestone("Ui",6)) cost = new Decimal(1.9)
                return cost
            },
            base() { 
                let base = decimalTwo
                if (hasMilestone("Up",7)) base = base.add(tmp.Up.milestones[7].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Ui.buyables[11]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Ui" || player.subtabs.Ui.mainTabs != "Buyables") return
                let extra = ""
                let dis = "Multiply base cases gain by "+format(tmp.Ui.buyables[11].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed infectivity\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Ui", 11))
            },
            unlocked() { return hasUpgrade("Ui",21) }, 
            canAfford() {
                    return player.Ui.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Ui.buyables[11].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",465)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Ui.points = player.Ui.points.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Ui.points
                let base = tmp.Ui.buyables[11].costb
                let target = s.div(1e10).log(base).root(1.5)
                if (target.gte(250)) target = target.div(250).root(2).mul(250)
                if (target.gte("e5e3")) target = target.log10().div(5e3).root(3).mul(5e3).pow10()
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Ui.buyables[11].maxAfford
                let base = tmp.Ui.buyables[11].costb
                let cost = Decimal.pow(base,target.pow(1.5)).mul(1e10)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Ui.buyables[11] = player.Ui.buyables[11].max(target)
                
                }
            },
    },
    21: {
        title: "Pathogen Gain",
        cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
            let base = tmp.Ui.buyables[21].costb
            let exp = tmp.Ui.buyables[21].coste
            let x = player.Ui.buyables[21]
            let cost = Decimal.pow(base,x.pow(exp)).mul(1e156)
            return cost
        },
        costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
            let cost = new Decimal(1e5)
            return cost
        },
        coste() { 
            let cost = new Decimal(1.5)
            if (hasUpgrade("Ui",33)) cost = new Decimal(1.4)
            return cost
        },
        base() { 
            let base = player.Ui.pathogens.max(10).log10().add(1)
            if (hasMilestone("Ui",7)) base = base.pow(milestoneEffect("Ui",7))
            if (hasUpgrade("Ur",32)) base = base.pow(2)
            return base
        },
        effect() { // Effects of owning x of the items, x is a decimal
            let x = player.Ui.buyables[21].add(player.Ui.path1).mul(tmp.uv.virusEff)
            let base = tmp[this.layer].buyables[this.id].base
            let mult = tmp[this.layer].buyables[this.id].mult
            let exp = decimalOne
            if (hasUpgrade("Up",84)) exp = exp.mul(tmp.Up.upgrades[84].effect)
            return mult.mul(x).mul(base).pow(exp)
        },
        mult() { // Effects of owning x of the items, x is a decimal
            let x = player.Ui.buyables[21]
            let base = tmp[this.layer].buyables[this.id].base
            let eff = Decimal.pow(base, x.sub(1).max(0)).mul(tmp.Ur.buyables[12].effect)
            if (hasUpgrade("Ui",31)) eff = eff.mul(tmp.Ui.upgrades[31].effect)
            return eff.mul(player.Ui.path3.add(1)).mul(player.Ui.path4.add(1).pow(2)).mul(player.Ui.path5.add(1).pow(10))
        },
        display() { // Everything else displayed in the buyable button after the title
            if (player.tab != "Ui" || player.subtabs.Ui.mainTabs != "Pathogens") return
            let amt = getBuyableAmount("Ui", 21)
            let base = format(tmp.Ui.buyables[21].base)
            let dis = "Gain "+base+" unvaxxed pathogens per second and multiply base gain by "+base+" (based on pathogens)"
            return dis + ".\n\
            Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed infectivity\n\
            Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"/s\n\
            Multiplier: " + format(tmp[this.layer].buyables[this.id].mult)+"x\n\
            Amount: " + formatWhole(amt.add(player.Ui.path1)) + "(" + formatWhole(amt) + ")"
        },
        unlocked() { return hasMilestone("Ui",5) }, 
        canAfford() {
                return player.Ui.points.gte(tmp[this.layer].buyables[this.id].cost)},
        buy() { 
            cost = tmp[this.layer].buyables[this.id].cost
            let max = tmp.Ui.buyables[21].maxAfford
            let b = max.max(1)
            if (tmp[this.layer].buyables[this.id].canAfford) {
                player.Ui.points = player.Ui.points.sub(cost)
                player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
            }
        },
        maxAfford() {
            let s = player.Ui.points
            let base = tmp.Ui.buyables[21].costb
            let exp = tmp.Ui.buyables[21].coste
            let target = s.div(1e156).log(base).root(exp)
            return target.floor().add(1)
        },
        buyMax() { 
            let target = tmp.Ui.buyables[21].maxAfford
            let base = tmp.Ui.buyables[21].costb
            let exp = tmp.Ui.buyables[21].coste
            let cost = Decimal.pow(base,target.pow(exp)).mul(1e156)
            if (tmp[this.layer].buyables[this.id].canAfford) {
                player.Ui.buyables[21] = player.Ui.buyables[21].max(target)
            
            }
        },
    },
    22: {
        title: "Pathogen Gainer",
        cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
            let base = tmp.Ui.buyables[22].costb
            let exp = tmp.Ui.buyables[22].coste
            let x = player.Ui.buyables[22]
            let cost = Decimal.pow(base,x.pow(exp)).mul(1e175)
            return cost
        },
        costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
            let cost = new Decimal(1e10)
            return cost
        },
        coste() { 
            let cost = new Decimal(1.5)
            if (hasUpgrade("Ui",33)) cost = new Decimal(1.4)
            return cost
        },
        base() { 
            let base = player.Ui.path1.add(player.Ui.buyables[22]).max(10).log10().add(1)
            if (hasMilestone("Ui",7)) base = base.pow(milestoneEffect("Ui",7))
            if (hasUpgrade("Ur",32)) base = base.pow(2)
            return base
        },
        effect() { // Effects of owning x of the items, x is a decimal
            let x = player.Ui.buyables[22].add(player.Ui.path2)
            let base = tmp[this.layer].buyables[this.id].base
            let mult = tmp[this.layer].buyables[this.id].mult
            return mult.mul(x).mul(base);
        },
        mult() { // Effects of owning x of the items, x is a decimal
            let x = player.Ui.buyables[22]
            let base = tmp[this.layer].buyables[this.id].base
            let eff = Decimal.pow(base, x.sub(1).max(0))
            return eff.mul(player.Ui.path3.add(1)).mul(player.Ui.path4.add(1).pow(2)).mul(player.Ui.path5.add(1).pow(10))
        },
        display() { // Everything else displayed in the buyable button after the title
            if (player.tab != "Ui" || player.subtabs.Ui.mainTabs != "Pathogens") return
            let amt = getBuyableAmount("Ui", 22)
            let base = format(tmp.Ui.buyables[22].base)
            let dis = "Gain "+base+" 'Pathogen Gain's per second and multiply base gain by "+base+" (based on 'Pathogen Gain's)"
            return dis + ".\n\
            Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed infectivity\n\
            Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"/s\n\
            Multiplier: " + format(tmp[this.layer].buyables[this.id].mult)+"x\n\
            Amount: " + formatWhole(amt.add(player.Ui.path2)) + "(" + formatWhole(amt) + ")"
        },
        unlocked() { return hasMilestone("Ui",5) }, 
        canAfford() {
                return player.Ui.points.gte(tmp[this.layer].buyables[this.id].cost)},
        buy() { 
            cost = tmp[this.layer].buyables[this.id].cost
            let max = tmp.Ui.buyables[22].maxAfford
            let b = max.max(1)
            if (tmp[this.layer].buyables[this.id].canAfford) {
                player.Ui.points = player.Ui.points.sub(cost)
                player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
            }
        },
        maxAfford() {
            let s = player.Ui.points
            let base = tmp.Ui.buyables[22].costb
            let exp = tmp.Ui.buyables[22].coste
            let target = s.div(1e175).log(base).root(exp)
            return target.floor().add(1)
        },
        buyMax() { 
            let target = tmp.Ui.buyables[22].maxAfford
            let base = tmp.Ui.buyables[22].costb
            let exp = tmp.Ui.buyables[22].coste
            let cost = Decimal.pow(base,target.pow(exp)).mul(1e175)
            if (tmp[this.layer].buyables[this.id].canAfford) {
                player.Ui.buyables[22] = player.Ui.buyables[22].max(target)
            
            }
        },
    },
    23: {
        title: "Pathogen Gainest",
        cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
            let base = tmp.Ui.buyables[23].costb
            let exp = tmp.Ui.buyables[23].coste
            let x = player.Ui.buyables[23]
            let cost = Decimal.pow(base,x.pow(exp)).mul("e510")
            return cost
        },
        costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
            let cost = new Decimal(1e15)
            return cost
        },
        coste() { 
            let cost = new Decimal(1.5)
            if (hasUpgrade("Ui",33)) cost = new Decimal(1.4)
            return cost
        },
        base() { 
            let base = player.Ui.path2.add(player.Ui.buyables[23]).max(10).log10().add(1).pow(1.5)
            if (hasMilestone("Ui",7)) base = base.pow(milestoneEffect("Ui",7))
            if (hasUpgrade("Ur",32)) base = base.pow(2)
            return base
        },
        effect() { // Effects of owning x of the items, x is a decimal
            let x = player.Ui.buyables[23].add(player.Ui.path3)
            let base = tmp[this.layer].buyables[this.id].base
            let mult = tmp[this.layer].buyables[this.id].mult
            return mult.mul(x).mul(base);
        },
        mult() { // Effects of owning x of the items, x is a decimal
            let x = player.Ui.buyables[23]
            let base = tmp[this.layer].buyables[this.id].base
            let eff = Decimal.pow(base, x.sub(1).max(0))
            return eff.mul(player.Ui.path3.add(1)).mul(player.Ui.path4.add(1).pow(2)).mul(player.Ui.path5.add(1).pow(10))
        },
        display() { // Everything else displayed in the buyable button after the title
            if (player.tab != "Ui" || player.subtabs.Ui.mainTabs != "Pathogens") return
            let amt = getBuyableAmount("Ui", 23)
            let base = format(tmp.Ui.buyables[23].base)
            let dis = "Gain "+base+" 'Pathogen Gainer's per second and multiply base gain by "+base+" (based on 'Pathogen Gainer's)"
            return dis + ".\n\
            Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed infectivity\n\
            Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"/s\n\
            Multiplier: " + format(tmp[this.layer].buyables[this.id].mult)+"x\n\
            Amount: " + formatWhole(amt.add(player.Ui.path3)) + "(" + formatWhole(amt) + ")"
        },
        unlocked() { return hasMilestone("Ur",0) }, 
        canAfford() {
                return player.Ui.points.gte(tmp[this.layer].buyables[this.id].cost)},
        buy() { 
            cost = tmp[this.layer].buyables[this.id].cost
            let max = tmp.Ui.buyables[23].maxAfford
            let b = max.max(1)
            if (tmp[this.layer].buyables[this.id].canAfford) {
                player.Ui.points = player.Ui.points.sub(cost)
                player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
            }
        },
        maxAfford() {
            let s = player.Ui.points
            let base = tmp.Ui.buyables[23].costb
            let exp = tmp.Ui.buyables[23].coste
            let target = s.div("e510").log(base).root(exp)
            return target.floor().add(1)
        },
        buyMax() { 
            let target = tmp.Ui.buyables[23].maxAfford
            let base = tmp.Ui.buyables[23].costb
            let exp = tmp.Ui.buyables[23].coste
            let cost = Decimal.pow(base,target.pow(exp)).mul("e510")
            if (tmp[this.layer].buyables[this.id].canAfford) {
                player.Ui.buyables[23] = player.Ui.buyables[23].max(target)
            
            }
        },
    },
    31: {
        title: "Pathogen Boost",
        cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
            let base = tmp.Ui.buyables[31].costb
            let exp = tmp.Ui.buyables[31].coste
            let x = player.Ui.buyables[31]
            let cost = Decimal.pow(base,x.pow(exp)).mul("e8247")
            return cost
        },
        costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
            let cost = new Decimal(1e20)
            return cost
        },
        coste() { 
            let cost = new Decimal(1.6)
            return cost
        },
        base() { 
            let base = player.Ui.path3.add(player.Ui.buyables[31]).max(10).log10().add(1).pow(2.5)
            if (hasUpgrade("Ur",32)) base = base.pow(2)
            if (hasMilestone("Ur",7)) base = base.pow(milestoneEffect("Ur",7))
            return base
        },
        effect() { // Effects of owning x of the items, x is a decimal
            let x = player.Ui.buyables[31].add(player.Ui.path4)
            let base = tmp[this.layer].buyables[this.id].base
            let mult = tmp[this.layer].buyables[this.id].mult
            return mult.mul(x).mul(base);
        },
        mult() { // Effects of owning x of the items, x is a decimal
            let x = player.Ui.buyables[31]
            let base = tmp[this.layer].buyables[this.id].base
            let eff = Decimal.pow(base, x.sub(1).max(0))
            return eff
        },
        display() { // Everything else displayed in the buyable button after the title
            if (player.tab != "Ui" || player.subtabs.Ui.mainTabs != "Pathogens") return
            let amt = getBuyableAmount("Ui", 31)
            let base = format(tmp.Ui.buyables[31].base)
            let dis = "Gain "+base+" 'Pathogen Gainest's per second and multiply base gain by "+base+" (based on 'Pathogen Gainest's) and extra 'Pathogen Gainest' buyables multiply all 'Gain' buyable multipliers"
            return dis + ".\n\
            Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed infectivity\n\
            Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"/s\n\
            Multiplier: " + format(tmp[this.layer].buyables[this.id].mult)+"x\n\
            Amount: " + formatWhole(amt.add(player.Ui.path4)) + "(" + formatWhole(amt) + ")"
        },
        unlocked() { return hasMilestone("Ui",10) }, 
        canAfford() {
                return player.Ui.points.gte(tmp[this.layer].buyables[this.id].cost)},
        buy() { 
            cost = tmp[this.layer].buyables[this.id].cost
            let max = tmp.Ui.buyables[31].maxAfford
            let b = max.max(1)
            if (tmp[this.layer].buyables[this.id].canAfford) {
                player.Ui.points = player.Ui.points.sub(cost)
                player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
            }
        },
        maxAfford() {
            let s = player.Ui.points
            let base = tmp.Ui.buyables[31].costb
            let exp = tmp.Ui.buyables[31].coste
            let target = s.div("e8247").log(base).root(exp)
            return target.floor().add(1)
        },
        buyMax() { 
            let target = tmp.Ui.buyables[31].maxAfford
            let base = tmp.Ui.buyables[31].costb
            let exp = tmp.Ui.buyables[31].coste
            let cost = Decimal.pow(base,target.pow(exp)).mul("e8247")
            if (tmp[this.layer].buyables[this.id].canAfford) {
                player.Ui.buyables[31] = player.Ui.buyables[31].max(target)
            
            }
        },
    },
    32: {
        title: "Pathogen Booster",
        cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
            let base = tmp.Ui.buyables[32].costb
            let exp = tmp.Ui.buyables[32].coste
            let x = player.Ui.buyables[32]
            let cost = Decimal.pow(base,x.pow(exp)).mul("e145e3")
            return cost
        },
        costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
            let cost = new Decimal(1e25)
            return cost
        },
        coste() { 
            let cost = new Decimal(1.6)
            return cost
        },
        base() { 
            let base = player.Ui.path4.add(player.Ui.buyables[32]).max(10).log10().add(1).pow(2.5)
            if (hasUpgrade("Ur",32)) base = base.pow(2)
            if (hasMilestone("Ur",7)) base = base.pow(milestoneEffect("Ur",7))
            return base
        },
        effect() { // Effects of owning x of the items, x is a decimal
            let x = player.Ui.buyables[31].add(player.Ui.path5)
            let base = tmp[this.layer].buyables[this.id].base
            let mult = tmp[this.layer].buyables[this.id].mult
            return mult.mul(x).mul(base);
        },
        mult() { // Effects of owning x of the items, x is a decimal
            let x = player.Ui.buyables[32]
            let base = tmp[this.layer].buyables[this.id].base
            return Decimal.pow(base, x.sub(1).max(0));
        },
        display() { // Everything else displayed in the buyable button after the title
            if (player.tab != "Ui" || player.subtabs.Ui.mainTabs != "Pathogens") return
            let amt = getBuyableAmount("Ui", 32)
            let base = format(tmp.Ui.buyables[32].base)
            let dis = "Gain "+base+" 'Pathogen Boost's per second and multiply base gain by "+base+" (based on 'Pathogen Boost's) and extra 'Pathogen Boost' buyables<sup>2</sup> multiply all 'Gain' buyable multipliers"
            return dis + ".\n\
            Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed infectivity\n\
            Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"/s\n\
            Multiplier: " + format(tmp[this.layer].buyables[this.id].mult)+"x\n\
            Amount: " + formatWhole(amt.add(player.Ui.path5)) + "(" + formatWhole(amt) + ")"
        },
        unlocked() { return hasUpgrade("Ur",32) }, 
        canAfford() {
                return player.Ui.points.gte(tmp[this.layer].buyables[this.id].cost)},
        buy() { 
            cost = tmp[this.layer].buyables[this.id].cost
            let max = tmp.Ui.buyables[32].maxAfford
            let b = max.max(1)
            if (tmp[this.layer].buyables[this.id].canAfford) {
                player.Ui.points = player.Ui.points.sub(cost)
                player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
            }
        },
        maxAfford() {
            let s = player.Ui.points
            let base = tmp.Ui.buyables[32].costb
            let exp = tmp.Ui.buyables[32].coste
            let target = s.div("e145e3").log(base).root(exp)
            return target.floor().add(1)
        },
        buyMax() { 
            let target = tmp.Ui.buyables[32].maxAfford
            let base = tmp.Ui.buyables[32].costb
            let exp = tmp.Ui.buyables[32].coste
            let cost = Decimal.pow(base,target.pow(exp)).mul("e145e3")
            if (tmp[this.layer].buyables[this.id].canAfford) {
                player.Ui.buyables[32] = player.Ui.buyables[32].max(target)
            
            }
        },
    },
    33: {
        title: "Pathogen Boostest",
        cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
            let base = tmp.Ui.buyables[33].costb
            let exp = tmp.Ui.buyables[33].coste
            let x = player.Ui.buyables[33]
            let cost = Decimal.pow(base,x.pow(exp)).mul("e225e7")
            return cost
        },
        costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
            let cost = new Decimal(1e100)
            return cost
        },
        coste() { 
            let cost = new Decimal(1.6)
            return cost
        },
        base() { 
            let base = player.Ui.path5.add(player.Ui.buyables[33]).max(10).log10().add(1).pow(5)
            if (hasUpgrade("Ur",33)) base = base.pow(2)
            if (hasMilestone("Ur",7)) base = base.pow(milestoneEffect("Ur",7))
            return base
        },
        effect() { // Effects of owning x of the items, x is a decimal
            let x = player.Ui.buyables[33]
            let base = tmp[this.layer].buyables[this.id].base
            return Decimal.pow(base, x.sub(1).max(0)).mul(x).mul(base);
        },
        mult() { // Effects of owning x of the items, x is a decimal
            let x = player.Ui.buyables[33]
            let base = tmp[this.layer].buyables[this.id].base
            return Decimal.pow(base, x.sub(1).max(0));
        },
        display() { // Everything else displayed in the buyable button after the title
            if (player.tab != "Ui" || player.subtabs.Ui.mainTabs != "Pathogens") return
            let amt = getBuyableAmount("Ui", 33)
            let base = format(tmp.Ui.buyables[33].base)
            let dis = "Gain "+base+" 'Pathogen Booster's per second and multiply base gain by "+base+" (based on 'Pathogen Boost's) and extra 'Pathogen Booster' buyables<sup>10</sup> multiply all 'Gain' buyable multipliers"
            return dis + ".\n\
            Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed infectivity\n\
            Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"/s\n\
            Multiplier: " + format(tmp[this.layer].buyables[this.id].mult)+"x\n\
            Amount: " + formatWhole(amt) + "(" + formatWhole(amt) + ")"
        },
        unlocked() { return hasUpgrade("Ur",33) }, 
        canAfford() {
                return player.Ui.points.gte(tmp[this.layer].buyables[this.id].cost)},
        buy() { 
            cost = tmp[this.layer].buyables[this.id].cost
            let max = tmp.Ui.buyables[33].maxAfford
            let b = max.max(1)
            if (tmp[this.layer].buyables[this.id].canAfford) {
                player.Ui.points = player.Ui.points.sub(cost)
                player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
            }
        },
        maxAfford() {
            let s = player.Ui.points
            let base = tmp.Ui.buyables[33].costb
            let exp = tmp.Ui.buyables[33].coste
            let target = s.div("e225e7").log(base).root(exp)
            return target.floor().add(1)
        },
        buyMax() { 
            let target = tmp.Ui.buyables[33].maxAfford
            let base = tmp.Ui.buyables[33].costb
            let exp = tmp.Ui.buyables[33].coste
            let cost = Decimal.pow(base,target.pow(exp)).mul("e225e7")
            if (tmp[this.layer].buyables[this.id].canAfford) {
                player.Ui.buyables[33] = player.Ui.buyables[33].max(target)
            
            }
        },
    },
},
}),
addLayer("Ur", {
    name: "unvaxxed replicators",
    symbol: "UR",
    position: 1,
    startData() { return {
        points: decimalZero,
        total: decimalZero,
        best: decimalZero,
        replicants: decimalOne,
        repx: decimalZero,
        auto: false,
        time: 0,
    unlocked: true
    }},
    color: "#293ed3",
    requires: Decimal.pow(10,83.7e3),
    resource: "unvaxxed replicators",
    resourceSingular: "unvaxxed replicator",
    baseResource: "unvaxxed viruses",
    baseSingular: "unvaxxed virus",
    baseAmount() { 
        return player.Uv.points 
    },
    type: "static",
    exponent: new Decimal(1.7),
    base: new Decimal(1e300),
    branches: ["Uv"],
    hotkeys: [
        {
            key:"R", description: "Shift+R:Reset for unvaxxed replicators", onPress() {
                if (canReset(this.layer))
                    doReset(this.layer)
            },
            unlocked() {return player.uv.points.gte(3) && inChallenge("ct",32)}
        },
    ],
    doReset(resettingLayer) {
        let keep = [];
        if (hasMilestone("Up",2)) {
            keep.push("upgrades")
        }
        if (hasMilestone("Up",3)) {
            keep.push("milestones")
            keep.push("auto")
        }
        if (resettingLayer == "Ur") {
            player.Ur.time = 0
            player.i.points = decimalZero
            player.r.points = decimalZero
            player.Ui.pathogens = decimalZero
            player.Ui.path1 = decimalZero
            player.Ui.path2 = decimalZero
            player.Ui.path3 = decimalZero
            player.Ui.path4 = decimalZero
            player.Ui.path5 = decimalZero
            player.s.severity = decimalZero
        }
        if (layers[resettingLayer].row > this.row) layerDataReset(this.layer, keep)
    },
    directMult() {
        return tmp.uv.virusEff
    },
    repMult() {
        let amt = player.Ur.points
        if (hasUpgrade("Ur",31)) amt = amt.pow(1.5)
        if (inChallenge("Up",22)) amt = new Decimal(56)
        let mult = amt.div(55).max(1).sub(1)
        mult = mult.pow10().mul(tmp.Ur.buyables[21].effect)
        if (player.Ur.points.lt(56) && !inChallenge("Up",22)) mult = decimalOne
        return mult.pow(tmp.Up.proteinEff)
    },
    repInt() {
        let int = decimalOne
        let rep = player.Ur.replicants
        let inc = tmp.Ur.intInc
        let exp = tmp.Ur.intExp
        let start = tmp.Ur.scStart
        if (inChallenge("Up", 11)) int = int.mul(123456789)
        if (inChallenge("Up", 12)) int = int.mul(tmp.Up.c2)
        if (inChallenge("Up", 31)) int = int.mul(tmp.Up.c5)
        if (hasChallenge("Up", 11)) int = int.div(12.345)
        if (hasChallenge("Up", 12)) int = int.div(tmp.Up.challenges[12].rewardEffect)
        if (hasChallenge("Up", 21)) int = int.div(tmp.Up.challenges[21].rewardEffect)
        if (hasUpgrade('Ur',23)) int = int.div(83)
        if (hasUpgrade('Ur',32)) int = int.div(10.5)
        if (hasUpgrade('ct',481)) int = int.div(5)
        if (hasUpgrade('ct',482)) int = int.div(2)
        if (hasUpgrade('ct',486)) int = int.div(2)
        if (hasAchievement('a',221)) int = int.div(2)
        if (hasUpgrade('ct',433)) int = int.div(tmp.ct.upgrades[433].effect)
        if (hasMilestone('Ur',9)) int = int.div(tmp.Ur.milestones[9].effect)
        if (rep.gte(start)) int = int.mul(Decimal.pow(inc,rep.div(start).log10().div(exp)))
        return int.div(tmp.Ur.buyables[11].effect).div(tmp.Up.effect[1]).div(tmp.uv.virusEff)
    },
    intInc() {
        let inc = decimalTen
        inc = inc.root(tmp.Ur.buyables[22].effect)
        return inc.max(1.001)
    },
    intExp() {
        let inc = Decimal.log(10,1.001)
        let exp = Decimal.pow(2,1024).log10()
        exp = exp.add(tmp.Ur.buyables[23].effect)
        if (inChallenge("Up",22)) exp = exp.div(2)
        if (hasChallenge("Up",22)) exp = exp.mul(1.1)
        if (tmp.Ur.buyables[22].effect.gte(inc)) exp = exp.mul(tmp.Ur.buyables[22].effect.div(inc))
        return exp
    },
    scStart() {
        let start = Decimal.pow(2,1024)
        if (hasUpgrade('ct',484)) start = Decimal.pow(10,1e3)
        return start
    },
    update(diff) {
        player.Ur.time+=diff
        if (hasMilestone("Ur",2)) {
            layers.Ui.buyables[11].buy()
            layers.Ui.buyables[21].buyMax()
            layers.Ui.buyables[22].buyMax()
            layers.Ui.buyables[23].buyMax()
        } 
        if (hasMilestone("Ur",3)) {
            let rep = player.Ur.replicants
            let mult = tmp.Ur.repMult
            let int = tmp.Ur.repInt
            let sc = tmp.Ur.intInc.log10().div(tmp.Ur.intExp)
            let est = mult.ln().div(int)
            let r =  rep.ln().add(Decimal.mul(diff,est.mul(sc)).add(1).ln().div(sc)).exp()
            player.Ur.repx = est.exp()
            player.Ur.replicants = r
            layers.Ui.buyables[31].buyMax()
            layers.Ui.buyables[32].buyMax()
            layers.Ui.buyables[33].buyMax()
        }
    },
    automate() {},
    autoPrestige() { return player.Ur.auto },
    effbase() {
        let eff = new Decimal(1e3)
        if (hasUpgrade("Ur",12)) eff = eff.mul(tmp.Ur.upgrades[12].effect)
        if (hasUpgrade("Ur",21)) eff = eff.mul(tmp.Ur.upgrades[21].effect)
        if (hasMilestone("Ur",4)) eff = eff.mul(tmp.Ur.milestones[4].effect)
        if (hasMilestone("Ui",11)) eff = eff.mul(10)
        return eff
    },
    effect(){
        let eff = tmp.Ur.effbase
        eff = Decimal.pow(eff,player.Ur.points)
        return eff
    },
    replicantEff(){
        let eff = player.Ur.replicants.mul(10).log10().pow(50)
        if (hasUpgrade("Ur",33)) eff = eff.max(player.Ur.replicants.pow(0.5))
        if (hasUpgrade("Up",21)) eff = eff.pow(tmp.Up.upgrades[21].effect)
        return eff
    },
    effectDescription() {
        return "which "+pluralize(player.Ur.points,'boosts','boost',true)+" unvaxxed infectivity gain by "+layerText("h2", "Ur", format(tmp.Ur.effect))+" after softcap"
    },
    gainMult() {
        rmult = decimalOne
        return rmult
    },
    gainExp() {
        return decimalOne
    },
    row: 1,
    resetsNothing() { return hasUpgrade("ct",483) },
    layerShown() {
        return player.uv.points.gte(3) && player.uv.tree == "unvaxxed"
    },
    canBuyMax() {
        return hasUpgrade("ct",473)
    },
    canReset() {
        return !inChallenge("Up",22) && player.Uv.points.gte(tmp.Ur.nextAt)
    },
    tabFormat: {
        "Main": {
        content:[
            function() {if (player.tab == "Ur") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Ur") return "resource-display"},
            "blank",
            "upgrades"
            ]
        },
        "Milestones": {
            content:[
                function() {if (player.tab == "Ur") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Ur") return "resource-display"},
            "blank",
            "milestones"
            ],
        },
        "Replicants": {
            content:[
                function() {if (player.tab == "Ur") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Ur") return "resource-display"},
            "blank",
            ["display-text", 
                function() {
                    let rep = player.Ur.replicants
                    let inc = tmp.Ur.intInc
                    let exp = tmp.Ur.intExp
                    let start = tmp.Ur.scStart
                    let slow = Decimal.pow(inc,rep.log10().sub(308).div(exp)).max(1)
                    let a = "You have "+layerText("h2", "Ur", formatWhole(player.Ur.replicants))+" unvaxxed "+pluralize(player.Ur.replicants,'replicant','replicants',true)+", which "+pluralize(player.Ur.replicants,'boosts','boost',true)+" severity gain by "+layerText("h2", "Ur", format(tmp.Ur.replicantEff))+"<br>"
                    let b = "Your replicants are multiplying by "+layerText("h2", "Ur", format(player.Ur.repx))+" per second ("+format(tmp.Ur.repMult)+"x every "+formatTimeLong(tmp.Ur.repInt)+") (based on Unvaxxed Replicators).<br>"
                    let c = "Replicant interval slows down by "+layerText("h2", "Ur", format(tmp.Ur.intInc))+"x every "+format(tmp.Ur.intExp)+" OoMs ("+format(slow)+"x slower) (starts at "+format(start)+").<br>"
                    let d = "You have "+layerText("h2", "d", formatWhole(player.d.points))+" "+pluralize(player.d.points,'death','deaths',true)+"<br>"
                    let e = "You are gaining " + layerText("h2", "d", format(getResetGain("d").div(100))) + " deaths per second<br>"
                     return a+b+c+d+e
                }
                ],
            "buyables"
            ],
            unlocked() {return hasMilestone("Ur",3)}
        },
    },
    milestones: {
        0: {
            requirementDescription: "2 unvaxxed replicators (1)",
            effectDescription: "Unlock a Pathogen buyable.",
            done() { return player.Ur.points.gte(2) }
        },
        1: {
            requirementDescription: "17 unvaxxed replicators (2)",
            effectDescription: "Gain 100% of unvaxxed infectivity gain per second.",
            done() { return player.Ur.points.gte(17) }
        },
        2: {
            requirementDescription: "28 unvaxxed replicators (3)",
            effectDescription: "Autobuy Pathogen 'Gain' buyables and 'Base Multiplier'.",
            done() { return player.Ur.points.gte(28) }
        },
        3: {
            requirementDescription: "56 unvaxxed replicators (4)",
            effectDescription: "Autobuy Pathogen 'Boost' buyables and unlock Unvaxxed Replicants.",
            done() { return player.Ur.points.gte(56) }
        },
        4: {
            requirementDescription() {return format(1e10)+" unvaxxed replicants (5)"},
            effect() {
                let eff = player.d.points.add(1)
                if (eff.gte("ee4")) eff = eff.log10().div(1e4).pow(0.7).mul(1e4).pow10()
                return eff
            },
            effectDescription() {
                return "Deaths boost unvaxxed replicator base, death gain x100.<br>Currently: "+format(milestoneEffect("Ur",4))+"x"}
                ,
            done() { return player.Ur.replicants.gte(1e10) }
        },
        5: {
            requirementDescription: "142 unvaxxed replicators (6)",
            effectDescription: "'Fast Replicants' cost base is 1.1.",
            done() { return player.Ur.points.gte(142) }
        },
        6: {
            requirementDescription: "200 unvaxxed replicators (7)",
            effect() {
                let eff = tmp.Ur.buyables[21].effect.pow(0.1)
                return eff
            },
            effectDescription() {
                return "'Deadly Multiplier' boosts death gain at ^0.1 effect.<br>Currently: "+format(milestoneEffect("Ur",6))+"x"}
                ,
            done() { return player.Ur.points.gte(200) }
        },
        7: {
            requirementDescription() {return format("e2e4")+" unvaxxed replicants (8)"},
            effect() {
                let eff = player.Ur.replicants.max(10).log10().pow(0.5).div(100).add(1)
                return eff
            },
            effectDescription() {
                return "Unvaxxed replicants boost Pathogen 'Boost' buyable bases.<br>Currently: ^"+format(milestoneEffect("Ur",7))}
                ,
            done() { return player.Ur.replicants.gte("e2e4") }
        },
        8: {
            requirementDescription: "300 unvaxxed replicators (9)",
            effectDescription: "'Deadly Replicants' cost base is 1.0475.",
            done() { return player.Ur.points.gte(300) }
        },
        9: {
            requirementDescription: "330 unvaxxed replicators (10)",
            effect() {
                let eff = Decimal.pow(1.01,player.Ur.points.sub(300).max(0))
                return eff
            },
            effectDescription() {
                return "Unvaxxed replicators divide replicant interval.<br>Currently: /"+format(milestoneEffect("Ur",9))}
                ,
            done() { return player.Ur.points.gte(330) }
        },
        10: {
            requirementDescription: "525 unvaxxed replicators (11)",
            effectDescription: "Autobuy unvaxxed replicators.",
            toggles:[["Ur", "auto"]],
            done() { return player.Ur.points.gte(525) }
        },
    },
    upgrades: {
        rows: 3,
        cols: 3,
        11: {
            title: "Replicated Infectivity",
            description: "Unvaxxed Replicators boost unvaxxed infectivity effect.",
            cost: new Decimal(15),
            canAfford(){
                return player.Ur.points.gte(15) && (!inChallenge("Up",41) || (inChallenge("Up",41) && player.Ur.upgrades.length<3))
            },
            effect(){
                let eff = player.Ur.points.add(1).pow(0.55)
                if (hasMilestone("Up",8)) eff = eff.pow(2)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Ur.upgrades[11].effect)
                return dis
            },
        },
        12: {
            title: "Based Inflicator",
            description: "Unvaxxed Infectivity boost unvaxxed replicator base.",
            cost: new Decimal(22),
            canAfford(){
                return player.Ur.points.gte(22) && (!inChallenge("Up",41) || (inChallenge("Up",41) && player.Ur.upgrades.length<3))
            },
            effect(){
                let eff = player.Ui.points.max(10).log10().div(10).sub(157.5).max(1).pow(3.87)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Ur.upgrades[12].effect)+"x"
                return dis
            },
        },
        13: {
            title: "Infected Slog",
            description: "Infectivity boost cases after slog.",
            cost: new Decimal(24),
            canAfford(){
                return player.Ur.points.gte(24) && (!inChallenge("Up",41) || (inChallenge("Up",41) && player.Ur.upgrades.length<3))
            },
            effect(){
                let eff = player.i.points.add(1).pow(0.166)
                if (eff.gte("ee60")) eff = eff.log10().div(1e60).pow(0.9).mul(1e60).pow10()
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Ur.upgrades[13].effect)+"x"
                if (tmp.Ur.upgrades[13].effect.gte("ee60")) dis += ' (softcapped)'
                return dis
            },
        },
        21: {
            title: "RepliRepli",
            description: "Replicators boost unvaxxed replicator base.",
            cost: new Decimal(26),
            canAfford(){
                return player.Ur.points.gte(26) && (!inChallenge("Up",41) || (inChallenge("Up",41) && player.Ur.upgrades.length<3))
            },
            effect(){
                let eff = player.r.points.add(1).div(100).max(1).pow(3.45)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Ur.upgrades[21].effect)+"x"
                return dis
            },
        },
        22: {
            title: "Severer Pathogens",
            description: "Unvaxxed Replicators boost unvaxxed pathogen effect, 'Severe Symptoms' is raised to 5.",
            cost: new Decimal(29),
            canAfford(){
                return player.Ur.points.gte(29) && (!inChallenge("Up",41) || (inChallenge("Up",41) && player.Ur.upgrades.length<3))
            },
            effect(){
                let eff = player.Ur.points.add(1).pow(0.72).div(100).add(1)
                if (hasUpgrade("Up",44)) eff = eff.pow(2)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Ur.upgrades[22].effect)
                return dis
            },
        },
        23: {
            title: "Threatening",
            description: "Uncoaters boost 'Dangerous', replicant interval is 83x faster.",
            cost: new Decimal(83),
            canAfford(){
                return player.Ur.points.gte(83) && (!inChallenge("Up",41) || (inChallenge("Up",41) && player.Ur.upgrades.length<3))
            },
            effect(){
                let eff = player.u.points.add(1).pow(1.6).div(10).add(1)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Ur.upgrades[23].effect)
                return dis
            },
        },
        31: {
            title: "Dead Replis",
            description: "Deaths add to UI milestone 13 base, UR amount in replicant mult^1.5.",
            cost: new Decimal(100),
            canAfford(){
                return player.Ur.points.gte(100) && (!inChallenge("Up",41) || (inChallenge("Up",41) && player.Ur.upgrades.length<3))
            },
            effect(){
                let eff = player.d.points.max(10).log10().pow(2).div(1e4)
                return eff
            },
            effectDisplay(){
                let dis = "+"+format(tmp.Ur.upgrades[31].effect)
                return dis
            },
        },
        32: {
            title: "RepliPath",
            description: "Replicant interval is 10.5x faster, unlock a Pathogen buyable, Pathogen buyable bases^2.",
            cost: new Decimal(105),
            canAfford(){
                return player.Ur.points.gte(105) && (!inChallenge("Up",41) || (inChallenge("Up",41) && player.Ur.upgrades.length<3))
            },
        },
        33: {
            title: "Replicant Boost",
            description: "Unvaxxed Replicant formula is better (log10(10x)<sup>50</sup> -> √x).",
            cost: new Decimal(130),
            canAfford(){
                return player.Ur.points.gte(130) && (!inChallenge("Up",41) || (inChallenge("Up",41) && player.Ur.upgrades.length<3))
            },
        },
    },
    buyables: {
        rows:3,
        cols:3,
        11: {
            title: "Fast Replicants",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Ur.buyables[11].costb
                let exp = tmp.Ur.buyables[11].coste
                let x = player.Ur.buyables[11]
                let cost = Decimal.pow(base,x.pow(exp)).pow10()
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1.5)
                if (hasMilestone("Ur",5)) cost = new Decimal(1.1)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.5)
                if (hasUpgrade("Up",24)) cost = new Decimal(1.35)
                if (hasUpgrade("Up",25)) cost = new Decimal(1.2)
                if (hasUpgrade("Up",33)) cost = decimalOne
                if (hasUpgrade("Up",42)) cost = new Decimal(0.8)
                if (hasUpgrade("Up",45)) cost = cost.sub(0.01)
                if (hasUpgrade("Up",51)) cost = cost.sub(0.02)
                if (hasUpgrade("Up",54)) cost = cost.sub(0.02)
                if (hasUpgrade("Up",63)) cost = cost.sub(0.05)
                if (hasMilestone("Up",17)) cost = cost.sub(0.03)
                return cost
            },
            base() { 
                let base = new Decimal(1.5)
                if (hasUpgrade("Up",11)) base = new Decimal(1.6)
                if (hasUpgrade("Up",25)) base = base.add(player.Ur.buyables[11].div(1000))
                if (hasUpgrade("Up",43)) base = base.pow(tmp.Up.upgrades[43].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Ur.buyables[11]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Ur" || player.subtabs.Ur.mainTabs != "Replicants") return
                let extra = ""
                let dis = "Divide replicant interval by "+format(tmp.Ur.buyables[11].base)
                return dis + ".\n\
                Cost: /" + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed replicants\n\
                Effect: /" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Ur", 11))
            },
            unlocked() { return hasMilestone("Ur",3) }, 
            canAfford() {
                    return player.Ur.replicants.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Ur.buyables[11].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.btime = 0
                    if (inChallenge("Up",12)) updateTemp()
                    if (!hasMilestone("Up",4)) player.Ur.replicants = player.Ur.replicants.div(cost)
                    if (hasUpgrade("ct",484)) player[this.layer].buyables[this.id] = b
                    else player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.Ur.replicants.log10()
                let base = tmp.Ur.buyables[11].costb
                let exp = tmp.Ur.buyables[11].coste
                let target = s.log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Ur.buyables[11].maxAfford
                let base = tmp.Ur.buyables[11].costb
                let exp = tmp.Ur.buyables[11].coste
                let cost = Decimal.pow(base,target.pow(exp)).pow10()
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Ur.buyables[11] = player.Ur.buyables[11].max(target)
                
                }
            },
        },
        12: {
            title: "Pathogen Replicants",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Ur.buyables[12].costb
                let exp = tmp.Ur.buyables[12].coste
                let x = player.Ur.buyables[12]
                let cost = Decimal.pow(base,x.pow(exp)).mul(4).pow10()
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1.25)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.4)
                if (hasMilestone("Up",8)) cost = new Decimal(0.8)
                if (hasMilestone("Up",11)) cost = cost.sub(0.2)
                if (hasUpgrade("Up",45)) cost = cost.sub(0.01)
                if (hasUpgrade("Up",51)) cost = cost.sub(0.02)
                if (hasUpgrade("Up",52)) cost = cost.sub(0.03)
                if (hasUpgrade("Up",63)) cost = cost.sub(0.05)
                if (hasUpgrade("Up",72)) cost = cost.sub(0.1)
                return cost
            },
            base() { 
                let base = player.Ur.replicants.pow(10)
                if (hasUpgrade("Up",44)) base = base.pow(tmp.Up.upgrades[44].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Ur.buyables[12]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Ur" || player.subtabs.Ur.mainTabs != "Replicants") return
                let extra = ""
                let dis = "Multiply unvaxxed pathogen gain by "+format(tmp.Ur.buyables[12].base) + " (based on unvaxxed replicants)"
                return dis + ".\n\
                Cost: /" + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed replicants\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Ur", 12))
            },
            unlocked() { return hasMilestone("Ur",3) }, 
            canAfford() {
                    return player.Ur.replicants.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Ur.buyables[12].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.btime = 0
                    if (!hasMilestone("Up",4)) player.Ur.replicants = player.Ur.replicants.div(cost)
                    if (hasUpgrade("ct",484)) player[this.layer].buyables[this.id] = b
                    else player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.Ur.replicants.log10()
                let base = tmp.Ur.buyables[12].costb
                let exp = tmp.Ur.buyables[12].coste
                let target = s.div(4).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Ur.buyables[12].maxAfford
                let base = tmp.Ur.buyables[12].costb
                let exp = tmp.Ur.buyables[12].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(4).pow10()
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Ur.buyables[12] = player.Ur.buyables[12].max(target)
                
                }
            },
        },
        13: {
            title: "Deadly Replicants",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Ur.buyables[13].costb
                let exp = tmp.Ur.buyables[13].coste
                let x = player.Ur.buyables[13]
                let cost = Decimal.pow(base,x.pow(exp)).mul(1150).pow10()
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1.05)
                if (hasMilestone("Ur",8)) cost = new Decimal(1.0475)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.1)
                if (hasMilestone("Up",7)) cost = new Decimal(0.8)
                if (hasMilestone("Up",11)) cost = cost.sub(0.2)
                if (hasMilestone("Up",12)) cost = cost.sub(0.15)
                if (hasUpgrade("Up",74)) cost = cost.sub(0.075)
                return cost
            },
            base() { 
                let base = player.Ur.replicants.log10().add(1)
                if (hasUpgrade("Up",15)) base = base.pow(1.15)
                if (hasUpgrade("Up",51)) base = base.pow(tmp.Up.upgrades[51].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Ur.buyables[13]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Ur" || player.subtabs.Ur.mainTabs != "Replicants") return
                let extra = ""
                let dis = "Multiply death gain by "+format(tmp.Ur.buyables[13].base) + " (based on unvaxxed replicants)"
                return dis + ".\n\
                Cost: /" + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed replicants\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Ur", 13))
            },
            unlocked() { return hasMilestone("Ur",3) }, 
            canAfford() {
                    return player.Ur.replicants.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Ur.buyables[13].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.btime = 0
                    if (!hasMilestone("Up",4)) player.Ur.replicants = player.Ur.replicants.div(cost)
                    if (hasUpgrade("ct",484)) player[this.layer].buyables[this.id] = b
                    else player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.Ur.replicants.log10()
                let base = tmp.Ur.buyables[13].costb
                let exp = tmp.Ur.buyables[13].coste
                let target = s.div(1150).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Ur.buyables[13].maxAfford
                let base = tmp.Ur.buyables[13].costb
                let exp = tmp.Ur.buyables[13].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(4).pow10()
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Ur.buyables[13] = player.Ur.buyables[13].max(target)
                
                }
            },
        },
        21: {
            title: "Deadly Multiplier",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Ur.buyables[21].costb
                let exp = tmp.Ur.buyables[21].coste
                let x = player.Ur.buyables[21]
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e16)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = decimalTwo
                return cost
            },
            coste() { 
                let cost = new Decimal(1.3)
                return cost
            },
            base() { 
                let base = player.d.points.max(10).log10().add(1).pow(0.25)
                if (hasUpgrade("Up",14)) base = base.pow(2)
                if (hasMilestone("Up",17)) base = base.pow(50)
                if (inChallenge("Up",22)) base = decimalOne
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Ur.buyables[21]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Ur" || player.subtabs.Ur.mainTabs != "Replicants") return
                let extra = ""
                let dis = "Multiply replicant multiplier by "+format(tmp.Ur.buyables[21].base) + " (based on deaths)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" deaths\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Ur", 21))
            },
            unlocked() { return hasMilestone("Ur",3) }, 
            canAfford() {
                    return player.d.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Ur.buyables[21].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (!inChallenge("Up",31)) player.Up.btime = 0
                    if (!hasMilestone("Up",5)) player.d.points = player.d.points.sub(cost)
                    if (hasUpgrade("ct",484)) player[this.layer].buyables[this.id] = b
                    else player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.d.points
                let base = tmp.Ur.buyables[21].costb
                let exp = tmp.Ur.buyables[21].coste
                let target = s.div(1e16).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Ur.buyables[21].maxAfford
                let base = tmp.Ur.buyables[21].costb
                let exp = tmp.Ur.buyables[21].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e16)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Ur.buyables[21] = player.Ur.buyables[21].max(target)
                
                }
            },
        },
        22: {
            title: "Deadly Scaling",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Ur.buyables[22].costb
                let exp = tmp.Ur.buyables[22].coste
                let x = player.Ur.buyables[22]
                if (x.gte(25)) x = Decimal.pow(1.1,x.sub(25)).mul(25)
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e57)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e5)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.5)
                return cost
            },
            base() { 
                let exp = decimalOne
                if (hasChallenge("Up",32)) exp = exp.mul(1.05)
                let base = player.d.points.max(10).log10().max(10).log10().pow(exp).div(20)
                if (hasUpgrade("Up",12)) base = base.add(0.01)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Ur.buyables[22]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x).add(1);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Ur" || player.subtabs.Ur.mainTabs != "Replicants") return
                let extra = ""
                let dis = "Reduce interval scaling by "+format(tmp.Ur.buyables[22].base) + "√ (based on deaths)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" deaths\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"√\n\
                Amount: " + formatWhole(getBuyableAmount("Ur", 22))
            },
            unlocked() { return hasMilestone("Ur",3) }, 
            canAfford() {
                let x = inChallenge('Up',32) && player.Ur.buyables[22].add(player.Ur.buyables[23]).lt(20)
                x = x || !inChallenge('Up',32)
                let y = player.d.points.gte(tmp[this.layer].buyables[this.id].cost)
                return x && y},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Ur.buyables[22].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.btime = 0
                    if (!hasMilestone("Up",5)) player.d.points = player.d.points.sub(cost)
                    if (hasUpgrade("ct",484) && !inChallenge("Up",32)) player[this.layer].buyables[this.id] = b
                    else player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.d.points
                let base = tmp.Ur.buyables[22].costb
                let exp = tmp.Ur.buyables[22].coste
                let target = s.div(1e57).log(base).root(exp)
                if (target.gte(25)) target = target.div(25).log(1.1).add(25)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Ur.buyables[22].maxAfford
                let base = tmp.Ur.buyables[22].costb
                let exp = tmp.Ur.buyables[22].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e57)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Ur.buyables[22] = player.Ur.buyables[22].max(target)
                
                }
            },
        },
        23: {
            title: "Deadly OoMs",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Ur.buyables[23].costb
                let exp = tmp.Ur.buyables[23].coste
                let x = player.Ur.buyables[23]
                if (x.gte(20)) x = Decimal.pow(1.1,x.sub(20)).mul(20)
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e78)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e7)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.5)
                return cost
            },
            base() { 
                let exp = new Decimal(1.25)
                if (hasChallenge("Up",32)) exp = exp.mul(1.05)
                let base = player.d.points.max(10).log10().max(10).log10().pow(exp).mul(10)
                if (hasUpgrade("Up",13)) base = base.add(3)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Ur.buyables[23]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Ur" || player.subtabs.Ur.mainTabs != "Replicants") return
                let extra = ""
                let dis = "Increase interval scaling OoMs by "+format(tmp.Ur.buyables[23].base) + " (based on deaths)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" deaths\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Ur", 23))
            },
            unlocked() { return hasMilestone("Ur",3) }, 
            canAfford() {
                    let x = inChallenge('Up',32) && player.Ur.buyables[22].add(player.Ur.buyables[23]).lt(20)
                    x = x || !inChallenge('Up',32)
                    let y = player.d.points.gte(tmp[this.layer].buyables[this.id].cost)
                    return x && y},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Ur.buyables[23].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.btime = 0
                    if (!hasMilestone("Up",5)) player.d.points = player.d.points.sub(cost)
                    if (hasUpgrade("ct",484) && !inChallenge("Up",32)) player[this.layer].buyables[this.id] = b
                    else player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.d.points
                let base = tmp.Ur.buyables[23].costb
                let exp = tmp.Ur.buyables[23].coste
                let target = s.div(1e78).log(base).root(exp)
                if (target.gte(20)) target = target.div(20).log(1.1).add(20)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Ur.buyables[23].maxAfford
                let base = tmp.Ur.buyables[23].costb
                let exp = tmp.Ur.buyables[23].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e78)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Ur.buyables[23] = player.Ur.buyables[23].max(target)
                
                }
            },
        },
    },
}),
addLayer("Up", {
    name: "unvaxxed prions",
    symbol: "UP",
    position: 1,
    startData() { return {
        points: decimalZero,
        total: decimalZero,
        best: decimalZero,
        bestPer: decimalZero,
        replicants: decimalOne,
        repx: decimalZero,
        protein: decimalZero,
        uprotein: decimalZero,
        aprotein: decimalZero,
        prp: decimalZero,
        prpsc: decimalZero,
        prpres: decimalZero,
        chal: [11,12,21,22,31,32,41,42],
        auto: false,
        auto2: false,
        autop: false,
        autop2: false,
        autopr: false,
        autoupr: false,
        autoapr: false,
        autoe: false,
        time: 0,
        btime: 0,
        fail: 0,
    unlocked: true
    }},
    row: 2,
    color: "#65b296",
    requires: Decimal.pow(10,6.4e4),
    resource: "unvaxxed prions",
    resourceSingular: "unvaxxed prion",
    baseResource: "unvaxxed replicants",
    baseSingular: "unvaxxed replicant",
    baseAmount() { 
        return player.Ur.replicants
    },
    type: "custom",
    branches: ["Ur"],
    hotkeys: [
        {
            key:"P", description: "Shift+P:Reset for unvaxxed prions", onPress() {
                if (canReset(this.layer))
                    doReset(this.layer)
            },
            unlocked() {return player.uv.points.gte(4) && inChallenge("ct",32)}
        },
    ],
    layerShown() {
        return player.uv.tree == "unvaxxed" && player.uv.points.gte(4)
    },
    doReset(resettingLayer) {
        let keep = [];
        if (hasMilestone("Uu", 0)) {
            keep.push("milestones")
        }
        if (hasMilestone("Uu", 1)) {
            keep.push("challenges")
            keep.push("auto")
            keep.push("auto2")
            keep.push("autop")
            keep.push("autop2")
            keep.push("autopr")
            keep.push("autoupr")
            keep.push("autoapr")
            keep.push("autoe")
        }
        if (hasMilestone("Uu", 2)) {
            keep.push("upgrades")
            if (!hasMilestone("Uu", 5)) player.Up.upgrades = player.Up.upgrades.filter(x=>x<60)
        }
        if (resettingLayer == "Up") {
            player.Up.bestPer = player.Up.bestPer.max(tmp.Up.getResetGain.div(player.Up.time+1e-11))
            player.Up.time = 0
            player.i.points = decimalZero
            player.r.points = decimalZero
            player.u.points = decimalZero
            player.s.points = decimalZero
            player.d.points = decimalZero
            player.s.severity = decimalZero
            player.Up.protein = decimalZero
            player.Up.uprotein = decimalZero
            player.Up.aprotein = decimalZero
            player.Up.prp = decimalZero
            player.Up.prpsc = decimalZero
            player.Up.prpres = decimalZero
        }
        if (layers[resettingLayer].row > this.row && resettingLayer != 'f') layerDataReset(this.layer, keep)
    },
    c2() {
        return Decimal.max(1,Decimal.pow(10,(100-player.Up.btime)/10)).mul(1e12)
    },
    c5() {
        return Decimal.max(1,Decimal.pow(10,player.Up.btime/3)).mul(1e20)
    },
    upgCost() {
        let exp = player.Up.upgrades.filter(x=>x<20).length
        return Decimal.pow(2,exp).mul(10)
    },
    effect(){
        let eff = player.Up.points.add(1).max(1).pow(20)
        if (hasUpgrade("Up",33)) eff = eff.pow(5)
        if (hasMilestone("Up",11)) eff = eff.pow(5)
        if (hasMilestone("Up",12)) eff = eff.pow(5)
        if (hasMilestone("Up",17)) eff = powExp(eff,1.11)
        let eff2 = player.Up.points.add(1).max(1).pow(0.5)
        return [eff,eff2]
    },
    proteinEff(){
        let eff = player.Up.protein.add(1).pow(0.5)
        return eff.pow(tmp.Up.uproteinEff[1])
    },
    proteinGain(){
        let eff = tmp.Up.buyables[21].effect.pow(tmp.Up.buyables[23].effect.add(1)).mul(tmp.Up.buyables[22].effect)
        return eff.mul(tmp.uv.virusEff)
    },
    uproteinEff(){
        let eff = player.Up.uprotein.add(1).pow(0.05).pow(tmp.Up.aproteinEff[1])
        let eff2 = player.Up.uprotein.add(10).log10().pow(0.5).sub(1).div(10).add(1).pow(tmp.Up.aproteinEff[1])
        return [eff,eff2]
    },
    uproteinGain(){
        let eff = tmp.Up.buyables[31].effect.pow(tmp.Up.buyables[33].effect.add(1)).mul(tmp.Up.buyables[32].effect)
        return eff.mul(tmp.uv.virusEff)
    },
    prpEff(){
        let eff = player.Up.prp.add(1).pow(0.5)
        if (eff.gte("ee40")) eff = eff.log10().div(1e40).pow(0.3).mul(1e40).pow10()
        if (eff.gte("ee45")) eff = eff.log10().log10().div(45).pow(0.5).mul(45).pow10().pow10()
        if (eff.gte("ee222")) eff = eff.log10().log10().div(222).pow(0.35).mul(222).pow10().pow10()
        if (eff.gte("ee250")) eff = eff.log10().log10().div(250).pow(0.25).mul(250).pow10().pow10()
        let x1 = eff
        let x2 = x1.max(10).log10().pow(0.02)
        eff = x1.min("eee50")
        if (hasMilestone("Us",5)) {
            eff = x2
            if (eff.gte("ee6")) eff = eff.log10().div(1e6).pow(0.3).mul(1e6).pow10()
            if (eff.gte("e8e6")) eff = eff.log10().div(8e6).pow(0.25).mul(8e6).pow10()
            if (eff.gte("ee9")) eff = eff.log10().div(1e9).pow(0.5).mul(1e9).pow10()
            if (eff.gte("ee10")) eff = eff.log10().div(1e10).pow(0.35).mul(1e10).pow10()
            if (eff.gte("ee12")) eff = eff.log10().div(1e12).pow(0.25).mul(1e12).pow10()
            if (eff.gte("ee14")) eff = eff.log10().log10().div(14).pow(0.4).mul(14).pow10().pow10()
            if (eff.gte("ee17")) eff = eff.log10().log10().div(17).pow(0.5).mul(17).pow10().pow10()
            if (eff.gte("ee19")) eff = eff.log10().log10().div(19).pow(0.35).mul(19).pow10().pow10()
            x2 = eff
            eff = eff.min("ee50")
        }
        let eff2 = player.Up.prp.add(10).log10()
        if (hasUpgrade("Up",71)) eff2 = eff2.pow(tmp.Up.upgrades[71].effect)
        if (hasUpgrade("Up",75)) eff2 = eff2.pow(tmp.Up.upgrades[75].effect)
        if (hasUpgrade("Up",83)) eff2 = eff2.pow(tmp.Up.upgrades[83].effect)
        if (hasUpgrade("Us",101)) {
            eff = x2.max(10).log10().max(10).log10().pow(0.02)
            if (eff.gte(3)) eff = eff.add(7).log10().pow(0.5).pow10().add(2).div(4)
        }
        return [eff,eff2] 
    },
    caseffect() {
        let eff = player.f.casuals.max(1)
        eff = eff.log10().add(1).max(1).pow(30) 
        if (eff.gte(1e30)) eff = eff.div(1e30).pow(0.2).mul(1e30)
        if (hasFUpg(181)) eff = eff.add(player.f.casuals.max(1).pow(20))
        if (hasUpgrade("Up",72)) eff = eff.pow(tmp.Up.upgrades[72].effect)
        if (hasUpgrade("Us",42)) eff = eff.max(10).log10().pow(0.02)
        if (hasUpgrade("Us",101)) {
            eff = eff.max(10).log10().max(10).log10().pow(0.02)
            if (eff.gte(3)) eff = eff.add(7).log10().pow(0.5).pow10().add(2).div(4)
        }
        return eff
    },
    aproteinEff(){
        let eff = player.Up.aprotein.add(1).pow(0.02)
        if (hasUpgrade("Up",53)) eff = eff.pow(1.5)
        let eff2 = player.Up.aprotein.add(10).log10().pow(0.4).sub(1).div(300).add(1)
        if (hasUpgrade("Up",53)) eff2 = eff2.pow(1.5)
        if (eff2.gte(1.5)) eff2 = eff2.div(1.5).log10().add(1.5)
        if (hasUpgrade("Us",101)) {
            eff = eff.pow(tmp.Up.prpEff[0]).pow(tmp.Up.caseffect)
            eff2 = eff2.pow(tmp.Up.prpEff[0]).pow(tmp.Up.caseffect)
            if (eff2.gte("e5e5")) eff2 = eff2.log10().div(5e5).pow(0.5).mul(5e5).pow10()
        }
        return [eff,eff2]
    },
    aproteinGain(){
        let eff = tmp.Up.buyables[41].effect
        if (hasUpgrade("Up",82)) eff = eff.mul(2)
        eff = eff.pow(tmp.Up.buyables[43].effect.add(1)).mul(tmp.Up.buyables[42].effect)
        return eff.mul(tmp.uv.virusEff)
    },
    prpGain(){
        let eff = slogadd(tmp.Up.buyables[51].effect,tmp.Up.buyables[53].effect).pow(tmp.Up.buyables[53].effect.add(1)).mul(tmp.Up.buyables[52].effect)
        return eff.mul(tmp.Up.prpscEff).mul(tmp.uv.virusEff)
    },
    prpscGain(){
        let exp = tmp.Up.buyables[62].effect.add(1)
        if (hasUpgrade("ct",496)) exp = exp.add(0.5)
        if (hasUpgrade("ct",501)) exp = exp.add(1)
        let eff = player.Up.prp.div("e409").max(10).log10().pow(exp)
        if (player.Up.prp.lt("e410")) return decimalZero
        return eff.mul(tmp.Up.buyables[61].effect).pow(tmp.Up.prpresEff).mul(tmp.uv.virusEff)
    },
    prpresGain(){
        let exp = tmp.Up.buyables[72].effect.add(3)
        let gexp = decimalOne
        if (hasUpgrade("Up",85)) gexp = gexp.mul(1.05)
        if (hasUpgrade("Up",94)) gexp = gexp.mul(1.05)
        if (hasUpgrade("ct",496)) exp = exp.add(0.5)
        if (hasUpgrade("ct",501)) exp = exp.add(1)
        if (hasUpgrade("Up",85) && player.Up.buyables[73].gte(5)) exp = exp.add(1)
        if (hasUpgrade("Up",82)) exp = exp.add(player.Up.upgrades.filter(x=>x>80&&x<90).length/2)
        if (hasUpgrade("Up",92)) exp = exp.add(player.Up.upgrades.filter(x=>x>90&&x<100).length)
        let eff = player.Up.prpsc.div("e733").max(10).log10().log10().pow(exp).mul(100)
        if (player.Up.prpsc.lt("e734")) return decimalZero
        if (hasUpgrade("Up",84)) eff = eff.mul(100)
        if (hasUpgrade("Up",91)) eff = eff.mul(5)
        if (hasUpgrade("Up",94)) eff = eff.mul(5)
        if (hasUpgrade("ct",501)) eff = eff.mul(5)
        if (hasUpgrade("Up",93)) eff = eff.mul(tmp.Up.upgrades[93].effect)
        if (hasUpgrade("Up",95)) eff = eff.mul(tmp.Up.upgrades[95].effect)
        if (hasUpgrade("Uu",15)) eff = eff.mul(tmp.Uu.upgrades[15].effect)
        if (hasMilestone("Uu",0)) eff = eff.mul(tmp.Uu.milestones[0].effect)
        if (hasMilestone("Uu",1)) eff = eff.mul(player.Uu.milestones.length+1)
        return eff.mul(tmp.Up.buyables[71].effect).pow(gexp).mul(tmp.uv.virusEff)
    },
    prpscEff() {
        let eff = player.Up.prp.add(10).log10().pow(tmp.Up.prpExp)
        return eff
    },
    prpscStart() {
        let start = new Decimal(4e4)
        if (hasUpgrade("Uu",11)) start = start.mul(tmp.Uu.upgrades[11].effect)
        return start
    },
    prpExp(){
        let exp = tmp.Up.buyables[63].effect.add(0.4)
        let eff = player.Up.prpsc.add(10).log10().pow(exp).sub(1).mul(2)
        let start = tmp.Up.prpscStart
        if (eff.gte(start)) eff = eff.log10().div(Decimal.log10(start)).pow(0.5).mul(Decimal.log10(start)).pow10()
        return eff
    },
    prpresEff() {
        let eff = player.Up.prpsc.add(10).log10().add(10).log10().pow(tmp.Up.prpscExp)
        return eff
    },
    prpresStart() {
        let start = decimalHalf
        if (hasUpgrade("ct",505)) start = start.mul(1.1)
        if (hasUpgrade("Uu",42)) start = start.mul(tmp.Uu.upgrades[42].effect)
        return start
    },
    prpscExp(){
        let exp = tmp.Up.buyables[73].effect.add(0.3)
        let start = tmp.Up.prpresStart
        let eff = player.Up.prpres.add(10).log10().pow(exp).sub(1).mul(0.01)
        if (eff.gte(start)) eff = eff.mul(200).log10().div(start.mul(200).log10()).pow(0.5).mul(start.mul(200).log10()).pow10().div(200)
        return eff
    },
    effectDescription() {
        let dis = "which "+pluralize(player.Up.points,'boosts','boost')+" death gain by "+layerText("h2", "Up", format(tmp.Up.effect[0]))+" and " +pluralize(player.Up.points,'divides','divide')+" unvaxxed replicant interval by "+layerText("h2", "Up", format(tmp.Up.effect[1]))
        return dis
    },
    update(diff) {
        player.Up.time+=diff
        player.Up.btime+=diff
        if (hasMilestone("Up",10)) generatePoints("Up",diff/100)
        if (inChallenge("Up",12)) {
            if (player.Up.time>180) {
                alert("You failed the challenge!")
                player.Up.fail = 1
                player.Up.activeChallenge = null
                doReset("Up",true)
            }
        }
        if (hasMilestone('Up',4) && player.Up.auto) {
            layers.Ur.buyables[11].buy()
            layers.Ur.buyables[12].buy()
            layers.Ur.buyables[13].buy()
        }
        if (hasMilestone('Up',5) && player.Up.auto2) {
            layers.Ur.buyables[21].buy()
            if (!inChallenge("Up",32)) {
            layers.Ur.buyables[22].buy()
            layers.Ur.buyables[23].buy()
            }
        }
        if (hasMilestone('Up',11) && player.Up.autop) {
            layers.Up.buyables[21].buyMax()
        }
        if (hasMilestone('Up',12) && player.Up.autop2) {
            layers.Up.buyables[31].buyMax()
        }
        if (hasMilestone('Up',13) && player.Up.autopr) {
            layers.Up.buyables[11].buy()
            layers.Up.buyables[22].buyMax()
            layers.Up.buyables[23].buyMax()
        }
        if (hasMilestone('Up',14) && player.Up.autoe) {
            layers.Up.buyables[12].buy()
            layers.Up.buyables[13].buy()
        }
        if (hasMilestone('Up',15) && player.Up.autoupr) {
            layers.Up.buyables[32].buyMax()
            layers.Up.buyables[33].buyMax()
        }
        if (hasMilestone('Up',17) && player.Up.autoapr) {
            layers.Up.buyables[41].buyMax()
            layers.Up.buyables[42].buyMax()
            layers.Up.buyables[43].buyMax()
        }
        if (hasUpgrade('Up',75) || hasUpgrade('ct',501)) {
            layers.Up.buyables[51].buy()
            layers.Up.buyables[52].buy()
        }
        if (hasUpgrade('ct',501)) layers.Up.buyables[53].buy()
        if (hasUpgrade('Up',85) || hasMilestone("Uu",2)) {
            layers.Up.buyables[61].buy()
            layers.Up.buyables[62].buy()
        }
        if (hasMilestone("Uu",2)) {
            layers.Up.buyables[63].buy()
        }
        if (hasMilestone("Uu",4) && player.Uu.auto) {
            layers.Up.buyables[71].buy()
        }
        if (hasMilestone("Uu",7) && player.Uu.auto2) {
            layers.Up.buyables[72].buy()
            layers.Up.buyables[73].buy()
        }
        if (hasChallenge('Up',42)) player.Up.protein = player.Up.protein.add(tmp.Up.proteinGain.mul(diff))
        if (hasUpgrade('Up',41)) player.Up.uprotein = player.Up.uprotein.add(tmp.Up.uproteinGain.mul(diff))
        if (hasUpgrade('Up',45)) player.Up.aprotein = player.Up.aprotein.add(tmp.Up.aproteinGain.mul(diff))
        if (hasUpgrade('Up',71)) player.Up.prpsc = player.Up.prpsc.add(tmp.Up.prpscGain.mul(diff))
        if (hasUpgrade('Up',81)) player.Up.prpres = player.Up.prpres.add(tmp.Up.prpresGain.mul(diff))
        if (hasMilestone('Up',16)) player.Up.prp = player.Up.prp.add(tmp.Up.prpGain.mul(diff))
    },
    gainMult () {
        let mult = tmp.uv.virusEff
        if (!hasUpgrade("Us",41)) mult = mult.mul(tmp.Up.buyables[11].effect)
        if (hasUpgrade("Up",32) && !hasMilestone("Us",5)) mult = mult.mul(tmp.Up.upgrades[32].effect2)
        if (hasUpgrade("Up",23)) mult = mult.mul(tmp.Up.upgrades[23].effect)
        if (hasMilestone("Up",6)) mult = mult.mul(tmp.Up.milestones[6].effect)
        if (hasMilestone("Up",8)) mult = mult.mul(tmp.Up.milestones[8].effect)
        if (hasChallenge("Up",31)) mult = mult.mul(tmp.Up.challenges[31].rewardEffect)
        return mult
    },
    baseMult () {
        let mult = new Decimal(1/24000)
        return mult
    },
    gainExp () {
        let exp = decimalThree
        if (hasUpgrade("Up",22)) exp = exp.add(tmp.Up.upgrades[22].effect)
        if (hasUpgrade("Up",34)) exp = exp.add(tmp.Up.upgrades[34].effect)
        if (hasUpgrade("Up",35)) exp = exp.add(tmp.Up.upgrades[35].effect)
        if (hasUpgrade("Up",31)) exp = exp.add(1)
        if (hasUpgrade("ct",495)) exp = exp.add(1)
        if (hasAchievement("a",222) && player.Up.protein.gte(1)) exp = exp.add(0.2)
        exp = exp.add(tmp.Up.buyables[12].effect)
        if (hasUpgrade("Up",63)) exp = exp.mul(1.1)
        return exp
    },
    getResetGain() {
        let f = tmp.Up.baseAmount
        if (f.lt(tmp.Up.requires)) return decimalZero
        let gain = f.div("e40000").log10().mul(tmp.Up.baseMult).pow(tmp.Up.gainExp).mul(tmp.Up.gainMult).pow(tmp.Up.gainExp2)
        return gain.floor()
    },
    getNextAt() {
        let next = tmp.Up.getResetGain.add(1).max(1)
        next = next.root(tmp.Up.gainExp2).div(tmp.Up.gainMult).root(tmp.Up.gainExp).div(tmp.Up.baseMult).pow10().mul("e40000")
		return next.max("e64000");
    },
    prestigeButtonText() {
        let b = tmp.Up.getResetGain
        let next = tmp.Up.getNextAt
        let text = "Reset for +<b>"+formatWhole(b)+"</b> "+pluralize(b,tmp.Up.resourceSingular,tmp.Up.resource,true)+"<br><br>Next at "+formatWhole(next)+" "+pluralize(next,tmp.Up.baseSingular,tmp.Up.baseResource)+"<br>"
        let gain = b.div(player.Up.time+1e-11)
        if (gain.gte(10)) text += format(gain) + "/s"
        else text += format(gain.mul(60)) + "/min"
        return text
    },
    canReset() {
        return tmp.Up.baseAmount.gte(tmp.Up.requires) && player.Up.time>=7
    },
    tabFormat: {
        "Main": {
        content:[
            function() {if (player.tab == "Up") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Up") return "resource-display"},
            "blank",
            ["display-text", 
                function() {
                    let gain = player.Up.bestPer
                    let text = ''
                    if (gain.gte(10)) text += format(gain) + "/s"
                    else text += format(gain.mul(60)) + "/min"
                    let a = "There is a 7 second cooldown (" + formatTime(Math.max(0,7-player.Up.time))+")<br>Reset time: "+formatTime(player.Up.time)
                    let b = "<br>Best gain/min: "+text
                    let c = "<br>The first row of upgrades increase cost"
                     return a+b+c
                }
                ],
            ["upgrades",[1,2,3,4,5]],
            ]
        },
        "Milestones": {
            content:[
                function() {if (player.tab == "Up") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Up") return "resource-display"},
            "blank",
            "milestones"
            ],
        },
        "Buyables": {
            content:[
                function() {if (player.tab == "Up") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Up") return "resource-display"},
            "blank",
            ["buyables",[1]],
            ],
            unlocked() {return hasMilestone("Up",5)}
        },
        "Challenges": {
            content:[
                function() {if (player.tab == "Up") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Up") return "resource-display"},
            "blank",
            "challenges"
            ],
            unlocked() {return hasUpgrade("Up", 21)}
        },
        "Proteins": {
            content:[
                function() {if (player.tab == "Up") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Up") return "resource-display"},
            "blank",
            ["display-text", 
                function() {
                    let a = "You have "+layerText("h2", "Up", formatWhole(player.Up.protein))+" misfolded "+pluralize(player.Up.protein,'protein','proteins',true)+", which "+pluralize(player.Up.protein,'boosts','boost',true)+" unvaxxed replicant multiplier by ^"+layerText("h2", "Up", format(tmp.Up.proteinEff))
                    let b = "<br>You are gaining "+layerText("h2", "Up", formatWhole(tmp.Up.proteinGain))+" misfolded "+pluralize(tmp.Up.proteinGain,'protein','proteins',true)+" per second"
                     return a+b
                }
                ],
            ["buyables",[2]],
            "blank",
            ["display-text", 
                function() {
                    if (!hasUpgrade("Up",41)) return 
                    let a = "You have "+layerText("h2", "Up", formatWhole(player.Up.uprotein))+" unfolded "+pluralize(player.Up.uprotein,'protein','proteins',true)+", which "+pluralize(player.Up.uprotein,'boosts','boost',true)+" base misfolded protein gain by "+layerText("h2", "Up", format(tmp.Up.uproteinEff[0]))+" and effect by ^"+layerText("h2", "Up", format(tmp.Up.uproteinEff[1]))
                    let b = "<br>You are gaining "+layerText("h2", "Up", formatWhole(tmp.Up.uproteinGain))+" unfolded "+pluralize(tmp.Up.uproteinGain,'protein','proteins',true)+" per second"
                     return a+b
                }
                ],
            ["buyables",[3]],
            "blank",
            ["display-text", 
                function() {
                    if (!hasUpgrade("Up",45)) return 
                    let a = "You have "+layerText("h2", "Up", formatWhole(player.Up.aprotein))+" antifolded "+pluralize(player.Up.aprotein,'protein','proteins',true)+", which "+pluralize(player.Up.aprotein,'boosts','boost',true)+" base unfolded protein gain by "+layerText("h2", "Up", format(tmp.Up.aproteinEff[0]))+" and effects by ^"+layerText("h2", "Up", format(tmp.Up.aproteinEff[1]))
                    if (tmp.Up.aproteinEff[1].gte("e5e5")) a += " (softcapped)"
                    let b = "<br>You are gaining "+layerText("h2", "Up", formatWhole(tmp.Up.aproteinGain))+" antifolded "+pluralize(tmp.Up.aproteinGain,'protein','proteins',true)+" per second"
                     return a+b
                }
                ],
            ["buyables",[4]],
            ],
            unlocked() {return hasChallenge("Up", 42)}
        },
        "PrP": {
            content:[
                function() {if (player.tab == "Up") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Up") return "resource-display"},
            "blank",
            ["display-text", 
                function() {
                    let a = "You have "+layerText("h2", "Up", formatWhole(player.Up.prp))+" PrP, which boosts "+(hasUpgrade("Us",101)?"antifolded protein effects by ^":hasMilestone("Us",5)?"unvaxxed prions by ^":"casualty by ")+layerText("h2", "Up", format(tmp.Up.prpEff[0]))+" and base antifolded protein gain by "+layerText("h2", "Up", format(tmp.Up.prpEff[1]))
                    let b = "<br>You are gaining "+layerText("h2", "Up", formatWhole(tmp.Up.prpGain))+" PrP per second<br>"
                    let c = hasUpgrade("Up",71)?"You have "+layerText("h2", "Up", formatWhole(player.Up.prpsc))+" PrPSc, which boosts PrP by log10(PrP+10)^"+layerText("h2", "Up", format(tmp.Up.prpExp))+(tmp.Up.prpExp.gte(tmp.Up.prpscStart)?' (softcapped)':'')+" ("+layerText("h2", "Up", format(tmp.Up.prpscEff))+"x PrP gain)":""
                    let d = hasUpgrade("Up",71)?"<br>You are gaining "+layerText("h2", "Up", format(tmp.Up.prpscGain))+" PrPSc per second (starts at "+format("e410")+" PrP)<br>":""
                    let e = hasUpgrade("Up",81)?"You have "+layerText("h2", "Up", formatWhole(player.Up.prpres))+" PrPres, which boosts PrPSc by ^log10(log10(PrPSc+10)+10)^"+layerText("h2", "Up", format(tmp.Up.prpscExp))+(tmp.Up.prpscExp.gte(.5)?' (softcapped)':'')+" (^"+layerText("h2", "Up", format(tmp.Up.prpresEff))+" PrPSc gain)":""
                    let f = hasUpgrade("Up",81)?"<br>You are gaining "+layerText("h2", "Up", format(tmp.Up.prpresGain))+" PrPres per second (starts at "+format("e734")+" PrPSc)":""
                     return a+b+c+d+e+f
                }
                ],
            ["raw-html", function() {if (player.tab == "Up" && player.subtabs.Up.mainTabs == "PrP") return "You have <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + formatWhole(player.f.casualty) +"</h2> casualty"}],
            ["raw-html", function() {if (player.tab == "Up" && player.subtabs.Up.mainTabs == "PrP") return "You are gaining <h2 style='color:#3d2963;text-shadow:0px 0px 10px;'>" + formatWhole(tmp.f.clickables[12].gain.div(100)) + "</h2> casualty per second."}],
            ["buyables",[5,6,7]],
            ["upgrades",[6,7,8,9,10]],
            ],
            unlocked() {return hasMilestone("Up", 16)}
        },
    },
    challenges: { 
        rows: 6,
        cols: 2,
        11: {
            name: "Prion Challenge 1",
            currencyDisplayName: "unvaxxed replicants",
            currencyInternalName: "replicants",
            currencyLayer: "Ur",
            challengeDescription: function() {
                let c11 = "Replicant interval is 123,456,789x slower."
                if (inChallenge("Up", 11)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("Up", 11) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return Decimal.pow(10,64000)
            },
            rewardDescription: "Replicant interval is 12.345x faster.",
            onExit() {
                doReset("Up")
            },
            unlocked(){
                return hasUpgrade("Up", 21)
            }
        },
        12: {
            name: "Prion Challenge 2",
            currencyDisplayName: "unvaxxed replicants",
            currencyInternalName: "replicants",
            currencyLayer: "Ur",
            challengeDescription: function() {
                let c11 = "Buying Replicant buyables slow down the interval, speeding up based on last buyable bought time. Time limit: 3 minutes. Currently: "+format(tmp.Up.c2)+"x slower."
                if (inChallenge("Up", 12)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("Up", 12) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return Decimal.pow(10,35000)
            },
            onStart(testInput=false) { 
                if (testInput) {
                    player.Up.btime=0
                }
            },
            rewardDescription: "Replicant interval is faster based on Prion time.",
            rewardEffect() {
                let eff = new Decimal(player.Up.time/10).add(1).pow(2.5)
                return eff
            },
            rewardDisplay() {
                return format(this.rewardEffect())+"x faster"
            },
            onExit() {
                doReset("Up")
            },
            unlocked(){
                return hasUpgrade("Up", 21)
            }
        },
        21: {
            name: "Prion Challenge 3",
            currencyDisplayName: "unvaxxed replicants",
            currencyInternalName: "replicants",
            currencyLayer: "Ur",
            challengeDescription: function() {
                let c11 = "You can't gain deaths."
                if (inChallenge("Up", 21)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("Up", 21) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return Decimal.pow(10,5555)
            },
            rewardDescription: "Deaths divide replicant interval.",
            rewardEffect() {
                let eff = player.d.points.max(10).log10().div(1e3).max(1).pow(3)
                return eff
            },
            rewardDisplay() {
                return "/"+format(this.rewardEffect())
            },
            onExit() {
                doReset("Up")
            },
            unlocked(){
                return hasUpgrade("Up", 21)
            }
        },
        22: {
            name: "Prion Challenge 4",
            currencyDisplayName: "unvaxxed replicants",
            currencyInternalName: "replicants",
            currencyLayer: "Ur",
            challengeDescription: function() {
                let c11 = "You can't gain unvaxxed replicators. 'Deadly Multiplier' base is 1. Replicant interval OoMs is halved."
                if (inChallenge("Up", 22)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("Up", 22) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return Decimal.pow(10,111111)
            },
            rewardDescription: "Replicant interval scaling is 1.1x OoMs slower.",
            onExit() {
                doReset("Up")
            },
            unlocked(){
                return hasUpgrade("Up", 21)
            }
        },
        31: {
            name: "Prion Challenge 5",
            currencyDisplayName: "unvaxxed replicants",
            currencyInternalName: "replicants",
            currencyLayer: "Ur",
            challengeDescription: function() {
                let c11 = "Buying Replicant buyables except 'Deadly Multiplier' set the interval to 1e20x slower, slowing down based on last buyable bought time. Currently: "+format(tmp.Up.c5)+"x slower."
                if (inChallenge("Up", 31)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("Up", 31) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return Decimal.pow(10,135000)
            },
            onStart(testInput=false) { 
                if (testInput) {
                    player.Up.btime=0
                }
            },
            rewardDescription: "Multiply unvaxxed prion gain based on Prion time.",
            rewardEffect() {
                let eff = new Decimal(player.Up.time).add(10).log10().pow(5)
                return eff
            },
            rewardDisplay() {
                return format(this.rewardEffect())+"x"
            },
            onExit() {
                doReset("Up")
            },
            unlocked(){
                return hasUpgrade("Up", 21)
            }
        },
        32: {
            name: "Prion Challenge 6",
            currencyDisplayName: "unvaxxed replicants",
            currencyInternalName: "replicants",
            currencyLayer: "Ur",
            challengeDescription: function() {
                let x = Decimal.sub(20,player.Ur.buyables[22].add(player.Ur.buyables[23])).max(0)
                let c11 = "You can buy 20 total 'Deadly Scaling' and 'Deadly OoMs'. ("+formatWhole(x)+" left)"
                if (inChallenge("Up", 32)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("Up", 32) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return Decimal.pow(10,135000)
            },
            rewardDescription: "Deaths boost to 'Deadly Scaling' and 'Deadly OoMs' is 1.05x stronger.",
            onExit() {
                doReset("Up")
            },
            unlocked(){
                return hasUpgrade("Up", 21)
            }
        },
        41: {
            name: "Prion Challenge 7",
            currencyDisplayName: "unvaxxed replicants",
            currencyInternalName: "replicants",
            currencyLayer: "Ur",
            challengeDescription: function() {
                let c11 = "You can buy 3 Unvaxxed Replicator upgrades."
                if (inChallenge("Up", 41)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("Up", 41) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return Decimal.pow(10,5750000)
            },
            onStart(testInput=false) { 
                if (testInput) {
                    player.Ur.upgrades=[]
                }
            },
            rewardDescription: "Add 1 to fatality gain exponent.",
            onExit() {
                doReset("Up")
                player.Ur.upgrades=[11,12,13,21,22,23,31,32,33]
            },
            unlocked(){
                return hasUpgrade("Up", 21)
            }
        },
        42: {
            name: "Prion Challenge 8",
            currencyDisplayName: "unvaxxed replicants",
            currencyInternalName: "replicants",
            currencyLayer: "Ur",
            countsAs: [11,12,21,31,32,41],
            challengeDescription: function() {
                let c11 = "All previous challenges except PC4 are applied at once."
                if (inChallenge("Up", 42)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("Up", 42) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return Decimal.pow(10,11111)
            },
            onStart(testInput=false) { 
                if (testInput) {
                    player.Up.btime=0
                    player.Ur.upgrades=[]
                }
            },
            rewardDescription: "Add 1 to fatality gain exponent and unlock Misfolded Proteins.",
            onExit() {
                doReset("Up")
                player.Ur.upgrades=[11,12,13,21,22,23,31,32,33]
            },
            unlocked(){
                return hasUpgrade("Up", 21)
            }
        },
    },
    milestones: {
        0: {
            requirementDescription: "1 total unvaxxed prion (1)",
            effectDescription: "Keep UV upgrades and milestones on reset.",
            done() { return player.Up.total.gte(1) }
        },
        1: {
            requirementDescription: "2 total unvaxxed prions (2)",
            effectDescription: "Keep UI upgrades and milestones on reset.",
            done() { return player.Up.total.gte(2) }
        },
        2: {
            requirementDescription: "5 total unvaxxed prions (3)",
            effectDescription: "Keep UR upgrades on reset.",
            done() { return player.Up.total.gte(5) }
        },
        3: {
            requirementDescription: "20 total unvaxxed prions (4)",
            effectDescription: "Keep UR milestones on reset.",
            done() { return player.Up.total.gte(20) }
        },
        4: {
            requirementDescription: "40 total unvaxxed prions (5)",
            effectDescription: "Autobuy the first row of replicant buyables and they don't divide replicants.",
            toggles:[["Up", "auto"]],
            done() { return player.Up.total.gte(40) }
        },
        5: {
            requirementDescription: "200 total unvaxxed prions (6)",
            effectDescription: "Autobuy the second row of replicant buyables and they don't cost deaths, unlock a buyable.",
            toggles:[["Up", "auto2"]],
            done() { return player.Up.total.gte(200) }
        },
        6: {
            requirementDescription() {return format(1e27)+" total unvaxxed prions (7)"},
            effect() {
                let eff = tmp.Ur.repMult.log10().div(1e3).max(1)
                return eff
            },
            effectDescription() {
                return "Replicant multiplier boosts unvaxxed prion gain.<br>Currently: "+format(milestoneEffect("Up",6))+"x"},
            done() { return player.Up.total.gte(1e27) }
        },
        7: {
            requirementDescription() {return format(1e38)+" total unvaxxed prions (8)"},
            effect() {
                let eff = player.Ui.buyables[11].div(1e5)
                return eff
            },
            effectDescription() {
                return "'Base Multiplier' adds to its base, 'Deadly Replicants' cost exp is 0.8.<br>Currently: +"+format(milestoneEffect("Up",7))},
            done() { return player.Up.total.gte(1e38) }
        },
        8: {
            requirementDescription() {return format(6.363e63)+" total unvaxxed prions (9)"},
            effect() {
                let eff = powExp(player.Ui.pathogens.add(1),0.3).pow(0.001)
                if (eff.gte("ee12")) eff = eff.log10().div(1e12).pow(0.7).mul(1e12).pow10()
                if (eff.gte("ee13")) eff = eff.log10().div(1e13).pow(0.5).mul(1e13).pow10()
                if (eff.gte("ee14")) eff = eff.log10().log10().div(14).pow(0.75).mul(14).pow10().pow10()
                if (eff.gte("ee20")) eff = eff.log10().log10().div(20).pow(0.65).mul(20).pow10().pow10()
                if (eff.gte("ee21")) eff = eff.log10().log10().div(2.1).pow(21).pow10()
                return eff
            },
            effectDescription() {
                return "Unvaxxed pathogens boost unvaxxed prion gain, 'Pathogen Replicants' cost exp is 0.8, 'Replicated Infectivity'^2.<br>Currently: "+format(milestoneEffect("Up",8))+"x"},
            done() { return player.Up.total.gte(6.363e63) }
        },
        9: {
            requirementDescription() {return format(1e141)+" total unvaxxed prions (10)"},
            effectDescription: "The previous milestone boosts fatality gain, square 8th UI milestone effect, unlock a Pathogen buyable.",
            done() { return player.Up.total.gte(1e141) }
        },
        10: {
            requirementDescription() {return format(Decimal.pow(2,1024))+" total unvaxxed prions (11)"},
            effectDescription: "Gain 1% of Unvaxxed Prion gain per second.",
            done() { return player.Up.total.gte(Decimal.pow(2,1024)) }
        },
        11: {
            requirementDescription() {return format("e413")+" total unvaxxed prions (12)"},
            effectDescription: "Autobuy 'Protein Gain', 'Pathogen Replicants' and 'Deadly Replicants' cost exp-0.2, raise UP 1st effect to 5.",
            toggles:[["Up", "autop"]],
            done() { return player.Up.total.gte("e413") }
        },
        12: {
            requirementDescription() {return format("e1653")+" total unvaxxed prions (13)"},
            effectDescription: "Autobuy 'Unfolded Protein Gain', 'Deadly Replicants' cost exp-0.15, raise UP 1st effect to 5, unlock a buyable.",
            toggles:[["Up", "autop2"]],
            done() { return player.Up.total.gte("e1653") }
        },
        13: {
            requirementDescription() {return format("e5000")+" total unvaxxed prions (14)"},
            effectDescription: "Autobuy 'Prion Multiplier', 'Protein Multiplier', 'Protein Exponent'.",
            toggles:[["Up", "autopr"]],
            done() { return player.Up.total.gte("e5000") }
        },
        14: {
            requirementDescription() {return format("e40000")+" total unvaxxed prions (15)"},
            effectDescription: "Autobuy 'Prion Exponent' and 'Fatality Exponent', 'Fatal Prions' 2nd effect is raised to 1.5.",
            toggles:[["Up", "autoe"]],
            done() { return player.Up.total.gte("e40000") }
        },
        15: {
            requirementDescription() {return format("e67500")+" total unvaxxed prions (16)"},
            effect() {
                let eff = player.f.casualty.add(10).log10().pow(0.1)
                if (hasUpgrade("Up",61)) eff = eff.pow(tmp.Up.upgrades[61].effect)
                return eff
            },
            effectDescription() {
                return "Casualty boosts base Antifolded protein gain, autobuy 'Unfolded Protein Multiplier' and 'Unfolded Protein Exponent'.<br>Currently: "+format(milestoneEffect("Up",15))+"x"},
            toggles:[["Up", "autoupr"]],
            done() { return player.Up.total.gte("e67500") }
        },
        16: {
            requirementDescription() {return format("e75150")+" total unvaxxed prions (17)"},
            effectDescription: "Raise 'Protein Gain' effective amount to 1.1, unlock PrP.",
            done() { return player.Up.total.gte("e75150") }
        },
        17: {
            requirementDescription() {return format("e27e4")+" total unvaxxed prions (18)"},
            effect() {
                let eff = tmp.Up.upgrades[42].effect.mul(0.2)
                return eff
            },
            effectDescription() {
                return "'Fasterest Prions' boosts Mult per Casualty Dimension at 20% effect, dilate UP 1st effect to 1.11, autobuy Antifolded Protein buyables.<br>Currently: ^"+format(milestoneEffect("Up",17))},
            toggles:[["Up", "autoapr"]],
            done() { return player.Up.total.gte("e27e4") }
        },
    },
    upgrades: {
        rows: 10,
        cols: 5,
        11: {
            title: "Faster Replicants",
            description: "'Fast Replicants' base is 1.6.",
            cost() {return tmp.Up.upgCost},
        },
        12: {
            title: "Deadlier Scaling",
            description: "Add 0.01 to 'Deadly Scaling' base.",
            cost() {return tmp.Up.upgCost},
        },
        13: {
            title: "Deadlier OoMs",
            description: "Add 3 to 'Deadly OoMs' base.",
            cost() {return tmp.Up.upgCost},
        },
        14: {
            title: "Deadlier Multiplier",
            description: "Square 'Deadly Multiplier' base.",
            cost() {return tmp.Up.upgCost},
        },
        15: {
            title: "Deadlier Replicants",
            description: "Raise 'Deadly Multiplier' base to 1.15.",
            cost() {return tmp.Up.upgCost},
        },
        21: {
            title: "Prion Replicants",
            cost: new Decimal(1e3),
            description: "Unvaxxed Prions boost unvaxxed replicant effect, unlock Challenges.",
            effect(){
                let eff = player.Up.points.max(10).log10().pow(0.35).div(10).add(1)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Up.upgrades[21].effect)
                return dis
            },
        },
        22: {
            title: "Challenged Prions",
            cost: new Decimal(15e4),
            description: "Challenge completions add to Unvaxxed prion gain exponent.",
            effect(){
                let chals = 0
                for (i = 0; i < player.Up.chal.length; i++){
                    chals += player.Up.challenges[player.Up.chal[i]]
                }
                let eff = new Decimal(chals)
                return eff
            },
            effectDisplay(){
                let dis = "+"+format(tmp.Up.upgrades[22].effect)
                return dis
            },
        },
        23: {
            title: "Deadly Prions",
            cost: new Decimal(1e11),
            description: "Deaths boost Unvaxxed Prion gain.",
            effect(){
                let eff = powExp(player.d.points.add(1),0.55).pow(0.01)
                if (eff.gte("ee18")) eff = eff.log10().log10().div(18).pow(0.5).mul(18).pow10().pow10()
                if (eff.gte("ee19")) eff = eff.log10().div(1e19).pow(0.35).mul(1e19).pow10()
                if (eff.gte("e5e19")) eff = eff.log10().div(5e19).pow(0.35).mul(5e19).pow10()
                if (eff.gte("ee24")) eff = eff.log10().log10().div(2.4).pow(24).pow10()
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Up.upgrades[23].effect)+"x"
                if (tmp.Up.upgrades[23].effect.gte("ee18")) dis += ' (softcapped)'
                return dis
            },
        },
        24: {
            title: "Fast Prions",
            cost: new Decimal(1e23),
            description: "'Fast Replicants' cost exp is 1.35.",
        },
        25: {
            title: "Faster Prions",
            cost: new Decimal(2e35),
            description: "'Fast Replicants' cost exp is 1.2 and each level adds 0.001 to its base.",
        },
        31: {
            title: "Base Prions",
            cost: new Decimal(1e40),
            description: "Unvaxxed prions boost base cases gain, UP gain exponent+1.",
            effect(){
                let eff = player.Up.points.max(10).log10().pow(0.6).div(20).add(1)
                if (hasUpgrade("Up",41)) eff = eff.pow(2)
                if (hasUpgrade("Up",43)) eff = eff.pow(1.5)
                if (hasUpgrade("Up",91)) eff = eff.pow(1.2)
                if (hasMilestone("Uu",2)) eff = eff.pow(1.14)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Up.upgrades[31].effect)
                return dis
            },
        },
        32: {
            title: "Fatal Prions",
            cost: new Decimal(1e45),
            description: "Fatality and unvaxxed prions boost each other.",
            effect(){
                let eff = player.Up.points.add(1).pow(0.02)
                return eff
            },
            effect2(){
                let eff = player.f.points.add(1).pow(0.5)
                if (hasUpgrade("Up",41)) eff = eff.pow(2)
                if (hasUpgrade("Up",43)) eff = eff.pow(1.5)
                if (hasMilestone("Up",14)) eff = eff.pow(1.5)
                if (hasMilestone("Us",5)) eff = eff.max(10).log10().pow(0.02)
                return eff
            },
            effectDisplay(){
                let dis = "Fatality: "+format(tmp.Up.upgrades[32].effect)+"x, Prions: "+(hasMilestone("Us",5)?" ^"+format(tmp.Up.upgrades[32].effect2):format(tmp.Up.upgrades[32].effect2)+"x")
                return dis
            },
        },
        33: {
            title: "Fastest Prions",
            cost: new Decimal(5.656e56),
            description: "'Fast Replicants' cost exp is 1 and raise UP 1st effect to 5.",
        },
        34: {
            title: "RepliPrion",
            cost: new Decimal(2e80),
            description: "Unvaxxed replicants add to Unvaxxed prion gain exponent.",
            effect(){
                let eff = player.Ur.replicants.max(10).log10().pow(0.3).div(100)
                if (eff.gte(1e21)) eff = eff.log10().div(.21).pow(10.5)
                if (eff.gte(1e22)) eff = eff.div(1e22).pow(0.4).mul(1e22)
                return eff
            },
            effectDisplay(){
                let dis = "+"+format(tmp.Up.upgrades[34].effect)
                if (tmp.Up.upgrades[34].effect.gte(1e21)) dis += ' (softcapped)'
                return dis
            },
        },
        35: {
            title: "MisPrion",
            cost: new Decimal(3e98),
            description: "Misfolded proteins add to Unvaxxed prion gain exponent and unlock a buyable.",
            effect(){
                let eff = player.Up.protein.max(10).log10().pow(0.7).div(10)
                return eff
            },
            effectDisplay(){
                let dis = "+"+format(tmp.Up.upgrades[35].effect)
                return dis
            },
        },
        41: {
            title: "PowerPrion",
            cost: new Decimal(1e195),
            description: "FP boosts fatality, square 'Base Prions' and 'Fatal Prions' 2nd effect, unlock a Protein type.",
            effect(){
                let eff = player.f.p.add(1).pow(1e-5)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Up.upgrades[41].effect)+"x"
                return dis
            },
        },
        42: {
            title: "Fasterest Prions",
            cost: new Decimal("e350"),
            description: "Unvaxxed replicators boost Mult per FD, 'Fast Replicants' cost exp is 0.8.",
            effect(){
                let eff = player.Ur.points.add(1).pow(0.9)
                if (eff.gte(1e5)) eff = eff.div(1e5).pow(0.15).mul(1e5)
                if (eff.gte(4e8)) eff = eff.div(4e8).pow(0.5).mul(4e8)
                if (eff.gte(6e8)) eff = eff.div(6e8).pow(0.33333333).mul(6e8)
                if (eff.gte(1e9)) eff = eff.log10().div(9).pow(0.2).mul(9).pow10()
                return eff.min(1.5e9)
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Up.upgrades[42].effect)
                if (tmp.Up.upgrades[42].effect.gte(15e8)) dis += " (hardcapped)"
                else if (tmp.Up.upgrades[42].effect.gte(1e5)) dis += " (softcapped)"
                return dis
            },
        },
        43: {
            title: "Fastestest Prions",
            cost: new Decimal("e705"),
            description: "'Fast Replicants' boosts itself, 'Base Prions' and 'Fatal Prions' 2nd effect^1.5.",
            effect(){
                let eff = player.Ur.buyables[11].sub(800).max(0).pow(1.2).div(250).add(1)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Up.upgrades[43].effect)
                return dis
            },
        },
        44: {
            title: "Pathogen Prions",
            cost: new Decimal("e1480"),
            description: "'Pathogen Replicants' boosts itself, 'Severer Pathogens'^2, Fatality exponent+1.",
            effect(){
                let eff = player.Ur.buyables[12].sub(1700).max(0).pow(1.35).div(200).add(1)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Up.upgrades[44].effect)
                return dis
            },
        },
        45: {
            title: "Pathogener Prions",
            cost: new Decimal("e3440"),
            description: "'Fast Replicants' and 'Pathogen Replicants' cost exp-0.01, unlock a Protein type.",
        },
        51: {
            title: "Deadlier Prions",
            cost: new Decimal("e10540"),
            description: "'Deadly Replicants' boosts itself, 'FR' and 'PR' cost exp-0.02.",
            effect(){
                let eff = player.Ur.buyables[13].sub(475000).max(0).pow(1.35).div(20000).add(1)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Up.upgrades[51].effect)
                return dis
            },
        },
        52: {
            title: "MultiPrions",
            cost: new Decimal("e12750"),
            description: "'Fasterest Prions' boost Multiplier Boosts at 10% effect, 'PR' cost exp-0.03.",
            effect(){
                let eff = tmp.Up.upgrades[42].effect.div(10).max(1)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Up.upgrades[52].effect)
                return dis
            },
        },
        53: {
            title: "Anti-Prions",
            cost: new Decimal("e15800"),
            description: "Antifolded protein effects are raised to 1.5.",
        },
        54: {
            title: "Boosted Prions",
            cost: new Decimal("e35600"),
            description: "'Fasterest Prions' boost Dimension Boosts at 10% effect, 'FR' cost exp-0.02.",
            effect(){
                let eff = tmp.Up.upgrades[42].effect.div(10).max(1)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Up.upgrades[54].effect)
                return dis
            },
        },
        55: {
            title: "Multiplions",
            cost: new Decimal("e60900"),
            description: "'Prion Multiplier'<sup>2</sup>/1e7 adds to its base, base Antifolded protein gain*1.1.",
            effect(){
                let eff = player.Up.buyables[11].pow(2).div(1e7)
                return eff
            },
            effectDisplay(){
                let dis = "+"+format(tmp.Up.upgrades[55].effect)
                return dis
            },
        },
        61: {
            title: "PrPMil",
            description: "PrP boosts milestone 16 effect.",
            currencyDisplayName: "PrP",
            currencyInternalName: "prp",
            currencyLayer: "Up",
            cost: new Decimal(3e51),
            effect(){
                let eff = player.Up.prp.add(10).max(10).log10().add(10).max(10).log10().pow(3)
                if (hasUpgrade("Uu",42)) eff = eff.pow(1.4)
                return eff
            },
            effectDisplay(){
                return "^"+format(tmp.Up.upgrades[61].effect)
            },
        },
        62: {
            title: "UnProtein",
            description: "Raise 'Unfolded Protein Gain' eff amount to 1.1, Mult per FD^3.",
            currencyDisplayName: "PrP",
            currencyInternalName: "prp",
            currencyLayer: "Up",
            cost: new Decimal(1e60),
        },
        63: {
            title: "Explicants",
            description: "'Fast Replicants' and 'Pathogen Replicants' exp-0.05, FD scaling-1, UP exp*1.1.",
            currencyDisplayName: "PrP",
            currencyInternalName: "prp",
            currencyLayer: "Up",
            cost: new Decimal(3e187),
        },
        64: {
            title: "Exprions",
            description: "'Prion Exponent' and 'Fatality Exponent' base^1.1.",
            currencyDisplayName: "PrP",
            currencyInternalName: "prp",
            currencyLayer: "Up",
            cost: new Decimal(1e216),
        },
        65: {
            title: "Cased PrP",
            description: "PrP boosts cases gain.",
            currencyDisplayName: "PrP",
            currencyInternalName: "prp",
            currencyLayer: "Up",
            cost: new Decimal(15e247),
            effect(){
                let eff = player.Up.prp.add(10).max(10).log10().pow(0.1)
                return eff
            },
            effectDisplay(){
                return "^"+format(tmp.Up.upgrades[65].effect)
            },
        },
        71: {
            title: "Infected PrP",
            description: "Cases boost PrP 2nd effect and unlock PrPSc.",
            currencyDisplayName: "PrP",
            currencyInternalName: "prp",
            currencyLayer: "Up",
            cost: new Decimal("15e329"),
            effect(){
                let eff = player.points.add(10).max(10).log10().add(10).max(10).log10().div(35).max(1).pow(0.8)
                if (eff.gte("ee3e3")) eff = eff.log10().log10().div(3e3).pow(0.4).mul(2e3).add(1e3).pow10().pow10()
                return eff
            },
            effectDisplay(){
                return "^"+format(tmp.Up.upgrades[71].effect)
            },
        },
        72: {
            title: "Casual PrPSc",
            description: "PrPSc boosts casual effect, 'Pathogen Replicants' cost exp-0.1.",
            currencyDisplayName: "PrPSc",
            currencyInternalName: "prpsc",
            currencyLayer: "Up",
            cost: new Decimal(1e35),
            effect(){
                let eff = player.Up.prpsc.max(10).log10()
                if (eff.gte(1e50)) eff = eff.log10().div(50).pow(0.6).mul(50).pow10()
                if (eff.gte(1e70)) eff = eff.log10().div(70).pow(0.3).mul(70).pow10()
                if (eff.gte("e1600")) eff = eff.log10().div(1600).pow(0.4).mul(1600).pow10()
                if (eff.gte("e2500")) eff = eff.log10().div(2500).pow(0.4).mul(2500).pow10()
                if (eff.gte("e25e5")) eff = eff.log10().div(25e5).pow(0.4).mul(25e5).pow10()
                if (eff.gte("ee9")) eff = eff.log10().div(1e9).pow(0.25).mul(1e9).pow10()
                if (eff.gte("e5e10")) eff = eff.log10().div(5e10).pow(0.5).mul(5e10).pow10()
                if (eff.gte("e5e11")) eff = eff.log10().div(5e11).pow(0.35).mul(5e11).pow10()
                if (eff.gte("e5e13")) eff = eff.log10().div(5e13).pow(0.25).mul(5e13).pow10()
                if (eff.gte("e5e15")) eff = eff.log10().div(50).log10().div(14).pow(0.4).mul(14).pow10().mul(50).pow10()
                if (eff.gte("e5e18")) eff = eff.log10().div(50).log10().div(17).pow(0.5).mul(17).pow10().mul(50).pow10()
                if (eff.gte("e5e20")) eff = eff.log10().div(50).log10().div(19).pow(0.35).mul(19).pow10().mul(50).pow10()
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Up.upgrades[72].effect)
                if (tmp.Up.upgrades[72].effect.gte(1e50)) dis += " (softcapped)"
                return dis
            },
        },
        73: {
            title: "Fast Casuals",
            description: "'Fast Replicants' divides casual interval, casualty power softcap is weaker.",
            currencyDisplayName: "PrP",
            currencyInternalName: "prp",
            currencyLayer: "Up",
            cost: new Decimal("3e973"),
            effect(){
                let eff = tmp.Ur.buyables[11].effect.pow(1e-6)
                return eff
            },
            effectDisplay(){
                return "/"+format(tmp.Up.upgrades[73].effect)
            },
        },
        74: {
            title: "Cased PrPSc",
            description: "PrPSc boosts cases gain, 'Deadly Replicants' cost exp-0.075.",
            currencyDisplayName: "PrPSc",
            currencyInternalName: "prpsc",
            currencyLayer: "Up",
            cost: new Decimal(1e264),
            effect(){
                let eff = player.Up.prpsc.max(10).log10().pow(0.2)
                return eff
            },
            effectDisplay(){
                return "^"+format(tmp.Up.upgrades[74].effect)
            },
        },
        75: {
            title: "PrPrP",
            description: "PrPSc boosts PrP 2nd effect, autobuy 'PrP Gain' and 'PrP Multiplier'.",
            currencyDisplayName: "PrP",
            currencyInternalName: "prp",
            currencyLayer: "Up",
            cost: new Decimal("e5663"),
            effect(){
                let eff = player.Up.prpsc.max(10).log10().max(10).log10().div(2).max(1).pow(0.85)
                return eff
            },
            effectDisplay(){
                return "^"+format(tmp.Up.upgrades[75].effect)
            },
        },
        81: {
            title: "Cased Base",
            description: "Cases add to 'PrP Gain' base and unlock PrPres.",
            currencyDisplayName: "PrPSc",
            currencyInternalName: "prpsc",
            currencyLayer: "Up",
            cost: new Decimal("e366"),
            effect(){
                let eff = player.points.max(10).log10().max(10).log10().sub(51).max(0).pow(0.8).div(6)
                return eff
            },
            effectDisplay(){
                return "+"+format(tmp.Up.upgrades[81].effect)
            },
        },
        82: {
            title: "ExPrP",
            description: "Each row 3 upgrade adds 0.5 to PrPres gain exponent, 'Prion Exp' and 'Fatality Exp' base^1.2, base Antifolded gain*2.",
            currencyDisplayName: "PrPres",
            currencyInternalName: "prpres",
            currencyLayer: "Up",
            cost: new Decimal(1e7),
        },
        83: {
            title: "PresP",
            description: "PrPres boosts PrP 2nd effect.",
            currencyDisplayName: "PrP",
            currencyInternalName: "prp",
            currencyLayer: "Up",
            cost: new Decimal("e30850"),
            effect(){
                let eff = player.Up.prpres.max(10).log10().max(10).log10().div(1.2).max(1).pow(1.25)
                return eff
            },
            effectDisplay(){
                return "^"+format(tmp.Up.upgrades[83].effect)
            },
        },
        84: {
            title: "PrPathogens",
            description: "'Pathogen Replicants' boost unvaxxed pathogen gain, PrPres gain*100.",
            currencyDisplayName: "PrPSc",
            currencyInternalName: "prpsc",
            currencyLayer: "Up",
            cost: new Decimal("e7641"),
            effect(){
                let eff = tmp.Ur.buyables[12].effect.max(10).log10().div(1e27).pow(0.3)
                return eff
            },
            effectDisplay(){
                return "^"+format(tmp.Up.upgrades[84].effect)
            },
        },
        85: {
            title: "Cased PrPres",
            description: "PrPres boosts cases gain, PrPres gain^1.05, autobuy 'PrPSc Mult' and 'PrPSc Exp', PrPres exp+1 at 5 'PrPres Boost'.",
            currencyDisplayName: "PrPres",
            currencyInternalName: "prpres",
            currencyLayer: "Up",
            cost: new Decimal(1e72),
            effect(){
                let eff = player.Up.prpres.max(10).log10().pow(0.4)
                return eff
            },
            effectDisplay(){
                return "^"+format(tmp.Up.upgrades[85].effect)
            },
        },
        91: {
            title: "Cased Booster",
            description: "'Cases Boost' boosts cases gain, 'Base Prions' effect^1.2, PrPres gain*5.",
            currencyDisplayName: "PrP",
            currencyInternalName: "prp",
            currencyLayer: "Up",
            cost: new Decimal("e926560"),
            effect(){
                let eff = Decimal.pow(1.005,tmp.d.buyables[13].total.sub(1e5).max(0).pow(0.5))
                return eff
            },
            effectDisplay(){
                return "^"+format(tmp.Up.upgrades[91].effect)
            },
        },
        92: {
            title: "ExPres",
            description: "Each row 4 upgrade adds 1 to PrPres gain exponent, raise 'Antifolded Protein Gain' eff amt to 1.1.",
            currencyDisplayName: "PrPSc",
            currencyInternalName: "prpsc",
            currencyLayer: "Up",
            cost: new Decimal("e73305"),
        },
        93: {
            title: "Infected PrPres",
            description: "Cases boost PrPres gain, 'Prion Exp' and 'Fatality Exp' base^1.3.",
            currencyDisplayName: "PrPres",
            currencyInternalName: "prpres",
            currencyLayer: "Up",
            cost: new Decimal(1e287),
            effect(){
                let eff = powExp(player.points.max(10).log10(),0.8).pow(0.2)
                if (hasUpgrade("Uu",14)) eff = eff.pow(tmp.Uu.upgrades[14].effect)
                if (eff.gte("ee60")) eff = eff.log10().log10().div(60).pow(0.6).mul(60).pow10().pow10()
                if (eff.gte("ee2e16")) eff = eff.log10().log10().div(2e16).pow(0.5).mul(2e16).pow10().pow10()
                if (eff.gte("eee35")) eff = eff.log10().log10().div(1e35).pow(0.4).mul(1e35).pow10().pow10()
                return eff
            },
            effectDisplay(){
                return format(tmp.Up.upgrades[93].effect)+"x"
            },
        },
        94: {
            title: "InPrected",
            description: "Each 'PrPres Boost' after 25 raises cases to 1.1, PrPres gain*5 and ^1.05, 'PrPSc Exp' bulk*10.",
            currencyDisplayName: "PrP",
            currencyInternalName: "prp",
            currencyLayer: "Up",
            cost: new Decimal("e6528e3"),
            effect(){
                let amt = player.Up.buyables[73].sub(25).max(0)
                if (hasUpgrade("Uu",25)) amt = amt.pow(1.5)
                let eff = Decimal.pow(1.1,amt)
                return eff
            },
            effectDisplay(){
                return "^"+format(tmp.Up.upgrades[94].effect)
            },
        },
        95: {
            title: "Casual PrPres",
            description: "Casual Viruses boost PrPres gain, 'PrPSc Exp' bulk*5.",
            currencyDisplayName: "PrPSc",
            currencyInternalName: "prpsc",
            currencyLayer: "Up",
            cost: new Decimal("e7075e4"),
            effect(){
                let eff = powExp(player.f.virus.add(1),0.6).pow(0.1)
                if (eff.gte("ee40")) eff = eff.log10().div(1e40).pow(2/3).mul(1e40).pow10()
                if (eff.gte("ee60")) eff = eff.log10().log10().div(60).pow(0.6).mul(60).pow10().pow10()
                if (eff.gte("ee2e16")) eff = eff.log10().log10().div(2e16).pow(0.5).mul(2e16).pow10().pow10()
                if (eff.gte("eee35")) eff = eff.log10().log10().div(1e35).pow(0.4).mul(1e35).pow10().pow10()
                return eff
            },
            effectDisplay(){
                return format(tmp.Up.upgrades[95].effect)+"x"
            },
        },
    },
    buyables: {
        rows:3,
        cols:3,
        11: {
            title()  {return (player.Up.buyables[11].gte(3025)?"Social Distant":player.Up.buyables[11].gte(154)?"Distant":"")+" Prion Multiplier"},
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[11].costb
                let x = player.Up.buyables[11]
                let cost = Decimal.pow(base,x).mul(100)
                if (x.gte(3025)) cost = base.pow(x.sub(3025).pow(1.2).add(3025)).mul(100)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(100)
                if (player.Up.buyables[11].gte(154)) cost = new Decimal(500)
                if (player.Up.buyables[11].gte(518)) cost = new Decimal(2022)
                return cost
            },
            base() { 
                let base = decimalFive
                if (hasUpgrade("Up",55)) base = base.add(tmp.Up.upgrades[55].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[11]
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x)
                if (hasUpgrade("Us",41)) eff = eff.max(10).log10().pow(0.02)
                return eff
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "Buyables") return
                let extra = ""
                let dis = "Multiply unvaxxed prion gain by "+format(tmp.Up.buyables[11].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed prions\n\
                Effect: " + (hasUpgrade("Us",41)?"^"+format(tmp[this.layer].buyables[this.id].effect):format(tmp[this.layer].buyables[this.id].effect)+"x")+"\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 11))
            },
            unlocked() { return hasMilestone("Up",5) }, 
            canAfford() {
                    return player.Up.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[11].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",494)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Up.points = player.Up.points.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Up.points
                let t = s.div(100).log(100).floor().add(1)
                if (t.gte(154)) t = s.div(100).log(500).floor().add(1).max(154)
                if (t.gte(518)) t = s.div(100).log(2022).floor().add(1).max(518)
                if (t.gte(3025)) t = s.div(100).log(2022).sub(3025).root(1.2).add(3025).floor().add(1)
                let target = t
                return target
            },
            buyMax() { 
                let target = tmp.Up.buyables[11].maxAfford
                let base = tmp.Up.buyables[11].costb
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[11] = player.Up.buyables[11].max(target)
                
                }
            },
        },
        12: {
            title: "Prion Exponent",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[12].costb
                let exp = tmp.Up.buyables[12].coste
                let x = player.Up.buyables[12]
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e107)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e5)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.5)
                return cost
            },
            base() { 
                let exp = new Decimal(1.2)
                if (hasUpgrade("ct",495)) exp = exp.mul(1.05)
                if (hasUpgrade("Up",64)) exp = exp.mul(1.1)
                if (hasUpgrade("Up",82)) exp = exp.mul(1.2)
                if (hasUpgrade("Up",93)) exp = exp.mul(1.3)
                let base = player.Up.points.max(10).log10().max(10).log10().pow(exp).div(5)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[12]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "Buyables") return
                let extra = ""
                let dis = "Increase unvaxxed prion gain exponent by "+format(tmp.Up.buyables[12].base)+" (based on Unvaxxed Prions)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed prions\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 12))
            },
            unlocked() { return hasUpgrade("Up",35) }, 
            canAfford() {
                    return player.Up.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[12].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("Up",14) || hasUpgrade("ct",495)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Up.points = player.Up.points.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Up.points
                let base = tmp.Up.buyables[12].costb
                let exp = tmp.Up.buyables[12].coste
                let target = s.div(1e107).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Up.buyables[12].maxAfford
                let base = tmp.Up.buyables[12].costb
                let exp = tmp.Up.buyables[12].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e107)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[12] = player.Up.buyables[12].max(target)
                
                }
            },
        },
        13: {
            title: "Fatality Exponent",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[13].costb
                let exp = tmp.Up.buyables[13].coste
                let x = player.Up.buyables[13]
                let cost = Decimal.pow(base,x.pow(exp)).mul("e1800")
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e15)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.6)
                return cost
            },
            base() { 
                let exp = new Decimal(1.2)
                if (hasUpgrade("Up",64)) exp = exp.mul(1.1)
                if (hasUpgrade("Up",82)) exp = exp.mul(1.2)
                if (hasUpgrade("Up",93)) exp = exp.mul(1.3)
                let base = player.f.points.max(10).log10().max(10).log10().pow(exp).div(5)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[13]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "Buyables") return
                let extra = ""
                let dis = "Increase fatality gain exponent by "+format(tmp.Up.buyables[13].base)+" (based on fatality)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed prions\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 13))
            },
            unlocked() { return hasMilestone("Up",12) }, 
            canAfford() {
                    return player.Up.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[13].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("Up",14) || hasUpgrade("ct",495)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Up.points = player.Up.points.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Up.points
                let base = tmp.Up.buyables[13].costb
                let exp = tmp.Up.buyables[13].coste
                let target = s.div("e1800").log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Up.buyables[13].maxAfford
                let base = tmp.Up.buyables[13].costb
                let exp = tmp.Up.buyables[13].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul("e1800")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[13] = player.Up.buyables[13].max(target)
                
                }
            },
        },
        21: {
            title: "Protein Gain",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[21].costb
                let exp = tmp.Up.buyables[21].coste
                let x = player.Up.buyables[21]
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e75)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = decimalThree
                return cost
            },
            coste() { 
                let cost = new Decimal(1.05)
                return cost
            },
            base() { 
                let base = tmp.Up.uproteinEff[0]
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[21]
                if (hasMilestone("Up",16)) x = x.pow(1.1)
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "Proteins") return
                let extra = ""
                let base = tmp.Up.buyables[21].base
                let dis = "Gain "+format(base)+" base misfolded "+pluralize(base,'protein','proteins')+" per second"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed prions\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"/s\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 21))
            },
            unlocked() { return hasChallenge("Up",42) }, 
            canAfford() {
                    return player.Up.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[21].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("Up",11) || hasUpgrade("ct",495)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Up.points = player.Up.points.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Up.points
                let base = tmp.Up.buyables[21].costb
                let exp = tmp.Up.buyables[21].coste
                let target = s.div(1e75).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Up.buyables[21].maxAfford
                let base = tmp.Up.buyables[21].costb
                let exp = tmp.Up.buyables[21].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e75)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[21] = player.Up.buyables[21].max(target)
                
                }
            },
        },
        22: {
            title: "Protein Multiplier",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[22].costb
                let exp = tmp.Up.buyables[22].coste
                let x = player.Up.buyables[22]
                if (x.gte(1e45)) x = x.log10().div(45).pow(1.5).mul(45).pow10()
                if (x.gte(1e38)) x = x.log10().div(38).pow(1.5).mul(38).pow10()
                if (x.gte(3e12)) x = x.div(3e12).pow(1.5).mul(3e12)
                if (x.gte(1e11)) x = x.log10().div(11).pow(1.5).mul(11).pow10()
                let cost = Decimal.pow(base,x.pow(exp)).mul(2e78)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = decimalTen
                return cost
            },
            coste() { 
                let cost = new Decimal(1.5)
                return cost
            },
            base() { 
                let base = player.Up.points.max(10).log10().pow(0.2)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[22]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "Proteins") return
                let extra = ""
                let base = tmp.Up.buyables[22].base
                let dis = "Multiply misfolded protein gain by "+format(base)+" (based on Unvaxxed Prions)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed prions\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 22))
            },
            unlocked() { return hasChallenge("Up",42) }, 
            canAfford() {
                    return player.Up.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[22].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("Up",13) || hasUpgrade("ct",495)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Up.points = player.Up.points.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Up.points
                let base = tmp.Up.buyables[22].costb
                let exp = tmp.Up.buyables[22].coste
                let target = s.div(2e78).log(base).root(exp)
                if (target.gte(1e11)) target = target.log10().div(11).root(1.5).mul(11).pow10()
                if (target.gte(3e12)) target = target.div(3e12).root(1.5).mul(3e12)
                if (target.gte(1e38)) target = target.log10().div(38).root(1.5).mul(38).pow10()
                if (target.gte(1e45)) target = target.log10().div(45).root(1.5).mul(45).pow10()
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Up.buyables[22].maxAfford
                let base = tmp.Up.buyables[22].costb
                let exp = tmp.Up.buyables[22].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(2e78)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[22] = player.Up.buyables[22].max(target)
                
                }
            },
        },
        23: {
            title()  {return (player.Up.buyables[23].gte(90)?"Social Distant":player.Up.buyables[23].gte(20)?"Distant":"")+" Protein Exponent"},
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[23].costb
                let exp = tmp.Up.buyables[23].coste
                let x = player.Up.buyables[23]
                if (x.gte(90)) x = Decimal.pow(1.02,x.sub(90)).mul(90)
                if (x.gte(20)) x = x.div(20).pow(2).mul(20)
                let cost = Decimal.pow(base,x.pow(exp)).mul(2e89)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(100)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.6)
                return cost
            },
            base() { 
                let base = player.Up.protein.add(10).log10().add(10).log10()
                if (hasUpgrade("Uu",94)) base = base.pow(player.Up.buyables[23].add(10).log10())
                if (hasUpgrade("Uu",55)) base = base.pow(player.Up.buyables[23].add(1).pow(0.25))
                if (hasUpgrade("Us",33)) base = base.pow(tmp.Us.upgrades[33].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[23]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "Proteins") return
                let extra = ""
                let base = tmp.Up.buyables[23].base
                let dis = "Increase base misfolded protein gain exponent by "+format(base)+" (based on Misfolded Proteins)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed prions\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 23))
            },
            unlocked() { return hasChallenge("Up",42) }, 
            canAfford() {
                    return player.Up.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[23].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("Up",13) || hasUpgrade("ct",495)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Up.points = player.Up.points.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Up.points
                let base = tmp.Up.buyables[23].costb
                let exp = tmp.Up.buyables[23].coste
                let target = s.div(2e89).log(base).root(exp)
                if (target.gte(20)) target = target.div(20).pow(0.5).mul(20)
                if (target.gte(90)) target = target.div(90).log(1.02).add(90)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Up.buyables[23].maxAfford
                let base = tmp.Up.buyables[23].costb
                let exp = tmp.Up.buyables[23].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(2e89)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[23] = player.Up.buyables[23].max(target)
                
                }
            },
        },
        31: {
            title: "Unfolded Protein Gain",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[31].costb
                let exp = tmp.Up.buyables[31].coste
                let x = player.Up.buyables[31]
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e135)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = decimalTen
                return cost
            },
            coste() { 
                let cost = new Decimal(1.05)
                return cost
            },
            base() { 
                let base = tmp.Up.aproteinEff[0]
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[31]
                if (hasUpgrade("Up",62)) x = x.pow(1.1)
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "Proteins") return
                let extra = ""
                let base = tmp.Up.buyables[31].base
                let dis = "Gain "+format(base)+" base unfolded "+pluralize(base,'protein','proteins')+" per second"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" misfolded proteins\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"/s\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 31))
            },
            unlocked() { return hasUpgrade("Up",41) }, 
            canAfford() {
                    return player.Up.protein.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[31].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("Up",12) || hasUpgrade("ct",495)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Up.protein = player.Up.protein.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Up.protein
                let base = tmp.Up.buyables[31].costb
                let exp = tmp.Up.buyables[31].coste
                let target = s.div(1e135).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Up.buyables[31].maxAfford
                let base = tmp.Up.buyables[31].costb
                let exp = tmp.Up.buyables[31].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e135)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[31] = player.Up.buyables[31].max(target)
                
                }
            },
        },
        32: {
            title: "Unfolded Protein Multiplier",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[32].costb
                let exp = tmp.Up.buyables[32].coste
                let x = player.Up.buyables[32]
                if (x.gte("e1100")) x = x.log10().div(1100).pow(1.5).mul(1100).pow10()
                if (x.gte(1e26)) x = x.log10().div(26).pow(1.5).mul(26).pow10()
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e174)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(100)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.5)
                return cost
            },
            base() { 
                let base = player.Up.protein.max(10).log10().pow(0.2)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[32]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "Proteins") return
                let extra = ""
                let base = tmp.Up.buyables[32].base
                let dis = "Multiply unfolded protein gain by "+format(base)+" (based on misfolded proteins)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" misfolded proteins\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 32))
            },
            unlocked() { return hasUpgrade("Up",41) }, 
            canAfford() {
                    return player.Up.protein.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[32].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",495)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Up.protein = player.Up.protein.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Up.protein
                let base = tmp.Up.buyables[32].costb
                let exp = tmp.Up.buyables[32].coste
                let target = s.div(1e174).log(base).root(exp)
                if (target.gte(1e26)) target = target.log10().div(26).root(1.5).mul(26).pow10()
                if (target.gte("e1100")) target = target.log10().div(1100).root(1.5).mul(1100).pow10()
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Up.buyables[32].maxAfford
                let base = tmp.Up.buyables[32].costb
                let exp = tmp.Up.buyables[32].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e174)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[32] = player.Up.buyables[32].max(target)
                
                }
            },
        },
        33: {
            title()  {return (player.Up.buyables[33].gte(90)?"Social Distant":player.Up.buyables[33].gte(20)?"Distant":"")+" Unfolded Protein Exponent"},
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[33].costb
                let exp = tmp.Up.buyables[33].coste
                let x = player.Up.buyables[33]
                if (x.gte(90)) x = Decimal.pow(1.02,x.sub(90)).mul(90)
                if (x.gte(20)) x = x.div(20).pow(2).mul(20)
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e239)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e6)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.6)
                return cost
            },
            base() { 
                let base = player.Up.uprotein.add(10).log10().add(10).log10().pow(0.9).div(2.5)
                if (hasUpgrade("Uu",55)) base = base.pow(player.Up.buyables[33].add(1).pow(0.25))
                if (hasUpgrade("Us",35)) base = base.pow(tmp.Us.upgrades[35].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[33]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "Proteins") return
                let extra = ""
                let base = tmp.Up.buyables[33].base
                let dis = "Increase base unfolded protein gain exponent by "+format(base)+" (based on Unfolded Proteins)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" misfolded proteins\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 33))
            },
            unlocked() { return hasUpgrade("Up",41) }, 
            canAfford() {
                    return player.Up.protein.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[33].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",495)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Up.protein = player.Up.protein.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Up.protein
                let base = tmp.Up.buyables[33].costb
                let exp = tmp.Up.buyables[33].coste
                let target = s.div(1e239).log(base).root(exp)
                if (target.gte(20)) target = target.div(20).pow(0.5).mul(20)
                if (target.gte(90)) target = target.div(90).log(1.02).add(90)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Up.buyables[33].maxAfford
                let base = tmp.Up.buyables[33].costb
                let exp = tmp.Up.buyables[33].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e239)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[33] = player.Up.buyables[33].max(target)
                
                }
            },
        },
        41: {
            title: "Antifolded Protein Gain",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[41].costb
                let exp = tmp.Up.buyables[41].coste
                let x = player.Up.buyables[41]
                let cost = Decimal.pow(base,x.pow(exp)).mul(5e127)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(30)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.05)
                return cost
            },
            base() { 
                let base = tmp.Up.prpEff[1]
                if (hasUpgrade("Up",55)) base = base.mul(1.1)
                if (hasMilestone("Up",15)) base = base.mul(tmp.Up.milestones[15].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[41]
                if (hasUpgrade("Up",92)) x = x.pow(1.1)
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "Proteins") return
                let extra = ""
                let base = tmp.Up.buyables[41].base
                let dis = "Gain "+format(base)+" base antifolded "+pluralize(base,'protein','proteins')+" per second"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unfolded proteins\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"/s\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 41))
            },
            unlocked() { return hasUpgrade("Up",45) }, 
            canAfford() {
                    return player.Up.uprotein.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[41].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",495)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Up.uprotein = player.Up.uprotein.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Up.uprotein
                let base = tmp.Up.buyables[41].costb
                let exp = tmp.Up.buyables[41].coste
                let target = s.div(5e127).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Up.buyables[41].maxAfford
                let base = tmp.Up.buyables[41].costb
                let exp = tmp.Up.buyables[41].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(5e127)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[41] = player.Up.buyables[41].max(target)
                
                }
            },
        },
        42: {
            title: "Antifolded Protein Multiplier",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[42].costb
                let exp = tmp.Up.buyables[42].coste
                let x = player.Up.buyables[42]
                if (x.gte("ee6000")) x = x.log10().log10().div(6e3).pow(3).mul(6e3).pow10().pow10()
                if (x.gte("ee1000")) x = x.log10().log10().div(1e3).pow(3).mul(1e3).pow10().pow10()
                if (x.gte("ee55")) x = x.log10().div(1e55).pow(2).mul(1e55).pow10()
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e208)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1000)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.5)
                return cost
            },
            base() { 
                let base = player.Up.uprotein.max(10).log10().pow(0.2)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[42]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "Proteins") return
                let extra = ""
                let base = tmp.Up.buyables[42].base
                let dis = "Multiply antifolded protein gain by "+format(base)+" (based on unfolded proteins)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unfolded proteins\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 42))
            },
            unlocked() { return hasUpgrade("Up",45) }, 
            canAfford() {
                    return player.Up.uprotein.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[42].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",495)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Up.uprotein = player.Up.uprotein.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Up.uprotein
                let base = tmp.Up.buyables[42].costb
                let exp = tmp.Up.buyables[42].coste
                let target = s.div(1e208).log(base).root(exp)
                if (target.gte("ee55")) target = target.log10().div(1e55).root(2).mul(1e55).pow10()
                if (target.gte("ee1000")) target = target.log10().log10().div(1e3).root(3).mul(1e3).pow10().pow10()
                if (target.gte("ee6000")) target = target.log10().log10().div(6e3).root(3).mul(6e3).pow10().pow10()
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Up.buyables[42].maxAfford
                let base = tmp.Up.buyables[42].costb
                let exp = tmp.Up.buyables[42].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e208)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[42] = player.Up.buyables[42].max(target)
                
                }
            },
        },
        43: {
            title()  {return (player.Up.buyables[43].gte(90)?"Social Distant":player.Up.buyables[43].gte(20)?"Distant":"")+" Antifolded Protein Exponent"},
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[43].costb
                let exp = tmp.Up.buyables[43].coste
                let x = player.Up.buyables[43]
                if (x.gte(90)) x = Decimal.pow(1.02,x.sub(90)).mul(90)
                if (x.gte(20)) x = x.div(20).pow(2).mul(20)
                let cost = Decimal.pow(base,x.pow(exp)).mul(5e217)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e7)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.6)
                return cost
            },
            base() { 
                let base = player.Up.aprotein.add(10).log10().add(10).log10().pow(0.95).div(2.5)
                if (hasMilestone("Us",32)) base = base.pow(tmp.Us.milestones[32].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[43]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "Proteins") return
                let extra = ""
                let base = tmp.Up.buyables[43].base
                let dis = "Increase base antifolded protein gain exponent by "+format(base)+" (based on Antifolded Proteins)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unfolded proteins\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 43))
            },
            unlocked() { return hasUpgrade("Up",45) }, 
            canAfford() {
                    return player.Up.uprotein.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[43].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",495)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Up.uprotein = player.Up.uprotein.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Up.uprotein
                let base = tmp.Up.buyables[43].costb
                let exp = tmp.Up.buyables[43].coste
                let target = s.div(5e217).log(base).root(exp)
                if (target.gte(20)) target = target.div(20).pow(0.5).mul(20)
                if (target.gte(90)) target = target.div(90).log(1.02).add(90)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Up.buyables[43].maxAfford
                let base = tmp.Up.buyables[43].costb
                let exp = tmp.Up.buyables[43].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(5e217)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[43] = player.Up.buyables[43].max(target)
                
                }
            },
        },
        51: {
            title: "PrP Gain",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[51].costb
                let exp = tmp.Up.buyables[51].coste
                let x = player.Up.buyables[51]
                let cost = Decimal.pow(base,x.pow(exp)).mul("e85500")
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal("e1111")
                return cost
            },
            coste() { 
                let cost = new Decimal(1.75)
                return cost
            },
            base() { 
                let base = decimalOne
                if (hasUpgrade("Up",81)) base = base.add(tmp.Up.upgrades[81].effect)
                return base.add(tmp.Up.buyables[53].effect)
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[51]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "PrP") return
                let extra = ""
                let dis = "Gain "+format(tmp.Up.buyables[51].base)+" base PrP per second"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed prions\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"/s\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 51))
            },
            unlocked() { return hasMilestone("Up",16) }, 
            canAfford() {
                    return player.Up.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[51].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                        if (!hasUpgrade("Up",75)) player.Up.points = player.Up.points.sub(cost)
                        if (hasUpgrade("ct",496)) player[this.layer].buyables[this.id] = b
                        else player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.Up.points
                let base = tmp.Up.buyables[51].costb
                let exp = tmp.Up.buyables[51].coste
                let target = s.div("e85500").log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Up.buyables[51].maxAfford
                let base = tmp.Up.buyables[51].costb
                let exp = tmp.Up.buyables[51].coste
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[51] = player.Up.buyables[51].max(target)
                
                }
            },
        },
        52: {
            title: "PrP Multiplier",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[52].costb
                let exp = tmp.Up.buyables[52].coste
                let x = player.Up.buyables[52]
                let cost = Decimal.pow(base,x.pow(exp)).mul(2e11)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = decimalFive
                return cost
            },
            coste() { 
                let cost = new Decimal(1.4)
                return cost
            },
            base() { 
                let base = player.f.casualty.max(10).log10()
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[52]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "PrP") return
                let extra = ""
                let dis = "Multiply PrP gain by "+format(tmp.Up.buyables[52].base)+" (based on casualty)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" casualty\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 52))
            },
            unlocked() { return hasMilestone("Up",16) }, 
            canAfford() {
                    return player.f.casualty.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[52].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                        if (!hasUpgrade("Up",75)) player.f.casualty = player.f.casualty.sub(cost)
                        if (hasUpgrade("ct",496)) player[this.layer].buyables[this.id] = b
                        else player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                }
            },
            maxAfford() {
                let s = player.f.casualty
                let base = tmp.Up.buyables[52].costb
                let exp = tmp.Up.buyables[52].coste
                let target = s.div(2e11).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Up.buyables[52].maxAfford
                let base = tmp.Up.buyables[52].costb
                let exp = tmp.Up.buyables[52].coste
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[52] = player.Up.buyables[52].max(target)
                
                }
            },
        },
        53: {
            title: "PrP Boost",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[53].costb
                let exp = tmp.Up.buyables[53].coste
                let x = player.Up.buyables[53]
                if (x.gte(90)) x = x.div(90).pow(1.5).mul(90)
                if (x.gte(85)) x = x.div(85).pow(1.5).mul(85)
                let cost = Decimal.pow(base,x.pow(exp)).pow10().mul(1e4)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1.01)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.4)
                return cost
            },
            base() { 
                let base = new Decimal(0.01)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[53]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "PrP") return
                let extra = ""
                let dis = "Add "+format(tmp.Up.buyables[53].base)+" to PrP base, slog and exponent"
                if (player.Up.buyables[53].gte(100)) dis += " (MAXED)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" PrP\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 53))
            },
            unlocked() { return hasMilestone("Up",16) }, 
            canAfford() {
                    return player.Up.prp.gte(tmp[this.layer].buyables[this.id].cost) && player.Up.buyables[53].lt(100)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[53].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                        if (hasUpgrade("ct",496)) player[this.layer].buyables[this.id] = b
                        else {
                            player.Up.prp = player.Up.prp.sub(cost)
                            player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                        }
                }
            },
            maxAfford() {
                let s = player.Up.prp
                let base = tmp.Up.buyables[53].costb
                let exp = tmp.Up.buyables[53].coste
                let target = s.div(1e4).log10().log(base).root(exp)
                if (target.gte(85)) target = target.div(85).root(1.5).mul(85)
                if (target.gte(90)) target = target.div(90).root(1.5).mul(90)
                return target.floor().add(1).min(100)
            },
            buyMax() { 
                let target = tmp.Up.buyables[53].maxAfford
                let base = tmp.Up.buyables[53].costb
                let exp = tmp.Up.buyables[53].coste
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[53] = player.Up.buyables[53].max(target)
                
                }
            },
        },
        61: {
            title: "PrPSc Multiplier",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[61].costb
                let exp = tmp.Up.buyables[61].coste
                let x = player.Up.buyables[61]
                if (x.gte(10)) x = x.sub(10).mul(2).add(10)
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e3)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = decimalThree
                return cost
            },
            coste() { 
                let cost = new Decimal(1.25)
                return cost
            },
            base() { 
                let base = player.Up.prpsc.max(10).log10()
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[61]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "PrP") return
                let extra = ""
                let dis = "Multiply PrPSc gain by "+format(tmp.Up.buyables[61].base)+" (based on PrPSc)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" PrPSc\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 61))
            },
            unlocked() { return hasUpgrade("Up",71) }, 
            canAfford() {
                    return player.Up.prpsc.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[61].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",496)) player[this.layer].buyables[this.id] = b
                        else {
                            player.Up.prpsc = player.Up.prpsc.sub(cost)
                            player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                        }         
                }
            },
            maxAfford() {
                let s = player.Up.prpsc
                let base = tmp.Up.buyables[61].costb
                let exp = tmp.Up.buyables[61].coste
                let target = s.div(1e3).log(base).root(exp)
                if (target.gte(10)) target = target.sub(10).div(2).add(10)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Up.buyables[61].maxAfford
                let base = tmp.Up.buyables[61].costb
                let exp = tmp.Up.buyables[61].coste
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[61] = player.Up.buyables[61].max(target)
                
                }
            },
        },
        62: {
            title: "PrPSc Exponent",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[62].costb
                let exp = tmp.Up.buyables[62].coste
                let x = player.Up.buyables[62]
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e36)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e3)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.5)
                return cost
            },
            base() { 
                let base = player.Up.prp.max(10).log10().pow(0.3).div(15)
                if (base.gte(250)) base = base.mul(4).log10().div(3).pow(0.5).mul(3).pow10().div(4)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[62]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "PrP") return
                let extra = ""
                let dis = "Increase PrPSc gain exponent by "+format(tmp.Up.buyables[62].base)+" (based on PrP)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" PrPSc\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 62))
            },
            unlocked() { return hasUpgrade("Up",71) }, 
            canAfford() {
                    return player.Up.prpsc.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[62].maxAfford
                let b = max.max(1)
                let bulk = decimalOne
                if (hasUpgrade("ct",501)) bulk = bulk.mul(5)
                if (hasUpgrade("Uu",11)) bulk = bulk.mul(40)
                if (hasUpgrade("Uu",12)) bulk = bulk.mul(10)
                if (hasUpgrade("Uu",14)) bulk = bulk.mul(5)
                if (hasUpgrade("Uu",22)) bulk = bulk.mul(5)
                if (hasUpgrade("Up",95)) bulk = bulk.mul(5)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("Up",94)) bulk = bulk.mul(10)
                    else {
                        player.Up.prpsc = player.Up.prpsc.sub(cost)
                    }    
                    if (hasUpgrade("Uu",23)) {
                        player[this.layer].buyables[this.id] = b
                    }
                    else { player[this.layer].buyables[this.id] = b.min(player[this.layer].buyables[this.id].add(bulk)) }
                }
            },
            maxAfford() {
                let s = player.Up.prpsc
                let base = tmp.Up.buyables[62].costb
                let exp = tmp.Up.buyables[62].coste
                let target = s.div(1e36).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Up.buyables[62].maxAfford
                let base = tmp.Up.buyables[62].costb
                let exp = tmp.Up.buyables[62].coste
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[62] = player.Up.buyables[62].max(target)
                
                }
            },
        },
        63: {
            title: "PrPSc Boost",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[63].costb
                let exp = tmp.Up.buyables[63].coste
                let x = player.Up.buyables[63]
                let cost = Decimal.pow(base,x.pow(exp)).pow10().mul(3e174)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1.04)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.3)
                return cost
            },
            base() { 
                let base = new Decimal(0.01)
                if (hasUpgrade("Uu",12)) base = base.add(tmp.Uu.upgrades[12].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[63]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "PrP") return
                let extra = ""
                let dis = "Increase PrPSc effect exponent by "+format(tmp.Up.buyables[63].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" PrPSc\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 63))
            },
            unlocked() { return hasUpgrade("Up",71) }, 
            canAfford() {
                    return player.Up.prpsc.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[63].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                        if (hasMilestone("Uu",2)) player[this.layer].buyables[this.id] = b
                        else {
                            player.Up.prpsc = player.Up.prpsc.sub(cost)
                            player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                        }   
                }
            },
            maxAfford() {
                let s = player.Up.prpsc
                let base = tmp.Up.buyables[63].costb
                let exp = tmp.Up.buyables[63].coste
                let target = s.div(3e174).log10().log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Up.buyables[63].maxAfford
                let base = tmp.Up.buyables[63].costb
                let exp = tmp.Up.buyables[63].coste
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[63] = player.Up.buyables[63].max(target)
                
                }
            },
        },
        71: {
            title: "PrPres Multiplier",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[71].costb
                let exp = tmp.Up.buyables[71].coste
                let x = player.Up.buyables[71]
                if (x.gte(25)) x = x.sub(25).mul(2).add(25)
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e5)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = decimalFive
                return cost
            },
            coste() { 
                let cost = new Decimal(1.275)
                return cost
            },
            base() { 
                let base = player.Up.prpres.max(10).log10()
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[71]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "PrP") return
                let extra = ""
                let dis = "Multiply PrPres gain by "+format(tmp.Up.buyables[71].base)+" (based on PrPres)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" PrPres\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 71))
            },
            unlocked() { return hasUpgrade("Up",81) }, 
            canAfford() {
                    return player.Up.prpres.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[71].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("Uu",2)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Up.prpres = player.Up.prpres.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }   
                }
            },
            maxAfford() {
                let s = player.Up.prpres
                let base = tmp.Up.buyables[71].costb
                let exp = tmp.Up.buyables[71].coste
                let target = s.div(1e5).log(base).root(exp)
                if (target.gte(25)) target = target.sub(25).div(2).add(25)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Up.buyables[71].maxAfford
                let base = tmp.Up.buyables[71].costb
                let exp = tmp.Up.buyables[71].coste
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[71] = player.Up.buyables[71].max(target)
                
                }
            },
        },
        72: {
            title: "PrPres Exponent",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[72].costb
                let exp = tmp.Up.buyables[72].coste
                let x = player.Up.buyables[72]
                let cost = Decimal.pow(base,x.pow(exp)).mul(5e58)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e3)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.5)
                return cost
            },
            base() { 
                let base = player.Up.prpsc.max(10).log10().pow(0.4).div(15)
                if (base.gte(5)) base = base.mul(2).log10().pow(2).mul(5)
                if (base.gte(7)) base = base.div(7).pow(0.5).mul(7)
                if (base.gte(9)) base = base.div(9).pow(0.5).mul(9)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[72]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "PrP") return
                let extra = ""
                let dis = "Increase PrPres gain exponent by "+format(tmp.Up.buyables[72].base)+" (based on PrPSc)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" PrPres\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 72))
            },
            unlocked() { return hasUpgrade("Up",81) }, 
            canAfford() {
                    return player.Up.prpres.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[72].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("Uu",3)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Up.prpres = player.Up.prpres.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }   
                }
            },
            maxAfford() {
                let s = player.Up.prpres
                let base = tmp.Up.buyables[72].costb
                let exp = tmp.Up.buyables[72].coste
                let target = s.div(5e58).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Up.buyables[72].maxAfford
                let base = tmp.Up.buyables[72].costb
                let exp = tmp.Up.buyables[72].coste
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[72] = player.Up.buyables[72].max(target)
                
                }
            },
        },
        73: {
            title: "PrPres Boost",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Up.buyables[73].costb
                let exp = tmp.Up.buyables[73].coste
                let x = player.Up.buyables[73]
                if (x.gte(56)) x = x.mul(1.5).sub(28)
                let cost = Decimal.pow(base,x.pow(exp)).mul(2).pow10().mul(5e95)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1.06)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.4)
                return cost
            },
            base() { 
                let base = new Decimal(0.0075)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Up.buyables[73]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Up" || player.subtabs.Up.mainTabs != "PrP") return
                let extra = ""
                let dis = "Increase PrPres effect exponent by "+format(tmp.Up.buyables[73].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" PrPres\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Up", 73))
            },
            unlocked() { return hasUpgrade("Up",81) }, 
            canAfford() {
                    return player.Up.prpres.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Up.buyables[73].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("Uu",3)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Up.prpres = player.Up.prpres.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    } 
                }
            },
            maxAfford() {
                let s = player.Up.prpres
                let base = tmp.Up.buyables[73].costb
                let exp = tmp.Up.buyables[73].coste
                let target = s.div(5e95).log10().div(2).log(base).root(exp)
                if (target.gte(56)) target = target.add(28).div(1.5)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Up.buyables[73].maxAfford
                let base = tmp.Up.buyables[73].costb
                let exp = tmp.Up.buyables[73].coste
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Up.buyables[73] = player.Up.buyables[73].max(target)
                
                }
            },
        },
    },
    gainExp2 () {
        let exp = decimalOne
        if (hasMilestone("Us",5)) {
            exp = exp.mul(tmp.Up.prpEff[0])
            if (hasUpgrade("Up",32)) exp = exp.mul(tmp.Up.upgrades[32].effect2)
        }
        if (hasUpgrade("Us",41)) {
            exp = exp.mul(tmp.Up.buyables[11].effect)
        }
        if (hasUpgrade("Us",42)) {
            exp = exp.mul(tmp.f.caseffect)
        }
        return exp
    },
}),
addLayer("Uu", {
    name: "unvaxxed uncoaters",
    symbol: "UU",
    position: 1,
    startData() { return {
        points: decimalZero,
        total: decimalZero,
        best: decimalZero,
        power: decimalZero,
        enzymes: decimalZero,
        auto: false,
        auto2: false,
        autou: false,
        autoun: false,
        autoub: false,
        autoe: false,
        autoen: false,
        autoex: false,
        autouqe: false,
        time: 0,
    unlocked: true
    }},
    color: "#a592c9",
    requires: Decimal.pow(10,2046),
    resource: "unvaxxed uncoaters",
    resourceSingular: "unvaxxed uncoater",
    baseResource: "PrPres",
    baseSingular: "PrPres",
    row: 3,
    baseAmount() { 
        return player.Up.prpres
    },
    type: "static",
    exponent: new Decimal(1.29),
    base: new Decimal(1e108),
    branches: ["Up"],
    hotkeys: [
        {
            key:"U", description: "Shift+U:Reset for unvaxxed uncoaters", onPress() {
                if (canReset(this.layer))
                    doReset(this.layer)
            },
            unlocked() {return player.uv.points.gte(5) && inChallenge("ct",32)}
        },
    ],
    layerShown() {
        return player.uv.tree == "unvaxxed" && player.uv.points.gte(5)
    },
    doReset(resettingLayer) {
        let keep = [];
        if (resettingLayer == "Uu") {
            player.Uu.time = 0
            player.e.p = decimalZero
        }
        if (hasMilestone("Ud",0)) keep.push('upgrades','milestones',"auto","auto2","autou","autoun","autoub","autoe","autoen","autoex","autouqe")
        if (layers[resettingLayer].row > this.row || resettingLayer == 'Ud') layerDataReset(this.layer, keep)
    },
    autoPrestige() { return player.Uu.autou },
    resetsNothing() { return hasMilestone("Uu",13) },
    update(diff) {
        player.Uu.time+=diff
        if (hasMilestone("Uu",7)) player.Uu.power = player.Uu.power.add(tmp.Uu.powerGain.mul(diff))
        if (hasUpgrade("Uu",45)) player.Uu.enzymes = player.Uu.enzymes.add(tmp.Uu.enzymeGain.mul(diff))
        if (hasUpgrade("Uu",81)) player.e.qt = player.e.qt.add(tmp.Uu.upgrades[81].effect.mul(diff))
        if (hasMilestone("Uu",15) && player.Uu.autoun) layers.Uu.buyables[11].buy()
        if (hasMilestone("Uu",20) && player.Uu.autoue) layers.Uu.buyables[12].buy()
        if (hasMilestone("Uu",21) && player.Uu.autoub) {
            layers.Uu.buyables[13].buy()
            layers.Uu.buyables[21].buy()
            layers.Uu.buyables[22].buy()
            layers.Uu.buyables[23].buy()
            layers.Uu.buyables[31].buy()
            layers.Uu.buyables[32].buy()
            layers.Uu.buyables[33].buy()
        }
        if (hasMilestone("Uu",23) && player.Uu.autoen) layers.Uu.buyables[41].buy()
        if (hasMilestone("Uu",26) && player.Uu.autoex) layers.Uu.buyables[42].buy()
        if (hasMilestone("Uu",28) && player.Uu.autouqe) layers.Uu.buyables[61].buy()
    },
    unSoft(){
        let eff = tmp.Uu.buyables[21].effect.mul(1e34)
        return eff
    },
    directMult() {
        let eff = tmp.Us.buyables[42].effect.mul(tmp.Us.buyables[52].effect)
        return eff.mul(tmp.uv.virusEff)
    },
    effbase(){
        let eff = tmp.Uu.powerEff.mul(2)
        if (hasUpgrade("Us",125)) eff = decimalTwo
        if (hasUpgrade("Uu",13)) eff = eff.add(tmp.Uu.upgrades[13].effect)
        if (hasUpgrade("ct",503)) eff = eff.add(0.1)
        if (hasMilestone("Uu",28)) eff = eff.pow(tmp.Uu.milestones[28].effect)
        return eff.pow(tmp.Us.buyables[41].effect)
    },
    effect(){
        let eff = tmp.Uu.effbase
        eff = Decimal.pow(eff,player.Uu.points)
        return eff
    },
    powerEff(){
        let eff = player.Uu.power
        let l = tmp.Uu.powerLog
        let exp = tmp.Uu.powerExp
        eff = slogadd(eff.add(10),l.neg()).pow(exp).add(1)
        if (hasUpgrade("Us",125)) eff = eff.log10().log10().log10().sub(42).max(0).pow(0.3).div(30)
        if (hasMilestone("Us",57)) eff = eff.mul(5)
        if (hasMilestone("Us",58)) eff = eff.mul(2)
        if (hasUpgrade("Ud",22)) eff = eff.pow(3)
        return eff
    },
    enzymeGain(){
        let exp = tmp.Uu.buyables[42].effect.add(4)
        let b = tmp.Uu.buyables[51].effect
        if (hasUpgrade("Uu",63)) exp = exp.add(2)
        if (hasUpgrade("Uu",64)) exp = exp.add(1)
        if (hasUpgrade("ct",506)) exp = exp.add(0.5)
        if (hasUpgrade("ct",516)) exp = exp.add(1)
        let eff = player.Uu.power.div("e24415").max(10).log10().div(1e3).mul(b).pow(exp).max(1).sub(1).mul(100).mul(tmp.uv.virusEff)
        if (hasUpgrade("Uu",62)) eff = eff.mul(tmp.Uu.upgrades[62].effect)
        if (hasUpgrade("Uu",65)) eff = eff.mul(tmp.Uu.upgrades[65].effect)
        if (hasUpgrade("Uu",71)) eff = eff.mul(tmp.Uu.upgrades[71].effect)
        if (hasMilestone("Uu",22)) eff = eff.mul(tmp.Uu.milestones[22].effect)
        return eff.mul(tmp.Uu.buyables[41].effect).pow(tmp.Uu.buyables[52].effect)
    },
    enzymeEff(){
        let exp = tmp.Uu.buyables[43].effect.add(2)
        let x1 = powExp(player.Uu.enzymes.add(1),exp)
        let x2 = x1.max(10).log10().pow(0.03)
        let eff = x1.min("eee35")
        if (hasUpgrade("Us",35)) eff = x2.min("ee35")
        if (hasUpgrade("Us",131)) eff = x2.max(10).log10().pow(0.05).div(10).max(1)
        return eff
    },
    powerExp(){
        let eff = tmp.Uu.buyables[13].effect.add(1)
        if (hasUpgrade("Uu",25) && player.e.p.gte(1e74)) eff = eff.add(2)
        return eff
    },
    powerLog(){
        let eff = decimalTwo
        if (hasMilestone("Uu",12)) eff = eff.sub(0.1)
        eff = eff.div(tmp.Uu.buyables[23].effect)
        return eff
    },
    effectDescription() {
        return "which "+pluralize(player.Uu.points,'boosts','boost',true)+" uncoater gain by "+layerText("h2", "Uu", format(tmp.Uu.effect))+ ' (softcaps at '+format(tmp.Uu.unSoft)+' uncoaters)'
    },
    un() {
        let eff = player.u.points
        if (eff.gte("ee45")) eff = eff.log10().log10().div(45).pow(0.6).mul(45).pow10().pow10()
        if (eff.gte("ee2e16")) eff = eff.log10().log10().div(2e16).pow(0.5).mul(2e16).pow10().pow10()
        if (eff.gte("eee35")) eff = eff.log10().log10().div(1e35).pow(0.4).mul(1e35).pow10().pow10()
        return eff
    },
    canBuyMax() {return hasMilestone("Uu",6)},
    tabFormat: {
        "Main": {
        content:[
            function() {if (player.tab == "Uu") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Uu") return "resource-display"},
            "blank",
            ["upgrades",[1,2,3,4,5]],
            ]
        },
        "Milestones": {
            content:[
                function() {if (player.tab == "Uu") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Uu") return "resource-display"},
            "blank",
            "milestones"
            ],
        },
        "Power": {
            content:[
                function() {if (player.tab == "Uu") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Uu") return "resource-display"},
            "blank",
            ["display-text", 
            function() {
                let a = "You have "+layerText("h2", "Uu", formatWhole(player.Uu.power))+" uncoating power, which "+(hasUpgrade("Us",125)?"increases 'Severe Tiredness' exponent":"boosts unvaxxed uncoater base")+" by "+layerText("h2", "Uu", format(tmp.Uu.powerEff))+" (hold shift to see effect formula)"
                let a2 = shiftDown?("<br>Effect: log<sup>"+format(tmp.Uu.powerLog)+"</sup>10(x+10)<sup>"+format(tmp.Uu.powerExp)+"</sup>+1"):''
                let b = "<br>You are gaining "+layerText("h2", "Uu", formatWhole(tmp.Uu.powerGain))+" uncoating power per second"
                let c = "<br>You have "+layerText("h2", "e", formatWhole(player.e.p))+" infection power"
                let d = "<br>You are gaining "+layerText("h2", "e", formatWhole(tmp.e.effect))+" infection power per second<br>"
                 return a+a2+b+c+d
            }
            ],
            ["buyables",[1,2,3]],
            ],
            unlocked() {return hasMilestone("Uu",7)},
        },
        "Enzymes": {
            content:[
                function() {if (player.tab == "Uu") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Uu") return "resource-display"},
            "blank",
            ["display-text", 
            function() {
                let a = "You have "+layerText("h2", "Uu", formatWhole(player.Uu.power))+" uncoating power"
                let b = "<br>You are gaining "+layerText("h2", "Uu", formatWhole(tmp.Uu.powerGain))+" uncoating power per second"
                let c = "<br>You have "+layerText("h2", "Uu", formatWhole(player.Uu.enzymes))+" uncoated "+pluralize(player.Uu.enzymes,'enzyme','enzymes',true)+", which boosts uncoating power gain by "+(hasUpgrade("Us",131)?"10^log10(x)^":hasUpgrade("Us",35)?"^":"")+layerText("h2", "Uu", format(tmp.Uu.enzymeEff))
                let d = "<br>You are gaining "+layerText("h2", "Uu", formatWhole(tmp.Uu.enzymeGain))+" uncoated "+pluralize(tmp.Uu.enzymeGain,'enzyme','enzymes',true)+" per second (starts at "+format("e25415")+" uncoating power)<br>"
                let e = hasUpgrade("Uu",81)?"You have " + layerText("h2", "e", formatWhole(player.e.qt)) + " Unquarantined "+pluralize(player.e.qt,'Infection','Infections',true)+", which produce " + layerText("h2", "e", format(tmp.e.ucGain)) + " Unquarantined Cases per second<br>":""
                let f = hasUpgrade("Uu",81)?"You have " + layerText("h2", "e", formatWhole(player.e.qc)) + " Unquarantined "+pluralize(player.e.qc,'Case','Cases',true)+"<br>":""
                 return a+b+c+d+e+f
            }
            ],
            ["buyables",[4,5,6]],
            ["upgrades",[6,7,8,9]],
            ],
            unlocked() {return hasUpgrade("Uu",45)},
        },
    },
    milestones: {
        0: {
            requirementDescription: "1 unvaxxed uncoater (1)",
            effect() {
                let eff = tmp.Uu.un.add(1).div(1e12).max(1).pow(3)
                if (hasUpgrade("Uu",13)) eff = eff.pow(Math.PI)
                if (hasUpgrade("Uu",24)) eff = eff.pow(2)
                if (hasUpgrade("Uu",35)) eff = eff.pow(Math.E)
                return eff
            },
            effectDescription() {return "Keep UP milestones, uncoaters boost PrPres gain.<br>Currently: "+format(milestoneEffect("Uu",0))+"x"},
            done() { return player.Uu.points.gte(1) }
        },
        1: {
            requirementDescription: "2 unvaxxed uncoaters (2)",
            effect() {
                let eff = player.u.points.add(1).div(1e14).max(1).pow(0.15)
                return eff
            },
            effectDescription() {return "Keep UP challenges and milestone autobuyers, uncoaters boost cases gain, milestones boost PrPres gain.<br>Currently: ^"+format(milestoneEffect("Uu",1))},
            done() { return player.Uu.points.gte(2) }
        },
        2: {
            requirementDescription: "3 unvaxxed uncoaters (3)",
            effectDescription() {return "Keep UP Main upgrades, autobuy 2nd row PrP buyables, buy max 'PrPres Multiplier', 'Base Prions'^1.14, cases slog+0.005."},
            done() { return player.Uu.points.gte(3) }
        },
        3: {
            requirementDescription: "4 unvaxxed uncoaters (4)",
            effectDescription() {return "Buy max 'PrPres Exponent', 'PrPres Boost'."},
            done() { return player.Uu.points.gte(4) }
        },
        4: {
            requirementDescription: "7 unvaxxed uncoaters (5)",
            toggles: [["Uu","auto"]],
            effectDescription() {return "Autobuy 'PrPres Multiplier'."},
            done() { return player.Uu.points.gte(7) }
        },
        5: {
            requirementDescription: "9 unvaxxed uncoaters (6)",
            effectDescription() {return "Keep PrP upgrades."},
            done() { return player.Uu.points.gte(9) }
        },
        6: {
            requirementDescription: "14 unvaxxed uncoaters (7)",
            effectDescription() {return "Buy max unvaxxed uncoaters."},
            done() { return player.Uu.points.gte(14) }
        },
        7: {
            requirementDescription: "30 unvaxxed uncoaters (8)",
            toggles: [["Uu","auto2"]],
            effectDescription() {return "Autobuy 'PrPres Exponent' and 'PrPres Boost', infecter base*10 and unlock Uncoating Power."},
            done() { return player.Uu.points.gte(30) }
        },
        8: {
            requirementDescription: "45 unvaxxed uncoaters (9)",
            effect() {
                let eff = tmp.Uu.un.add(1).div(1e42).max(1).pow(1.5)
                return eff
            },
            effectDescription() {return "Uncoaters boost infection power gain.<br>Currently: "+format(milestoneEffect("Uu",8))+"x"},
            done() { return player.Uu.points.gte(45) }
        },
        9: {
            requirementDescription: "65 unvaxxed uncoaters (10)",
            effect() {
                let eff = Decimal.pow(5,player.Uu.buyables[11].sub(23).max(0))
                return eff
            },
            effectDescription() {return "Each 'UnPower Gain' after 23 multiplies infection power gain by 5.<br>Currently: "+format(milestoneEffect("Uu",9))+"x"},
            done() { return player.Uu.points.gte(65) }
        },
        10: {
            requirementDescription() {return format(1e64)+" uncoating power (11)"},
            effect() {
                let eff = tmp.e.buyables[41].effect.pow(1/3)
                if (eff.gte(1200)) eff = eff.div(1.2).log10().div(3).pow(0.7).mul(3).pow10().mul(1.2)
                if (eff.gte(2200)) eff = eff.div(2.2).log10().div(3).pow(0.7).mul(3).pow10().mul(2.2)
                if (eff.gte("e12e4")) eff = eff.log10().div(12e4).pow(0.6).mul(12e4).pow10().div("e12e4").pow(0.5).mul("e12e4")
                if (eff.gte("e2e15")) eff = eff.log10().div(2).log10().div(15).pow(0.7).mul(15).pow10().div(1e15).pow(0.2).mul(2e15).pow10()
                return eff
            },
            effectDescription() {
                let dis = "'Disease Gain' boosts infectious disease gain at ^1/3 effect, add 5 free 'Disease Gain', uncoating power gain exponent+0.5.<br>Currently: "+format(milestoneEffect("Uu",10))+"x, ^"+format(milestoneEffect("Uu",10))
                if (milestoneEffect("Uu",10).gte(1200)) dis += " (softcapped)"
                return dis },
            done() { return player.Uu.power.gte(1e64) }
        },
        11: {
            requirementDescription() {return format(15e105)+" uncoating power (12)"},
            effect() {
                let eff = player.Up.buyables[73].sub(40).max(0)
                return eff
            },
            effectDescription() {
                let dis = "Each 'PrPres Boost' after 40 gives 1 free 'Disease Gain'.<br>Currently: +"+formatWhole(milestoneEffect("Uu",11))
                return dis
            },
            done() { return player.Uu.power.gte(15e105) }
        },
        12: {
            requirementDescription() {return format(5e164)+" uncoating power (13)"},
            effectDescription() {return "Reduce uncoating power effect log by 0.1."},
            done() { return player.Uu.power.gte(5e164) }
        },
        13: {
            requirementDescription() {return "300 unvaxxed uncoaters (14)"},
            toggles: [["Uu","autou"]],
            effectDescription() {return "Autobuy unvaxxed uncoaters and they reset nothing."},
            done() { return player.Uu.points.gte(300) }
        },
        14: {
            requirementDescription() {return format("e331")+" uncoating power (15)"},
            effect() {
                let eff = Decimal.pow(1.01,player.e.in)
                return eff
            },
            effectDescription() {return "Each infected infection boosts uncoating power and infectious disease gain by 1.01, 'Unsoftcap' base slog+0.2.<br>Currently: "+format(milestoneEffect("Uu",14))+"x"},
            done() { return player.Uu.power.gte("e331") }
        },
        15: {
            requirementDescription() {return format("e439")+" uncoating power (16)"},
            toggles: [["Uu","autoun"]],
            effectDescription() {return "Autobuy 'UnPower Gain', 'Disease Gain' base^1.05"},
            done() { return player.Uu.power.gte("e439") }
        },
        16: {
            requirementDescription() {return format("4e799")+" uncoating power (17)"},
            effect() {
                let eff = player.points.max(10).log10().max(10).log10().pow(0.9).div(1e5)
                return eff
            },
            effectDescription() {return "Cases add to 'UnPower Gain' base, 'Unsoftcap' base slog+0.25.<br>Currently: +"+format(milestoneEffect("Uu",16))},
            done() { return player.Uu.power.gte("4e799") }
        },
        17: {
            requirementDescription() {return format("e1301")+" uncoating power (18)"},
            effect() {
                let eff = player.Uu.power.div("e1301").add(1)
                return eff
            },
            effectDescription() {return "Uncoating power boosts base gain cap exponent, 'Unsoftcap' base slog+0.15.<br>Currently: "+format(milestoneEffect("Uu",17))+"x"},
            done() { return player.Uu.power.gte("e1301") }
        },
        18: {
            requirementDescription() {return format("e2409")+" uncoating power (19)"},
            effectDescription() {return "Add 0.01 to 'UnPower Exponent' base at "+format("2e2586")+"/"+format("5e3299")+"/"+format("5e3383")+"/"+format("e3426")+"/"+format("e3482")+" uncoating power, 'Unsoftcap' base slog+0.1."},
            done() { return player.Uu.power.gte("e2409") }
        },
        19: {
            requirementDescription() {return format("e3541")+" uncoating power (20)"},
            effect() {
                let eff = player.Uu.buyables[12].add(player.Uu.buyables[13]).add(player.Uu.buyables[21]).add(player.Uu.buyables[22]).add(player.Uu.buyables[23]).add(player.Uu.buyables[31]).add(player.Uu.buyables[32]).add(player.Uu.buyables[33]).sub(800).max(1)
                eff = tmp.Uu.milestones[19].effBase.pow(eff).min("ee15e28")
                return eff
            },
            effBase() {
                let eff = player.Uu.buyables[11].mul(0.00025).add(2).log(2)
                return eff
            },
            effectDescription() {return "Each non-'UnPower Gain' buyable after 800 boosts uncoating power gain by "+format(tmp.Uu.milestones[19].effBase)+" (based on 'UnPower Gain' amount), 'UnPower Boost' base +0.01 at "+format("2e3700")+"/"+format("e7070")+"/"+format("e7160")+"/"+format("3e7223")+" uncoating power.<br>Currently: "+format(milestoneEffect("Uu",19))+"x"},
            done() { return player.Uu.power.gte("e3541") }
        },
        20: {
            requirementDescription() {return format("3e11155")+" uncoating power (21)"},
            toggles: [["Uu","autoue"]],
            effect() {
                let eff = player.Uu.power.max(10).log10().pow(0.4)
                return eff
            },
            effectDescription() {return "Autobuy 'UnPower Exponent', Uncoating power boosts 'Infected Diseaser', 'UnPower Exponent' and 'UnPower Boost' base +0.005 at "+format("e12236")+"/"+format("3e16094")+" uncoating power, 'UnLog' base +0.0015 at "+format("e16308")+" uncoating power.<br>Currently: "+format(milestoneEffect("Uu",20))+"x"},
            done() { return player.Uu.power.gte("3e11155") }
        },
        21: {
            requirementDescription() {return "8,000 unvaxxed uncoaters (22)"},
            toggles: [["Uu","autoub"]],
            effectDescription() {return "Autobuy Power buyables."},
            done() { return player.Uu.points.gte(8e3) }
        },
        22: {
            requirementDescription() {return format(15000)+" unquarantined cases (23)"},
            effect() {
                let eff = player.e.qc.add(1).pow(2)
                return eff
            },
            effectDescription() {return "Unquarantined cases boost uncoated enzyme gain.<br>Currently: "+format(milestoneEffect("Uu",22))+"x"},
            done() { return player.e.qc.gte(15000) && inChallenge("ct",32)}
        },
        23: {
            requirementDescription() {return format(1e16)+" unquarantined cases (24)"},
            toggles: [["Uu","autoen"]],
            effect() {
                let eff = player.e.qc.add(10).log10().pow(1.1)
                if (eff.gte(5e3)) eff = eff.div(5e3).pow(0.5).mul(5e3)
                return eff
            },
            effectDescription() {return "Autobuy 'Enzyme Multiplier', Unquarantined cases boost 'Uncoated Cases', add 10 free 'Disease Boost', 'Disease Boost' base+0.0025.<br>Currently: ^"+format(milestoneEffect("Uu",23))},
            done() { return player.e.qc.gte(1e16) && inChallenge("ct",32)}
        },
        24: {
            requirementDescription() {return format("e799")+" unquarantined cases (25)"},
            effectDescription() {return "'UnLog' base+0.001, Self-Unquarantine slog+0.04."},
            done() { return player.e.qc.gte("e799") && inChallenge("ct",32)}
        },
        25: {
            requirementDescription() {return format("e996")+" unquarantined cases (26)"},
            effectDescription() {return "'UnLog' base+0.001, Self-Unquarantine slog+0.04, unlock a row of Main upgrades."},
            done() { return player.e.qc.gte("e996") && inChallenge("ct",32)}
        },
        26: {
            requirementDescription() {return formatWhole(30)+" RNA (27)"},
            toggles: [["Uu","autoex"]],
            effect() {
                let eff = powExp(player.e.rna.add(1).mul(2),1.11).pow(1.11)
                if (hasUpgrade("Uu",92) && player.Uu.enzymes.gte("e114815")) eff = eff.pow(2)
                if (hasUpgrade("Uu",93) && player.Uu.enzymes.gte("e260800")) eff = eff.pow(2)
                if (eff.gte("e360")) eff = eff.log10().div(360).pow(1.3).mul(360).pow10()
                if (eff.gte("e5e3")) eff = eff.log10().div(5e3).pow(0.8).mul(5e3).pow10()
                if (eff.gte("e8e3")) eff = eff.div("e8e3").pow(0.4).mul("e8e3")
                return eff
            },
            effectDescription() {return "Autobuy 'Enzyme Exponent', RNA boosts UI and UC gain.<br>Currently: "+format(milestoneEffect("Uu",26))+"x"},
            done() { return player.e.rna.gte(30) && inChallenge("ct",32)}
        },
        27: {
            requirementDescription() {return formatWhole(25e7)+" RNA (28)"},
            effect() {
                let eff = powExp(player.e.qc.div("e7500").add(1),0.85).pow(0.02)
                if (eff.gte(1e10)) eff = eff.div(1e10).pow(0.2).mul(1e10)
                if (eff.gte(1e25)) eff = eff.div(1e25).pow(0.3).mul(1e25)
                if (eff.gte(1e50)) eff = eff.log10().div(50).pow(2/3).mul(50).pow10()
                if (eff.gte("e15e4")) eff = eff.log10().div(15e4).pow(.8).mul(15e4).pow10().div("e15e4").pow(0.5).mul("e15e4")
                if (eff.gte("e23e4")) eff = eff.log10().div(23e4).pow(.75).mul(25e4).pow10().div("e23e4").pow(0.3).mul("e23e4")
                if (eff.gte("e5e5")) eff = eff.log10().div(5e5).pow(.7).mul(5e5).pow10().div("e5e5").pow(0.65).mul("e5e5")
                if (eff.gte("ee32")) eff = eff.log10().div(1e32).pow(.5).mul(1e32).pow10().div("ee32").pow(0.65).mul("ee32")
                if (eff.gte("ee45")) eff = eff.log10().log10().div(45).pow(0.7).mul(45).pow10().div(1e45).pow(0.65).mul(1e45).pow10()
                if (eff.gte("ee47")) eff = eff.log10().log10().div(47).pow(0.4).mul(47).pow10().div(1e47).pow(0.65).mul(1e47).pow10()
                return eff
            },
            effectDescription() {return "Unquarantined cases boost RNA gain, 'Unsoftcap' slog+0.05.<br>Currently: "+format(milestoneEffect("Uu",27))+"x"},
            done() { return player.e.rna.gte(25e7) && inChallenge("ct",32)}
        },
        28: {
            requirementDescription() {return formatWhole(15e30)+" RNA (29)"},
            toggles: [["Uu","autouqe"]],
            effect() {
                let eff = powExp(player.e.rna.add(1),0.9).pow(0.01)
                if (eff.gte(4e12)) eff = eff.div(400).log10().div(10).pow(0.7).mul(10).pow10().mul(400).div(4e12).pow(0.5).mul(4e12)
                if (eff.gte(1e100)) eff = eff.log10().div(100).pow(0.8).mul(100).pow10().div(1e100).pow(0.5).mul(1e100)
                if (hasUpgrade("Us",11)) eff = eff.pow(tmp.Us.upgrades[11].effect)
                if (hasUpgrade("Us",125)) eff = eff.log10().log10().sub(33).max(0).pow(0.3).div(30)
                if (hasMilestone("Us",57)) eff = eff.mul(5)
                if (hasMilestone("Us",58)) eff = eff.mul(2)
                if (hasUpgrade("uv",86) && player.Us.severity.gte("e169e12")) eff = eff.mul(2)
                if (hasUpgrade("Ud",22)) eff = eff.pow(3)
                return eff
            },
            effectDescription() {return "Autobuy 'Unquarantined Enzymes', RNA "+(hasUpgrade("Us",125)?"increases 'Severe Tiredness' exponent":"boosts unvaxxed uncoater base")+" and 'Uncoated Cases'.<br>Currently: "+(hasUpgrade("Us",125)?"+":"^")+format(milestoneEffect("Uu",28))},
            done() { return player.e.rna.gte(15e30) && inChallenge("ct",32)}
        },
    },
    upgrades: {
        rows: 5,
        cols: 5,
        11: {
            title: "Soft PrPSc",
            description() {return "Req: "+format("e2360")+" PrPres<br>Unvaxxed uncoaters make PrPSc effect softcap later, 'PrPSc Exp' bulk*40."},
            cost: decimalThree,
            canAfford(){
                return player.Uu.points.gte(3) && (player.Up.prpres.gte("e2360"))
            },
            effect(){
                let eff = player.Uu.points.add(1).pow(0.85).div(11.6).add(1)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[11].effect)+"x"
                return dis
            },
        },
        12: {
            title: "Uncoated PrPSc",
            description() {return "Req: "+format("3.801e3801")+" PrPres<br>Unvaxxed uncoaters add to 'PrPSc Boost' base, 'PrPSc Exp' bulk*10."},
            cost: new Decimal(9),
            canAfford(){
                return player.Uu.points.gte(9) && (player.Up.prpres.gte("3.801e3801"))
            },
            effect(){
                let eff = player.Uu.points.add(1).pow(0.8).div(1.07e4)
                if (eff.gte(1.3)) eff = eff.div(0.13).log10().mul(1.3)
                if (eff.gte(2.5)) eff = eff.div(2.5).pow(0.3).mul(2.5)
                return eff
            },
            effectDisplay(){
                let dis = "+"+format(tmp.Uu.upgrades[12].effect)
                return dis
            },
        },
        13: {
            title: "UnProated",
            description() {return "Req: "+format("e4195")+" PrPres<br>PrPres add to unvaxxed uncoater base, 1st milestone effect^π."},
            cost: new Decimal(11),
            canAfford(){
                return player.Uu.points.gte(11) && (player.Up.prpres.gte("e4195"))
            },
            effect(){
                let eff = player.Up.prpres.div("e4100").max(10).log10().pow(0.55).div(100)
                return eff
            },
            effectDisplay(){
                let dis = "+"+format(tmp.Uu.upgrades[13].effect)
                return dis
            },
        },
        14: {
            title: "PresBase",
            description() {return "Req: "+format("5.186e5186")+" PrPres<br>Unvaxxed uncoaters boost 'Infected PrPres', 'PrPSc Exp' bulk*5."},
            cost: new Decimal(14),
            canAfford(){
                return player.Uu.points.gte(14) && (player.Up.prpres.gte("5.186e5186"))
            },
            effect(){
                let eff = player.Uu.points.add(1).pow(0.77777).div(2).add(1)
                if (eff.gte(1e5)) eff = eff.div(1e5).pow(0.3).mul(1e5)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Uu.upgrades[14].effect)
                return dis
            },
        },
        15: {
            title: "InPres",
            description() {return "Req: "+format("5.766e5766")+" PrPres<br>Infection power boosts PrPres gain."},
            cost: new Decimal(16),
            canAfford(){
                return player.Uu.points.gte(16) && (player.Up.prpres.gte("5.766e5766"))
            },
            effect(){
                let eff = player.e.p.add(1).pow(50)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[15].effect)+"x"
                return dis
            },
        },
        21: {
            title: "PresIn",
            description() {return "Req: "+format("e6353")+" PrPres<br>PrPres boosts infection power gain."},
            cost: new Decimal(18),
            canAfford(){
                return player.Uu.points.gte(18) && (player.Up.prpres.gte("e6353"))
            },
            effect(){
                let eff = powExp(player.Up.prpres.div("e6000"),0.92).add(1).pow(0.005)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[21].effect)+"x"
                return dis
            },
        },
        22: {
            title: "Infrect",
            description() {return "Req: "+format("e8150")+" PrPres<br>Infecters boost infection power gain at ^0.3 effect, bulk*5."},
            cost: new Decimal(23),
            canAfford(){
                return player.Uu.points.gte(23) && (player.Up.prpres.gte("e8150"))
            },
            effect(){
                let eff = tmp.e.effbase.pow(player.e.points).pow(0.3)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[22].effect)+"x"
                return dis
            },
        },
        23: {
            title: "Uncoated Cases",
            description() {return "Req: "+format("e10700")+" PrPres<br>Uncoating power boosts cases, Infecter scaling/2, buy max 'PrPSc Exp'."},
            cost: new Decimal(31),
            canAfford(){
                return player.Uu.points.gte(31) && (player.Up.prpres.gte("e10700"))
            },
            effect(){
                let eff = player.Uu.power.add(1).pow(0.3)
                if (hasUpgrade("Uu",63)) eff = eff.pow(tmp.Uu.upgrades[63].effect)
                if (hasMilestone("Uu",23)) eff = eff.pow(tmp.Uu.milestones[23].effect)
                if (hasMilestone("Uu",28)) eff = eff.pow(tmp.Uu.milestones[28].effect)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Uu.upgrades[23].effect)
                return dis
            },
        },
        24: {
            title: "Mileslog",
            description() {return "Req: "+format("e11900")+" PrPres<br>1st milestone effect^2, cases slog+0.0225."},
            cost: new Decimal(34),
            canAfford(){
                return player.Uu.points.gte(34) && (player.Up.prpres.gte("e11900"))
            },
        },
        25: {
            title: "InPrecter",
            description() {return "Req: "+format("e20450")+" PrPres<br>'InPrected' amt^1.5, add 2 to uncoating power effect exponent at "+format(1e74)+" IP."},
            cost: new Decimal(54),
            canAfford(){
                return player.Uu.points.gte(54) && (player.Up.prpres.gte("e20450"))
            },
        },
        31: {
            title: "Unexp",
            description() {return "Req: "+format("e45550")+" PrPres<br>Unvaxxed uncoaters add to uncoating power gain exponent."},
            cost: new Decimal(105),
            canAfford(){
                return player.Uu.points.gte(105) && (player.Up.prpres.gte("e45550"))
            },
            effect(){
                let eff = player.Uu.points.sub(100).max(0).pow(0.875).div(4)
                return eff
            },
            effectDisplay(){
                let dis = "+"+format(tmp.Uu.upgrades[31].effect)
                return dis
            },
        },
        32: {
            title: "Infecoat",
            description() {return "Req: "+format("e65880")+" PrPres<br>Infection power boosts uncoating power gain."},
            cost: new Decimal(133),
            canAfford(){
                return player.Uu.points.gte(133) && (player.Up.prpres.gte("e65880"))
            },
            effect(){
                let eff = powExp(player.e.p.max(10),0.5).pow(0.1)
                if (eff.gte("ee18")) eff = eff.log10().div(1e18).pow(0.4).mul(1e18).pow10()
                if (eff.gte("ee21")) eff = eff.log10().div(1e21).pow(0.3).mul(1e21).pow10()
                eff = eff.min("ee15e28")
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[32].effect)+"x"
                return dis
            },
        },
        33: {
            title: "Disecoat",
            description() {return "Req: "+format("e90100")+" PrPres<br>Infectious diseases boost uncoating power gain."},
            cost: new Decimal(155),
            canAfford(){
                return player.Uu.points.gte(155) && (player.Up.prpres.gte("e90100"))
            },
            effect(){
                let eff = player.e.diseases.add(1).pow(0.5)
                if (eff.gte("ee70")) eff = eff.log10().div(1e70).pow(0.3).mul(1e70).pow10()
                eff = eff.min("ee15e28")
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[33].effect)+"x"
                return dis
            },
        },
        34: {
            title: "Uncoatease",
            description() {return "Req: "+format("e99600")+" PrPres<br>Uncoating power boosts infectious disease gain, add 2 free 'Disease Gain'."},
            cost: new Decimal(163),
            canAfford(){
                return player.Uu.points.gte(163) && (player.Up.prpres.gte("e99600"))
            },
            effect(){
                let eff = powExp(player.Uu.power.add(1),0.95).pow(0.03)
                if (eff.gte("ee70")) eff = eff.log10().div(1e70).pow(0.3).mul(1e70).pow10()
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[34].effect)+"x"
                return dis
            },
        },
        35: {
            title: "MilEstonE",
            description() {return "Req: "+format("e133530")+" PrPres<br>1st milestone effect^e, add 2 free 'Disease Gain'."},
            cost: new Decimal(189),
            canAfford(){
                return player.Uu.points.gte(189) && (player.Up.prpres.gte("e133530"))
            },
        },
        41: {
            title: "Unfect",
            description() {return "Req: "+format("e423700")+" PrPres<span style='font-size:9px'><br>UN power boosts IP gain, each row 4 upg adds 1 'Disease Gain'.</span>"},
            cost: new Decimal(331),
            canAfford(){
                return player.Uu.points.gte(331) && (player.Up.prpres.gte("e423700"))
            },
            effect(){
                let eff = powExp(player.Uu.power.div(1e300).max(1),1.05).add(1).pow(2.2222)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[41].effect)+"x"
                return dis
            },
        },
        42: {
            title: "Soft PrPres",
            description() {return "Req: "+format("e968800")+" PrPres<br>Unvaxxed uncoaters make PrPres effect softcap later."},
            cost: new Decimal(495),
            canAfford(){
                return player.Uu.points.gte(495) && (player.Up.prpres.gte("e968800"))
            },
            effect(){
                let eff = player.Uu.points.sub(394).max(100).log10().div(2).max(1).pow(0.8)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[42].effect)+"x"
                return dis
            },
        },
        43: {
            title: "BasExp",
            description() {return "Req: "+format("e3085e3")+" PrPres<br>Base cap exponent boosts uncoating power gain."},
            cost: new Decimal(868),
            canAfford(){
                return player.Uu.points.gte(868) && (player.Up.prpres.gte("e3085e3"))
            },
            effect(){
                let x1 = tmp.uv.slogCap.pow(0.1)
                let x2 =  x1.max(10).log10().pow(0.02)
                let eff = x1.min("ee3e36")
                if (hasUpgrade("Us",35)) eff = x2.min("e3e36")
                if (hasUpgrade("Us",133)) eff = x2.max(10).log10().pow(0.05)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[43].effect)+"x"
                if (hasUpgrade("Us",35)) dis = "^" + format(tmp.Uu.upgrades[43].effect)
                if (hasUpgrade("Us",133)) dis = "10^log(x)^" + format(tmp.Uu.upgrades[43].effect)
                return dis
            },
        },
        44: {
            title: "UnCost",
            description() {return "Req: "+format("e29925500")+" PrPres<br>Each 'UnPowerer' after 80 reduces 'UnPower Gain' cost base by 0.01 (max 0.9)."},
            cost: new Decimal(2610),
            canAfford(){
                return player.Uu.points.gte(2610) && (player.Up.prpres.gte("e29925500"))
            },
            effect(){
                let eff = player.Uu.buyables[31].sub(80).max(0).mul(0.01).min(0.9)
                return eff
            },
            effectDisplay(){
                let dis = "-"+format(tmp.Uu.upgrades[44].effect)
                return dis
            },
        },
        45: {
            title: "Cell Enzymes",
            description() {return "Req: "+format("e82585e3")+" PrPres<br>Add 0.0005 to 'UnLog' base, unlock Uncoated Enzymes."},
            cost: new Decimal(4268),
            canAfford(){
                return player.Uu.points.gte(4268) && (player.Up.prpres.gte("e82585e3"))
            },
        },
        51: {
            title: "Max Upgrade",
            unlocked() {return hasMilestone("Uu",25)},
            description() {return "Req: "+format("e5485e17")+" PrPres<br>Each row 5 upg adds 1 'Dis Boost' and 'Max Buyable', 'Max Buyable' exp+0.05."},
            cost: new Decimal(1342.5e6),
            canAfford(){
                return player.Uu.points.gte(1342.5e6) && (player.Up.prpres.gte("e5485e17"))
            },
        },
        52: {
            title: "MaxDis",
            unlocked() {return hasMilestone("Uu",25)},
            description() {return "Req: "+format("e2327e21")+" PrPres<br>'Dis Boost' base+0.0025, 'Max Buyable' exp+0.05."},
            cost: new Decimal(19940.5e6),
            canAfford(){
                return player.Uu.points.gte(19940.5e6) && (player.Up.prpres.gte("e2327e21"))
            },
        },
        53: {
            title: "Uncoated RNA",
            unlocked() {return hasMilestone("Uu",25)},
            description() {return "Req: "+format("e927e30")+" PrPres<br>Unvaxxed uncoaters boost RNA and Atom gain, 'Dis Boost' base+0.0025."},
            cost: new Decimal(11956.5e9),
            canAfford(){
                return player.Uu.points.gte(11956.5e9) && (player.Up.prpres.gte("e927e30"))
            },
            effect(){
                let eff = player.Uu.points.div(1e12).max(1)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[53].effect)+"x"
                return dis
            },
        },
        54: {
            title: "Atomat",
            unlocked() {return hasMilestone("Uu",25)},
            description() {return "Req: "+format("e6e45")+" PrPres<br>'Atomic Atoms' boost atom gain at 1/3 effect."},
            cost: new Decimal(3352.5e12),
            canAfford(){
                return player.Uu.points.gte(3352.5e12) && (player.Up.prpres.gte("e6e45"))
            },
            effect(){
                let eff = tmp.e.upgrades[235].effect.pow(1/3)
                if (eff.gte(1e21) && !hasMilestone("Us",18)) eff = eff.log10().div(21).pow(0.75).mul(21).pow10().div(1e21).pow(0.5).mul(1e21)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[54].effect)+"x"
                if (tmp.Uu.upgrades[54].effect.gte(1e21) && !hasMilestone("Us",18)) dis += ' (softcapped)'
                return dis
            },
        },
        55: {
            title: "NitroBuyable",
            unlocked() {return hasMilestone("Uu",25)},
            description() {return "Req: "+format("e12e89")+" PrPres<br>Nitrogen effect^4, 'Max Buyable' exp*1.1, atom exp+0.2."},
            cost: new Decimal(271e15),
            canAfford(){
                return player.Uu.points.gte(271e15) && (player.Up.prpres.gte("e12e89"))
            },
        },
        61: {
            title: "Diseased Enzymes",
            description() {return "Uncoated enzymes boost infectious disease gain."},
            cost: new Decimal(5e8),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
            effect(){
                let eff = powExp(player.Uu.enzymes.add(1),1.1).pow(5)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[61].effect)+"x"
                return dis
            },
        },
        62: {
            title: "Cased Enzymes",
            description() {return "Cases boost uncoated enzyme gain."},
            cost: new Decimal(3e82),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
            effect(){
                let eff = player.points.max(10).log10().max(10).log10().div(1e6).max(1).pow(2)
                if (hasUpgrade("Uu",85)) eff = powExp(eff,1.5)
                return eff.pow(tmp.Uu.buyables[53].effect)
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[62].effect)+"x"
                return dis
            },
        },
        63: {
            title: "Case Uncoater",
            description() {return "Uncoated enzymes boost 'Uncoated Cases', gain exp+2."},
            cost: new Decimal(5e103),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
            effect(){
                let eff = player.Uu.enzymes.max(10).log10().pow(0.45)
                if (hasUpgrade("Uu",73)) eff = eff.pow(1.5)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Uu.upgrades[63].effect)
                return dis
            },
        },
        64: {
            title: "UnBaser",
            description() {return "Each 'UnPowerer' after 170 reduces 'UnPower Gain' cost base by 0.001 (max 0.05), enzyme gain exp+1."},
            cost: new Decimal(3e120),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
            effect(){
                let eff = player.Uu.buyables[31].sub(170).max(0).mul(0.001).min(0.05)
                return eff
            },
            effectDisplay(){
                let dis = "-"+format(tmp.Uu.upgrades[64].effect)
                return dis
            },
        },
        65: {
            title: "Infectious Enzymes",
            description() {return "Infectious diseases boost uncoated enzyme gain."},
            cost: new Decimal(4e133),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
            effect(){
                let eff = powExp(player.e.diseases.add(1),0.7).pow(0.001)
                if (eff.gte(1e20)) eff = eff.log10().div(2).log10().pow(0.5).pow10().mul(2).pow10()
                if (eff.gte("ee4")) eff = eff.log10().div(1e4).pow(0.8).mul(1e4).pow10()
                if (eff.gte("ee190")) eff = eff.log10().log10().div(190).pow(0.65).mul(190).pow10().pow10()
                if (eff.gte("ee3500")) eff = eff.log10().log10().div(3500).pow(0.65).mul(3500).pow10().pow10()
                if (eff.gte("ee9e4")) eff = eff.log10().log10().div(9e4).pow(0.3).mul(9e4).pow10().pow10()
                return eff.pow(tmp.Uu.buyables[53].effect)
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[65].effect)+"x"
                return dis
            },
        },
        71: {
            title: "Uncoating Enzymes",
            description() {return "Uncoating power boosts uncoated enzyme gain."},
            cost: new Decimal(1e146),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
            effect(){
                let eff = slogadd(player.Uu.power.max(10),-0.5).pow(0.05).pow(tmp.Uu.buyables[53].effect)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[71].effect)+"x"
                return dis
            },
        },
        72: {
            title: "UnExpower",
            description() {return "Each 'UnPowerer' after 220 reduces 'UnPower Gain' cost exponent by 0.0005."},
            cost: new Decimal(2e172),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
            effect(){
                let eff = player.Uu.buyables[31].sub(220).max(0).mul(0.0005).min(0.14)
                return eff
            },
            effectDisplay(){
                let dis = "-"+format(tmp.Uu.upgrades[72].effect)
                return dis
            },
        },
        73: {
            title: "UnBoostest",
            description() {return "Each 'UnBstr' after 194 reduces 'UnPwr Bst' exp by 0.0005, 'Case Uncoater'^1.5, 'UnSft' slog+0.1."},
            cost: new Decimal(1e190),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
            effect(){
                let eff = player.Uu.buyables[33].sub(194).max(0).mul(0.0005).min(0.15)
                return eff
            },
            effectDisplay(){
                let dis = "-"+format(tmp.Uu.upgrades[73].effect)
                return dis
            },
        },
        74: {
            title: "UnExpest",
            description() {return "Each 'UnExper' after 170 reduces 'UnPwr Exp' exp by 0.0003, 'UnSft' slog+0.05."},
            cost: new Decimal("e327"),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
            effect(){
                let eff = player.Uu.buyables[33].sub(170).max(0).mul(0.0003).min(0.15)
                return eff
            },
            effectDisplay(){
                let dis = "-"+format(tmp.Uu.upgrades[74].effect)
                return dis
            },
        },
        75: {
            title: "Disease Booster",
            description() {return "Add 0.0005 to 'UnLog' and 'Disease Boost' base, add 10 free 'Disease Boost'."},
            cost: new Decimal("e537"),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
        },
        81: {
            title: "Unquarantined Booster",
            description() {return "Cases produce Unquarantined Infections, 'Dis Boost' base+0.00075 'UnSft' slog+0.075."},
            cost: new Decimal("4e1410"),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
            effect(){
                let exp = tmp.Uu.buyables[62].effect.add(3)
                if (hasUpgrade("Uu",83)) exp = exp.add(0.5)
                if (hasUpgrade("Uu",84)) exp = exp.add(1)
                let eff = player.points.max(10).log10().max(10).log10().div(1e12).max(1).pow(exp)
                eff = eff.mul(tmp.Uu.buyables[61].effect)
                if (hasMilestone("Uu",26)) eff = eff.mul(tmp.Uu.milestones[26].effect)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[81].effect)+"/s"
                return dis
            },
        },
        82: {
            title: "Self-Unquarantine",
            description() {return "Unquarantined cases boost itself, 'Disease Boost' base+0.0025."},
            cost: new Decimal("e4839"),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
            effect(){
                let s = -0.3
                if (hasMilestone("Uu",24)) s += 0.04
                if (hasMilestone("Uu",25)) s += 0.04
                if (hasUpgrade("Uu",91)) s += 0.05
                let eff = slogadd(player.e.qc.add(10),s).pow(0.3)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[82].effect)+"x"
                return dis
            },
        },
        83: {
            title: "UnScaled Power",
            description() {return "'UnPowerer' divides 'UnPower Gain' scaling, 'Disease Boost' base+0.0025, UI gain exp+0.5."},
            cost: new Decimal("e7247"),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
            effect(){
                let eff = player.Uu.buyables[31].div(1e4).max(1)
                if (eff.gte(30)) eff = eff.div(30).pow(0.75).mul(30)
                return eff
            },
            effectDisplay(){
                let dis = "/"+format(tmp.Uu.upgrades[83].effect)
                return dis
            },
        },
        84: {
            title: "UnScaled Exponent",
            description() {return "'UnExper' divides 'UnPower Exponent' scaling, 'Disease Boost' base+0.0025, UI gain exp+1."},
            cost: new Decimal("e11551"),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
            effect(){
                let eff = player.Uu.buyables[32].div(1e4).max(1).pow(0.75)
                if (eff.gte(10)) eff = eff.div(10).pow(0.75).mul(10)
                return eff
            },
            effectDisplay(){
                let dis = "/"+format(tmp.Uu.upgrades[84].effect)
                return dis
            },
        },
        85: {
            title: "UnScaled Boost",
            description() {return "'UnBstr' divides 'UnPwr Bst' scaling, 'Dis Bst' base+0.0025, 'Cased Enzymes' dilated^1.5 before 'Enzyme Uncoating'."},
            cost: new Decimal("e15139"),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
            effect(){
                let eff = player.Uu.buyables[33].div(9e3).max(1).pow(0.5)
                if (eff.gte(4)) eff = eff.div(4).pow(0.8).mul(4)
                return eff
            },
            effectDisplay(){
                let dis = "/"+format(tmp.Uu.upgrades[85].effect)
                return dis
            },
        },
        91: {
            title: "Selfer-Unquarantine",
            description() {return "Self-Unquarantine slog+0.05."},
            cost: new Decimal("e28210"),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
        },
        92: {
            title: "SelRNA",
            description() {return "RNA boosts itself, 'Dis Bst' scaling/1.1, mile 27 eff^2 at "+format("e114815")+" UE."},
            cost: new Decimal("e95151"),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
            effect(){
                let eff = slogadd(player.e.rna.max(10),-0.15).pow(0.2)
                if (hasMilestone("Us",1)) eff = eff.pow(tmp.e.Adeffect)
                if (eff.gte("e35e8")) eff = eff.log10().div(35e8).pow(0.7).mul(35e8).pow10().div("e35e8").pow(0.5).mul("e35e8")
                if (eff.gte("ee12")) eff = eff.log10().div(1e12).pow(0.8).mul(1e12).pow10().div("ee12").pow(0.5).mul("ee12")
                if (eff.gte("e5e13")) eff = eff.log10().div(5e13).pow(0.75).mul(5e13).pow10().div("e5e13").pow(0.45).mul("e5e13")
                if (eff.gte("e7e14")) eff = eff.log10().div(7e14).pow(0.77).mul(7e14).pow10().div("e7e14").pow(0.45).mul("e7e14")
                if (eff.gte("e2e15")) eff = eff.log10().div(2e15).pow(0.77).mul(2e15).pow10().div("e2e15").pow(0.45).mul("e2e15")
                if (eff.gte("e4e15")) eff = eff.log10().div(4e15).pow(0.72).mul(4e15).pow10().div("e4e15").pow(0.4).mul("e4e15")
                if (eff.gte("e12e15")) eff = eff.log10().div(12).log10().div(15).pow(0.75).mul(15).pow10().mul(12).div(12e15).pow(0.5).mul(12e15).pow10()
                if (eff.gte("e12e16")) eff = eff.log10().div(12e16).pow(0.65).mul(12e16).pow10().div("e12e16").pow(0.25).mul("e12e16")
                if (eff.gte("e5e17")) eff = eff.log10().div(5e17).pow(0.6).mul(5e17).pow10().div("e5e17").pow(0.25).mul("e5e17")
                if (eff.gte("e3e19")) eff = eff.log10().div(3).log10().div(19).pow(0.65).mul(19).pow10().mul(3).div(3e19).pow(0.2).mul(3e19).pow10()
                if (eff.gte("e2e20")) eff = eff.log10().div(2).log10().div(20).pow(0.65).mul(20).pow10().mul(2).div(2e20).pow(0.3).mul(2e20).pow10()
                if (eff.gte("ee22")) eff = eff.log10().log10().div(22).pow(0.6).mul(22).pow10().div(1e22).pow(0.3).mul(1e22).pow10()
                if (eff.gte("ee26")) eff = eff.log10().log10().div(26).pow(0.6).mul(26).pow10().div(1e26).pow(0.3).mul(1e26).pow10()
                if (eff.gte("ee29")) eff = eff.log10().log10().div(29).pow(0.3).mul(29).pow10().div(1e29).pow(0.3).mul(1e29).pow10()
                if (eff.gte("ee41")) eff = eff.log10().log10().div(41).pow(0.3).mul(41).pow10().div(1e41).pow(0.3).mul(1e41).pow10()
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[92].effect)+"x"
                if (tmp.Uu.upgrades[92].effect.gte("e35e8")) dis += " (softcapped)"
                return dis
            },
        },
        93: {
            title: "Caser RNA",
            description() {return "Cases boost RNA gain, mile 27 eff^2 at "+format("e260800")+" UE."},
            cost: new Decimal("e258720"),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
            effect(){
                let eff = slogadd(player.points.max(35e8),-2.1).pow(0.25)
                if (hasUpgrade("Us",13)) eff = eff.pow(tmp.Us.upgrades[13].effect)
                if (eff.gte("e17e5")) eff = eff.log10().div(17e5).pow(0.7).mul(17e5).pow10().div("e17e5").pow(0.35).mul("e17e5")
                if (eff.gte("e35e8")) eff = eff.log10().div(35e8).pow(0.7).mul(35e8).pow10().div("e35e8").pow(0.5).mul("e35e8")
                if (eff.gte("e4e15")) eff = eff.log10().div(4e15).pow(0.8).mul(4e15).pow10().div("e4e15").pow(0.5).mul("e4e15")
                if (eff.gte("e12e16")) eff = eff.log10().div(12e16).pow(0.65).mul(12e16).pow10().div("e12e16").pow(0.25).mul("e12e16")
                if (eff.gte("e5e17")) eff = eff.log10().div(5e17).pow(0.65).mul(5e17).pow10().div("e5e17").pow(0.25).mul("e5e17")
                if (eff.gte("ee29")) eff = eff.log10().log10().div(29).pow(0.4).mul(29).pow10().div(1e29).pow(0.3).mul(1e29).pow10()
                if (eff.gte("ee50")) eff = eff.log10().log10().div(50).pow(0.4).mul(50).pow10().div(1e50).pow(0.2).mul(1e50).pow10()
                if (eff.gte("ee250")) eff = eff.log10().log10().div(250).pow(0.4).mul(250).pow10().div(1e250).pow(0.2).mul(1e250).pow10().min("ee400")
                if (hasUpgrade("Ud",34)) {
                    eff = slogadd(player.points.max(35e8),-4)
                    if (hasUpgrade("Us",13)) eff = eff.pow(tmp.Us.upgrades[13].effect)
                }
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[93].effect)+"x"
                if (tmp.Uu.upgrades[93].effect.gte("e17e5")) dis += " (softcapped)"
                if (hasUpgrade("Ud",34)) dis = "^"+format(tmp.Uu.upgrades[93].effect)
                return dis
            },
        },
        94: {
            title: "Uncasenzymes",
            description() {return "Cases add to 'Enzyme Uncoating' base, 'RNA Boost' base +0.25"},
            cost: new Decimal("e383311"),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
            effect(){
                let eff = slogadd(player.points.max(1e10),-3).pow(7/6).div(950)
                if (eff.gte(.25)) eff = eff.div(.25).pow(0.1).mul(.25)
                return eff
            },
            effectDisplay(){
                let dis = "+"+format(tmp.Uu.upgrades[94].effect)
                return dis
            },
        },
        95: {
            title: "RNAtomic Boost",
            description() {return "Atomic RNA boosts RNA gain, 'RNA Boost' base+0.1 at "+format(5e73)+" RNA."},
            cost: new Decimal("e702800"),
            currencyDisplayName: "uncoated enzymes",
            currencyInternalName: "enzymes",
            currencyLayer: "Uu",
            effect(){
                let eff = player.e.at.add(1).pow(0.5)
                if (hasUpgrade("Us",23)) eff = eff.pow(tmp.Us.upgrades[23].effect)
                if (eff.gte("e5e20")) eff = eff.log10().div(5e20).pow(0.8).mul(5e20).pow10().div("e5e20").pow(0.25).mul("e5e20")
                if (eff.gte("ee22")) eff = eff.log10().div(1e22).pow(0.8).mul(1e22).pow10().div("ee22").pow(0.4).mul("ee22")
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Uu.upgrades[95].effect)+"x"
                if (tmp.Uu.upgrades[95].effect.gte("e5e20")) dis += " (softcapped)"
                return dis
            },
        },
    },
    powerGain(){
        let exp = tmp.Uu.buyables[12].effect.add(1)
        if (hasUpgrade("Uu",31)) exp = exp.add(tmp.Uu.upgrades[31].effect)
        if (hasUpgrade("ct",506)) exp = exp.add(1)
        if (hasMilestone("Uu",10)) exp = exp.add(0.5)
        let eff = tmp.Uu.buyables[11].effect.pow(exp).mul(tmp.uv.virusEff)
        if (hasUpgrade("Uu",32)) eff = eff.mul(tmp.Uu.upgrades[32].effect)
        if (hasUpgrade("Uu",33)) eff = eff.mul(tmp.Uu.upgrades[33].effect)
        if (hasMilestone("Uu",14)) eff = eff.mul(tmp.Uu.milestones[14].effect)
        if (hasMilestone("Uu",19)) eff = eff.mul(tmp.Uu.milestones[19].effect)
        if (hasUpgrade("Us",35)) {
            if (hasUpgrade("Us",133)) eff = powExp(eff,tmp.Uu.upgrades[43].effect)
            else if (hasUpgrade("Uu",43)) eff = eff.pow(tmp.Uu.upgrades[43].effect)
            if (hasUpgrade("Us",131)) {
                eff = powExp(eff,tmp.Uu.enzymeEff)
            }
            else eff = eff.pow(tmp.Uu.enzymeEff)
            return eff
        } else {
            if (hasUpgrade("Uu",43)) eff = eff.mul(tmp.Uu.upgrades[43].effect)
        }
        return eff.mul(tmp.Uu.enzymeEff)
    },
    buyables: {
		rows: 3,
        cols: 3,
        11: {
            title: "UnPower Gain",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Uu.buyables[11].costb
                let exp = tmp.Uu.buyables[11].coste
                let x = player.Uu.buyables[11]
                if (hasUpgrade("Uu",83)) x = x.div(tmp.Uu.upgrades[83].effect)
                let cost = Decimal.pow(base,x.pow(exp)).mul(2e17)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = decimalTen
                return cost.sub(tmp.Uu.buyables[31].effect)
            },
            coste() { 
                let cost = new Decimal(1.3)
                if (hasUpgrade("Uu",72)) cost = cost.sub(tmp.Uu.upgrades[72].effect)
                return cost
            },
            base() { 
                let base = decimalOne
                if (hasMilestone("Uu",16)) base = base.add(tmp.Uu.milestones[16].effect)
                if (hasUpgrade("ct",505)) base = base.mul(1.1)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Uu.buyables[11]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Uu" || player.subtabs.Uu.mainTabs != "Power") return
                let extra = ""
                let dis = "Gain "+format(tmp.Uu.buyables[11].base)+" uncoating power per second"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" infection power\n\
                Cost formula:" + (shiftDown?format(2e17)+"*"+format(tmp.Uu.buyables[11].costb)+"^x<sup>"+format(tmp.Uu.buyables[11].coste)+"</sup>":" (hold shift to see)")+"\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"/s\n\
                Amount: " + formatWhole(getBuyableAmount("Uu", 11))
            },
            unlocked() { return hasMilestone("Uu",7) }, 
            canAfford() {
                    return player.e.p.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Uu.buyables[11].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",505)) player[this.layer].buyables[this.id] = b
                    else {
                        player.e.p = player.e.p.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.e.p
                let base = tmp.Uu.buyables[11].costb
                let exp = tmp.Uu.buyables[11].coste
                let target = s.div(2e17).log(base).root(exp)
                if (hasUpgrade("Uu",83)) target = target.mul(tmp.Uu.upgrades[83].effect)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Uu.buyables[11].maxAfford
                let base = tmp.Uu.buyables[11].costb
                let exp = tmp.Uu.buyables[11].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(2e17)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uu.buyables[11] = player.Uu.buyables[11].max(target)
                
                }
            },
        },
        12: {
            title: "UnPower Exponent",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Uu.buyables[12].costb
                let exp = tmp.Uu.buyables[12].coste
                let x = player.Uu.buyables[12]
                if (x.gte("ee30")) x = x.log10().div(1e30).pow(1.5).mul(1e30).pow10()
                if (hasUpgrade("Uu",84)) x = x.div(tmp.Uu.upgrades[84].effect)
                let cost = Decimal.pow(base,x.pow(exp)).mul(2500)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = decimalFour
                return cost.sub(tmp.Uu.buyables[32].effect)
            },
            coste() { 
                let cost = new Decimal(1.5)
                if (hasUpgrade("Uu",74)) cost = cost.sub(tmp.Uu.upgrades[74].effect)
                return cost
            },
            base() { 
                let base = decimalOne
                if (player.Uu.power.gte("2e2586")) base = base.add(0.01)
                if (player.Uu.power.gte("5e3299")) base = base.add(0.01)
                if (player.Uu.power.gte("5e3383")) base = base.add(0.01)
                if (player.Uu.power.gte("e3426")) base = base.add(0.01)
                if (player.Uu.power.gte("e3482")) base = base.add(0.01)
                if (player.Uu.power.gte("e12236")) base = base.add(0.005)
                if (player.Uu.power.gte("3e16094")) base = base.add(0.005)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Uu.buyables[12]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Uu" || player.subtabs.Uu.mainTabs != "Power") return
                let extra = ""
                let dis = "Add "+format(tmp.Uu.buyables[12].base)+" to base uncoating power gain exponent"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" uncoating power\n\
                Cost formula:" + (shiftDown?format(2500)+"*"+format(tmp.Uu.buyables[12].costb)+"^x<sup>"+format(tmp.Uu.buyables[12].coste)+"</sup>":" (hold shift to see)")+"\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Uu", 12))
            },
            unlocked() { return getBuyableAmount("Uu", 11).gte(10) }, 
            canAfford() {
                    return player.Uu.power.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Uu.buyables[12].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",506)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Uu.power = player.Uu.power.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Uu.power
                let base = tmp.Uu.buyables[12].costb
                let exp = tmp.Uu.buyables[12].coste
                let target = s.div(2500).log(base).root(exp)
                if (hasUpgrade("Uu",84)) target = target.mul(tmp.Uu.upgrades[84].effect)
                if (target.gte("ee30")) target = target.log10().div(1e30).root(1.5).mul(1e30).pow10()
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Uu.buyables[12].maxAfford
                let base = tmp.Uu.buyables[12].costb
                let exp = tmp.Uu.buyables[12].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(2500)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uu.buyables[12] = player.Uu.buyables[12].max(target)
                
                }
            },
        },
        13: {
            title: "UnPower Boost",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Uu.buyables[13].costb
                let exp = tmp.Uu.buyables[13].coste
                let x = player.Uu.buyables[13]
                if (hasUpgrade("Uu",85)) x = x.div(tmp.Uu.upgrades[85].effect)
                let cost = Decimal.pow(base,x.pow(exp)).mul(2e30)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(100)
                return cost.sub(tmp.Uu.buyables[33].effect)
            },
            coste() { 
                let cost = new Decimal(1.6)
                if (hasUpgrade("Uu",73)) cost = cost.sub(tmp.Uu.upgrades[73].effect)
                return cost
            },
            base() { 
                let base = decimalHalf
                if (player.Uu.power.gte("2e3700")) base = base.add(0.01)
                if (player.Uu.power.gte("e7070")) base = base.add(0.01)
                if (player.Uu.power.gte("e7160")) base = base.add(0.01)
                if (player.Uu.power.gte("3e7223")) base = base.add(0.01)
                if (player.Uu.power.gte("e12236")) base = base.add(0.005)
                if (player.Uu.power.gte("3e16094")) base = base.add(0.005)
                if (hasMilestone("Us",9)) base = base.mul(tmp.Us.milestones[9].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Uu.buyables[13]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Uu" || player.subtabs.Uu.mainTabs != "Power") return
                let extra = ""
                let dis = "Add "+format(tmp.Uu.buyables[13].base)+" to uncoating power effect exponent"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" uncoating power\n\
                Cost formula:" + (shiftDown?format(2e30)+"*"+format(tmp.Uu.buyables[13].costb)+"^x<sup>"+format(tmp.Uu.buyables[13].coste)+"</sup>":" (hold shift to see)")+"\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Uu", 13))
            },
            unlocked() { return getBuyableAmount("Uu", 11).gte(56) }, 
            canAfford() {
                    return player.Uu.power.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Uu.buyables[13].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",506)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Uu.power = player.Uu.power.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Uu.power
                let base = tmp.Uu.buyables[13].costb
                let exp = tmp.Uu.buyables[13].coste
                let target = s.div(2e30).log(base).root(exp)
                if (hasUpgrade("Uu",85)) target = target.mul(tmp.Uu.upgrades[85].effect)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Uu.buyables[13].maxAfford
                let base = tmp.Uu.buyables[13].costb
                let exp = tmp.Uu.buyables[13].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(2e30)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uu.buyables[13] = player.Uu.buyables[13].max(target)
                
                }
            },
        },
        21: {
            title: "UnSoftcap",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Uu.buyables[21].costb
                let exp = tmp.Uu.buyables[21].coste
                let x = player.Uu.buyables[21]
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e95)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e3)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.7)
                return cost
            },
            base() { 
                let base = player.Uu.power.max(10).log10()
                if (hasMilestone("Uu",14)) base = slogadd(base,0.2)
                if (hasMilestone("Uu",16)) base = slogadd(base,0.25)
                if (hasMilestone("Uu",17)) base = slogadd(base,0.15)
                if (hasMilestone("Uu",18)) base = slogadd(base,0.1)
                if (hasMilestone("Uu",27)) base = slogadd(base,0.05)
                if (hasUpgrade("Uu",73)) base = slogadd(base,0.1)
                if (hasUpgrade("Uu",74)) base = slogadd(base,0.05)
                if (hasUpgrade("Uu",81)) base = slogadd(base,0.075)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Uu.buyables[21]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Uu" || player.subtabs.Uu.mainTabs != "Power") return
                let extra = ""
                let dis = "Multiply uncoater gain softcap start by "+format(tmp.Uu.buyables[21].base)+" (based on uncoating power)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" uncoating power\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Uu", 21))
            },
            unlocked() { return getBuyableAmount("Uu", 12).gte(29) }, 
            canAfford() {
                    return player.Uu.power.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Uu.buyables[21].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",506)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Uu.power = player.Uu.power.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Uu.power
                let base = tmp.Uu.buyables[21].costb
                let exp = tmp.Uu.buyables[21].coste
                let target = s.div(1e95).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Uu.buyables[21].maxAfford
                let base = tmp.Uu.buyables[21].costb
                let exp = tmp.Uu.buyables[21].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e95)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uu.buyables[21] = player.Uu.buyables[21].max(target)
                
                }
            },
        },
        22: {
            title: "UnDisease",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Uu.buyables[22].costb
                let exp = tmp.Uu.buyables[22].coste
                let x = player.Uu.buyables[22]
                let cost = Decimal.pow(base,x.pow(exp)).mul(2e149)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e4)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.4)
                return cost
            },
            base() { 
                let base = slogadd(player.e.diseases.max(10),-0.9)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Uu.buyables[22]
                let base = tmp[this.layer].buyables[this.id].base
                let eff =  Decimal.pow(base, x)
                if (hasMilestone("Us",15)) eff = eff.max(10).log10().pow(0.3)
                return eff
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Uu" || player.subtabs.Uu.mainTabs != "Power") return
                let extra = ""
                let dis = "Multiply infectious disease gain by "+format(tmp.Uu.buyables[22].base)+" (based on infectious diseases)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" uncoating power\n\
                Effect: " + (hasMilestone("Us",15)?"^":"") + format(tmp[this.layer].buyables[this.id].effect) + (hasMilestone("Us",15)?"":"x")+"\n\
                Amount: " + formatWhole(getBuyableAmount("Uu", 22))
            },
            unlocked() { return getBuyableAmount("Uu", 12).gte(39) }, 
            canAfford() {
                    return player.Uu.power.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Uu.buyables[22].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",506)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Uu.power = player.Uu.power.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Uu.power
                let base = tmp.Uu.buyables[22].costb
                let exp = tmp.Uu.buyables[22].coste
                let target = s.div(2e149).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Uu.buyables[22].maxAfford
                let base = tmp.Uu.buyables[22].costb
                let exp = tmp.Uu.buyables[22].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(2e149)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uu.buyables[22] = player.Uu.buyables[22].max(target)
                
                }
            },
        },
        23: {
            title: "UnLog",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Uu.buyables[23].costb
                let exp = tmp.Uu.buyables[23].coste
                let x = player.Uu.buyables[23]
                if (x.gte(10)) x = x.sub(10).mul(3).add(10)
                let cost = Decimal.pow(base,x.pow(exp)).mul(32).pow10().mul(5e200)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1.04)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.25)
                return cost
            },
            base() { 
                let base = new Decimal(1.005)
                if (player.Uu.power.gte("e16308")) base = base.add(0.0015)
                if (hasUpgrade("Uu",45)) base = base.add(0.0005)
                if (hasUpgrade("Uu",75)) base = base.add(0.0005)
                if (hasMilestone("Uu",24)) base = base.add(0.001)
                if (hasMilestone("Uu",25)) base = base.add(0.001)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Uu.buyables[23]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Uu" || player.subtabs.Uu.mainTabs != "Power") return
                let extra = ""
                let dis = "Divide uncoating power effect log by "+format(tmp.Uu.buyables[23].base,4)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" uncoating power\n\
                Effect: /" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Uu", 23))
            },
            unlocked() { return getBuyableAmount("Uu", 11).gte(308) }, 
            canAfford() {
                    return player.Uu.power.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Uu.buyables[23].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",506)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Uu.power = player.Uu.power.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Uu.power
                let base = tmp.Uu.buyables[23].costb
                let exp = tmp.Uu.buyables[23].coste
                let target = s.div(5e200).log10().div(32).log(base).root(exp)
                if (target.gte(10)) target = target.sub(10).div(3).add(10)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Uu.buyables[23].maxAfford
                let base = tmp.Uu.buyables[23].costb
                let exp = tmp.Uu.buyables[23].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(32).pow10().mul(5e200)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uu.buyables[23] = player.Uu.buyables[23].max(target)
                
                }
            },
        },
        31: {
            title: "UnPowerer",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Uu.buyables[31].costb
                let exp = tmp.Uu.buyables[31].coste
                let x = player.Uu.buyables[31]
                if (x.gte(6e4)) x = x.mul(1.5).sub(3e4).div(6e4).pow(1.3).mul(6e4)
                if (x.gte(350)) x = x.mul(2).sub(350)
                if (x.gte(150)) x = x.mul(3).sub(300)
                if (x.gte(60)) x = x.mul(4).sub(180)
                if (x.gte(40)) x = x.mul(5).sub(160).div(40).pow(1.5).mul(40)
                let cost = Decimal.pow(base,x.pow(exp)).mul("e980")
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = decimalFive
                return cost
            },
            coste() { 
                let cost = new Decimal(1.15)
                return cost
            },
            base() { 
                let base = new Decimal(0.1)
                if (player.Uu.buyables[31].gte(80)) {
                    if (hasUpgrade("Uu",44)) base = new Decimal(0.01)
                    else base = decimalZero
                }
                if (player.Uu.buyables[31].gte(170)) {
                    if (hasUpgrade("Uu",64)) base = new Decimal(0.001)
                    else base = decimalZero
                }
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Uu.buyables[31]
                if (player.Uu.buyables[31].gte(80)) x = x.sub(80)
                if (player.Uu.buyables[31].gte(170)) x = x.sub(90)
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.mul(base, x)
                if (player.Uu.buyables[31].gte(80)) eff = eff.add(8)
                if (player.Uu.buyables[31].gte(170)) eff = eff.add(.9)
                return eff.min(8.95)
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Uu" || player.subtabs.Uu.mainTabs != "Power") return
                let extra = ""
                let eff = tmp[this.layer].buyables[this.id].effect
                let dis = "Reduce 'UnPower Gain' cost base by "+format(tmp.Uu.buyables[31].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" uncoating power\n\
                Effect: -" + format(eff.min(8.95))+(eff.gte(8.95)?" (hardcapped)":"")+"\n\
                Amount: " + formatWhole(getBuyableAmount("Uu", 31))
            },
            unlocked() { return getBuyableAmount("Uu", 11).gte(1535) }, 
            canAfford() {
                    return player.Uu.power.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Uu.buyables[31].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",506)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Uu.power = player.Uu.power.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Uu.power
                let base = tmp.Uu.buyables[31].costb
                let exp = tmp.Uu.buyables[31].coste
                let target = s.div("e980").log(base).root(exp)
                if (target.gte(40)) target = target.div(40).root(1.5).mul(40).add(160).div(5)
                if (target.gte(60)) target = target.add(180).div(4)
                if (target.gte(150)) target = target.add(300).div(3)
                if (target.gte(350)) target = target.add(350).div(2)
                if (target.gte(6e4)) target = target.div(6e4).root(1.3).mul(6e4).add(3e4).div(1.5)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Uu.buyables[31].maxAfford
                let base = tmp.Uu.buyables[31].costb
                let exp = tmp.Uu.buyables[31].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul("e980")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uu.buyables[31] = player.Uu.buyables[31].max(target)
                
                }
            },
        },
        32: {
            title: "UnExper",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Uu.buyables[32].costb
                let exp = tmp.Uu.buyables[32].coste
                let x = player.Uu.buyables[32]
                if (x.gte(275000)) x = x.mul(2).sub(275000).div(275000).pow(1.5).mul(275000)
                if (x.gte(400)) x = x.mul(2).sub(400)
                if (x.gte(220)) x = x.mul(1.5).sub(110)
                if (x.gte(120)) x = x.mul(2).sub(120)
                if (x.gte(100)) x = x.mul(4).sub(300)
                if (x.gte(40)) x = x.mul(5).sub(160).div(40).pow(1.5).mul(40)
                let cost = Decimal.pow(base,x.pow(exp)).mul("e1879")
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(100)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.25)
                return cost
            },
            base() { 
                let base = new Decimal(0.015)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Uu.buyables[32]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x).min(2.55);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Uu" || player.subtabs.Uu.mainTabs != "Power") return
                let extra = ""
                let eff = tmp[this.layer].buyables[this.id].effect
                let dis = "Reduce 'UnPower Exponent' cost base by "+format(tmp.Uu.buyables[32].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" uncoating power\n\
                Effect: -" + format(eff.min(2.55))+(eff.gte(2.55)?" (hardcapped)":"")+"\n\
                Amount: " + formatWhole(getBuyableAmount("Uu", 32))
            },
            unlocked() { return getBuyableAmount("Uu", 11).gte(4590) }, 
            canAfford() {
                    return player.Uu.power.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Uu.buyables[32].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",506)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Uu.power = player.Uu.power.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Uu.power
                let base = tmp.Uu.buyables[32].costb
                let exp = tmp.Uu.buyables[32].coste
                let target = s.div("e1879").log(base).root(exp)
                if (target.gte(40)) target = target.div(40).root(1.5).mul(40).add(160).div(5)
                if (target.gte(100)) target = target.add(300).div(4)
                if (target.gte(120)) target = target.add(120).div(2)
                if (target.gte(220)) target = target.add(110).div(1.5)
                if (target.gte(400)) target = target.add(400).div(2)
                if (target.gte(275000)) target = target.div(275000).root(1.5).mul(275000).add(275000).div(2)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Uu.buyables[32].maxAfford
                let base = tmp.Uu.buyables[32].costb
                let exp = tmp.Uu.buyables[32].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul("e1879")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uu.buyables[32] = player.Uu.buyables[32].max(target)
                
                }
            },
        },
        33: {
            title: "UnBooster",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Uu.buyables[33].costb
                let exp = tmp.Uu.buyables[33].coste
                let x = player.Uu.buyables[33]
                if (x.gte(275000)) x = x.mul(2).sub(275000).div(275000).pow(1.5).mul(275000)
                if (x.gte(310)) x = x.mul(2).sub(310)
                if (x.gte(200)) x = x.mul(2).sub(200)
                if (x.gte(175)) x = x.mul(3).sub(350)
                if (x.gte(150)) x = x.mul(4).sub(450)
                if (x.gte(60)) x = x.mul(5).sub(240).div(60).pow(1.5).mul(60)
                let cost = Decimal.pow(base,x.pow(exp)).mul("e3480")
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(300)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.25)
                return cost
            },
            base() { 
                let base = decimalHalf
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Uu.buyables[33]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x).min(97);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Uu" || player.subtabs.Uu.mainTabs != "Power") return
                let extra = ""
                let eff = tmp[this.layer].buyables[this.id].effect
                let dis = "Reduce 'UnPower Boost' cost base by "+format(tmp.Uu.buyables[33].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" uncoating power\n\
                Effect: -" + format(eff.min(97))+(eff.gte(97)?" (hardcapped)":"")+"\n\
                Amount: " + formatWhole(getBuyableAmount("Uu", 33))
            },
            unlocked() { return getBuyableAmount("Uu", 11).gte(10227) }, 
            canAfford() {
                    return player.Uu.power.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Uu.buyables[33].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",506)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Uu.power = player.Uu.power.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Uu.power
                let base = tmp.Uu.buyables[33].costb
                let exp = tmp.Uu.buyables[33].coste
                let target = s.div("e3480").log(base).root(exp)
                if (target.gte(60)) target = target.div(60).root(1.5).mul(60).add(240).div(5)
                if (target.gte(150)) target = target.add(450).div(4)
                if (target.gte(175)) target = target.add(350).div(3)
                if (target.gte(200)) target = target.add(200).div(2)
                if (target.gte(310)) target = target.add(310).div(2)
                if (target.gte(275000)) target = target.div(275000).root(1.5).mul(275000).add(275000).div(2)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Uu.buyables[33].maxAfford
                let base = tmp.Uu.buyables[33].costb
                let exp = tmp.Uu.buyables[33].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul("e3480")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uu.buyables[33] = player.Uu.buyables[33].max(target)
                
                }
            },
        },
        41: {
            title: "Enzyme Multiplier",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Uu.buyables[41].costb
                let exp = tmp.Uu.buyables[41].coste
                let x = player.Uu.buyables[41]
                let cost = Decimal.pow(base,x.pow(exp)).mul(500)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(Math.E)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.25)
                return cost
            },
            base() { 
                let base = new Decimal(Math.PI)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Uu.buyables[41]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Uu" || player.subtabs.Uu.mainTabs != "Enzymes") return
                let extra = ""
                let dis = "Multiply uncoated enzyme gain by "+format(tmp.Uu.buyables[41].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" uncoated enzymes\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Uu", 41))
            },
            unlocked() { return hasUpgrade("Uu",45) }, 
            canAfford() {
                    return player.Uu.enzymes.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Uu.buyables[41].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",516)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Uu.enzymes = player.Uu.enzymes.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Uu.enzymes
                let base = tmp.Uu.buyables[41].costb
                let exp = tmp.Uu.buyables[41].coste
                let target = s.div(500).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Uu.buyables[41].maxAfford
                let base = tmp.Uu.buyables[41].costb
                let exp = tmp.Uu.buyables[41].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(500)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uu.buyables[41] = player.Uu.buyables[41].max(target)
                
                }
            },
        },
        42: {
            title: "Enzyme Exponent",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Uu.buyables[42].costb
                let exp = tmp.Uu.buyables[42].coste
                let x = player.Uu.buyables[42]
                if (x.gte(1e250)) x = x.log10().div(250).pow(1.3).mul(250).pow10().div(1e250).pow(2).mul(1e250)
                if (x.gte(350)) x = x.mul(1.5).sub(175).div(350).pow(1.1).mul(350)
                if (x.gte(15)) x = x.mul(2).sub(15)
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e14)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(Math.PI**Math.E)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.4)
                return cost
            },
            base() { 
                let base = new Decimal(Math.LOG2E)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Uu.buyables[42]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Uu" || player.subtabs.Uu.mainTabs != "Enzymes") return
                let extra = ""
                let dis = "Increase uncoated enzyme gain exponent by "+format(tmp.Uu.buyables[42].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" uncoated enzymes\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Uu", 42))
            },
            unlocked() { return player.Uu.buyables[41].gte(14) }, 
            canAfford() {
                    return player.Uu.enzymes.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Uu.buyables[42].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",522)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Uu.enzymes = player.Uu.enzymes.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Uu.enzymes
                let base = tmp.Uu.buyables[42].costb
                let exp = tmp.Uu.buyables[42].coste
                let target = s.div(1e14).log(base).root(exp)
                if (target.gte(15)) target = target.add(15).div(2)
                if (target.gte(350)) target = target.div(350).root(1.1).mul(350).add(175).div(1.5)
                if (target.gte(1e250)) target = target.div(1e250).root(2).mul(1e250).log10().div(250).root(1.3).mul(250).pow10()
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Uu.buyables[42].maxAfford
                let base = tmp.Uu.buyables[42].costb
                let exp = tmp.Uu.buyables[42].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e14)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uu.buyables[42] = player.Uu.buyables[42].max(target)
                
                }
            },
        },
        43: {
            title: "Enzyme Boost",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Uu.buyables[43].costb
                let exp = tmp.Uu.buyables[43].coste
                let x = player.Uu.buyables[43]
                if (x.gte(12)) x = Decimal.pow(1.15,x.sub(12)).mul(12)
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e131)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(Math.PI).pow(Math.PI**Math.PI)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.5)
                return cost
            },
            base() { 
                let base = new Decimal(0.03)
                if (hasMilestone("Us",9)) base = base.add(0.27)
                if (hasUpgrade("Us",91)) base = base.mul(10)
                if (hasUpgrade("Us",104)) base = base.mul(10)
                if (hasMilestone("Us",45)) base = base.mul(tmp.Us.milestones[45].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Uu.buyables[43]
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.mul(base, x)
                let exp = 0.7
                if (hasUpgrade("Us",45)) exp = 0.75
                if (hasUpgrade("Us",71)) exp = 0.8
                if (hasUpgrade("Us",73)) exp = 0.825
                if (hasUpgrade("Us",75)) exp = 0.85
                if (hasUpgrade("Us",91)) exp = 0.9
                if (hasUpgrade("Us",104)) exp = 1
                if (eff.gte(0.35)) eff = eff.div(0.35).pow(exp).mul(0.35)
                return eff
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Uu" || player.subtabs.Uu.mainTabs != "Enzymes") return
                let extra = ""
                let eff = tmp[this.layer].buyables[this.id].effect
                let dis = "Increase uncoated enzyme effect exponent by "+format(tmp.Uu.buyables[43].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" uncoated enzymes\n\
                Effect: +" + format(eff)+(eff.gte(0.35)&&!hasUpgrade("Us",104)?" (softcapped)":"")+"\n\
                Amount: " + formatWhole(getBuyableAmount("Uu", 43))
            },
            unlocked() { return player.Uu.buyables[41].gte(95) }, 
            canAfford() {
                    return player.Uu.enzymes.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Uu.buyables[43].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",522)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Uu.enzymes = player.Uu.enzymes.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Uu.enzymes
                let base = tmp.Uu.buyables[43].costb
                let exp = tmp.Uu.buyables[43].coste
                let target = s.div(1e131).log(base).root(exp)
                if (target.gte(12)) target = target.div(12).log(1.15).add(12)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Uu.buyables[43].maxAfford
                let base = tmp.Uu.buyables[43].costb
                let exp = tmp.Uu.buyables[43].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e131)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uu.buyables[43] = player.Uu.buyables[43].max(target)
                
                }
            },
        },
        51: {
            title: "Enzyme Base",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Uu.buyables[51].costb
                let exp = tmp.Uu.buyables[51].coste
                let x = player.Uu.buyables[51]
                if (x.gte(1e15)) x = x.mul(1.5).sub(5e14).div(1e15).pow(1.2).mul(1e15)
                if (x.gte(1500)) x = x.mul(1.5).sub(750).div(1500).pow(1.1).mul(1500)
                if (x.gte(600)) x = x.mul(1.5).sub(300).div(600).pow(1.3).mul(600)
                if (x.gte(300)) x = x.mul(1.5).sub(150).div(300).pow(1.2).mul(300)
                if (x.gte(4)) x = x.mul(1.5).sub(2).div(4).pow(1.2).mul(4)
                let cost = Decimal.pow(base,x.pow(exp)).mul(5e204)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(Math.E**Math.PI).pow(Math.PI**Math.E)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.4)
                return cost
            },
            base() { 
                let base = new Decimal((5**0.5+1)/2)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Uu.buyables[51]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Uu" || player.subtabs.Uu.mainTabs != "Enzymes") return
                let extra = ""
                let dis = "Multiply base uncoated enzyme gain by "+format(tmp.Uu.buyables[51].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" uncoated enzymes\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Uu", 51))
            },
            unlocked() { return player.Uu.buyables[41].gte(137) }, 
            canAfford() {
                    return player.Uu.enzymes.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Uu.buyables[51].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",522)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Uu.enzymes = player.Uu.enzymes.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Uu.enzymes
                let base = tmp.Uu.buyables[51].costb
                let exp = tmp.Uu.buyables[51].coste
                let target = s.div(5e204).log(base).root(exp)
                if (target.gte(4)) target = target.div(4).root(1.2).mul(4).add(2).div(1.5)
                if (target.gte(300)) target = target.div(300).root(1.2).mul(300).add(150).div(1.5)
                if (target.gte(600)) target = target.div(600).root(1.3).mul(600).add(300).div(1.5)
                if (target.gte(1500)) target = target.div(1500).root(1.1).mul(1500).add(750).div(1.5)
                if (target.gte(1e15)) target = target.div(1e15).root(1.2).mul(1e15).add(5e14).div(1.5)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Uu.buyables[51].maxAfford
                let base = tmp.Uu.buyables[51].costb
                let exp = tmp.Uu.buyables[51].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(5e204)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uu.buyables[51] = player.Uu.buyables[51].max(target)
                
                }
            },
        },
        52: {
            title: "Enzyme Power",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Uu.buyables[52].costb
                let exp = tmp.Uu.buyables[52].coste
                let x = player.Uu.buyables[52]
                let cost = Decimal.pow(base,x.pow(exp)).mul(100).pow10().mul(15e133)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1.1475)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.25)
                return cost
            },
            base() { 
                let base = new Decimal(1.01)
                if (hasUpgrade("Us",83)) base = base.add(0.09)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Uu.buyables[52]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Uu" || player.subtabs.Uu.mainTabs != "Enzymes") return
                let extra = ""
                let dis = "Raise uncoated enzyme gain to "+format(tmp.Uu.buyables[52].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" uncoated enzymes\n\
                Effect: ^" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Uu", 52))
            },
            unlocked() { return player.Uu.buyables[41].gte(152) }, 
            canAfford() {
                    return player.Uu.enzymes.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Uu.buyables[52].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",522)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Uu.enzymes = player.Uu.enzymes.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Uu.enzymes
                let base = tmp.Uu.buyables[52].costb
                let exp = tmp.Uu.buyables[52].coste
                let target = s.div(15e133).log10().div(100).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Uu.buyables[52].maxAfford
                let base = tmp.Uu.buyables[52].costb
                let exp = tmp.Uu.buyables[52].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(100).pow10().mul(15e133)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uu.buyables[52] = player.Uu.buyables[52].max(target)
                
                }
            },
        },
        53: {
            title: "Enzyme Uncoating",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Uu.buyables[53].costb
                let exp = tmp.Uu.buyables[53].coste
                let x = player.Uu.buyables[53]
                if (x.gte(6e5)) x = x.div(12e4).pow10().mul(6)
                if (x.gte(1150)) x = x.mul(1.4).sub(1150*.4).div(1150).pow(1.3).mul(1150)
                if (x.gte(800)) x = x.mul(1.4).sub(800*.4).div(800).pow(1.3).mul(800)
                if (x.gte(555)) x = x.mul(1.4).sub(555*.4).div(555).pow(1.3).mul(555)
                if (x.gte(25)) x = x.mul(1.4).sub(10).div(25).pow(1.1).mul(25)
                if (x.gte(4)) x = x.mul(2).sub(4).div(4).pow(1.2).mul(4)
                let cost = Decimal.pow(base,x.pow(exp)).mul(100).pow10().mul("2e630")
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1.05)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.3)
                return cost
            },
            base() { 
                let base = new Decimal(1.075)
                if (hasUpgrade("Uu",94)) base = base.add(tmp.Uu.upgrades[94].effect)
                if (hasMilestone("Us",45)) base = base.mul(tmp.Us.milestones[45].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Uu.buyables[53]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Uu" || player.subtabs.Uu.mainTabs != "Enzymes") return
                let extra = ""
                let dis = "Raise 'Cased, Infectious, and Uncoating Enzymes' to "+format(tmp.Uu.buyables[53].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" uncoated enzymes\n\
                Effect: ^" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Uu", 53))
            },
            unlocked() { return player.Uu.buyables[41].gte(380) }, 
            canAfford() {
                    return player.Uu.enzymes.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Uu.buyables[53].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",522)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Uu.enzymes = player.Uu.enzymes.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Uu.enzymes
                let base = tmp.Uu.buyables[53].costb
                let exp = tmp.Uu.buyables[53].coste
                let target = s.div("2e630").log10().div(100).log(base).root(exp)
                if (target.gte(4)) target = target.div(4).root(1.2).mul(4).add(4).div(2)
                if (target.gte(25)) target = target.div(25).root(1.1).mul(25).add(10).div(1.4)
                if (target.gte(555)) target = target.div(555).root(1.3).mul(555).add(555*.4).div(1.4)
                if (target.gte(800)) target = target.div(800).root(1.3).mul(800).add(800*.4).div(1.4)
                if (target.gte(1150)) target = target.div(1150).root(1.3).mul(1150).add(1150*.4).div(1.4)
                if (target.gte(6e5)) target = target.div(6).log10().mul(12e4)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Uu.buyables[53].maxAfford
                let base = tmp.Uu.buyables[53].costb
                let exp = tmp.Uu.buyables[53].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(100).pow10().mul("2e630")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uu.buyables[53] = player.Uu.buyables[53].max(target)
                
                }
            },
        },
        61: {
            title: "Unquarantined Enzymes",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Uu.buyables[61].costb
                let exp = tmp.Uu.buyables[61].coste
                let x = player.Uu.buyables[61]
                if (x.gte(1e24)) x = x.mul(1.5).sub(5e23).div(1e24).pow(1.1).mul(1e24)
                if (x.gte(1e10)) x = x.mul(1.5).sub(5e9).div(1e10).pow(1.1).mul(1e10)
                if (x.gte(1e5)) x = x.mul(1.5).sub(5e4).div(1e5).pow(1.1).mul(1e5)
                if (x.gte(2e3)) x = x.mul(1.5).sub(1e3).div(2e3).pow(1.1).mul(2e3)
                let cost = Decimal.pow(base,x.pow(exp)).mul(25e5)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(30)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.25)
                return cost
            },
            base() { 
                let base = player.Uu.enzymes.max(10).log10().pow(0.2)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Uu.buyables[61]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Uu" || player.subtabs.Uu.mainTabs != "Enzymes") return
                let extra = ""
                let dis = "Multiply unquarantined case and infection gain by "+format(tmp.Uu.buyables[61].base)+" (based on uncoated enzymes)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unquarantined cases\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Uu", 61))
            },
            unlocked() { return hasUpgrade("Uu",81) }, 
            canAfford() {
                    return player.e.qc.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Uu.buyables[61].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",524)) player[this.layer].buyables[this.id] = b
                    else {
                        player.e.qc = player.e.qc.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.e.qc
                let base = tmp.Uu.buyables[61].costb
                let exp = tmp.Uu.buyables[61].coste
                let target = s.div(25e5).log(base).root(exp)
                if (target.gte(2e3)) target = target.div(2e3).root(1.1).mul(2e3).add(1e3).div(1.5)
                if (target.gte(1e5)) target = target.div(1e5).root(1.1).mul(1e5).add(5e4).div(1.5)
                if (target.gte(1e10)) target = target.div(1e10).root(1.1).mul(1e10).add(5e9).div(1.5)
                if (target.gte(1e24)) target = target.div(1e24).root(1.1).mul(1e24).add(5e23).div(1.5)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Uu.buyables[61].maxAfford
                let base = tmp.Uu.buyables[61].costb
                let exp = tmp.Uu.buyables[61].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(25e5)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uu.buyables[61] = player.Uu.buyables[61].max(target)
                
                }
            },
        },
        62: {
            title: "Unquarinfexpymes",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Uu.buyables[62].costb
                let exp = tmp.Uu.buyables[62].coste
                let x = player.Uu.buyables[62]
                if (x.gte(62)) x = x.mul(1.5).sub(31).div(62).pow(1.15).mul(62)
                if (x.gte(48)) x = x.mul(1.5).sub(24).div(48).pow(1.1).mul(48)
                if (x.gte(28)) x = x.mul(1.5).sub(14).div(28).pow(1.2).mul(28)
                if (x.gte(6)) x = x.mul(2).sub(6).div(6).pow(1.2).mul(6)
                let cost = Decimal.pow(base,x.pow(exp)).mul(3e16)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e3)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.5)
                return cost
            },
            base() { 
                let base = player.Uu.enzymes.max(10).log10().max(10).log10().pow(2).div(10)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Uu.buyables[62]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Uu" || player.subtabs.Uu.mainTabs != "Enzymes") return
                let extra = ""
                let dis = "Increase unquarantined infection gain exponent by "+format(tmp.Uu.buyables[62].base)+" (based on uncoated enzymes)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unquarantined cases\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Uu", 62))
            },
            unlocked() { return hasUpgrade("Uu",81) }, 
            canAfford() {
                    return player.e.qc.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Uu.buyables[62].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",533)) player[this.layer].buyables[this.id] = b
                    else {
                        player.e.qc = player.e.qc.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.e.qc
                let base = tmp.Uu.buyables[62].costb
                let exp = tmp.Uu.buyables[62].coste
                let target = s.div(3e16).log(base).root(exp)
                if (target.gte(6)) target = target.div(6).root(1.2).mul(6).add(6).div(2)
                if (target.gte(28)) target = target.div(28).root(1.2).mul(28).add(14).div(1.5)
                if (target.gte(48)) target = target.div(48).root(1.1).mul(48).add(24).div(1.5)
                if (target.gte(62)) target = target.div(62).root(1.15).mul(62).add(31).div(1.5)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Uu.buyables[62].maxAfford
                let base = tmp.Uu.buyables[62].costb
                let exp = tmp.Uu.buyables[62].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(3e16)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uu.buyables[62] = player.Uu.buyables[62].max(target)
                
                }
            },
        },
        63: {
            title: "Unquarcasexpymes",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Uu.buyables[63].costb
                let exp = tmp.Uu.buyables[63].coste
                let x = player.Uu.buyables[63]
                if (x.gte(44)) x = x.mul(1.5).sub(22).div(44).pow(1.15).mul(44)
                if (x.gte(30)) x = x.mul(1.1).sub(3).div(30).pow(1.1).mul(30)
                if (x.gte(22)) x = x.mul(1.5).sub(11).div(22).pow(1.2).mul(22)
                if (x.gte(10)) x = x.mul(1.5).sub(5).div(10).pow(1.1).mul(10)
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e59)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e15)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.8)
                return cost
            },
            base() { 
                let base = player.Uu.enzymes.max(10).log10().max(10).log10().div(50)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Uu.buyables[63]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Uu" || player.subtabs.Uu.mainTabs != "Enzymes") return
                let extra = ""
                let dis = "Increase UI to UC exponent by "+format(tmp.Uu.buyables[63].base)+" (based on uncoated enzymes)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unquarantined cases\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Uu", 63))
            },
            unlocked() { return hasUpgrade("Uu",81) }, 
            canAfford() {
                    return player.e.qc.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Uu.buyables[63].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",533)) player[this.layer].buyables[this.id] = b
                    else {
                        player.e.qc = player.e.qc.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.e.qc
                let base = tmp.Uu.buyables[63].costb
                let exp = tmp.Uu.buyables[63].coste
                let target = s.div(1e59).log(base).root(exp)
                if (target.gte(10)) target = target.div(10).root(1.1).mul(10).add(5).div(1.5)
                if (target.gte(22)) target = target.div(22).root(1.2).mul(22).add(11).div(1.5)
                if (target.gte(30)) target = target.div(30).root(1.1).mul(30).add(3).div(1.1)
                if (target.gte(44)) target = target.div(44).root(1.15).mul(44).add(22).div(1.5)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Uu.buyables[63].maxAfford
                let base = tmp.Uu.buyables[63].costb
                let exp = tmp.Uu.buyables[63].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e59)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Uu.buyables[63] = player.Uu.buyables[63].max(target)
                
                }
            },
        },
    },
}),

addLayer("Us", {
    name: "unvaxxed symptoms",
    symbol: "US",
    position: 2,
    startData() { return {
        points: decimalZero,
        total: decimalZero,
        best: decimalZero,
        bestSev: decimalZero,
        bestCy: decimalZero,
        bestGu: decimalZero,
        severity: decimalZero,
        symptoms: decimalZero,
        recoveries: decimalZero,
        trna: decimalZero,
        rrna: decimalZero,
        rgain: decimalZero,
        mu: decimalZero,
        mu2: decimalZero,
        time: 0,
        auto: false,
        auto2: false,
        automult: false,
        autoatom: false,
        autosymp: false,
        autosev: false,
        autotrna: false,
        autorrna: false,
        autoupg: false,
        automut: false,
        autotmut: false,
        autounr: false,
        sympBuy: [41,42,43,51,52,53,61,62,63],
        trnaBuy: [71,72,73,81,82,83],
        trnaTime: [0,0],
        cTime: [0,0],
        maxCool: 0,
        trnaCool: 0,
        rrnaCool: 0,
        upgCool: 0,
        mutCool: 0,
        tmutCool: 0,
        mutPercent: 3,
        mutPer: 1,
        tmutPercent: 3,
        tmutPer: 1,
        sars: ["C","Cu","Co","CoD","CoB","CoV","CoN","CoJ","CoK","CoR","VoM","VoN","VoS","VoB","VoK","VoC"],
        unlocked: true
    }},
    color: "#baa25a",
    requires: Decimal.pow(10,96),
    resource: "unvaxxed symptoms",
    resourceSingular: "unvaxxed symptom",
    baseResource: "RNA",
    baseSingular: "RNA",
    row: 3,
    baseAmount() { 
        return player.e.rna
    },
    type: "static",
    exponent: new Decimal(1.4),
    base: new Decimal(1e9),
    branches: ["Up"],
    hotkeys: [
        {
            key:"S", description: "Shift+S:Reset for unvaxxed symptoms", onPress() {
                if (canReset(this.layer))
                    doReset(this.layer)
            },
            unlocked() {return player.uv.points.gte(6) && inChallenge("ct",32)},
        },
        {
            key:"x", 
            description() { 
                return "X:Buy max Severe Symptoms"+(hasUpgrade("uv",83)?", unvaxxed tRNA, and mutated rRNA buyables":hasMilestone("uv",6)?" and unvaxxed tRNA buyables":"")
            }, 
            onPress() {
                if (hasUpgrade("uv",51) && tmp.Us.clickables[21].canClick) layers.Us.clickables[21].onClick()
                if (hasMilestone("uv",6) && tmp.Us.clickables[22].canClick) layers.Us.clickables[22].onClick()
                if (hasUpgrade("uv",83) && tmp.Us.clickables[23].canClick) layers.Us.clickables[23].onClick()
            },
            unlocked() {return hasUpgrade("uv",51)},
        },
    ],
    canReset() {
        return !inChallenge("Ud",11) && player.e.rna.gte(tmp.Us.nextAt)
    },
    upgCool() {
        return tmp.uv.buyables[23].effect
    },
    autoUpgrade() {
        return hasMilestone("uv",11) && player.Us.autoupg && player.Us.upgCool==0
    },
    layerShown() {
        return player.uv.tree == "unvaxxed" && player.uv.points.gte(6)
    },
    doReset(resettingLayer) {
        let keep = ["auto","auto2","automult","autoatom","autosymp","autosev","autotrna","autorrna","autoupg","automut","autotmut","autounr","mutPercent","mutPer","tmutPercent","tmutPer"];
        if (resettingLayer == "Us") {
            player.Us.time = 0
            player.e.rna = decimalZero
            player.e.h = decimalZero
            player.e.c = decimalZero
            player.e.n = decimalZero
            player.e.o = decimalZero
            player.e.ph = decimalZero
        }
        let k = 40
        if (hasMilestone("Ud",2)) k = 59
        let keepMile = player.Us.milestones.filter(n=>(n<k || n==56))
        if (layers[resettingLayer].row > this.row || resettingLayer == "Ud") layerDataReset(this.layer, keep)
        if (hasMilestone("Ud",1)) player.Us.milestones = keepMile
    },
    canBuyMax() {
        return hasUpgrade("ct",543)
    },
    resetsNothing() { return hasMilestone("Us", 10) },
    autoPrestige() { return (hasMilestone("Us", 10) && player.Us.autosymp) },
    effbase() {
        let eff = decimalThree
        if (hasUpgrade("Us",21)) eff = eff.add(tmp.Us.upgrades[21].effect)
        return eff
    },
    sympAmt() {
        let points = player.Us.points
        if (hasUpgrade("Us",31)) points = points.add(tmp.Us.upgrades[31].effect)
        if (hasMilestone("Us",3)) points = points.add(tmp.Us.milestones[3].effect)
        return points
    },
    effectUnsoft(){
        let eff = tmp.Us.effbase
        let points = player.Us.points
        let base = slogadd(player.Up.points.max(10),-4).pow(1).div(10)
        let base2 = player.s.points.max(10).log10().max(10).log10().pow(0.1).div(1e7)
        let u12 = powExp(player.e.at.add(10).log10().div(1e90).add(1),0.5).pow(0.5)
        if (u12.gte(100)) u12 = u12.div(100).pow(0.2).mul(100)
        if (u12.gte(1e3)) u12 = u12.div(1e3).pow(0.4).mul(1e3)
        let us5 = slogadd(player.e.diseases.max(1e10),-3).add(1).pow(0.5)
        if (hasUpgrade("Us",31)) points = points.add(tmp.Us.upgrades[31].effect)
        if (hasMilestone("Us",3)) points = points.add(tmp.Us.milestones[3].effect)
        eff = eff.pow(points).sub(1).mul(tmp.Us.buyables[11].effect).mul(tmp.Us.buyables[62].effect).mul(tmp.uv.virusEff)
        if (hasUpgrade("ct",536)) eff = eff.mul(tmp.ct.upgrades[536].effect)
        if (hasMilestone("Us",4)) {
            if (hasMilestone("Ud",9)) eff = eff.pow(us5.min(tmp.Us.milestones[4].effect[0]))
            else eff = eff.mul(tmp.Us.milestones[4].effect[0])
        }
        if (hasUpgrade("Ud",31)) eff = eff.pow(tmp.Us.buyables[51].effect.min(base.mul(player.Us.buyables[51].add(1).log10()).add(1)))
        else eff = eff.mul(tmp.Us.buyables[51].effect)
        if (hasUpgrade("Ud",41)) eff = eff.pow(tmp.Us.buyables[61].effect.min(base2.mul(player.Us.buyables[61].add(1).log10()).add(1)))
        else eff = eff.mul(tmp.Us.buyables[61].effect)
        if (hasUpgrade("Us",12)) {
            if (hasUpgrade("Ud",32)) eff = eff.pow(tmp.Us.upgrades[12].effect.min(u12))
            else eff = eff.mul(tmp.Us.upgrades[12].effect)
        }
        if (inChallenge("Ud",11)) eff = player.Ud.points.pow(player.e.mrna.max(10).log10().pow(0.5))
        return eff
    },
    softStart() {
        let eff = new Decimal("e1.1e7")
        if (hasUpgrade("Us",103)) eff = eff.mul(tmp.Us.upgrades[103].effect)
        return eff
    },
    softStart2() {
        let eff = new Decimal("ee11")
        if (hasUpgrade("Us",132)) eff = eff.pow(tmp.Us.upgrades[132].effect)
        if (hasUpgrade("Us",134)) eff = eff.pow(tmp.Us.upgrades[134].effect)
        if (hasUpgrade("Us",135)) eff = eff.pow(tmp.Us.upgrades[135].effect)
        if (hasUpgrade("uv",86)) eff = eff.pow(tmp.uv.upgrades[86].effect)
        if (hasUpgrade("Ud",11)) eff = eff.pow(tmp.Ud.upgrades[11].effect)
        return eff
    },
    softStart3() {
        let eff = new Decimal("ee20")
        return eff
    },
    effect(){
        let eff = tmp.Us.effectUnsoft
        let st = tmp.Us.softStart
        let st2 = tmp.Us.softStart2
        let st3 = tmp.Us.softStart3
        if (eff.gte(st)) eff = eff.log10().div(st.log10()).pow(0.5).mul(st.log10()).pow10()
        if (eff.gte(st2)) eff = eff.log10().div(st2.log10()).pow(0.4).mul(st2.log10()).pow10()
        if (eff.gte(st3)) eff = eff.log10().div(st3.log10()).pow(0.37).mul(st3.log10()).pow10()
        return eff
    },
    effectDescription() {
        let desc = "which "+pluralize(player.Us.points,'produces ','produce ',true) + layerText("h2", "Us", format(tmp.Us.effect)) + " unvaxxed severity "
        if (tmp.Us.effect.gte(tmp.Us.softStart)) desc += " (softcapped)"
        if (tmp.Us.effect.gte(tmp.Us.softStart3)) desc += "<sup>3</sup>"
        else if (tmp.Us.effect.gte(tmp.Us.softStart2)) desc += "<sup>2</sup>"
        if (player.Us.severity.gte(Decimal.pow(2,1024)) || player.Us.recoveries.gt(0)) {
            desc = desc + "(hold shift to see net gain/loss) and " + colorText("h2", player.Us.trnaTime[0]>0?"#4a845d":"#baa25a", format(tmp.Us.recoveryGain)) + ' boosted '+pluralize(tmp.Us.recoveryGain,'recovery','recoveries')
        }
        desc = desc + " per second."
        if (shiftDown) desc = desc + "<br>You have "+layerText("h2", "Us", formatWhole(tmp.Us.sympAmt))+" effective unvaxxed "+pluralize(tmp.Us.sympAmt,'symptom','symptoms',true)+"."
        if (player.Us.severity.gte(Decimal.pow(2,1024)) || player.Us.recoveries.gt(0)) {
            let g = tmp.Us.effect.sub(tmp.Us.recoveryEff.mul(player.Us.severity))
            desc+="<br><br>You have " + colorText("h2", player.Us.trnaTime[0]>0?"#4a845d":"#baa25a", formatWhole(player.Us.recoveries)) + ' boosted '+pluralize(player.Us.recoveries,'recovery','recoveries',true) + ', which '+pluralize(player.Us.recoveries,'makes','make',true)+' you lose '+colorText("h2", player.Us.trnaTime[1]>0?"#2894a3":"#baa25a", format(tmp.Us.recoveryEff.mul(100)))+'% of unvaxxed severity'
            if (player.Us.recoveries.gte(Decimal.pow(2,1024))) desc += ' and '+colorText("h2", player.Us.trnaTime[1]>0?"#2894a3":"#baa25a", format(tmp.Us.recoveryEff2.mul(100)))+'% of atoms'
            desc+=' per second.'
            if (shiftDown) {
                desc+="<br><br>You are "+(g.lt(0)?"losing ":"gaining ")+layerText("h2", "Us", formatWhole(g.abs()))+ " unvaxxed severity per second."
            }
            if (tmp.Us.effect.gte(tmp.Us.softStart)) desc+="<br> Gain is ^"+layerText("h2", "Us", format(tmp.Us.effect.log(tmp.Us.effectUnsoft))) + " (starts at "+format(tmp.Us.softStart)+(tmp.Us.effect.gte(tmp.Us.softStart2)?", "+format(tmp.Us.softStart2):"")+(tmp.Us.effect.gte(tmp.Us.softStart3)?", "+format(tmp.Us.softStart3):"")+")"
        }
        return desc
    },
    recoveryGain() {
        let x = player.Us.severity
        let eff = x.max(2).log(2).div(256).sub(4).pow10()
        if (eff.gte("e750")) eff = eff.div("e750").pow(0.35).mul("e750")
        if (eff.gte("e2100")) eff = eff.div("e2100").pow(0.35).mul("e2100")
        if (hasUpgrade("Us",54)) {
            let exp = 0.75
            if (player.Us.trna.gte("2e1206") || hasMilestone("uv",16)) exp *= 0.75
            if (player.Us.trna.gte("2e1295") || hasMilestone("uv",16)) exp *= 0.75
            if (eff.gte("e8000")) eff = eff.div("e8000").pow(exp).mul("e8000")
        }
        if (hasUpgrade("Us",84)) {
            let exp = 0.75
            if (player.Us.trna.gte("e1581") || hasMilestone("uv",16)) exp *= 0.75
            if (player.Us.trna.gte("e1664") || hasMilestone("uv",16)) exp *= 0.9
            if (eff.gte("ee4")) eff = eff.div("ee4").pow(exp).mul("ee4")
        }
        if (hasUpgrade("Us",103)) {
            let exp = 0.75
            if (eff.gte("e82e4")) eff = eff.div("e82e4").pow(exp).mul("e82e4")
        }
        if (hasMilestone("uv",16)) eff = eff.pow(tmp.uv.milestones[16].effect)
        if (player.Us.trnaTime[0]>0) eff = eff.div(tmp.Us.clickables[11].effect)
      return eff
    },
    recoveryEff() {
        let b = player.Us.recoveries
        if (b.gte("e2100")) b = b.log10().div(2100).pow(1.03).mul(2100).pow10().div("e2100").pow(3.5).mul("e2100")
        if (b.gte("e750")) b = b.log10().div(750).pow(1.1).mul(750).pow10().div("e750").pow(3.5).mul("e750")
        let eff = b.add(1).log10().div(30)
        if (eff.gte(1)) eff = eff.pow(0.8).sub(1).mul(3).pow10()
        if (eff.gte(1e6)) eff = eff.log10().div(6).pow(1.5).mul(6).pow10().div(1e6).pow(4).mul(1e6)
        if (eff.gte(1e20)) eff = eff.div(1e20).pow(12).mul(1e20)
        if (eff.gte("ee3")) eff = eff.div("ee3").pow(2).mul("ee3")
        if (eff.gte("e25e3")) eff = eff.div("e25e3").pow(1.5).mul("e25e3")
        if (player.Us.trnaTime[1]>0) eff = eff.root(tmp.Us.clickables[12].effect)
        if (hasUpgrade("Us",102)) eff = eff.pow(tmp.Us.upgrades[102].effect)
        if (hasUpgrade("Us",105)) eff = eff.pow(tmp.Us.rrnaEff[1])
        if (hasUpgrade("Ud",15)) eff = eff.pow(tmp.Ud.upgrades[15].effect)
        if (hasMilestone("uv",16)) eff = eff.min(tmp.Us.effect)
        return eff
    },
    recoveryEff2() {
        let b = player.Us.recoveries
        if (b.gte("e2100")) b = b.log10().div(2100).pow(1.05).mul(2100).pow10().div("e2100").pow(5).mul("e2100")
        if (b.gte("e750")) b = b.log10().div(750).pow(1.15).mul(750).pow10().div("e750").pow(5).mul("e750")
        if (b.lt(Decimal.pow(2,1024))) return decimalZero
        let eff = b.log(2).sub(1024).div(150).pow(2).max(0)
        if (eff.gte(10)) eff = eff.sub(9).pow(0.4).mul(2).sub(1).pow10()
        if (eff.gte(1e50)) eff = eff.div(1e50).pow(3).mul(1e50)
        if (eff.gte("e2500")) eff = eff.log10().div(2500).pow(1.25).mul(2500).pow10().div("e2500").pow(1.25).mul("e2500")
        if (eff.gte("e8000")) eff = eff.log10().div(8000).pow(1.25).mul(8000).pow10().div("e8000").pow(2).mul("e8000")
        if (player.Us.trnaTime[1]>0) eff = eff.root(tmp.Us.clickables[12].effect)
        if (hasUpgrade("Us",102)) eff = eff.pow(tmp.Us.upgrades[102].effect)
        if (hasUpgrade("Us",105)) eff = eff.pow(tmp.Us.rrnaEff[1])
        if (hasUpgrade("Ud",15)) eff = eff.pow(tmp.Ud.upgrades[15].effect)
        if (hasMilestone("Us",45)) eff = eff.pow(0.8)
        if (hasMilestone("uv",16)) eff = eff.min(tmp.e.buyables[92].effect)
        return eff
    },
    severityEff() {
        let x = player.Us.severity
        if (hasMilestone("uv",16)) x = player.Us.bestSev
        let seff = x.add(1).max(1)
        if (hasUpgrade("Us",14)) seff = seff.pow(2)
        if (hasUpgrade("Us",22)) seff = seff.pow(tmp.Us.upgrades[22].effect)
        let exp = tmp.Us.buyables[53].effect.add(1)
        let seff2 = powExp(x.add(1),0.7).pow(0.3)
        if (seff2.gte(1e50)) seff2 = seff2.log10().div(50).pow(0.85).mul(50).pow10().div(1e50).pow(0.4).mul(1e50)
        seff2 = seff2.pow(exp)
        return [seff,seff2]
    },
    symptomEff() {
        let exp = tmp.Us.buyables[63].effect.add(1)
        let eff = player.Us.symptoms.add(1).pow(exp)
        return eff
    },
    a() {//getA
        return tmp.Us.buyables[71].effect
    },
    b() {//getB
        return tmp.Us.buyables[72].effect
    },
    c() {//getC
        return tmp.Us.buyables[73].effect.add(1)
    },
    d() {//getD
        return tmp.Us.buyables[83].effect.add(1)
    },
    x() {//getX
        let eff = tmp.Us.buyables[82].effect
        if (hasUpgrade("Us",64)) eff = eff.mul(tmp.Us.upgrades[64].effect)
        if (hasUpgrade("Us",65)) eff = eff.mul(tmp.Us.upgrades[65].effect)
        if (hasUpgrade("Us",72)) eff = eff.mul(tmp.Us.upgrades[72].effect)
        if (hasUpgrade("Us",81)) eff = eff.mul(tmp.Us.upgrades[81].effect)
        if (hasUpgrade("Us",84)) eff = eff.mul(tmp.Us.upgrades[84].effect)
        if (hasMilestone("Us",26)) eff = eff.mul(tmp.Us.milestones[26].effect)
        if (hasMilestone("Us",27)) eff = eff.mul(tmp.Us.milestones[27].effect)
        if (hasChallenge("Ud",12)) eff = eff.pow(tmp.Ud.challenges[12].rewardEffect)
        if (inChallenge("Ud",12)) eff = player.Ud.points.pow(player.Ud.points.max(10).log10().mul(player.e.mm.max(10).log10().pow(0.25)).div(1e3)).add(1)
        return eff
    },
    y() {//getY 
        let eff = tmp.Us.x.log10().pow(0.5).div(2).sub(1).max(0)
        if (eff.gte(120)) eff = eff.sub(20).log10().pow(2).mul(30)
        if (eff.gte(430)) eff = eff.sub(10).div(30).add(2).pow(0.5).mul(107.5)
        return eff.min(470)
    },
    trnaEff() {
        let exp = decimalOne
        if (player.Us.trnaTime[1]>0) exp = exp.mul(tmp.Us.clickables[12].effect)
        if (hasUpgrade("uv",62)) exp = exp.mul(tmp.uv.upgrades[62].effect)
        if (hasUpgrade("uv",63)) exp = exp.mul(tmp.uv.upgrades[63].effect)
        if (hasUpgrade("uv",64)) exp = exp.mul(tmp.uv.upgrades[64].effect)
        let eff = player.Us.trna.add(1).pow(exp)
        return eff
    },
    trnaEff2() {
        let exp = decimalOne
        if (player.Us.trnaTime[1]>0) exp = exp.mul(tmp.Us.clickables[12].effect2)
        let eff = player.Us.trna.add(10).log10().pow(0.1).div(10).add(1).mul(exp)
        return eff
    },
    trnaBase() {
        let a = tmp.Us.a
        let b = tmp.Us.b
        let c = tmp.Us.c
        let d = tmp.Us.d
        let x = tmp.Us.x
        let y = tmp.Us.y
        let f = player.Us.buyables[81]
        let eff = [a.pow(c).add(b.pow(c)), 
            a.add(b).pow(c), a.mul(b).pow(c.div(1.5)), 
            a.max(1).mul(b).pow(c.div(1.45).add(y.mul(5))), 
            a.max(1).mul(b).mul(x.max(1).log10().div(10).pow(0.5)).pow(c.div(2**0.5).add(y.mul(5))),
            a.max(1).mul(b).mul(d).mul(a.mul(b).mul(d).mul(x).max(1).log10().div(10).pow(0.5)).pow(c.div(1.41).add(y.mul(5))), 
            a.max(1).mul(d).pow(b.max(1).log10().add(x.max(1).log10().pow(0.5)).div(Math.PI).mul(c.div(2).add(y.mul(5))).sub(5)),
            a.max(1).mul(d).pow(b.max(1).log10().add(b.sub(800).max(1).log10().pow(1.1).div(3)).add(x.max(1).log10().pow(0.5)).div(3.1).mul(c.div(2).add(y.mul(5))).sub(5)),
            a.max(1).mul(d).pow(b.max(1).log10().add(b.sub(800).max(1).log10().pow(1.1).div(3)).add(b.sub(2000).max(1).log10().pow(1.2).div(3)).add(x.max(1).log10().pow(0.5)).div(3.1).mul(c.div(2).add(y.mul(5))).sub(5)),
            a.max(1).mul(d).pow(b.sub(3000).max(1).log10().pow(1.3).mul(1.6).add(x.max(1).log10().pow(0.5)).add(1).add(0).div(3.1).mul(c.div(2).add(y.mul(5))).sub(5)),
            a.max(1).mul(d).mul(b.sub(1e4).max(0).div(100).add(10).log10()).pow(b.sub(3000).max(1).log10().pow(y.div(100).add(1.2)).mul(1.6).add(x.max(1).log10().pow(0.5)).add(1).add(0).div(3.1).mul(c.div(2).add(y.mul(5))).sub(5)),
            a.max(1).mul(d).mul(b.sub(14e3).max(0).div(1e5).add(2)).pow(b.sub(3000).max(1).log10().pow(y.div(100).add(1.2)).mul(1.6).add(x.max(1).log10().pow(0.5)).add(1).add(0).div(3.1).mul(c.div(2).add(y.mul(5)))),
            a.max(1).mul(d).mul(b.sub(18e3).max(0).div(3e4).add(2)).pow(b.sub(15000).max(1).log10().pow(y.div(100).add(1.2)).mul(2).add(x.max(1).log10().pow(0.5)).add(1).add(0).div(3).mul(c.div(2).add(y.mul(5)))),
            a.max(1).mul(d).mul(b.sub(25e3).max(0).div(1.5e4).add(2)).pow(b.sub(30000).max(1).log10().pow(y.div(100).add(1.2)).mul(3).add(x.max(1).log10().pow(0.5)).add(1).add(0).div(3).mul(c.div(2).add(y.mul(5)))),
            a.max(1).mul(d).mul(b.sub(5e4).max(0).div(5e3).add(2)).pow(b.sub(5e4).max(1).log10().pow(y.div(100).add(1.2)).mul(3.6).add(x.max(1).log10().pow(0.5)).add(1).add(0).div(3).mul(c.div(2).add(y.mul(5)))),
            a.max(1).mul(d).mul(b.sub(1e5).max(0).div(3e3).add(2)).pow(b.sub(8e4).max(1).log10().pow(y.div(100).add(1.2)).mul(4).add(x.max(1).log10().pow(0.5)).add(1).add(0).div(3).mul(c.div(2).add(y.mul(5)))),
            a.max(1).mul(d).mul(b.sub(3e5).max(0).div(1e3).add(2)).pow(b.sub(8e4).max(1).log10().pow(y.div(100).add(1.2)).mul(4).add(x.max(1).log10().pow(0.5)).add(1).add(0).div(3).mul(c.div(2).add(y.mul(7).sub(90)))),
            a.max(1).mul(d).mul(b.sub(8e5).max(0).div(500).add(2)).pow(b.sub(8e4).max(1).log10().pow(y.div(100).add(1.2)).mul(4).add(x.max(1).log10().pow(0.5)).add(1).add(0).div(3).mul(c.div(1.8).add(y.mul(7).sub(120))))
        ]
        return eff[f]
    },
    trnaGain() {
        let eff = tmp.Us.trnaBase.mul(tmp.Us.x).mul(tmp.uv.virusEff)
        if (player.Us.trnaTime[1]>0 && !hasUpgrade("Us",85)) eff = eff.div(10000)
        return eff
    },
    trnaFormula(f) {
        let a = colorText("span","#C00000","a")
        let b = colorText("span","#0000C0","b")
        let c = colorText("span","#C000C0","c")
        let d = colorText("span","#808050","d")
        let x = colorText("span","#308030","x")
        let y = colorText("span","#50A0A0","y")
        let exp = "<sup>"+c+"</sup>"
        let dis = [a+exp+"+"+b+exp, 
            "("+a+"+"+b+")"+exp, 
            "("+a+b+")<sup>"+c+"/1.5</sup>", 
            "("+a+b+")<sup>"+c+"/1.45+5"+y+"</sup>", 
            "("+a+b+"√(log10("+x+")/10))<sup>"+c+"/√2+5"+y+"</sup>", 
            "("+a+b+d+"√(log10("+a+b+d+x+")/10))<sup>"+c+"/1.41+5"+y+"</sup>", 
            "("+a+d+")<sup>(log10("+b+")+√log10("+x+"))("+c+"/2+5"+y+")/π-5</sup>",
            "("+a+d+")<sup>(log10("+b+")+log10("+b+"-800)<sup>1.1</sup>/3+√log10("+x+"))("+c+"/2+5"+y+")/3.1-5</sup>",
            "("+a+d+")<sup>(log10("+b+")+log10("+b+"-800)<sup>1.1</sup>/3+log10("+b+"-2,000)<sup>1.2</sup>/3+√log10("+x+"))("+c+"/2+5"+y+")/3.1-5</sup>",
            "("+a+d+")<sup>(1.6log10("+b+"-3,000)<sup>1.3</sup>+√log10("+x+")+1)("+c+"/2+5"+y+")/3.1-5</sup>",
            "("+a+d+"log10(("+b+"-10,000)/100+10))<sup>(1.6log10("+b+"-3,000)<sup>"+y+"/100+1.2</sup>+√log10("+x+")+1)("+c+"/2+5"+y+")/3.1-5</sup>",
            "("+a+d+"(("+b+"-14,000)/100,000+2))<sup>(1.6log10("+b+"-3,000)<sup>"+y+"/100+1.2</sup>+√log10("+x+")+1)("+c+"/2+5"+y+")/3.1</sup>",
            "("+a+d+"(("+b+"-18,000)/30,000+2))<sup>(2log10("+b+"-15,000)<sup>"+y+"/100+1.2</sup>+√log10("+x+")+1)("+c+"/2+5"+y+")/3</sup>",
            "("+a+d+"(("+b+"-25,000)/15,000+2))<sup>(3log10("+b+"-30,000)<sup>"+y+"/100+1.2</sup>+√log10("+x+")+1)("+c+"/2+5"+y+")/3</sup>",
            "("+a+d+"(("+b+"-50,000)/5,000+2))<sup>(3.6log10("+b+"-50,000)<sup>"+y+"/100+1.2</sup>+√log10("+x+")+1)("+c+"/2+5"+y+")/3</sup>",
            "("+a+d+"(("+b+"-100,000)/3,000+2))<sup>(4log10("+b+"-80,000)<sup>"+y+"/100+1.2</sup>+√log10("+x+")+1)("+c+"/2+5"+y+")/3</sup>",
            "("+a+d+"(("+b+"-300,000)/1,000+2))<sup>(4log10("+b+"-80,000)<sup>"+y+"/100+1.2</sup>+√log10("+x+")+1)("+c+"/2+7"+y+"-90)/3</sup>",
            "("+a+d+"(("+b+"-800,000)/5,000+2))<sup>(4log10("+b+"-80,000)<sup>"+y+"/100+1.2</sup>+√log10("+x+")+1)("+c+"/1.8+7"+y+"-120)/3</sup>"
        ]
        return "("+dis[f]+")"+x
    },
    rrnaVar() {
        let tetbase = tmp.Us.buyables[111].effect.add(tmp.Us.buyables[112].effect).add(tmp.Us.buyables[113].effect).add(tmp.Us.buyables[114].effect).add(10)
        let slogMult = new Decimal(0.8)
        let slogSub = decimalOne
        if (hasMilestone("Us",55) && player.e.mm.gte("e5050")) slogSub = slogSub.div(1.01)
        if (hasUpgrade("Ud",21)) slogSub = slogSub.div(1.005)
        let exp = tmp.Us.buyables[101].effect.add(tmp.Us.buyables[102].effect).add(tmp.Us.buyables[103].effect).add(tmp.Us.buyables[104].effect).add(5)
        if (hasUpgrade("Us",114)) exp = exp.add(0.1)
        if (hasUpgrade("Us",115)) {
            if (tmp.Us.rrnaAmt.gte(70150)) exp = exp.add(0.1)
            if (tmp.Us.rrnaAmt.gte(98500)) exp = exp.add(0.1)
            if (tmp.Us.rrnaAmt.gte(157700)) tetbase = tetbase.add(1)
        }
        if (hasMilestone("Us",50)) exp = exp.add(tmp.Us.milestones[50].effect)
        if (hasMilestone("Us",54)) exp = exp.add(tmp.Us.milestones[54].effect)
        if (hasUpgrade("Ud",12)) exp = exp.add(tmp.Ud.upgrades[12].effect)
        if (hasChallenge("Ud", 11)) exp = exp.add(tmp.Ud.challenges[11].rewardEffect)
        if (hasChallenge("Ud", 21)) exp = exp.mul(tmp.Ud.challenges[21].rewardEffect)
        return [tetbase,slogMult,slogSub,exp]
    },
    rrnaAmt() {
        let eff = Decimal.tetrate(tmp.Us.rrnaVar[0],slog(player.Us.rrna.max(1)).mul(tmp.Us.rrnaVar[1]).sub(tmp.Us.rrnaVar[2])).pow(tmp.Us.rrnaVar[3])
        return eff
    },
    rrnaGain() {
        if (player.e.mm.lt(1e223)) return decimalZero
        let eff = player.e.mm.div(1e223).pow(0.1).sub(1).mul(tmp.Us.buyables[91].effect).mul(tmp.Us.buyables[92].effect).mul(tmp.Us.buyables[93].effect).mul(tmp.Us.buyables[94].effect)
        if (hasUpgrade("Us",72)) eff = eff.mul(3)
        if (hasUpgrade("Us",73)) eff = eff.mul(3)
        if (hasUpgrade("ct",552)) eff = eff.mul(tmp.ct.upgrades[552].effect)
        if (inChallenge("Ud",21)) eff = player.Ud.points.pow(player.Ud.points.max(10).log10().mul(player.e.crna.max(10).log10().pow(0.75)).div(1e3))
        return eff
    },
    rrnaEff() {
        let amt = tmp.Us.rrnaAmt
        let mut = player.e.mu.mul(player.e.mu2.pow(2)).mul(player.Us.mu.mul(player.Us.mu2.pow(2)))
        if (mut.gte(195e8)) mut = mut.div(195e8).pow(2).mul(195e9).sub(195e8*9)
        let exp = mut.pow(0.1)
        if (hasUpgrade("Ud",15)) exp = exp.mul(1.1)
        let exp2 = mut.pow(0.05).mul(-0.05)
        let eff = amt.add(1).pow(exp)
        let eff2 = amt.add(10).log10().pow(exp2)
        return [eff,eff2]
    },
    trnaMutEff() {
        let eff = player.Us.mu.pow(0.75).div(20).add(1)
        return eff
    },
    sarsMutEff() {
        let eff = player.Us.mu2.pow(1.1).div(10).add(1)
        return eff
    },
    getTotaltRNA() {
        let t = decimalZero
        for (i = 0; i < player.Us.trnaBuy.length; i++){
            t = t.add(player.Us.buyables[player.Us.trnaBuy[i]])
        }
        return t
    },
    update(diff) {
        if (false) player.Us.severity = player.Us.severity.add(tmp.Us.effect.mul(diff))
        else player.Us.severity = getLogisticAmount(player.Us.severity, tmp.Us.effect, tmp.Us.recoveryEff, diff)
        if (player.Us.severity.gte(Decimal.pow(2,1024))) {
            let x = player.Us.recoveries.add(tmp.Us.recoveryGain.mul(diff))
            player.Us.recoveries = x
        }
        if (hasMilestone("Us",0) && player.Us.auto) {
            layers.Uu.buyables[43].buy()
            layers.Uu.buyables[51].buy()
            layers.Uu.buyables[52].buy()
            layers.Uu.buyables[53].buy()
        }
        if (hasMilestone("Us",0) && player.Us.auto2) {
            layers.Uu.buyables[62].buy()
            layers.Uu.buyables[63].buy()
        }
        if (hasMilestone("Us",6) && player.Us.automult) {
            layers.Us.buyables[11].buy()
        }
        if (hasMilestone("Us",7) && player.Us.autoatom) {
            layers.Us.buyables[12].buy()
            layers.Us.buyables[13].buy()
            layers.Us.buyables[21].buy()
            layers.Us.buyables[22].buy()
            layers.Us.buyables[23].buy()
        }
        if (hasMilestone("Us",10) && player.Us.autosymp) {
            layers.Us.buyables[31].buy()
        }
        if (hasMilestone("Us",56) && player.Us.autounr && tmp.Us.clickables[12].canClick) {
            layers.Us.clickables[12].onClick()
        }
        if (hasMilestone("uv",14) && player.Us.automut && player.Us.mutCool == 0) {
            if (tmp.e.clickables[31].canClick) layers.e.clickables[31].onClick(true)
            if (tmp.e.clickables[32].canClick) layers.e.clickables[32].onClick(true)
            if (tmp.e.clickables[31].canClick || tmp.e.clickables[32].canClick) player.Us.mutCool = tmp.uv.buyables[31].effect.toNumber()
        }
        if (hasMilestone("uv",16) && player.Us.autotmut && player.Us.tmutCool == 0) {
            if (tmp.Us.clickables[31].canClick) layers.Us.clickables[31].onClick(true)
            if (tmp.Us.clickables[32].canClick) layers.Us.clickables[32].onClick(true)
            if (tmp.Us.clickables[31].canClick || tmp.Us.clickables[32].canClick) player.Us.tmutCool = tmp.uv.buyables[32].effect.toNumber()
        }
        if (hasMilestone("Us",12)) {
            player.Us.trna = player.Us.trna.add(tmp.Us.trnaGain.mul(diff))
        }
        let s = decimalZero
            for (i = 0; i < player.Us.sympBuy.length; i++){
                s = s.add(player.Us.buyables[player.Us.sympBuy[i]])
            }
            for (i = 0; i < player.Us.trnaTime.length; i++){
                player.Us.trnaTime[i] = Math.max(player.Us.trnaTime[i]-diff,0)
                player.Us.cTime[i] = Math.max(player.Us.cTime[i]-diff,0)
            }
            if (hasMilestone("Us",20) && player.Us.autosev && player.Us.maxCool==0) {
                layers.Us.clickables[21].onClick()
            }
            if (hasMilestone("uv",10) && player.Us.autotrna && player.Us.trnaCool==0) {
                layers.Us.clickables[22].onClick()
            }
            if (hasMilestone("uv",20) && player.Us.autorrna && player.Us.rrnaCool==0) {
                layers.Us.clickables[23].onClick()
            }
            if (hasMilestone("Us",23)) player.Us.trnaTime[0] = 10
        if (hasMilestone("uv",14)) {
            player.Us.bestCy = player.Us.bestCy.max(tmp.e.Cyeffect)
            player.Us.bestGu = player.Us.bestGu.max(tmp.e.Gueffect)
        }
        if (hasMilestone("uv",16)) {
            player.Us.bestSev = player.Us.bestSev.max(player.Us.severity)
        }
        if (hasUpgrade("Us",105)) {
            player.Us.rgain = tmp.Us.rrnaAmt
            player.Us.rrna = player.Us.rrna.add(tmp.Us.rrnaGain.mul(diff+0.00000000001))
            let ad = Decimal.tetrate(tmp.Us.rrnaVar[0],slog(player.Us.rrna.max(1)).mul(tmp.Us.rrnaVar[1]).sub(tmp.Us.rrnaVar[2])).pow(tmp.Us.rrnaVar[3])
            player.Us.rgain = ad.sub(player.Us.rgain).div(diff+0.00000000001)
        }
        player.Us.symptoms = s
        player.Us.maxCool = Math.max(player.Us.maxCool-diff,0)
        player.Us.trnaCool = Math.max(player.Us.trnaCool-diff,0)
        player.Us.rrnaCool = Math.max(player.Us.rrnaCool-diff,0)
        player.Us.upgCool = Math.max(player.Us.upgCool-diff,0)
        player.Us.mutCool = Math.max(player.Us.mutCool-diff,0)
        player.Us.tmutCool = Math.max(player.Us.tmutCool-diff,0)
        let d = [0.01,0.1,0.5,1]
        player.Us.mutPer = d[player.Us.mutPercent % 4]
        player.Us.tmutPer = d[player.Us.tmutPercent % 4]
    },
    tabFormat: {
        "Main": {
        content:[
            function() {if (player.tab == "Us") return "main-display"},
            "prestige-button",
            "blank",
            ["display-text", 
            function() {
                let a = "You have " + layerText("h2", "Us", format(player.Us.severity)) +  ' unvaxxed severity, which boosts RNA gain by ' + layerText("h2", "Us", format(tmp.Us.severityEff[0])) + ', and atom gain by ' + layerText("h2", "Us", format(tmp.Us.severityEff[1]))+"<br>"
                let b = "You have <h2 style='color:#A00000;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.h) + "</h2> Hydrogen ("+colorText("h2", "#A00000", formatWhole(tmp.e.buyables[81].effect))+"/s)<br>"
                let c = "You have <h2 style='color:#00A000;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.c) + "</h2> Carbon ("+colorText("h2", "#00A000", formatWhole(tmp.e.buyables[82].effect))+"/s)<br>"
                let d = "You have <h2 style='color:#00A0A0;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.n) + "</h2> Nitrogen ("+colorText("h2", "#00A0A0", formatWhole(tmp.e.buyables[83].effect))+"/s)<br>"
                let e = "You have <h2 style='color:#0000A0;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.o) + "</h2> Oxygen ("+colorText("h2", "#0000A0", formatWhole(tmp.e.buyables[91].effect))+"/s)<br>"
                let f = "You have <h2 style='color:#BB5500;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.ph) + "</h2> Phosphorus ("+colorText("h2", "#BB5500", formatWhole(tmp.e.buyables[92].effect))+"/s)<br>"
                let g = "You have <h2 style='color:#A0A000;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.at) + "</h2> Atomic RNA<br>"
                return a+b+c+d+e+f+g
            }
            ],
            ["buyables", [1,2,3]],
            ["upgrades", [1,2,3,4,5]],
            ]
        },
        "Milestones": {
            content:[
                function() {if (player.tab == "Us") return "main-display"},
            "prestige-button",
            "blank",
            ["raw-html", function() {if (player.tab == "Us") return "You have " + layerText("h2", "Us", format(player.Us.severity)) +  ' unvaxxed severity, which boosts RNA gain by ' + layerText("h2", "Us", format(tmp.Us.severityEff[0])) + ', and atom gain by ' + layerText("h2", "Us", format(tmp.Us.severityEff[1]))}],
            "milestones",
            ],
        },
        "Severe Symptoms": {
            content:[
                function() {if (player.tab == "Us") return "main-display"},
            "prestige-button",
            "blank",
            ["display-text", 
            function() {
                let a = "You have " + layerText("h2", "Us", format(player.Us.severity)) +  ' unvaxxed severity, which boosts RNA gain by ' + layerText("h2", "Us", format(tmp.Us.severityEff[0])) + ', and atom gain by ' + layerText("h2", "Us", format(tmp.Us.severityEff[1]))+"<br>"
                let b = "You have " + layerText("h2", "Us", formatWhole(player.Us.symptoms)) +  ' severe ' + pluralize(player.Us.symptoms,'symptom','symptoms',true)+ ", which boost 'Demise' (symptom gain) by ^"+ layerText("h2", "Us", format(tmp.Us.symptomEff))
                return a+b
            }
            ],
            ["clickable", 21],
            ["buyables", [4,5,6]],
            ],
            unlocked() { return hasMilestone("Us",2) }
        },
        "tRNA": {
            content:[
                function() {if (player.tab == "Us") return "main-display"},
            "prestige-button",
            "blank",
            ["display-text", 
            function() {
                let a = "You have " + layerText("h2", "Us", format(player.Us.severity)) +  ' unvaxxed severity, which boosts RNA gain by ' + layerText("h2", "Us", format(tmp.Us.severityEff[0])) + ', and atom gain by ' + layerText("h2", "Us", format(tmp.Us.severityEff[1]))+"<br>"
                let b = "You have <h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.mrna) + "</h2> mRNA (<h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + format(tmp.e.mrgain)+"</h2>/s)<br>"
                let c = "You have " + layerText("h2", "Us", formatWhole(player.Us.trna)) +  " unvaxxed tRNA, which boosts mRNA gain by "+ colorText("h2", player.Us.trnaTime[1]>0?"#2894a3":"#baa25a", format(tmp.Us.trnaEff))+(hasUpgrade("Ud",35)?" and raises MMNA effect to ^"+ colorText("h2", player.Us.trnaTime[1]>0?"#2894a3":"#baa25a", format(tmp.Us.trnaEff2)):"")+"<br>"
                let d = "You are gaining " + layerText("h2", "Us", formatWhole(tmp.Us.trnaGain)) +  " unvaxxed tRNA per second (hold shift to see formula)<br>"
                let y = colorText("span","#50A0A0","y")+" = √log10("+colorText("span","#308030","x")+")/2-1 = "+format(tmp.Us.y)
                if (tmp.Us.y.gte(120)) y = colorText("span","#50A0A0","y") + " = 30log10(√log10("+colorText("span","#308030","x")+")/2-21)<sup>2</sup> = "+format(tmp.Us.y)
                if (tmp.Us.y.gte(430)) y = colorText("span","#50A0A0","y") + " = min(107.5√(log10(√log10("+colorText("span","#308030","x")+")/2-21)<sup>2</sup>+5/3),470) = "+format(tmp.Us.y)
                let e = shiftDown?colorText("span","#C00000","a")+" = "+format(tmp.Us.a)+", "+colorText("span","#0000C0","b")+" = "+format(tmp.Us.b)+", "+colorText("span","#C000C0","c")+" = "+format(tmp.Us.c)+", "+colorText("span","#808050","d")+" = "+format(tmp.Us.d)+", "+colorText("span","#308030","x")+" = "+format(tmp.Us.x)+", "+y+"<br>":""
                let f = shiftDown?"Gain: "+layers.Us.trnaFormula(player.Us.buyables[81])+"<br>":""
                return a+b+c+d+e+f
            }
            ],
            ["clickables",[1]],
            ["clickable", 22],
            ["buyables", [7,8]],
            ["upgrades", [6,7,8,9,10]],
            ],
            unlocked() { return hasMilestone("Us",12) }
        },
        "Mutations": {
            content: [
                ["raw-html", 
                function () {
                    if (player.tab == "Us" && player.subtabs.Us.mainTabs == "Mutations") {
                    let a = "You have <h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.mrna) + "</h2> mRNA, which boosts atom gain by " + format(tmp.e.mreff)+"<br>"
                    let b = "You are gaining <h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + format(tmp.e.mrgain) + "</h2> mRNA per second<br>"
                    let c ="You have <h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.mm) + "</h2> MMNA (Limit: "+formatWhole(tmp.e.mmlim)+"), which boosts mRNA gain by " + format(tmp.e.mmeff)+"<br>"
                    let d = "Attempt amount:"+formatWhole(tmp.e.clickables.getAttemptAmount.mul(player.Us.mutPer).max(1))+"x ("+formatWhole(layers.e.clickables.getAttemptAmount(true))+" max)"
                    return a+b+c+d
                    }
                }],
                ["clickable",41],
                ["layer-proxy", 
                    ["e",
                    [
                        function () {if (player.tab == "Us" && player.subtabs.Us.mainTabs == "Mutations") return ["row",[["buyable",102],["buyable",103],["buyable",104],["buyable",105]]]},
                        function () {if (player.tab == "Us" && player.subtabs.Us.mainTabs == "Mutations") return ["clickables",[3]]},
                    ]
                    ]
                ],
                "blank",
            ],
            buttonStyle: {"border-color": "#00AA55"},
            unlocked() {return hasMilestone("uv",8)}
        },
        "tRNA Mutations": {
            content:[
                function() {if (player.tab == "Us") return "main-display"},
            "prestige-button",
            "blank",
            ["display-text", 
            function() {
                let a = "You have " + layerText("h2", "Us", format(player.Us.severity)) +  ' unvaxxed severity, which boosts RNA gain by ' + layerText("h2", "Us", format(tmp.Us.severityEff[0])) + ', and atom gain by ' + layerText("h2", "Us", format(tmp.Us.severityEff[1]))+"<br>"
                let b = "You have <h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.mrna) + "</h2> mRNA (<h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + format(tmp.e.mrgain)+"</h2>/s)<br>"
                let c = "You have " + layerText("h2", "Us", formatWhole(player.Us.trna)) +  " unvaxxed tRNA, which boosts mRNA gain by "+ colorText("h2", player.Us.trnaTime[1]>0?"#2894a3":"#baa25a", format(tmp.Us.trnaEff))+(hasUpgrade("Ud",35)?" and raises MMNA effect to ^"+ colorText("h2", player.Us.trnaTime[1]>0?"#2894a3":"#baa25a", format(tmp.Us.trnaEff2)):"")+"<br>"
                let d = "You are gaining " + layerText("h2", "Us", formatWhole(tmp.Us.trnaGain)) +  " unvaxxed tRNA per second (hold shift to see formula)<br>"
                let e = shiftDown?colorText("span","#C00000","a")+" = "+format(tmp.Us.a)+", "+colorText("span","#0000C0","b")+" = "+format(tmp.Us.b)+", "+colorText("span","#C000C0","c")+" = "+format(tmp.Us.c)+", "+colorText("span","#808050","d")+" = "+format(tmp.Us.d)+", "+colorText("span","#308030","x")+" = "+format(tmp.Us.x)+", "+colorText("span","#50A0A0","y")+" = √log10("+colorText("span","#308030","x")+")/2-1 = "+format(tmp.Us.y)+"<br>":""
                let f = shiftDown?"Gain: "+layers.Us.trnaFormula(player.Us.buyables[81])+"<br>":""
                return a+b+c+d+e+f
            }
            ],
            "blank",
            ["raw-html", 
                function () {
                    if (player.tab == "Us" && player.subtabs.Us.mainTabs == "tRNA Mutations") {
                    let a = "You have " + layerText("h2", "Us", formatWhole(player.Us.mu)) +" tRNA"+pluralize(player.Us.mu,' Mutation',' Mutations',true)+", which "+pluralize(player.Us.mu,'makes','make',true)+" mutations "+ layerText("h2", "Us", format(tmp.Us.trnaMutEff))+"x stronger<br>"
                    let b = "You have " + layerText("h2", "Us", formatWhole(player.Us.mu2)) +" SARS"+pluralize(player.Us.mu2,' Mutation',' Mutations',true)+", which "+pluralize(player.Us.mu2,'makes','make',true)+" corona mutations "+ layerText("h2", "Us", format(tmp.Us.sarsMutEff))+"x stronger<br>"
                    let c ="You have <h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.mm) + "</h2> MMNA (Limit: "+formatWhole(tmp.e.mmlim)+") (<h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>"+format(tmp.e.mm)+"</h2>/s)<br>"
                    let d = "Attempt amount:"+formatWhole(tmp.Us.clickables.getAttemptAmount.mul(player.Us.tmutPer).max(1))+"x ("+formatWhole(layers.Us.clickables.getAttemptAmount(true))+" max)"
                    return a+b+c+d
                    }
                }],
                ["clickable",42],
            ["clickables",[3]],
            ],
            shouldNotify() {return tmp.Us.clickables[31].canClick || tmp.Us.clickables[32].canClick},
            unlocked() { return hasMilestone("Us",22) }
        },
        "rRNA": {
            content:[
                function() {if (player.tab == "Us") return "main-display"},
            "prestige-button",
            "blank",
            ["display-text", 
            function() {
                let a = "You have " + layerText("h2", "Us", format(player.Us.severity)) +  ' unvaxxed severity, which boosts RNA gain by ' + layerText("h2", "Us", format(tmp.Us.severityEff[0])) + ', and atom gain by ' + layerText("h2", "Us", format(tmp.Us.severityEff[1]))+"<br>"
                let b = "You have <h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>" + formatWhole(player.e.mm) + "</h2> MMNA (Limit: "+formatWhole(tmp.e.mmlim)+") (<h2 style='color:#00AA55;text-shadow:0px 0px 10px;'>"+format(tmp.e.mm)+"</h2>/s)<br>"
                let c = "You have " + colorText("h2", "#4156a5", format(tmp.Us.rrnaAmt)) + ' mutated rRNA ('+colorText("h2", "#4156a5", format(player.Us.rrna))+' base), which boosts MMNA gain by '+colorText("h2", "#4156a5", format(tmp.Us.rrnaEff[0]))+' and raises boosted recovery effects to ^'+colorText("h2", "#4156a5", format(tmp.Us.rrnaEff[1]))+" (based on All Mutation types)<br>"
                let d = "You are gaining " + colorText("h2", "#4156a5", format(player.Us.rgain)) + ' mutated rRNA per second ('+colorText("h2", "#4156a5", format(tmp.Us.rrnaGain))+'/s base, starts at '+format(1e223)+' MMNA) (hold shift to see formula).<br>'
                let e = shiftDown?'Amount: (<sup>slog10(Base)*'+format(tmp.Us.rrnaVar[1])+'-'+format(tmp.Us.rrnaVar[2])+'</sup>'+format(tmp.Us.rrnaVar[0])+')<sup>'+format(tmp.Us.rrnaVar[3])+'</sup>':''
                let f = "<br>Buying an upgrade"+(hasMilestone("uv",18)?"":" or buyable")+" sets mutated rRNA amount to 0"
                return a+b+c+d+e+f
            }
            ],
            ["clickable",23],
            ["buyables", [9,10,11,12]],
            ["upgrades", [11,12,13,14,15]],
            ],
            buttonStyle: {"border-color": "#4156a5"},
            unlocked() { return hasUpgrade("Us",105) }
        },
    },
    milestones: {
        0: {
            requirementDescription() {return "5 unvaxxed symptoms (1)"},
            toggles: [["Us","auto"]],
            effectDescription() {return "Autobuy first 2 rows of Enzyme Buyables."},
            done() { return player.Us.points.gte(5) }
        },
        1: {
            requirementDescription() {return "15 unvaxxed symptoms (2)"},
            toggles: [["Us","auto2"]],
            effectDescription() {return "Autobuy 3rd row of Enzyme Buyables, Adenine boosts 'SelRNA'."},
            done() { return player.Us.points.gte(15) }
        },
        2: {
            requirementDescription() {return "54 unvaxxed symptoms (3)"},
            effectDescription() {return "Unlock Severe Symptoms."},
            done() { return player.Us.points.gte(54) }
        },
        3: {
            requirementDescription() {return "8 severe symptoms (4)"},
            effect() {
                let eff = player.Us.symptoms.pow(1.2).div(2)
                if (eff.gte(700)) eff = eff.div(700).pow(0.9).mul(700).add(300).mul(0.7)
                return eff
            },
            effectDescription() {return "Severe symptoms add unvaxxed symptoms to unvaxxed severity gain.<br>Currently: +"+format(milestoneEffect("Us",3))},
            done() { return player.Us.symptoms.gte(8) }
        },
        4: {
            requirementDescription() {return format("e556")+" unvaxxed severity (5)"},
            effect() {
                let eff = player.e.diseases.max(10).log10().div(1e70).add(1).pow(0.2)
                if (eff.gte("ee19")) eff = eff.log10().div(1e19).pow(0.4).mul(1e19).pow10()
                if (eff.gte("ee21")) eff = eff.log10().div(1e21).pow(0.3).mul(1e21).pow10()
                if (eff.gte("ee37")) eff = eff.log10().div(1e37).pow(0.2).mul(1e37).pow10().min("ee80")
                if (hasMilestone("Ud",9)) eff = slogadd(player.e.diseases.max(1e10),-3).add(1).pow(0.5)
                let eff2 = player.Uu.buyables[53]
                return [eff,eff2]
            },
            effectDescription() {
                let eff = format(tmp.Us.milestones[4].effect[0])+"x"
                if (hasMilestone("Ud",9)) eff = "^"+format(tmp.Us.milestones[4].effect[0])
                return "Infectious diseases boost unvaxxed severity gain, each 'Enzyme Uncoating' adds 1 'Disease Boost'.<br>Currently: "+eff+", +"+formatWhole(tmp.Us.milestones[4].effect[1])
            },
            done() { return player.Us.severity.gte("e556") }
        },
        5: {
            requirementDescription() {return "5 mRNA (6)"},
            effect() {
                let eff = tmp.e.mreff.pow(0.01)
                return eff
            },
            effectDescription() {return "mRNA boosts atom gain at ^0.01 effect, change PrP 1st effect to exponent boost to unvaxxed prions, 'Fatal Prions' 2nd effect is exponent.<br>Currently: "+format(tmp.Us.milestones[5].effect)+"x"},
            done() { return player.e.mrna.gte(5) && inChallenge("ct",32) }
        },
        6: {
            requirementDescription() {return "125 unvaxxed symptoms (7)"},
            toggles: [["Us","automult"]],
            effectDescription() {return "Autobuy 'Severity Multiplier' and it costs nothing."},
            done() { return player.Us.points.gte(125) }
        },
        7: {
            requirementDescription() {return "150 unvaxxed symptoms (8)"},
            toggles: [["Us","autoatom"]],
            effectDescription() {return "Autobuy Atom Exponent buyables and they cost nothing."},
            done() { return player.Us.points.gte(150) }
        },
        8: {
            requirementDescription() {return format("e4178")+" unvaxxed severity (9)"},
            effect() {
                let x = player.Us.severity
                if (hasMilestone("uv",16)) x = player.Us.bestSev
                let eff = powExp(x,0.5).pow(0.1).div(1e4)
                if (player.e.mrna.gte("e711500")) eff = eff.pow(10)
                if (hasMilestone("Us",40)) eff = eff.pow(3)
                if (hasMilestone("Us",49)) eff = powExp(eff,1.15)
                if (hasMilestone("Us",52) && player.e.mm.gte("e1230")) eff = powExp(eff,1.05)
                if (hasMilestone("Us",54) && player.e.mm.gte("e3030")) eff = powExp(eff,1.1)
                return eff
            },
            effectDescription() {return "Unvaxxed severity boosts mRNA gain.<br>Currently: "+format(tmp.Us.milestones[8].effect)+"x"},
            done() { return player.Us.severity.gte("e4178") }
        },
        9: {
            requirementDescription() {return format("e9735")+" unvaxxed severity (10)"},
            effect() {
                let eff = player.Uu.buyables[13].add(1).pow(tmp.Us.milestones[9].exp)
                return eff
            },
            exp() {
                let eff = decimalTwo
                if (hasUpgrade("Us",71)) eff = eff.add(player.Uu.buyables[23].div(100))
                return eff
            },
            effectDescription() {return "'Disease Boost' base^1.1, 'Enzyme Boost' base+0.27, 'UnPower Boost'^"+format(tmp.Us.milestones[9].exp)+" boosts its base.<br>Currently: "+format(tmp.Us.milestones[9].effect)+"x"},
            done() { return player.Us.severity.gte("e9735") }
        },
        10: {
            requirementDescription() {return "350 unvaxxed symptoms (11)"},
            toggles: [["Us","autosymp"]],
            effectDescription() {return "Autobuy Unvaxxed Symptoms and 'Atomic RNA Exponent' and they reset nothing."},
            done() { return player.Us.points.gte(350) }
        },
        11: {
            requirementDescription() {return format("e21633")+" unvaxxed severity (12)"},
            effect() {
                let eff = Decimal.pow(1.1,player.Us.symptoms.sub(650).max(0))
                return eff
            },
            effectDescription() {return "Each severe symptom after 650 multiplies mRNA gain by 1.1.<br>Currently: "+format(tmp.Us.milestones[11].effect)+"x"},
            done() { return player.Us.severity.gte("e21633") }
        },
        12: {
            requirementDescription() {return format(6e113)+" mRNA (13)"},
            effectDescription() {return "4th US milestone adds 'Max Buyable', mRNA effect^1.5, unlock Unvaxxed tRNA."},
            done() { return player.e.mrna.gte(6e113) && inChallenge("ct",32) }
        },
        13: {
            requirementDescription() {return format("e330")+" mRNA (14)"},
            effect() {
                let eff = player.e.buyables[95]
                return eff
            },
            effectDescription() {return "'RNA Booster' adds 'UpCased mRNA' effective buyables.<br>Currently: +"+formatWhole(tmp.Us.milestones[13].effect)},
            done() { return player.e.mrna.gte("e330") && inChallenge("ct",32) }
        },
        14: {
            requirementDescription() {return format("457e455")+" mRNA (15)"},
            effect() {
                let eff = player.Us.trna.max(10).log10().sub(60).pow(0.5).div(1000).max(0)
                if (eff.gte(0.004)) eff = eff.mul(250).pow(0.5).div(250)
                if (eff.gte(0.00475)) eff = eff.div(0.000475).log10().pow(1.5).mul(0.00475)
                return eff
            },
            effectDescription() {return "Unvaxxed tRNA adds to 'Disease Boost' base.<br>Currently: +"+format(tmp.Us.milestones[14].effect)},
            done() { return player.e.mrna.gte("457e455") && inChallenge("ct",32) }
        },
        15: {
            requirementDescription() {return "2,200 unvaxxed symptoms (16)"},
            effectDescription() {return "Buy max Severe Symptoms and they cost nothing, 'UnDisease' effect is exponent."},
            done() { return player.Us.points.gte(2200) }
        },
        16: {
            requirementDescription() {return format(3e106)+" unvaxxed tRNA (17)"},
            effectDescription() {return "'Severe tRNA' base +0.1."},
            done() { return player.Us.trna.gte(3e106) }
        },
        17: {
            requirementDescription() {return "3 MMNA (18)"},
            effect() {
                let eff = powExp(tmp.e.mmeff,0.5).pow(0.01)
                return eff
            },
            effectDescription() {return "MMNA boosts mRNA gain at 10<sup>√log10(eff)*0.01</sup> effect.<br>Currently: "+format(tmp.Us.milestones[17].effect)+"x"},
            done() { return player.e.mm.gte(3) && inChallenge("ct",32) }
        },
        18: {
            requirementDescription() {return "10 Mutations (19)"},
            effect() {
                let eff = powExp(player.Us.trna.div(1e185).add(1),0.75).pow(0.05)
                if (eff.gte(1e63)) eff = eff.log10().div(63).pow(0.75).mul(63).pow10().div(1e63).pow(0.5).mul(1e63)
                if (eff.gte("e15555")) eff = eff.log10().div(15555).pow(0.75).mul(15555).pow10().div("e15555").pow(0.5).mul("e15555")
                return eff
            },
            effectDescription() {return "Unvaxxed tRNA boosts MMNA gain and limit, 'mRNA Booster' scaling/2, remove 'Atomat' softcap.<br>Currently: "+format(tmp.Us.milestones[18].effect)+"x"},
            done() { return player.e.mu.gte(10) && inChallenge("ct",32) }
        },
        19: {
            requirementDescription() {return format("2.487e2487")+" mRNA (20)"},
            effect() {
                let eff = tmp.e.buyables[101].effect.mul(0.02)
                return eff
            },
            effectDescription() {return "'mRNA Booster' adds to 'UpCased mRNA' base at 2% effect.<br>Currently: +"+format(tmp.Us.milestones[19].effect)},
            done() { return player.e.mrna.gte("2.487e2487") && inChallenge("ct",32) }
        },
        20: {
            requirementDescription() {return "20,000,000 MMNA (21)"},
            effectDescription() {return "'Enzyme Power' base+0.09, mutation scaling/1.1."},
            done() { return player.e.mm.gte(2e7) && inChallenge("ct",32) }
        },
        21: {
            requirementDescription() {return "845,000,000 MMNA (22)"},
            effectDescription() {return "Mutations are 2% stronger."},
            done() { return player.e.mm.gte(845e6) && inChallenge("ct",32) }
        },
        22: {
            requirementDescription() {return "26,500 unvaxxed symptoms (23)"},
            toggles: [["Us","autosev"]],
            effectDescription() {return "Autoclick 'Max All' severe symptoms, unlock tRNA Mutations."},
            done() { return player.Us.points.gte(26500) }
        },
        23: {
            requirementDescription() {return format(25e13)+" MMNA (24)"},
            effectDescription() {return "'UnRecover' is always active."},
            done() { return player.e.mm.gte(25e13) && inChallenge("ct",32) }
        },
        24: {
            requirementDescription() {return format(5e15)+" MMNA (25)"},
            effect() {
                let eff = slogadd(slog(player.points).sub(4.87).mul(2.5),0.8).pow(5)
                if (player.e.mrna.gte("ee5")) eff = eff.pow(1.5)
                if (player.e.mrna.gte("e1234567")) eff = eff.pow(1.25)
                if (player.e.mrna.gte("e3778e4")) eff = eff.pow(1.2)
                if (player.e.mrna.gte("e2279e5")) eff = eff.pow(1.1)
                if (player.e.mrna.gte("e215e10")) eff = eff.pow(1.1)
                if (player.e.mrna.gte("e3753e10")) eff = eff.pow(1.1)
                return eff
            },
            effectDescription() {return "Cases boost UnBoosted Virus gain (^1.5 at "+format("ee5")+", ^1.25 at "+format("e1234567")+", ^1.2 at "+format("e3778e4")+", ^1.1 at "+format("e2279e5")+"/"+format("e215e10")+"/"+format("e3753e10")+" mRNA).<br>Currently: "+format(tmp.Us.milestones[24].effect)+'x'},
            done() { return player.e.mm.gte(5e15) && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        25: {
            requirementDescription() {return format(85e14)+" MMNA (26)"},
            effectDescription() {return "'UnRetRNA' effect+0.01."},
            done() { return player.e.mm.gte(85e14) && inChallenge("ct",32)}
        },
        26: {
            requirementDescription() {return "1 Corona Mutation (27)"},
            effect() {
                let eff = tmp.e.mueff2.e3.pow(0.05)
                return eff
            },
            effectDescription() {return "Corona Mutation reward 3 boosts MMNA gain, limit, and "+colorText("span","#308030","x")+" at ^0.05 effect, 'UnRetRNA' effect+0.01.<br>Currently: "+format(tmp.Us.milestones[26].effect)+'x'},
            done() { return player.e.mu2.gte(1) && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        27: {
            requirementDescription() {return "1 'MMNA Boost' (28)"},
            effect() {
                let eff = tmp.e.buyables[104].effect.pow(0.4)
                return eff
            },
            effectDescription() {return "'MMNA Boost' boosts MMNA gain, limit, and "+colorText("span","#308030","x")+" at ^0.4 effect, MMNA effect^1.3.<br>Currently: "+format(tmp.Us.milestones[27].effect)+'x'},
            done() { return player.e.buyables[104].gte(1) && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        28: {
            requirementDescription() {return "1 'Chance Boost' (29)"},
            effect() {
                let eff = tmp.e.buyables[105].effect.pow(player.e.buyables[102].mul(0.1))
                return eff
            },
            effectDescription() {return "'MMNA Virus' boosts mRNA gain at ^0.1 effect.<br>Currently: "+format(tmp.Us.milestones[28].effect)+'x'},
            done() { return player.e.buyables[105].gte(1) && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        29: {
            requirementDescription() {return format("e49300")+" mRNA (30)"},
            effectDescription() {return "'Mutation Scaling' base+0.01 and again at "+format("e56911")+" / "+format("e59242")+" mRNA."},
            done() { return player.e.mrna.gte("e49300") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        30: {
            requirementDescription() {return format(27e34)+" MMNA (31)"},
            effectDescription() {return "'Mutation Scaling' base+0.031, tRNA Mutation and 'MMNA Virus' scaling/1.5, MMNA effect^2, base MMNA gain^1.2."},
            done() { return player.e.mm.gte(27e34) && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        31: {
            requirementDescription() {return format("e85719")+" mRNA (32)"},
            effectDescription() {return "'Mutation Scaling' scaling/1.5 and again (^0.5) at "+format("e93960")+" / "+format("e95781")+" mRNA, tRNA Mutation attempt amount*5."},
            done() { return player.e.mrna.gte("e85719") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        32: {
            requirementDescription() {return format("e110900")+" mRNA (33)"},
            effect() {
                let eff = player.e.mm.add(1).pow(0.5)
                if (eff.gte(1e26)) eff = eff.log10().div(26).pow(0.4).mul(26).pow10()
                if (hasMilestone("Us",46)) eff = eff.pow(1.1)
                if (hasMilestone("Us",46)) eff = eff.pow(1.15)
                return eff
            },
            effectDescription() {return "MMNA boosts 'Antifolded Protein Exponent' base, 'ProBase' and 'UnProBase' eff^1.1, 'Mutation Scaling' scaling/1.2 at "+format("e123123")+" mRNA.<br>Currently: ^"+format(tmp.Us.milestones[32].effect)},
            done() { return player.e.mrna.gte("e110900") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        33: {
            requirementDescription() {return format("e210000")+" mRNA (34)"},
            effectDescription() {return "Base MMNA gain^1.2 (^1.1 at 160 Mutations)."},
            done() { return player.e.mrna.gte("e210000") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        34: {
            requirementDescription() {return format("e3e5")+" mRNA (35)"},
            effectDescription() {return "'Chance Boost' scaling/1.2."},
            done() { return player.e.mrna.gte("e3e5") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        35: {
            requirementDescription() {return format("e3.7e5")+" mRNA (36)"},
            effectDescription() {return "tRNA Mutation scaling/1.2."},
            done() { return player.e.mrna.gte("e3.7e5") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        36: {
            requirementDescription() {return format("e4.11e5")+" mRNA (37)"},
            effectDescription() {return "Corona Mutation MMNA scaling/1.15."},
            done() { return player.e.mrna.gte("e4.11e5") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        37: {
            requirementDescription() {return format("e6.2e5")+" mRNA (38)"},
            effect() {
                let eff = layers.e.clickables.getAttemptAmount(true).div(1e80).add(1).pow(0.1)
                return eff
            },
            effectDescription() {return "Mutation attempt amount boosts MMNA gain, Corona Mutation reward 3 is squared (cubed at "+format("e642300")+" mRNA).<br>Currently: "+format(tmp.Us.milestones[37].effect)+'x'},
            done() { return player.e.mrna.gte("e6.2e5") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        38: {
            requirementDescription() {return format("e6.85e5")+" mRNA (39)"},
            effect() {
                let eff = tmp.e.mmlim.div(1e80).add(1).pow(0.1)
                return eff
            },
            effectDescription() {return "MMNA limit boosts MMNA gain, US milestone 9 effect^10 at "+format("e711500")+" mRNA.<br>Currently: "+format(tmp.Us.milestones[38].effect)+'x'},
            done() { return player.e.mrna.gte("e6.85e5") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        39: {
            requirementDescription() {return format("e8.3e5")+" mRNA (40)"},
            effect() {
                let eff = Decimal.pow(1.01,player.Us.mu)
                return eff
            },
            effectDescription() {return "Each tRNA Mutation multiplies 'X-Mutation' base by 1.01, 'Mutation Scaling' scaling/1.5 and again at "+format("e953500")+"/"+format("e978800")+" mRNA, SARS Mutation scaling/1.25.<br>Currently: "+format(tmp.Us.milestones[39].effect)+'x'},
            done() { return player.e.mrna.gte("e8.3e5") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        40: {
            requirementDescription() {return format("e109e4")+" mRNA (41)"},
            effectDescription() {return "Mutation scaling after 180 Mutations/1.1 and again at "+format("e122e4")+"/"+format("e1405e3")+" (^2) mRNA, 'MMNA Boost' scaling/1.2, US milestone 9 effect^3."},
            done() { return player.e.mrna.gte("e109e4") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        41: {
            requirementDescription() {return format("e1958e3")+" mRNA (42)"},
            effectDescription() {return "SARS Mutation and 'MMNA Boost' scaling/1.15."},
            done() { return player.e.mrna.gte("e1958e3") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        42: {
            requirementDescription() {return format("e2311e3")+" mRNA (43)"},
            effectDescription() {return "Mutation scaling after 180 Mutations/1.1."},
            done() { return player.e.mrna.gte("e2311e3") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        43: {
            requirementDescription() {return format("e2967e3")+" mRNA (44)"},
            effect() {
                let eff = layers.e.clickables.getAttemptAmount(true).add(1).pow(0.0075)
                return eff
            },
            effectDescription() {return "Mutation attempt amount boosts tRNA Mutation attempt amount, base MMNA gain^1.2.<br>Currently: "+format(tmp.Us.milestones[43].effect)+'x'},
            done() { return player.e.mrna.gte("e2967e3") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        44: {
            requirementDescription() {return format("e455e4")+" mRNA (45)"},
            effect() {
                let eff = player.e.mm.div(1e180).max(10).log10().pow(0.52).div(4).add(1)
                return eff
            },
            effectDescription() {return "MMNA boosts mRNA effect, SARS Mutation scaling/1.05, Mutation scaling after 180 Mutations/1.1 and again at "+format("e7733e3")+"/"+format("e88e5")+"/"+format("e95e5")+" mRNA, 'MMNA Virus' scaling/1.5 at "+format("e4873e3")+" mRNA.<br>Currently: ^"+format(tmp.Us.milestones[44].effect)},
            done() { return player.e.mrna.gte("e455e4") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        45: {
            requirementDescription() {return "5 Corona Mutations (46)"},
            effect() {
                let eff = player.e.mm.div(1e280).add(10).log10().pow(0.45)
                if (hasUpgrade("Us",124)) eff = eff.pow(5)
                if (hasMilestone("Us",56)) eff = eff.pow(2)
                if (hasMilestone("Us",57)) eff = eff.pow(2)
                if (hasMilestone("Us",58)) eff = eff.pow(1.2)
                if (hasUpgrade("Ud",22)) eff = powExp(eff,1.5)
                return eff
            },
            effectDescription() {return "MMNA boosts 'Enzyme Boost' and 'Enzyme Uncoating' base, 'Severe Discoloration' exp+0.3, 'UnRecover' effect^2, 'UnRetRNA' effect+0.01, boosted recovery 2nd effect^0.8.<br>Currently: "+format(tmp.Us.milestones[45].effect)+'x'},
            done() { return player.e.mu2.gte(5) && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        46: {
            requirementDescription() {return format(Decimal.pow(2,1024))+" MMNA (47)"},
            effectDescription() {return "'ProBase', 'UnProBase', and US milestone 33 eff^1.1, tRNA Mutation attempt amount*5, 'mRNA Booster' scaling/2 at "+format("e314")+"/"+format("3.48e348")+" MMNA, SARS Mutation after 6 scaling/1.2 at "+format("3.65e365")+" MMNA."},
            done() { return player.e.mm.gte(Decimal.pow(2,1024)) && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        47: {
            requirementDescription() {return format("e400")+" MMNA (48)"},
            effectDescription() {return "'Tired MMNA' effect*1.2."},
            done() { return player.e.mm.gte("e400") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        48: {
            requirementDescription() {return format("e473")+" MMNA (49)"},
            effectDescription() {return "'Tired MMNA' effect*1.2, tRNA Mutation scaling/1.05, SARS Mutation after 6 scaling/1.12."},
            done() { return player.e.mm.gte("e473") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        }, 
        49: {
            requirementDescription() {return format("e572")+" MMNA (50)"},
            effectDescription() {return "Dilate US milestone 9 effect to 1.15, Mutation MMNA scaling after 5 Corona Mutations/1.7."},
            done() { return player.e.mm.gte("e572") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        50: {
            requirementDescription() {return format("3e619")+" MMNA (51)"},
            effect() {
                let eff = Decimal.mul(player.Us.milestones.length-50,0.1).max(0)
                return eff
            },
            effectDescription() {return "Each milestone after 50 adds 0.1 to mutated rRNA gain exponent, tRNA Mutation MMNA cost^0.9 at "+format("4e648")+" MMNA.<br>Currently: +"+format(tmp.Us.milestones[50].effect)},
            done() { return player.e.mm.gte("3e619") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        51: {
            requirementDescription() {return format("3e779")+" MMNA (52)"},
            effectDescription() {return "Mutation MMNA scaling after 5 Corona Mutations/1.26."},
            done() { return player.e.mm.gte("3e779") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        52: {
            requirementDescription() {return format("e962")+" MMNA (53)"},
            effect() {
                let eff = tmp.e.creff.pow(0.005)
                return eff
            },
            effectDescription() {return "CRNA boosts MMNA gain at ^0.005 effect, 'Mutation Scaling' base*1.01, dilate US milestone 9 effect to 1.05 at "+format("e1230")+" MMNA, mutation MMNA scaling after 5 Corona Mutations/1.11 at "+format("e1285")+" MMNA.<br>Currently: "+format(tmp.Us.milestones[52].effect)+'x'},
            done() { return player.e.mm.gte("e962") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        53: {
            requirementDescription() {return format("e1470")+" MMNA (54)"},
            effectDescription() {return "'Mutation Scaling' base*1.05, 'Adenity' eff^1.3, 'ProBase', 'UnProBase', and US milestone 33 eff^1.15, 'Severe Skin Rash' exp+0.3, 'Severe Discoloration' exp+0.5, mutation MMNA scaling after 5 Corona Mutations/1.11 and 'Mutation Scaling' scaling/1.35 at "+format("e2216")+" MMNA."},
            done() { return player.e.mm.gte("e1470") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        54: {
            requirementDescription() {return format("e2620")+" MMNA (55)"},
            effect() {
                let eff = player.e.crna.sub(3.2e4).max(0).div(3e4).add(1).log10().pow(0.4).div(4)
                return eff
            },
            effectDescription() {return "CRNA adds to mutated rRNA exponent, 'Chance Boost' scaling/3, Mutation chance scaling after 9 Corona Mutations/1.1 at "+format("e3010")+" MMNA, dilate US milestone 9 effect to 1.1 at "+format("e3030")+" MMNA.<br>Currently: +"+format(tmp.Us.milestones[54].effect)},
            done() { return player.e.mm.gte("e2620") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        55: {
            requirementDescription() {return format("e4450")+" MMNA (56)"},
            effectDescription() {return "Corona Mutation MMNA scaling after 9 is /1.5, mutated rRNA slog subtractor/1.01 at "+format("e5050")+" MMNA."},
            done() { return player.e.mm.gte("e4450") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        56: {
            requirementDescription() {return format("e8540")+" MMNA (57)"},
            toggles: [["Us","autounr"]],
            effectDescription() {return "Autoclick 'UnRetRNA', mutation MMNA scaling after 5 Corona Mutations/1.11, milestone 46 effect^2."},
            done() { return player.e.mm.gte("e8540") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        57: {
            requirementDescription() {return format("e17245")+" MMNA (58)"},
            effectDescription() {return "Uncoating power and UU milestone 29 effect*5, milestone 46 effect^2."},
            done() { return player.e.mm.gte("e17245") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        58: {
            requirementDescription() {return format("e25000")+" MMNA (59)"},
            effectDescription() {return "Uncoating power and UU milestone 29 effect*2, milestone 46 effect^1.2."},
            done() { return player.e.mm.gte("e25000") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        59: {//https://en.wikipedia.org/wiki/COVID-19
            requirementDescription() {return format("e36450")+" MMNA (60)"},
            effectDescription() {return "Coronavirus disease 2019 (COVID-19) is a contagious disease caused by the virus severe acute respiratory syndrome coronavirus 2."},
            done() { return player.e.mm.gte("e36450") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        60: {
            requirementDescription() {return format("e38080")+" MMNA (61)"},
            effectDescription() {return "The first known case was identified in Wuhan, China, in December 2019."},
            done() { return player.e.mm.gte("e38080") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        61: {
            requirementDescription() {return format("e40100")+" MMNA (62)"},
            effectDescription() {return "The disease quickly spread worldwide, resulting in the COVID-19 pandemic."},
            done() { return player.e.mm.gte("e40100") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        62: {
            requirementDescription() {return format("e44800")+" MMNA (63)"},
            effectDescription() {return "COVID‑19 transmits when infectious particles are breathed in or come into contact with the eyes, nose, or mouth."},
            done() { return player.e.mm.gte("e44800") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        63: {
            requirementDescription() {return format("e45600")+" MMNA (64)"},
            effectDescription() {return "The risk is highest when people are in close proximity, but small airborne particles containing the virus can remain suspended in the air and travel over longer distances, particularly indoors."},
            done() { return player.e.mm.gte("e45600") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        64: {
            requirementDescription() {return format("e46600")+" MMNA (65)"},
            effectDescription() {return "Transmission can also occur when people touch their eyes, nose or mouth after touching surfaces or objects that have been contaminated by the virus."},
            done() { return player.e.mm.gte("e46600") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        65: {
            requirementDescription() {return format("e60400")+" MMNA (66)"},
            effectDescription() {return "People remain contagious for up to 20 days and can spread the virus even if they do not develop symptoms."},
            done() { return player.e.mm.gte("e60400") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        66: {
            requirementDescription() {return format("e65800")+" MMNA (67)"},
            effectDescription() {return "Testing methods for COVID-19 to detect the virus's nucleic acid include real-time reverse transcription polymerase chain reaction (RT‑PCR), transcription-mediated amplification, and reverse transcription loop-mediated isothermal amplification (RT‑LAMP) from a nasopharyngeal swab."},
            done() { return player.e.mm.gte("e65800") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        67: {
            requirementDescription() {return format("e78000")+" MMNA (68)"},
            effectDescription() {return "Several COVID-19 vaccines have been approved and distributed in various countries, which have initiated mass vaccination campaigns."},
            done() { return player.e.mm.gte("e78000") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
        68: {
            requirementDescription() {return format("e297000")+" MMNA (69)"},
            effectDescription() {return "Other preventive measures include physical or social distancing, quarantining, ventilation of indoor spaces, use of face masks or coverings in public, covering coughs and sneezes, hand washing, and keeping unwashed hands away from the face."},
            done() { return player.e.mm.gte("e297000") && inChallenge("ct",32) },
            unlocked() { return player.uv.uvUnlocked}
        },
    },
    upgrades: {
        rows: 15,
        cols: 5,
        11: {
            title: "Severe Mile",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "Unvaxxed severity boosts UU milestone 29, 'RNA Boost' base+0.05, Atom exp+0.5."},
            cost: new Decimal(2e4),
            effect(){
                let x = player.Us.severity
                if (hasMilestone("uv",16)) x = player.Us.bestSev
                let eff = x.add(10).log10().pow(0.5)
                if (eff.gte(4)) eff = eff.div(4).pow(0.5).mul(4)
                if (hasUpgrade("Us",112)) eff = eff.pow(2)
                if (hasUpgrade("Us",113)) eff = eff.pow(1.4)
                if (hasUpgrade("Us",115)) eff = eff.pow(1.3)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Us.upgrades[11].effect)
                return dis
            },
        },
        12: {
            title: "Severe Atoms",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "Atomic RNA boosts unvaxxed severity gain."},
            cost: new Decimal(3e5),
            effect(){
                let eff = player.e.at.add(1).pow(0.1)
                if (eff.gte(1e15)) eff = eff.log10().div(15).pow(0.6).mul(15).pow10().min("ee50")
                if (hasUpgrade("Ud",32)) {
                    eff = powExp(player.e.at.add(10).log10().div(1e90).add(1),0.5).pow(0.5)
                    if (eff.gte(100)) eff = eff.div(100).pow(0.2).mul(100)
                    if (eff.gte(1e3)) eff = eff.div(1e3).pow(0.4).mul(1e3)
                }
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Us.upgrades[12].effect)+"x"
                if (hasUpgrade("Ud",32)) dis = "^"+format(tmp.Us.upgrades[12].effect)
                return dis
            },
        },
        13: {
            title: "Cased Carbon",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "Carbon boosts 'Caser RNA', oxygen boosts it but divide it by 1.4 at "+format("e1234")+" RNA."},
            cost: new Decimal(1e14),
            effect(){
                let eff = player.e.c.add(10).log10().pow(0.8)
                eff = eff.pow(tmp.e.Pheffect)
                if (player.e.rna.gte('e1234')) eff = eff.mul(tmp.e.Oeffect).div(1.4)
                if (eff.gte(1e35)) eff = eff.div(1e35).pow(0.4).mul(1e35)
                if (hasUpgrade("Ud",34)) eff = tmp.e.Ceffect.max(10).log10().max(10).log10().pow(0.5)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Us.upgrades[13].effect)
                return dis
            },
        },
        14: {
            title: "SympAtoms",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "Unvaxxed symptoms after 10 "+(hasUpgrade("Us",105)?"multiply atom gain by 2,023":"double atom gain")+", unvaxxed severity 1st eff^2."},
            cost: new Decimal(4e23),
            effect(){
                let points = player.Us.points
                let base = 2
                if (hasUpgrade("Us",105)) {
                    points = tmp.Us.sympAmt
                    base = 2023
                }
                let eff = Decimal.pow(base,points.sub(10).max(0))
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Us.upgrades[14].effect)+"x"
                return dis
            },
        },
        15: {
            title: "CytoMult",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "Cytosine adds to 'Severity Multiplier' base, Cytosine eff^2."},
            cost: new Decimal(2e40),
            effect(){
                let eff = tmp.e.Cyeffect
                if (hasMilestone("uv",14)) eff = player.Us.bestCy
                return eff
            },
            effectDisplay(){
                let dis = "+"+format(tmp.Us.upgrades[15].effect)
                return dis
            },
        },
        21: {
            title: "GuanBase",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "Guanine adds to unvaxxed symptom base, Guanine eff^2."},
            cost: new Decimal(2e45),
            effect(){
                let eff = tmp.e.Gueffect
                if (hasMilestone("uv",14)) eff = player.Us.bestGu
                return eff
            },
            effectDisplay(){
                let dis = "+"+format(tmp.Us.upgrades[21].effect)
                return dis
            },
        },
        22: {
            title: "Adenity",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "Symptoms boost unvaxxed severity effect, Adenine eff^2 and at "+format("e4350")+" RNA, Adenine eff^1.5."},
            cost: new Decimal(1e65),
            effect(){
                let eff = slogadd(player.s.points.max(1e10),-2).div(120).max(1).pow(5)
                if (eff.gte(1e11)) eff = eff.log10().div(11).pow(0.5).mul(11).pow10()
                if (eff.gte(3e11)) eff = eff.div(3).log10().div(11).pow(0.7).mul(11).pow10().div(1e11).pow(0.35).mul(3e11)
                if (hasUpgrade("Us",112)) eff = eff.pow(1.3)
                if (hasMilestone("Us",53)) eff = eff.pow(1.3)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Us.upgrades[22].effect)
                return dis
            },
        },
        23: {
            title: "Phosphatom",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "Phosphorus boosts 'RNAtomic Boost', Phosphorus eff^1.1 at "+format("e10820")+" RNA."},
            cost: new Decimal(3e93),
            effect(){
                let eff = tmp.e.Pheffect
                if (hasUpgrade("Us",25)) eff = eff.pow(2)
                if (hasUpgrade("Us",31)) eff = eff.pow(2)
                if (hasUpgrade("Us",41)) eff = eff.pow(1.5)
                if (hasUpgrade("Us",62)) eff = eff.pow(1.4)
                if (hasUpgrade("Us",51)) eff = eff.pow(1.15)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Us.upgrades[23].effect)
                return dis
            },
        },
        24: {
            title: "RNA Pairing",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "Adenine-Uracil and Cytosine-Guanine boost each other."},
            cost: new Decimal(3e113),
            effect(){
                let eff = player.e.cy.add(10).log10().mul(player.e.gu.add(10).log10()).pow(0.04).sub(1).div(10).add(1)
                return eff
            },
            effect2(){
                let eff = player.e.ur.add(10).log10().mul(player.e.ad.add(10).log10()).pow(0.05).sub(1).div(2.5).add(1)
                return eff
            },
            effectDisplay(){
                let dis = "AU: ^"+format(tmp.Us.upgrades[24].effect)+", CG: ^"+format(tmp.Us.upgrades[24].effect2)
                return dis
            },
        },
        25: {
            title: "Phosphatine",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "'Phosphatom' eff^2, Adenine eff^1.1."},
            cost: new Decimal(2e150),
        },
        31: {
            title: "Uncoated Symptoms",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "Unvaxxed uncoaters add unvaxxed symptoms to unvaxxed severity gain, 'Phosphatom' eff^2."},
            cost: new Decimal(1e234),
            effect(){
                let eff = player.Uu.points.div(1e21).max(1).log10()
                if (player.Us.severity.gte("1.8e358")) eff = eff.mul(1.5)
                return eff
            },
            effectDisplay(){
                let dis = "+"+format(tmp.Us.upgrades[31].effect)
                return dis
            },
        },
        32: {
            title: "Hydrophorus",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "Hydrogen eff^1.1, Phosphorus eff^1.05, R5P eff^2."},
            cost: new Decimal(5e261),
        },
        33: {
            title: "ProBase",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "<span style='font-size:9px'>'Protein Exp' boosts its base and multiply 'Unc. Symptoms' by 1.5 at "+format("18e357")+" unv. severity.</span>"},
            cost: new Decimal("3e352"),
            effect(){
                let eff = player.Up.buyables[23].add(1).pow(0.1)
                if (hasUpgrade("Us",44)) eff = eff.pow(2)
                if (hasUpgrade("Us",73)) eff = eff.pow(1.3)
                if (hasUpgrade("Us",75)) eff = eff.pow(1.09)
                if (hasUpgrade("Us",83)) eff = eff.pow(1.06)
                if (hasUpgrade("Us",91)) eff = eff.pow(1.1)
                if (hasMilestone("Us",32)) eff = eff.pow(1.1)
                if (hasMilestone("Us",46)) eff = eff.pow(1.1)
                if (hasMilestone("Us",53)) eff = eff.pow(1.15)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Us.upgrades[33].effect)
                return dis
            },
        },
        34: {
            title: "MaxPhosphate",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "'Max Buyable' exp*1.1, R5P eff^1.1."},
            cost: new Decimal("13e404"),
        },
        35: {
            title: "UnProBase",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "'Unfolded Protein Exp' boosts its base, unc enz and 'BasExp' effs are exponents."},
            cost: new Decimal("8e506"),
            effect(){
                let eff = player.Up.buyables[33].add(1).pow(0.1)
                if (hasUpgrade("Us",44)) eff = eff.pow(2)
                if (hasUpgrade("Us",73)) eff = eff.pow(1.3)
                if (hasUpgrade("Us",75)) eff = eff.pow(1.09)
                if (hasUpgrade("Us",83)) eff = eff.pow(1.06)
                if (hasUpgrade("Us",91)) eff = eff.pow(1.1)
                if (hasMilestone("Us",32)) eff = eff.pow(1.1)
                if (hasMilestone("Us",46)) eff = eff.pow(1.1)
                if (hasMilestone("Us",53)) eff = eff.pow(1.15)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Us.upgrades[35].effect)
                return dis
            },
        },
        41: {
            title: "ImRNA",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {
                let dis = "II boosts mRNA gain"
                if (hasUpgrade("Ud",33)) dis += " and MMNA effect"
                return dis+", 'Phosphatom' eff^1.5, 'Prion Multiplier' eff is exponent."
            },
            cost: new Decimal("3e892"),
            effect(){
                let eff = player.e.in.add(1).pow(0.03).div(10).max(1)
                if (eff.gte("e15e4")) eff = eff.log10().div(15e4).pow(0.75).mul(15e4).pow10().div("e15e4").pow(0.75).mul("e15e4")
                if (eff.gte("e6e7")) eff = eff.log10().div(6e7).pow(0.75).mul(6e7).pow10().div("e6e7").pow(0.5).mul("e6e7")
                if (eff.gte("ee9")) eff = eff.log10().div(1e9).pow(0.75).mul(1e9).pow10().div("ee9").pow(0.5).mul("ee9")
                if (eff.gte("e3e11")) eff = eff.log10().div(3e11).pow(0.6).mul(3e11).pow10().div("e3e11").pow(0.5).mul("e3e11")
                if (eff.gte("e3e16")) eff = eff.log10().div(3e16).pow(0.2).mul(3e16).pow10().div("e3e16").pow(0.3).mul("e3e16")
                if (eff.gte("ee22")) eff = eff.log10().div(1e22).pow(0.4).mul(1e22).pow10().div("ee22").pow(0.3).mul("ee22").min("ee28")
                return eff
            },
            effect2(){
                let eff = player.e.in.add(10).log10().add(10).log10().pow(0.2)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Us.upgrades[41].effect)+"x"
                if (tmp.Us.upgrades[41].effect.gte("ee28")) dis+=" (hardcapped)"
                if (hasUpgrade("Ud",33)) dis += ", ^"+format(tmp.Us.upgrades[41].effect2)
                return dis
            },
        },
        42: {
            title: "SelfMax",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "<span style='font-size:9px'>mRNA boosts itself (boosted by 4th row US upgs), 'MaxBuy' exp*1.05, N eff^1.5, +5 levels, change cas eff to exp boost to UP.</span>"},
            cost: new Decimal("e1274"),
            effect(){
                let dil = 1.5
                let exp = player.Us.upgrades.filter(number => number>40 && number<50).length
                if (hasUpgrade("Us",51)) exp += player.Us.upgrades.filter(number => number>50 && number<60).length
                if (hasUpgrade("Us",93)) {
                    exp += player.Us.upgrades.filter(number => number>90 && number<100).length
                    dil += 1
                }
                if (hasUpgrade("Us",101)) {
                    exp += player.Us.upgrades.filter(number => number>100 && number<110).length
                    dil += player.Us.upgrades.filter(number => number>100 && number<110).length*0.1
                }
                if (hasUpgrade("Us",121)) {
                    exp += player.Us.upgrades.filter(number => number>120 && number<140).length
                    dil += player.Us.upgrades.filter(number => number>120 && number<140).length*0.2
                }
                let eff = powExp(player.e.mrna.add(10).max(10).log10().pow(exp/1.5),dil)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Us.upgrades[42].effect)+"x"
                return dis
            },
        },
        43: {
            title: "ExmRNA",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "mRNA adds to Atom Exponent buyable bases (Atomic RNA at 50% effect)."},
            cost: new Decimal("5e2090"),
            effect(){
                let eff = player.e.mrna.add(10).max(10).log10().sub(13).pow(0.6).div(500)
                if (eff.gte(1.6)) eff = eff.mul(100/16).log10().pow(0.5).mul(1.6)
                return eff
            },
            effectDisplay(){
                let dis = "+"+format(tmp.Us.upgrades[43].effect)
                return dis
            },
        },
        44: {
            title: "UpCased mRNA",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "Cases boost mRNA gain by "+format(tmp.Us.upgrades[44].effbase)+"x/upg per 'mRNA Gain' bought, 'ProBase' and 'UnProBase' eff^2."},
            cost: new Decimal("e5424"),
            effbase() {
                let eff = slogadd(player.points.max("eeee4"),-4.5).pow(0.2).sub(1).div(2).add(1).max(1)
                if (hasMilestone("Us",19)) eff = eff.add(tmp.Us.milestones[19].effect)
                return eff
            },
            effect(){
                let base = tmp.Us.upgrades[44].effbase
                let x = player.e.buyables[93]
                if (hasUpgrade("Us",63)) x = x.add(tmp.Us.upgrades[63].effect)
                if (hasUpgrade("Us",74)) x = x.add(tmp.Us.upgrades[74].effect)
                if (hasMilestone("Us",13)) x = x.add(tmp.Us.milestones[13].effect)
                let exp = Decimal.mul(x,player.Us.upgrades.length)
                let eff = base.pow(exp)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Us.upgrades[44].effect)+"x"
                return dis
            },
        },
        45: {
            title: "DisEnzyme",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "'Disease Gain' scaling/15, 'Enzyme Boost' softcap is weaker, 'Disease Boost'^1.1 at "+format("e14940")+" UnvSev."},
            cost: new Decimal("e11651"),
        },
        51: {
            title: "SelfPhos",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "Row 5 upgrades boost 'SelfMax', 'Phosphatom' eff^1.15."},
            cost: new Decimal("e276e3"),
        },
        52: {
            title: "Mutated MMNA",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "Each mutation multiplies MMNA gain and limit by "+format(tmp.Us.upgrades[52].base)+"."},
            cost: new Decimal("e353300"),
            base() {
                let base = new Decimal(1.1)
                if (hasUpgrade("Us",122)) base = base.mul(tmp.Us.upgrades[122].effect)
                return base
            },
            effect(){
                let exp = player.e.mu
                if (hasUpgrade("Us",55)) exp = exp.add(tmp.Us.upgrades[55].effect)
                let eff = Decimal.pow(tmp.Us.upgrades[52].base,exp)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Us.upgrades[52].effect)+"x"
                return dis
            },
        },
        53: {
            title: "Mutation Booster",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "MMNA reduces 'mRNA Booster' scaling, Mutation 1st reward*3, att amt and limit*4."},
            cost: new Decimal("e575300"),
            effect(){
                let eff = player.e.mm.max(10).log10().sub(4).max(0).pow(0.3).div(10).add(1)
                return eff
            },
            effectDisplay(){
                let dis = "/"+format(tmp.Us.upgrades[53].effect)
                return dis
            },
        },
        54: {
            title: "UnRecoverer",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "Raise boosted recovery gain to 0.75 after "+format("e8000")+" and again at "+format("2e1206")+" / "+format("2e1295")+" unvaxxed tRNA."},
            cost: new Decimal("e4478700"),
        },
        55: {
            title: "T-Mutation",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "<span style='font-size:9px'>tRNA Mutation attempt amt*5, each adds 1.5 mutations to 'Mutated MMNA' and 'X-Mutation', Mutation chance scaling/1.1.</span>"},
            effect(){
                let eff = player.Us.mu.mul(1.5)
                return eff
            },
            effectDisplay(){
                let dis = "+"+format(tmp.Us.upgrades[55].effect)
                return dis
            },
            cost: new Decimal("e19186000"),
        },
        61: {
            title: "tmRNA",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "Unvaxxed tRNA boosts mRNA effect."},
            cost: new Decimal("e30986"),
            effect(){
                let eff = player.Us.trna.max(10).log10().pow(0.5).sub(1).div(5).add(1)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Us.upgrades[61].effect)
                return dis
            },
        },
        62: {
            title: "PhosBoost",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            description() {return "'Phosphatom' effect^1.4."},
            cost: new Decimal(2e144),
        },
        63: {
            title: "Severer tRNA",
            currencyDisplayName: "unvaxxed tRNA",
            currencyInternalName: "trna",
            currencyLayer: "Us",
            description() {return "Req: "+colorText("span","#C000C0","c")+">=2<br>'Severe tRNA' base +0.5, 'Immunity Boost' levels add to 'UpCased mRNA' eff. buyables."},
            cost: new Decimal(5e3),
            canAfford(){
                return player.Us.trna.gte(5e3) && (tmp.Us.c.gte(2))
            },
            effect(){
                let eff = player.e.buyables[94]
                return eff
            },
            effectDisplay(){
                let dis = "+"+formatWhole(tmp.Us.upgrades[63].effect)
                return dis
            },
        },
        64: {
            title() {return "UnVa"+colorText("b","#308030","x")},
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "Unvaxxed tRNA boosts "+colorText("span","#308030","x")+"."},
            cost: new Decimal("e40615"),
            effect(){
                let eff = slogadd(player.Us.trna.add(1),-0.05).pow(0.1)
                if (eff.gte(1e50)) eff = eff.log10().div(50).pow(0.75).mul(50).pow10().div(1e50).pow(0.5).mul(1e50)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Us.upgrades[64].effect)+"x"
                return dis
            },
        },
        65: {
            title() {return colorText("b","#308030","x")+"mRNA"},
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            description() {return "Req: "+colorText("span","#0000C0","b")+">=29<br>mRNA boosts "+colorText("span","#308030","x")+"."},
            cost: new Decimal(1e241),
            canAfford(){
                return player.e.mrna.gte(1e241) && (tmp.Us.b.gte(29))
            },
            effect(){
                let eff = powExp(player.e.mrna.add(1),0.75).pow(0.05).div(100).max(1)
                if (eff.gte(1e38)) eff = eff.log10().div(38).pow(0.75).mul(38).pow10().div(1e38).pow(0.5).mul(1e38)
                if (eff.gte("e7500")) eff = eff.log10().div(7500).pow(0.75).mul(7500).pow10().div("e7500").pow(0.5).mul("e7500")
                if (eff.gte("e1111111")) eff = eff.log10().div(1111111).pow(0.75).mul(1111111).pow10().div("e1111111").pow(0.5).mul("e1111111")
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Us.upgrades[65].effect)+"x"
                return dis
            },
        },
        71: {
            title: "UnLogged Mile",
            currencyDisplayName: "unvaxxed tRNA",
            currencyInternalName: "trna",
            currencyLayer: "Us",
            description() {return "Req: "+format("e75e3")+" unvaxxed severity<br>Each 'UnLog' adds 0.01 to mile 10 exp, 'EnzBst' softcap is weaker, 'Severe tRNA' base+0.1."},
            cost: new Decimal(15e27),
            canAfford(){
                return player.Us.trna.gte(15e27) && (player.Us.severity.gte("e75e3"))
            },
        },
        72: {
            title() {return "Unva"+colorText("b","#308030","xx")+"ed Severity"},
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            description() {return "Unvaxxed severity boosts "+colorText("span","#308030","x")+", 'UnRecover' eff*5."},
            cost: new Decimal("e383"),
            effect(){
                let x = player.Us.severity
                if (hasMilestone("uv",16)) x = player.Us.bestSev
                let eff = powExp(x.add(1),0.5).pow(0.01).div(1e3).max(1)
                if (eff.gte(1e46)) eff = eff.log10().div(46).pow(0.75).mul(46).pow10().div(1e46).pow(0.5).mul(1e46)
                if (hasUpgrade("uv",86) && player.Us.severity.gte("e135e12")) eff = eff.pow(10)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Us.upgrades[72].effect)+"x"
                return dis
            },
        },
        73: {
            title: "Unsoft Enzyme",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "'Enzyme Boost' softcap is weaker, 'ProBase' and 'UnProBase'^1.3, 'UnRecover' eff*20/3."},
            cost: new Decimal("e153555"),
        },
        74: {
            title: "UpCased Booster",
            currencyDisplayName: "unvaxxed tRNA",
            currencyInternalName: "trna",
            currencyLayer: "Us",
            description() {return "Req: "+format("e199500")+" unvaxxed severity<br>mRNA Booster adds 'UpCased mRNA' eff. buyables at 5% effect."},
            cost: new Decimal(18e101),
            canAfford(){
                return player.Us.trna.gte(18e101) && (player.Us.severity.gte("e199500"))
            },
            effect(){
                let eff = player.e.buyables[101].mul(tmp.e.buyables[101].base2).div(20)
                return eff
            },
            effectDisplay(){
                let dis = "+"+format(tmp.Us.upgrades[74].effect)
                return dis
            },
        },
        75: {
            title: "UnSoftRecover",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "Unvaxxed tRNA boosts 'UnRecover', 'Enzyme Boost' softcap is weaker, 'ProBase' and 'UnProBase'^1.09."},
            cost: new Decimal("e242520"),
            effect(){
                let eff = player.Us.trna.pow(0.085).div(1e9).add(1)
                if (eff.gte(1e50)) eff = eff.log10().div(50).pow(0.75).mul(50).pow10()
                if (hasUpgrade("Us",94)) eff = eff.pow(tmp.Us.upgrades[94].effect)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Us.upgrades[75].effect)+"x"
                return dis
            },
        },
        81: {
            title: "X-Mutation",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            description() {return "Each mutation boosts "+colorText("span","#308030","x")+" by "+format(tmp.Us.upgrades[81].base)+", MMNA gain and limit*2."},
            cost: new Decimal("e1392"),
            base() {
                let base = new Decimal(1.3)
                if (hasMilestone("Us",39)) base = base.mul(tmp.Us.milestones[39].effect)
                return base
            },
            effect(){
                let exp = player.e.mu
                let base = tmp.Us.upgrades[81].base
                if (hasUpgrade("Us",55)) exp = exp.add(tmp.Us.upgrades[55].effect)
                let eff = Decimal.pow(base,exp)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Us.upgrades[81].effect)+"x"
                return dis
            },
        },
        82: {
            title: "UnScaled Mutation",
            currencyDisplayName: "unvaxxed tRNA",
            currencyInternalName: "trna",
            currencyLayer: "Us",
            description() {return "Req: "+format("e502800")+" unvaxxed severity<br><span style='font-size:9px'>Mutation scaling/1.25, chance and attempt amt(Shift)*5 and again at "+format("e1966")+" mRNA (^0.5 mut sc eff).</span>"},
            cost: new Decimal(3e220),
            canAfford(){
                return player.Us.trna.gte(3e220) && (player.Us.severity.gte("e502800"))
            },
        },
        83: {
            title: "Chancer",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "Each tRNA buyable after 500 boosts chance and att amt by 1.025, MMNA limit*5, 'PrBas', 'UPrBas'^1.06."},
            cost: new Decimal("e723000"),
            effect(){
                let x = tmp.Us.getTotaltRNA.sub(500)
                if (x.gte(500)) x = x.div(500).pow(0.75).mul(500)
                if (x.gte(7e4)) x = x.div(7e4).pow(0.75).mul(7e4)
                let eff = Decimal.pow(1.025,x).max(1)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Us.upgrades[83].effect)+"x"
                return dis
            },
        },
        84: {
            title() {return colorText("b","#308030","X")+"MNA"},
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            description() {return "<span style='font-size:8.5px'>MMNA boosts "+colorText("span","#308030","x")+", raise boosted recovery gain to 0.75 after "+format("ee4")+" and again at "+format("e1581")+" / "+format("e1664")+"(^0.9, chance*1000, scaling/1.3) unvaxxed tRNA.</span>"},
            cost: new Decimal("e13155"),
            effect(){
                let eff = player.e.mm.div(1e13).add(1).pow(0.2)
                if (hasUpgrade("Us",95)) eff = eff.pow(2)
                if (hasUpgrade("Us",101) && player.Us.trna.gte("e10525")) eff = eff.pow(1.5)
                if (hasUpgrade("Us",101) && player.Us.trna.gte("e10800")) eff = eff.pow(1.5)
                if (hasUpgrade("Us",111)) eff = eff.pow(tmp.Us.upgrades[111].effect)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Us.upgrades[84].effect)+"x"
                return dis
            },
        },
        85: {
            title: "UnDivide",
            currencyDisplayName: "unvaxxed tRNA",
            currencyInternalName: "trna",
            currencyLayer: "Us",
            description() {return "Req: "+format("e14541000")+" unvaxxed severity<br>'UnRetRNA' does not divide tRNA gain, tRNA bases*1.01."},
            cost: new Decimal("3e1822"),
            canAfford(){
                return player.Us.trna.gte("3e1822") && (player.Us.severity.gte("e14541000"))
            },
        },
        91: {
            title: "Unlimited tMMNA",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "<span style='font-size:9px'>Unvaxxed tRNA boosts MMNA limit, 'Enz. Bst.' base*10 and its softcap is weaker, 'PrBas' and 'UPrBas'^1.1</span>."},
            cost: new Decimal("e38934000"),
            effect(){
                let eff = player.Us.trna.pow(0.001).div(100).add(1)
                if (eff.gte(1e200)) eff = eff.log10().div(200).pow(0.75).mul(200).pow10().div(1e200).pow(0.5).mul(1e200)
                if (eff.gte("e7000")) eff = eff.log10().div(7e3).pow(0.75).mul(7e3).pow10().div("e7000").pow(0.75).mul("e7000")
                if (eff.gte("e18e3")) eff = eff.log10().div(18e3).pow(0.75).mul(18e3).pow10().div("e18e3").pow(0.75).mul("e18e3")
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Us.upgrades[91].effect)+"x"
                return dis
            },
        },
        92: {
            title: "tMMNA Boost",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            description() {return "Unvaxxed tRNA boosts MMNA effect, 'UnRetRNA' effect+0.01, MMNA limit*5."},
            cost: new Decimal("e107000"),
            effect(){
                let eff = player.Us.trna.add(10).log10().sub(4000).max(0).pow(0.55).div(35).add(1)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Us.upgrades[92].effect)
                return dis
            },
        },
        93: {
            title: "Tired MMNA",
            currencyDisplayName: "unvaxxed tRNA",
            currencyInternalName: "trna",
            currencyLayer: "Us",
            description() {return "MMNA adds 'Severe Tiredness' exp, Row 4 tRNA upgrades boost 'SelfMax', tRNA bases*1.01."},
            cost: new Decimal("e4530"),
            effect(){
                let eff = player.e.mm.add(10).log10().sub(48).max(0).pow(0.55).div(35)
                if (hasMilestone("Us",47)) eff = eff.mul(1.2)
                if (hasMilestone("Us",48)) eff = eff.mul(1.2)
                return eff
            },
            effectDisplay(){
                let dis = "+"+format(tmp.Us.upgrades[93].effect)
                return dis
            },
        },
        94: {
            title: "UnSoft Rash",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "MMNA boosts 'UnSoftRecover', SARS Mutation scaling/1.25, "+(shiftDown?"'Severe Skin Rash'":"'SSR'")+" exp is 1."},
            cost: new Decimal("e3e8"),
            effect(){
                let eff = player.e.mm.div(1e60).max(10).log10().pow(.6)
                return eff
            },
            effectDisplay(){
                let dis = '^'+format(tmp.Us.upgrades[94].effect)
                return dis
            },
        },
        95: {
            title: "Discolored tRNA",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            description() {return "'Severe Discoloration' exp+0.5, '"+colorText("span","#308030","X")+"MNA' eff^2, 'UnRetRNA' effect+0.01, tRNA Mutation sc/1.1."},
            cost: new Decimal("e654850"),
        },
        101: {
            title: "Antifolder",
            currencyDisplayName: "unvaxxed tRNA",
            currencyInternalName: "trna",
            currencyLayer: "Us",
            description() {return "<span style='font-size:9px'>Change casual and PrP 1st effect to Antifolded Protein effect exp boost, Row 5 tRNA upgrades boost 'SelfMax', tRNA bases*1.01, '"+colorText("span","#308030","X")+"MNA' eff^1.5 at "+format("e10525")+"/"+format("e10800")+" unvaxxed tRNA.</span>"},
            cost: new Decimal("e10142"),
        },
        102: {
            title: "Recovery UnBooster",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "MMNA reduces boosted recovery effect, tRNA Mutation scaling/1.2, "+(shiftDown?"'Severe Skin Rash'":"'SSR'")+" exp is 1.05."},
            cost: new Decimal("e79e7"),
            effect(){
                let eff = player.e.mm.div(1e105).max(10).log10().pow(.5).div(60).add(1).pow(-1)
                return eff
            },
            effectDisplay(){
                let dis = '^'+format(tmp.Us.upgrades[102].effect)
                return dis
            },
        },
        103: {
            title: "UnSoft Severity",
            currencyDisplayName: "mRNA",
            currencyInternalName: "mrna",
            currencyLayer: "e",
            description() {return "MMNA makes unv. sev. softcap later, 'Atomic RNA Exp' base*2, BR gain after "+format("e82e4")+" is ^0.75."},
            cost: new Decimal("e144e4"),
            effect(){
                let eff = powExp(player.e.mm.div(1e120).add(1),2.23).pow(2023)
                if (eff.gte("e105e6")) eff = eff.log10().div(105e6).pow(0.5).mul(105e6).pow10()
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Us.upgrades[103].effect)+"x"
                return dis
            },
        },
        104: {
            title: "UnSofter Enzyme",
            currencyDisplayName: "unvaxxed tRNA",
            currencyInternalName: "trna",
            currencyLayer: "Us",
            description() {return "Remove 'Enzyme Boost' softcap and multiply its base by 10, 'Atomic RNA Exp' base*2, tRNA bases*1.01, SARS Mutation sc/1.043."},
            cost: new Decimal("e31950"),
        },
        105: {
            title: "Recovery UnBooster",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            description() {return "'SympAtoms' amount is effective US amount and its base is 2023, "+(shiftDown?"'Severe Skin Rash'":"'SSR'")+" exp is 1.1, unlock mutated rRNA."},
            cost: new Decimal("e11e9"),
        },
        111: {
            title: "Ribosomal",
            currencyDisplayName: "mutated rRNA",
            currencyInternalName: "rrna",
            currencyLayer: "Us",
            description() {return "Mutated rRNA boosts "+colorText("span","#308030","X")+"MNA"+", 'Severe Tiredness' exp+0.15, "+(shiftDown?"'Severe Skin Rash'":"'SSR'")+" exp is 1.2."},
            cost: new Decimal(2023),
            effect(){
                let eff = tmp.Us.rrnaAmt.sub(1800).max(0).div(100).add(10).log10()
                if (eff.gte(45)) eff = eff.div(45).pow(0.5).mul(30).add(15)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Us.upgrades[111].effect)
                return dis
            },
            canAfford() {
                return tmp.Us.rrnaAmt.gte(2023)
            },
            pay() {
                player.Us.rrna = decimalZero
            },
            style: {
                "background"() {
                    if (!hasUpgrade("Us",111)) {
                    let color = "#bf8f8f"
                    if (tmp.Us.upgrades[111].canAfford) color = "#4156a5"
                    return color
                    }
                }
            }
        },
        112: {
            title: "Non-Coding",
            currencyDisplayName: "mutated rRNA",
            currencyInternalName: "rrna",
            currencyLayer: "Us",
            description() {return "Mutated rRNA reduces 'mRNA Booster' scaling, 'Adenity' eff^1.3, UnBoosted Virus eff dil+0.5."},
            cost: new Decimal(6250),
            effect(){
                let eff = tmp.Us.rrnaAmt.sub(6000).max(0).div(100).add(10).log10()
                return eff
            },
            effectDisplay(){
                let dis = "/"+format(tmp.Us.upgrades[112].effect)
                return dis
            },
            canAfford() {
                return tmp.Us.rrnaAmt.gte(6250)
            },
            pay() {
                player.Us.rrna = decimalZero
            },
            style: {
                "background"() {
                    if (!hasUpgrade("Us",112)) {
                    let color = "#bf8f8f"
                    if (tmp.Us.upgrades[112].canAfford) color = "#4156a5"
                    return color
                    }
                }
            }
        },
        113: {
            title: "Ribozyme",
            currencyDisplayName: "mutated rRNA",
            currencyInternalName: "rrna",
            currencyLayer: "Us",
            description() {return "Mutated rRNA reduces 'Chance Boost' scaling, 'Severe Mile' effect^1.4."},
            cost: new Decimal(21900),
            effect(){
                let eff = tmp.Us.rrnaAmt.sub(21000).max(0).div(90).add(10).log10().pow(0.5)
                return eff
            },
            effectDisplay(){
                let dis = "/"+format(tmp.Us.upgrades[113].effect)
                return dis
            },
            canAfford() {
                return tmp.Us.rrnaAmt.gte(21900)
            },
            pay() {
                player.Us.rrna = decimalZero
            },
            style: {
                "background"() {
                    if (!hasUpgrade("Us",113)) {
                    let color = "#bf8f8f"
                    if (tmp.Us.upgrades[113].canAfford) color = "#4156a5"
                    return color
                    }
                }
            }
        },
        114: {
            title: "Ribosomal proteins",
            currencyDisplayName: "mutated rRNA",
            currencyInternalName: "rrna",
            currencyLayer: "Us",
            description() {return "Mutated rRNA gain exp+0.1, Corona Mutation scaling/1.1."},
            cost: new Decimal(32900),
            canAfford() {
                return tmp.Us.rrnaAmt.gte(32900)
            },
            pay() {
                player.Us.rrna = decimalZero
            },
            style: {
                "background"() {
                    if (!hasUpgrade("Us",114)) {
                    let color = "#bf8f8f"
                    if (tmp.Us.upgrades[114].canAfford) color = "#4156a5"
                    return color
                    }
                }
            }
        },
        115: {
            title: "Stem-Loop",
            currencyDisplayName: "mutated rRNA",
            currencyInternalName: "rrna",
            currencyLayer: "Us",
            description() {return "Mut. rRNA reduces 'MMVir' and 'MMBst' sc, 'SevMil' eff^1.3, rRNA gain exp+0.1 at 70,150/98,500, tet base+1 at 157,700."},
            cost: new Decimal(64100),
            effect(){
                let eff = tmp.Us.rrnaAmt.sub(64000).max(0).div(100).add(10).log10().pow(0.5)
                return eff
            },
            effectDisplay(){
                let dis = "/"+format(tmp.Us.upgrades[115].effect)
                return dis
            },
            canAfford() {
                return tmp.Us.rrnaAmt.gte(64100)
            },
            pay() {
                player.Us.rrna = decimalZero
            },
            style: {
                "background"() {
                    if (!hasUpgrade("Us",115)) {
                    let color = "#bf8f8f"
                    if (tmp.Us.upgrades[115].canAfford) color = "#4156a5"
                    return color
                    }
                }
            }
        },
        121: {
            title: "LSU",
            currencyDisplayName: "mutated rRNA",
            currencyInternalName: "rrna",
            currencyLayer: "Us",
            description() {return "Mutated rRNA adds to 'UnRetRNA' effect, row 2 and 3 rRNA upgrades boost 'SelfMax'."},
            cost: new Decimal(395000),
            effect(){
                let eff = tmp.Us.rrnaAmt.sub(395000).max(0).div(1000).add(10).log10().sub(1).div(10)
                return eff
            },
            effectDisplay(){
                let dis = "+"+format(tmp.Us.upgrades[121].effect)
                return dis
            },
            canAfford() {
                return tmp.Us.rrnaAmt.gte(395000)
            },
            pay() {
                player.Us.rrna = decimalZero
            },
            style: {
                "background"() {
                    if (!hasUpgrade("Us",121)) {
                    let color = "#bf8f8f"
                    if (tmp.Us.upgrades[121].canAfford) color = "#4156a5"
                    return color
                    }
                }
            }
        },
        122: {
            title: "SSU",
            currencyDisplayName: "mutated rRNA",
            currencyInternalName: "rrna",
            currencyLayer: "Us",
            description() {return "Each tRNA Mutation after 190 multiplies 'Mutated MMNA' base by 1.005 (square roots after 20 times)."},
            cost: new Decimal(571000),
            effect(){
                let exp = player.Us.mu.sub(190).max(0)
                if (exp.gte(20)) exp = exp.div(20).pow(0.5).mul(20)
                let eff = Decimal.pow(1.005,exp)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Us.upgrades[122].effect)+"x"
                return dis
            },
            canAfford() {
                return tmp.Us.rrnaAmt.gte(571000)
            },
            pay() {
                player.Us.rrna = decimalZero
            },
            style: {
                "background"() {
                    if (!hasUpgrade("Us",122)) {
                    let color = "#bf8f8f"
                    if (tmp.Us.upgrades[122].canAfford) color = "#4156a5"
                    return color
                    }
                }
            }
        },
        123: {
            title: "rRNA Assembly",
            currencyDisplayName: "mutated rRNA",
            currencyInternalName: "rrna",
            currencyLayer: "Us",
            description() {return "Mutated rRNA reduces 'Mutation Scaling' scaling."},
            cost: new Decimal(2e6),
            effect(){
                let eff = tmp.Us.rrnaAmt.sub(2e6).max(0).div(1e5).add(10).log10().pow(0.4)
                return eff
            },
            effectDisplay(){
                let dis = "/"+format(tmp.Us.upgrades[123].effect)
                return dis
            },
            canAfford() {
                return tmp.Us.rrnaAmt.gte(2e6)
            },
            pay() {
                player.Us.rrna = decimalZero
            },
            style: {
                "background"() {
                    if (!hasUpgrade("Us",123)) {
                    let color = "#bf8f8f"
                    if (tmp.Us.upgrades[123].canAfford) color = "#4156a5"
                    return color
                    }
                }
            }
        },
        124: {
            title: "Ribosomal Subunits",
            currencyDisplayName: "mutated rRNA",
            currencyInternalName: "rrna",
            currencyLayer: "Us",
            description() {return "Mutated rRNA increases CRNA exponent, US milestone 46 eff^5."},
            cost: new Decimal(565e7),
            effect(){
                let eff = tmp.Us.rrnaAmt.sub(56e8).max(0).div(1e9).add(1).log10().pow(0.4).div(2)
                return eff
            },
            effectDisplay(){
                let dis = "+"+format(tmp.Us.upgrades[124].effect)
                return dis
            },
            canAfford() {
                return tmp.Us.rrnaAmt.gte(565e7)
            },
            pay() {
                player.Us.rrna = decimalZero
            },
            style: {
                "background"() {
                    if (!hasUpgrade("Us",124)) {
                    let color = "#bf8f8f"
                    if (tmp.Us.upgrades[124].canAfford) color = "#4156a5"
                    return color
                    }
                }
            }
        },
        125: {
            title: "rRNA Polymerase",
            currencyDisplayName: "mutated rRNA",
            currencyInternalName: "rrna",
            currencyLayer: "Us",
            description() {return "Change uncoating power and UU milestone 29 to add 'Severe Tiredness' exponent, CRNA exp+0.1, UBV eff dil+0.3."},
            cost: new Decimal(66e13),
            canAfford() {
                return tmp.Us.rrnaAmt.gte(66e13)
            },
            pay() {
                player.Us.rrna = decimalZero
            },
            style: {
                "background"() {
                    if (!hasUpgrade("Us",125)) {
                    let color = "#bf8f8f"
                    if (tmp.Us.upgrades[125].canAfford) color = "#4156a5"
                    return color
                    }
                }
            }
        },
        131: {
            title: "Prokaryotic rRNA",
            currencyDisplayName: "mutated rRNA",
            currencyInternalName: "rrna",
            currencyLayer: "Us",
            description() {return "Change uncoated enzyme effect to dilation, CRNA exp+0.05, 'SSR' exp+0.25, 'S. Disc.' exp+0.5."},
            cost: new Decimal(239e19),
            canAfford() {
                return tmp.Us.rrnaAmt.gte(239e19)
            },
            pay() {
                player.Us.rrna = decimalZero
            },
            style: {
                "background"() {
                    if (!hasUpgrade("Us",131)) {
                    let color = "#bf8f8f"
                    if (tmp.Us.upgrades[131].canAfford) color = "#4156a5"
                    return color
                    }
                }
            }
        },
        132: {
            title: "Eukaryotic rRNA",
            currencyDisplayName: "mutated rRNA",
            currencyInternalName: "rrna",
            currencyLayer: "Us",
            description() {return "Mutated rRNA makes unvaxxed severity 2nd softcap later, UBV eff dilation+0.1."},
            cost: new Decimal(453e27),
            effect(){
                let eff = tmp.Us.rrnaAmt.sub(45e28).max(0).div(1e28).add(10).log10().pow(0.35)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Us.upgrades[132].effect)
                return dis
            },
            canAfford() {
                return tmp.Us.rrnaAmt.gte(453e27)
            },
            pay() {
                player.Us.rrna = decimalZero
            },
            style: {
                "background"() {
                    if (!hasUpgrade("Us",132)) {
                    let color = "#bf8f8f"
                    if (tmp.Us.upgrades[132].canAfford) color = "#4156a5"
                    return color
                    }
                }
            }
        },
        133: {
            title: "Mitochondrial rRNA",
            currencyDisplayName: "mutated rRNA",
            currencyInternalName: "rrna",
            currencyLayer: "Us",
            description() {return "Change 'BasExp' effect to dilation, CRNA exp+0.05."},
            cost: new Decimal(815e44),
            canAfford() {
                return tmp.Us.rrnaAmt.gte(815e44)
            },
            pay() {
                player.Us.rrna = decimalZero
            },
            style: {
                "background"() {
                    if (!hasUpgrade("Us",133)) {
                    let color = "#bf8f8f"
                    if (tmp.Us.upgrades[133].canAfford) color = "#4156a5"
                    return color
                    }
                }
            }
        },
        134: {
            title: "rRNA Biosynthesis",
            currencyDisplayName: "mutated rRNA",
            currencyInternalName: "rrna",
            currencyLayer: "Us",
            description() {return "CRNA makes unvaxxed severity 2nd softcap later, SARS Mutation limit+1, UnBoosted Virus gain exp+0.05."},
            cost: new Decimal(212e60),
            effect(){
                let eff = player.e.crna.sub(44e11).max(0).div(5e11).add(10).log10().pow(0.5)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Us.upgrades[134].effect)
                return dis
            },
            canAfford() {
                return tmp.Us.rrnaAmt.gte(212e60)
            },
            pay() {
                player.Us.rrna = decimalZero
            },
            style: {
                "background"() {
                    if (!hasUpgrade("Us",134)) {
                    let color = "#bf8f8f"
                    if (tmp.Us.upgrades[134].canAfford) color = "#4156a5"
                    return color
                    }
                }
            }
        },
        135: {
            title: "rRNA Degradation",
            currencyDisplayName: "mutated rRNA",
            currencyInternalName: "rrna",
            currencyLayer: "Us",
            description() {return "MMNA makes unvaxxed severity 2nd softcap later, SARS Mutation limit+1, UnBoosted Virus gain exp+0.05."},
            cost: new Decimal(162e89),
            effect(){
                let eff = player.e.mm.add(10).log10().sub(38e3).div(500).max(1).pow(0.3)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Us.upgrades[135].effect)
                return dis
            },
            canAfford() {
                return tmp.Us.rrnaAmt.gte(162e89)
            },
            pay() {
                player.Us.rrna = decimalZero
            },
            style: {
                "background"() {
                    if (!hasUpgrade("Us",135)) {
                    let color = "#bf8f8f"
                    if (tmp.Us.upgrades[135].canAfford) color = "#4156a5"
                    return color
                    }
                }
            }
        },
    },
    buyables: {
		rows: 4,
        cols: 4,
        11: {
            title: "Severity Multiplier",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[11].costb
                let exp = tmp.Us.buyables[11].coste
                let x = player.Us.buyables[11]
                if (x.gte(12000)) x = x.mul(1.2).sub(2400).div(12000).pow(1.01).mul(12000)
                if (x.gte(3500)) x = x.mul(1.3).sub(1050).div(3500).pow(1.03).mul(3500)
                if (x.gte(1e3)) x = x.mul(1.3).sub(300).div(1e3).pow(1.05).mul(1e3)
                let cost = Decimal.pow(base,x.pow(exp)).mul(30)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(Math.E)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.2)
                return cost
            },
            base() { 
                let base = decimalTwo
                if (hasUpgrade("Us",15)) base = base.add(tmp.Us.upgrades[15].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[11]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "Main") return
                let extra = ""
                let dis = "Multiply unvaxxed severity gain by "+format(tmp.Us.buyables[11].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed severity\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 11))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.Us.severity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[11].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",543)) player[this.layer].buyables[this.id] = b
                    else {
                        if (!hasMilestone("Us",6) && !hasUpgrade("ct",543)) player.Us.severity = player.Us.severity.sub(cost).max(0)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Us.severity
                let base = tmp.Us.buyables[11].costb
                let exp = tmp.Us.buyables[11].coste
                let target = s.div(30).log(base).root(exp)
                if (target.gte(1e3)) target = target.div(1e3).root(1.05).mul(1e3).add(300).div(1.3)
                if (target.gte(3500)) target = target.div(3500).root(1.03).mul(3500).add(1050).div(1.3)
                if (target.gte(12000)) target = target.div(12000).root(1.01).mul(12000).add(2400).div(1.2)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[11].maxAfford
                let base = tmp.Us.buyables[11].costb
                let exp = tmp.Us.buyables[11].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(30)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[11] = player.Us.buyables[11].max(target)
                
                }
            },
        },
        12: {
            title: "<span style='color:#A00000;text-shadow:0px 0px 10px;'><h3>Hydrogen</h3></span> Exponent",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[12].costb
                let exp = tmp.Us.buyables[12].coste
                let x = player.Us.buyables[12]
                if (x.gte(50)) x = x.mul(1.3).sub(15).div(50).pow(1.1).mul(50)
                if (x.gte(10)) x = x.mul(1.4).sub(4)
                let cost = Decimal.pow(base,x.pow(exp)).mul(2e6)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = decimalTwo
                return cost
            },
            coste() { 
                let cost = new Decimal(1.3)
                return cost
            },
            base() { 
                let base = new Decimal(.2)
                if (hasUpgrade("Us",43)) base = base.add(tmp.Us.upgrades[43].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[12]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "Main") return
                let extra = ""
                let dis = "Increase <span style='color:#A00000;text-shadow:0px 0px 10px;'>Hydrogen</span> gain exponent by "+format(tmp.Us.buyables[12].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" <span style='color:#A00000;text-shadow:0px 0px 10px;'>Hydrogen</span>\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 12))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.e.h.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[12].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",543)) player[this.layer].buyables[this.id] = b
                    else {
                        player.e.h = player.e.h.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.e.h
                let base = tmp.Us.buyables[12].costb
                let exp = tmp.Us.buyables[12].coste
                let target = s.div(2e6).log(base).root(exp)
                if (target.gte(10)) target = target.add(4).div(1.4)
                if (target.gte(50)) target = target.div(50).root(1.1).mul(50).add(15).div(1.3)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[12].maxAfford
                let base = tmp.Us.buyables[12].costb
                let exp = tmp.Us.buyables[12].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(2e6)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[12] = player.Us.buyables[12].max(target)
                
                }
            },
        },
        13: {
            title: "<span style='color:#00A000;text-shadow:0px 0px 10px;'><h3>Carbon</h3></span> Exponent",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[13].costb
                let exp = tmp.Us.buyables[13].coste
                let x = player.Us.buyables[13]
                if (x.gte(50)) x = x.mul(1.3).sub(15).div(50).pow(1.1).mul(50)
                if (x.gte(10)) x = x.mul(1.4).sub(4)
                let cost = Decimal.pow(base,x.pow(exp)).mul(2e6)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(2.1)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.3)
                return cost
            },
            base() { 
                let base = new Decimal(.2)
                if (hasUpgrade("Us",43)) base = base.add(tmp.Us.upgrades[43].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[13]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "Main") return
                let extra = ""
                let dis = "Increase <span style='color:#00A000;text-shadow:0px 0px 10px;'>Carbon</span> gain exponent by "+format(tmp.Us.buyables[13].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" <span style='color:#00A000;text-shadow:0px 0px 10px;'>Carbon</span>\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 13))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.e.c.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[13].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",543)) player[this.layer].buyables[this.id] = b
                    else {
                        player.e.c = player.e.c.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.e.c
                let base = tmp.Us.buyables[13].costb
                let exp = tmp.Us.buyables[13].coste
                let target = s.div(2e6).log(base).root(exp)
                if (target.gte(10)) target = target.add(4).div(1.4)
                if (target.gte(50)) target = target.div(50).root(1.1).mul(50).add(15).div(1.3)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[13].maxAfford
                let base = tmp.Us.buyables[13].costb
                let exp = tmp.Us.buyables[13].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(2e6)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[13] = player.Us.buyables[13].max(target)
                
                }
            },
        },
        21: {
            title: "<span style='color:#00A0A0;text-shadow:0px 0px 10px;'><h3>Nitrogen</h3></span> Exponent",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[21].costb
                let exp = tmp.Us.buyables[21].coste
                let x = player.Us.buyables[21]
                if (x.gte(50)) x = x.mul(1.3).sub(15).div(50).pow(1.1).mul(50)
                if (x.gte(10)) x = x.mul(1.4).sub(4)
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e7)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(2.2)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.3)
                return cost
            },
            base() { 
                let base = new Decimal(.2)
                if (hasUpgrade("Us",43)) base = base.add(tmp.Us.upgrades[43].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[21]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "Main") return
                let extra = ""
                let dis = "Increase <span style='color:#00A0A0;text-shadow:0px 0px 10px;'>Nitrogen</span> gain exponent by "+format(tmp.Us.buyables[21].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" <span style='color:#00A0A0;text-shadow:0px 0px 10px;'>Nitrogen</span>\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 21))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.e.n.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[21].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",543)) player[this.layer].buyables[this.id] = b
                    else {
                        player.e.n = player.e.n.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.e.n
                let base = tmp.Us.buyables[21].costb
                let exp = tmp.Us.buyables[21].coste
                let target = s.div(1e7).log(base).root(exp)
                if (target.gte(10)) target = target.add(4).div(1.4)
                if (target.gte(50)) target = target.div(50).root(1.1).mul(50).add(15).div(1.3)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[21].maxAfford
                let base = tmp.Us.buyables[21].costb
                let exp = tmp.Us.buyables[21].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e7)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[21] = player.Us.buyables[21].max(target)
                
                }
            },
        },
        22: {
            title: "<span style='color:#0000A0;text-shadow:0px 0px 10px;'><h3>Oxygen</h3></span> Exponent",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[22].costb
                let exp = tmp.Us.buyables[22].coste
                let x = player.Us.buyables[22]
                if (x.gte(50)) x = x.mul(1.3).sub(15).div(50).pow(1.1).mul(50)
                if (x.gte(10)) x = x.mul(1.4).sub(4)
                let cost = Decimal.pow(base,x.pow(exp)).mul(5e9)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(2.3)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.3)
                return cost
            },
            base() { 
                let base = new Decimal(.2)
                if (hasUpgrade("Us",43)) base = base.add(tmp.Us.upgrades[43].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[22]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "Main") return
                let extra = ""
                let dis = "Increase <span style='color:#0000A0;text-shadow:0px 0px 10px;'>Oxygen</span> gain exponent by "+format(tmp.Us.buyables[22].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" <span style='color:#0000A0;text-shadow:0px 0px 10px;'>Oxygen</span>\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 22))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.e.o.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[22].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",543)) player[this.layer].buyables[this.id] = b
                    else {
                        player.e.o = player.e.o.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.e.o
                let base = tmp.Us.buyables[22].costb
                let exp = tmp.Us.buyables[22].coste
                let target = s.div(5e9).log(base).root(exp)
                if (target.gte(10)) target = target.add(4).div(1.4)
                if (target.gte(50)) target = target.div(50).root(1.1).mul(50).add(15).div(1.3)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[22].maxAfford
                let base = tmp.Us.buyables[22].costb
                let exp = tmp.Us.buyables[22].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(5e9)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[22] = player.Us.buyables[22].max(target)
                
                }
            },
        },
        23: {
            title: "<span style='color:#bb5500;text-shadow:0px 0px 10px;'><h3>Phosphorus</h3></span> Exponent",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[23].costb
                let exp = tmp.Us.buyables[23].coste
                let x = player.Us.buyables[23]
                if (x.gte(50)) x = x.mul(1.3).sub(15).div(50).pow(1.1).mul(50)
                if (x.gte(10)) x = x.mul(1.4).sub(4)
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e6)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = decimalThree
                return cost
            },
            coste() { 
                let cost = new Decimal(1.3)
                return cost
            },
            base() { 
                let base = new Decimal(.2)
                if (hasUpgrade("Us",43)) base = base.add(tmp.Us.upgrades[43].effect)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[23]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "Main") return
                let extra = ""
                let dis = "Increase <span style='color:#bb5500;text-shadow:0px 0px 10px;'>Phosphorus</span> gain exponent by "+format(tmp.Us.buyables[23].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" <span style='color:#bb5500;text-shadow:0px 0px 10px;'>Phosphorus</span>\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 23))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.e.ph.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[23].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",543)) player[this.layer].buyables[this.id] = b
                    else {
                        player.e.ph = player.e.ph.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.e.ph
                let base = tmp.Us.buyables[23].costb
                let exp = tmp.Us.buyables[23].coste
                let target = s.div(1e6).log(base).root(exp)
                if (target.gte(10)) target = target.add(4).div(1.4)
                if (target.gte(50)) target = target.div(50).root(1.1).mul(50).add(15).div(1.3)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[23].maxAfford
                let base = tmp.Us.buyables[23].costb
                let exp = tmp.Us.buyables[23].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e6)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[23] = player.Us.buyables[23].max(target)
                
                }
            },
        },
        31: {
            title: "<span style='color:#505000;text-shadow:0px 0px 10px;'><h3>Atomic RNA</h3></span> Exponent",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[31].costb
                let exp = tmp.Us.buyables[31].coste
                let x = player.Us.buyables[31]
                if (x.gte(500)) x = x.mul(1.1).sub(50).div(500).pow(1.3).mul(500)
                if (x.gte(100)) x = x.mul(1.3).sub(30).div(100).pow(1.2).mul(100)
                if (x.gte(35)) x = x.mul(1.4).sub(14)
                if (x.gte(10)) x = x.mul(1.5).sub(5)
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e85)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e10)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.3)
                return cost
            },
            base() { 
                let base = new Decimal(.1)
                if (hasUpgrade("Us",43)) base = base.add(tmp.Us.upgrades[43].effect.div(2))
                if (hasUpgrade("Us",103)) base = base.mul(2)
                if (hasUpgrade("Us",104)) base = base.mul(2)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[31]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "Main") return
                let extra = ""
                let dis = "Increase <span style='color:#505000;text-shadow:0px 0px 10px;'>Atomic RNA</span> gain exponent by "+format(tmp.Us.buyables[31].base)
                return dis + ".\n\
                Requires: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" <span style='color:#505000;text-shadow:0px 0px 10px;'>Atomic RNA</span>\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 31))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.e.at.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[31].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasUpgrade("ct",543)) player[this.layer].buyables[this.id] = b
                    else {
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.e.at
                let base = tmp.Us.buyables[31].costb
                let exp = tmp.Us.buyables[31].coste
                let target = s.div(1e85).log(base).root(exp)
                if (target.gte(10)) target = target.add(5).div(1.5)
                if (target.gte(35)) target = target.add(14).div(1.4)
                if (target.gte(100)) target = target.div(100).root(1.2).mul(100).add(30).div(1.3)
                if (target.gte(500)) target = target.div(500).root(1.3).mul(500).add(50).div(1.1)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[31].maxAfford
                let base = tmp.Us.buyables[31].costb
                let exp = tmp.Us.buyables[31].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e85)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[31] = player.Us.buyables[31].max(target)
                
                }
            },
        },
        41: {
            title: "Severe Cough",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[41].costb
                let exp = tmp.Us.buyables[41].coste
                let x = player.Us.buyables[41]
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e164)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e10)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.6)
                return cost
            },
            base() { 
                let exp = tmp.Us.buyables[43].effect.add(1)
                let x = player.Us.severity
                if (hasMilestone("uv",16)) x = player.Us.bestSev
                let base = x.max(10).log10().pow(exp)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[41]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "Severe Symptoms") return
                let extra = ""
                let dis = "Raise unvaxxed uncoater base to "+format(tmp.Us.buyables[41].base)+" (based on unvaxxed severity)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed severity\n\
                Effect: ^" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 41))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.Us.severity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[41].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("Us",15)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Us.severity = player.Us.severity.sub(cost).max(0)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Us.severity
                let base = tmp.Us.buyables[41].costb
                let exp = tmp.Us.buyables[41].coste
                let target = s.div(1e164).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[41].maxAfford
                let base = tmp.Us.buyables[41].costb
                let exp = tmp.Us.buyables[41].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e164)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[41] = player.Us.buyables[41].max(target)
                
                }
            },
        },
        42: {
            title: "Severe Fever",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[42].costb
                let exp = tmp.Us.buyables[42].coste
                let x = player.Us.buyables[42]
                let cost = Decimal.pow(base,x.pow(exp)).mul(5e195)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e12)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.6)
                return cost
            },
            base() { 
                let base = Decimal.pow(player.Us.upgrades.length+1,.5)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[42]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "Severe Symptoms") return
                let extra = ""
                let dis = "Multiply unvaxxed uncoater gain by "+format(tmp.Us.buyables[42].base)+" (based on US upgrades)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed severity\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 42))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.Us.severity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[42].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("Us",15)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Us.severity = player.Us.severity.sub(cost).max(0)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Us.severity
                let base = tmp.Us.buyables[42].costb
                let exp = tmp.Us.buyables[42].coste
                let target = s.div(5e195).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[42].maxAfford
                let base = tmp.Us.buyables[42].costb
                let exp = tmp.Us.buyables[42].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(5e195)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[42] = player.Us.buyables[42].max(target)
                
                }
            },
        },
        43: {
            title: "Severe Tiredness",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[43].costb
                let exp = tmp.Us.buyables[43].coste
                let x = player.Us.buyables[43]
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e250)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e14)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.6)
                return cost
            },
            base() { 
                let exp = decimalOne
                if (hasUpgrade("Us",93)) exp = exp.add(tmp.Us.upgrades[93].effect)
                if (hasUpgrade("Us",111)) exp = exp.add(0.15)
                if (hasUpgrade("Us",125)) exp = exp.add(tmp.Uu.powerEff).add(tmp.Uu.milestones[28].effect)
                let base = player.Us.points.sub(55).div(30).max(0).pow(exp)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[43]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "Severe Symptoms") return
                let extra = ""
                let dis = "Increase 'Severe Cough' exponent by "+format(tmp.Us.buyables[43].base)+" (based on unvaxxed symptoms)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed severity\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 43))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.Us.severity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[43].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("Us",15)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Us.severity = player.Us.severity.sub(cost).max(0)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Us.severity
                let base = tmp.Us.buyables[43].costb
                let exp = tmp.Us.buyables[43].coste
                let target = s.div(1e250).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[43].maxAfford
                let base = tmp.Us.buyables[43].costb
                let exp = tmp.Us.buyables[43].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e250)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[43] = player.Us.buyables[43].max(target)
                
                }
            },
        },
        51: {
            title: "Severe Pain",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[51].costb
                let exp = tmp.Us.buyables[51].coste
                let x = player.Us.buyables[51]
                let cost = Decimal.pow(base,x.pow(exp)).mul("5e312")
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e16)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.6)
                return cost
            },
            base() { 
                let base = powExp(player.Up.points.max(10).log10(),.4).pow(0.035)
                if (base.gte(1e12)) base = base.log10().div(12).pow(0.6).mul(12).pow10().div(1e12).pow(0.6).mul(1e12)
                if (base.gte(1e21)) base = base.log10().div(21).pow(0.5).mul(21).pow10().div(1e21).pow(0.5).mul(1e21)
                if (base.gte(1e80)) base = base.log10().div(80).pow(0.65).mul(80).pow10().div(1e80).pow(0.5).mul(1e80)
                if (base.gte("e4e5")) base = base.log10().div(4e5).pow(0.65).mul(4e5).pow10().div("e4e5").pow(0.5).mul("e4e5")
                if (base.gte("e5e7")) base = powExp(base.log10().mul(200).log10(),3).pow(2).pow10().pow(5e5)
                if (base.gte("e22e14")) base = base.log10().div(22e14).pow(0.5).mul(22e14).pow10().div("e22e14").pow(0.2).mul("e22e14")
                if (base.gte("e1e24")) base = base.log10().div(1e24).pow(0.4).mul(1e24).pow10().div("e1e24").pow(0.4).mul("e1e24")
                if (base.gte("e1e25")) base = base.log10().div(1e25).pow(0.5).mul(1e25).pow10().div("e1e25").pow(0.5).mul("e1e25")
                if (base.gte("e1e30")) base = base.log10().div(1e30).pow(0.5).mul(1e30).pow10().div("e1e30").pow(0.5).mul("e1e30")
                if (hasUpgrade("Ud",31)) base = slogadd(player.Up.points.max(10),-4).pow(2).div(10)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[51]
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x).min("e5e48")
                if (hasUpgrade("Ud",31)) eff = Decimal.mul(base, x.add(1).log10()).add(1)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "Severe Symptoms") return
                let extra = ""
                let dis = "Multiply unvaxxed severity gain by "+format(tmp.Us.buyables[51].base)+" (based on unvaxxed prions)"
                let eff = format(tmp[this.layer].buyables[this.id].effect)+"x"
                if (hasUpgrade("Ud",31)) {
                    dis = "Raise unvaxxed severity gain to ^(1+"+format(tmp.Us.buyables[51].base)+"log10(x+1)) (based on unvaxxed prions)"
                    eff = "^"+format(tmp[this.layer].buyables[this.id].effect)
                }
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed severity\n\
                Effect: " + eff+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 51))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.Us.severity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[51].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("Us",15)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Us.severity = player.Us.severity.sub(cost).max(0)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Us.severity
                let base = tmp.Us.buyables[51].costb
                let exp = tmp.Us.buyables[51].coste
                let target = s.div("5e312").log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[51].maxAfford
                let base = tmp.Us.buyables[51].costb
                let exp = tmp.Us.buyables[51].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul("5e312")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[51] = player.Us.buyables[51].max(target)
                
                }
            },
        },
        52: {
            title: "Severe Sore Throat",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[52].costb
                let exp = tmp.Us.buyables[52].coste
                let x = player.Us.buyables[52]
                let cost = Decimal.pow(base,x.pow(exp)).mul("5e372")
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e18)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.6)
                return cost
            },
            base() { 
                let base = powExp(player.Us.severity.max(10).log10(),0.9).pow(0.3)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[52]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "Severe Symptoms") return
                let extra = ""
                let dis = "Multiply unvaxxed uncoater gain by "+format(tmp.Us.buyables[52].base)+" (based on unvaxxed severity)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed severity\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 52))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.Us.severity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[52].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("Us",15)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Us.severity = player.Us.severity.sub(cost).max(0)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Us.severity
                let base = tmp.Us.buyables[52].costb
                let exp = tmp.Us.buyables[52].coste
                let target = s.div("5e372").log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[52].maxAfford
                let base = tmp.Us.buyables[52].costb
                let exp = tmp.Us.buyables[52].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul("5e372")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[52] = player.Us.buyables[52].max(target)
                
                }
            },
        },
        53: {
            title: "Severe Chills",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[53].costb
                let exp = tmp.Us.buyables[53].coste
                let x = player.Us.buyables[53]
                let cost = Decimal.pow(base,x.pow(exp)).mul("e456")
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e20)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.6)
                return cost
            },
            base() { 
                let base = powExp(tmp.Us.buyables[42].effect.max(10).log10().pow(.5),.8).div(60)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[53]
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.mul(base, x)
                if (eff.gte(1.75)) eff = eff.div(1.75).pow(0.5).mul(1.75)
                return eff
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "Severe Symptoms") return
                let extra = ""
                let eff = tmp[this.layer].buyables[this.id].effect
                let dis = "Increase unvaxxed severity 2nd effect exponent by "+format(tmp.Us.buyables[53].base)+" (based on 'Severe Fever' effect)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed severity\n\
                Effect: +" + format(eff)+(eff.gte(1.75)?" (softcapped)":"")+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 53))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.Us.severity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[53].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("Us",15)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Us.severity = player.Us.severity.sub(cost).max(0)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Us.severity
                let base = tmp.Us.buyables[53].costb
                let exp = tmp.Us.buyables[53].coste
                let target = s.div("e456").log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[53].maxAfford
                let base = tmp.Us.buyables[53].costb
                let exp = tmp.Us.buyables[53].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul("e456")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[53] = player.Us.buyables[53].max(target)
                
                }
            },
        },
        61: {
            title: "Severe Conjunctivitis",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[61].costb
                let exp = tmp.Us.buyables[61].coste
                let x = player.Us.buyables[61]
                let cost = Decimal.pow(base,x.pow(exp)).mul("e1500")
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e40)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.6)
                return cost
            },
            base() { 
                let base = powExp(player.s.points.max(10).log10(),.8).div(1e84).pow(0.4).max(1)
                if (base.gte(1e60)) base = base.log10().div(60).pow(0.65).mul(60).pow10().div(1e60).pow(0.65).mul(1e60)
                if (hasUpgrade("Ud",41)) base = player.s.points.max(10).log10().max(10).log10().pow(0.11).div(1e7)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[61]
                let base = tmp[this.layer].buyables[this.id].base
                let eff = Decimal.pow(base, x).min("ee54")
                if (hasUpgrade("Ud",41)) eff = Decimal.mul(base, x.add(1).log10()).add(1)
                return eff;
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "Severe Symptoms") return
                let extra = ""
                let dis = "Multiply unvaxxed severity gain by "+format(tmp.Us.buyables[61].base)+" (based on symptoms)"
                let eff = format(tmp[this.layer].buyables[this.id].effect)+"x"
                if (hasUpgrade("Ud",41)) {
                    dis = "Raise unvaxxed severity gain to ^(1+"+format(tmp.Us.buyables[61].base)+"log10(x+1)) (based on symptoms)"
                    eff = "^"+format(tmp[this.layer].buyables[this.id].effect)
                }
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed severity\n\
                Effect: " + eff+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 61))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.Us.severity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[61].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("Us",15)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Us.severity = player.Us.severity.sub(cost).max(0)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Us.severity
                let base = tmp.Us.buyables[61].costb
                let exp = tmp.Us.buyables[61].coste
                let target = s.div("e1500").log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[61].maxAfford
                let base = tmp.Us.buyables[61].costb
                let exp = tmp.Us.buyables[61].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul("e1500")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[61] = player.Us.buyables[61].max(target)
                
                }
            },
        },
        62: {
            title: "Severe Skin Rash",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[62].costb
                let exp = tmp.Us.buyables[62].coste
                let x = player.Us.buyables[62]
                let cost = Decimal.pow(base,x.pow(exp)).mul("e2798")
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e50)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.6)
                return cost
            },
            base() { 
                let exp = 0.7
                if (hasUpgrade("Us",94)) exp = 1
                if (hasUpgrade("Us",102)) exp = 1.05
                if (hasUpgrade("Us",105)) exp = 1.1
                if (hasUpgrade("Us",111)) exp = 1.2
                if (hasMilestone("Us",53)) exp += .3
                if (hasUpgrade("Us",131)) exp += .25
                let base = powExp(player.Uu.points.add(1),exp).pow(exp).max(1)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[62]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "Severe Symptoms") return
                let extra = ""
                let dis = "Multiply unvaxxed severity gain by "+format(tmp.Us.buyables[62].base)+" (based on unvaxxed uncoaters)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed severity\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 62))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.Us.severity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[62].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("Us",15)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Us.severity = player.Us.severity.sub(cost).max(0)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Us.severity
                let base = tmp.Us.buyables[62].costb
                let exp = tmp.Us.buyables[62].coste
                let target = s.div("e2798").log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[62].maxAfford
                let base = tmp.Us.buyables[62].costb
                let exp = tmp.Us.buyables[62].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul("e2798")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[62] = player.Us.buyables[62].max(target)
                
                }
            },
        },
        63: {
            title: "Severe Discoloration",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[63].costb
                let exp = tmp.Us.buyables[63].coste
                let x = player.Us.buyables[63]
                let cost = Decimal.pow(base,x.pow(exp)).mul("e6596")
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e60)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.6)
                return cost
            },
            base() { 
                let exp = 0.75
                if (hasUpgrade("Us",95)) exp+=.5
                if (hasMilestone("Us",45)) exp+=.3
                if (hasMilestone("Us",53)) exp += .5
                if (hasUpgrade("Us",131)) exp += .5
                let base = player.Us.symptoms.pow(exp).div(130)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[63]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "Severe Symptoms") return
                let extra = ""
                let dis = "Increase severe symptom effect exponent by "+format(tmp.Us.buyables[63].base)+" (based on severe symptoms)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed severity\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 63))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.Us.severity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[63].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("Us",15)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Us.severity = player.Us.severity.sub(cost).max(0)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Us.severity
                let base = tmp.Us.buyables[63].costb
                let exp = tmp.Us.buyables[63].coste
                let target = s.div("e6596").log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[63].maxAfford
                let base = tmp.Us.buyables[63].costb
                let exp = tmp.Us.buyables[63].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul("e6596")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[63] = player.Us.buyables[63].max(target)
                
                }
            },
        },
        71: {
            title: "Severe tRNA",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[71].costb
                let exp = tmp.Us.buyables[71].coste
                let x = player.Us.buyables[71]
                if (x.gte(355)) x = x.mul(1.5).sub(355/2).div(355).pow(1.1).mul(355)
                let cost = Decimal.pow(base,x.pow(exp)).mul("e30614")
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e300)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.6)
                return cost
            },
            base() { 
                let base = decimalOne
                if (hasUpgrade("Us",63)) base = base.add(0.5)
                if (hasUpgrade("Us",71)) base = base.add(0.1)
                if (hasMilestone("Us",16)) base = base.add(0.1)
                if (hasUpgrade("Us",85)) base = base.mul(1.01)
                if (hasUpgrade("Us",93)) base = base.mul(1.01)
                if (hasUpgrade("Us",101)) base = base.mul(1.01)
                if (hasUpgrade("Us",104)) base = base.mul(1.01)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[71]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "tRNA") return
                let extra = ""
                let dis = "Increase "+colorText("span","#C00000","a")+" by "+format(tmp.Us.buyables[71].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed severity\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 71))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.Us.severity.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[71].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("uv",3)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Us.severity = player.Us.severity.sub(cost).max(0)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Us.severity
                let base = tmp.Us.buyables[71].costb
                let exp = tmp.Us.buyables[71].coste
                let target = s.div("e30614").log(base).root(exp)
                if (target.gte(355)) target = target.div(355).root(1.1).mul(355).add(355/2).div(1.5)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[71].maxAfford
                let base = tmp.Us.buyables[71].costb
                let exp = tmp.Us.buyables[71].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul("e30614")
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[71] = player.Us.buyables[71].max(target)
                
                }
            },
        },
        72: {
            title: "mtRNA",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[72].costb
                let exp = tmp.Us.buyables[72].coste
                let x = player.Us.buyables[72]
                if (x.gte(3e10)) x = x.mul(1.4).sub(3e10*.4).div(3e10).pow(1.2).mul(3e10)
                if (x.gte(8e8)) x = x.mul(1.4).sub(8e8*.4).div(8e8).pow(1.2).mul(8e8)
                if (x.gte(15e6)) x = x.mul(1.4).sub(15e6*.4).div(15e6).pow(1.2).mul(15e6)
                if (x.gte(35e5)) x = x.mul(1.5).sub(35e5/2).div(35e5).pow(1.2).mul(35e5)
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e135)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(10)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.4)
                return cost
            },
            base() { 
                let base = decimalOne
                if (hasUpgrade("Us",85)) base = base.mul(1.01)
                if (hasUpgrade("Us",93)) base = base.mul(1.01)
                if (hasUpgrade("Us",101)) base = base.mul(1.01)
                if (hasUpgrade("Us",104)) base = base.mul(1.01)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[72]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "tRNA") return
                let extra = ""
                let dis = "Increase "+colorText("span","#0000C0","b")+" by "+format(tmp.Us.buyables[72].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" mRNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 72))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.e.mrna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[72].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("uv",3)) player[this.layer].buyables[this.id] = b
                    else {
                        player.e.mrna = player.e.mrna.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.e.mrna
                let base = tmp.Us.buyables[72].costb
                let exp = tmp.Us.buyables[72].coste
                let target = s.div(1e135).log(base).root(exp)
                if (target.gte(35e5)) target = target.div(35e5).root(1.2).mul(35e5).add(35e5/2).div(1.5)
                if (target.gte(15e6)) target = target.div(15e6).root(1.2).mul(15e6).add(15e6*0.4).div(1.4)
                if (target.gte(8e8)) target = target.div(8e8).root(1.2).mul(8e8).add(8e8*0.4).div(1.4)
                if (target.gte(3e10)) target = target.div(3e10).root(1.2).mul(3e10).add(3e10*0.4).div(1.4)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[72].maxAfford
                let base = tmp.Us.buyables[72].costb
                let exp = tmp.Us.buyables[72].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e135)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[72] = player.Us.buyables[72].max(target)
                
                }
            },
        },
        73: {
            title: "ttRNA",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[73].costb
                let exp = tmp.Us.buyables[73].coste
                let x = player.Us.buyables[73]
                if (x.gte(36e3)) x = x.sub(18e3).div(18e3).pow(1.2).mul(36e3)
                if (x.gte(7e3)) x = x.sub(2900).div(4100).pow(1.3).mul(7e3)
                if (x.gte(49)) x = x.mul(1.2).sub(9.8).div(49).pow(1.1).mul(49)
                if (x.gte(40)) x = x.mul(1.2).sub(8).div(40).pow(1.1).mul(40)
                if (x.gte(29)) x = x.mul(1.3).sub(8.7).div(29).pow(1.1).mul(29)
                if (x.gte(20)) x = x.mul(1.05).sub(1).div(20).pow(1.1).mul(20)
                if (x.gte(10)) x = x.mul(1.5).sub(5).div(10).pow(1.1).mul(10)
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e4)
                if (hasUpgrade("uv",51)) cost = cost.div(10)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(10)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.4)
                return cost
            },
            base() { 
                let base = decimalOne
                if (hasUpgrade("Us",85)) base = base.mul(1.01)
                if (hasUpgrade("Us",93)) base = base.mul(1.01)
                if (hasUpgrade("Us",101)) base = base.mul(1.01)
                if (hasUpgrade("Us",104)) base = base.mul(1.01)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[73]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "tRNA") return
                let extra = ""
                let dis = "Increase "+colorText("span","#C000C0","c")+" by "+format(tmp.Us.buyables[73].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed tRNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 73))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.Us.trna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[73].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("uv",3)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Us.trna = player.Us.trna.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Us.trna
                if (hasUpgrade("uv",51)) s = s.mul(10)
                let base = tmp.Us.buyables[73].costb
                let exp = tmp.Us.buyables[73].coste
                let target = s.div(1e4).log(base).root(exp)
                if (target.gte(10)) target = target.div(10).root(1.1).mul(10).add(5).div(1.5)
                if (target.gte(20)) target = target.div(20).root(1.1).mul(20).add(1).div(1.05)
                if (target.gte(29)) target = target.div(29).root(1.1).mul(29).add(8.7).div(1.3)
                if (target.gte(40)) target = target.div(40).root(1.1).mul(40).add(8).div(1.2)
                if (target.gte(49)) target = target.div(49).root(1.1).mul(49).add(9.8).div(1.2)
                if (target.gte(7e3)) target = target.div(7e3).root(1.3).mul(4100).add(2900)
                if (target.gte(36e3)) target = target.div(36e3).root(1.2).mul(18e3).add(18e3)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[73].maxAfford
                let base = tmp.Us.buyables[73].costb
                let exp = tmp.Us.buyables[73].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e4)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[73] = player.Us.buyables[73].max(target)
                
                }
            },
        },
        81: {
            title: "tRNA Formula",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let x = player.Us.buyables[81]
                let cost = [1e6,1e11,1e32,25e67,5e87,6e202,"e1387","3e2503","e3419","e6924","e9611","e13466","e22370","e41656","e114330","e263030","e718550","ee111"]
                return new Decimal(cost[x])
            },
            base() { 
                let base = decimalOne
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[81]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            req() {
                let x = player.Us.buyables[81]
                let req = [0,0,"e82500","e138300","e174800","e489000","e83e5","e37394000","e77590000","e276e6","e644e6","e777e6","e2384e6","e832e7","e44444444444","e714e8","e1485e8","ee111"]
                return new Decimal(req[x])
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "tRNA") return
                let extra = ""
                let x = player.Us.buyables[81]
                let req = tmp.Us.buyables[81].req
                let reqdis = req.gt(0)?"Req: "+format(req)+" unvaxxed severity<br>":""
                let f1 = layers.Us.trnaFormula(x)
                let f2 = layers.Us.trnaFormula(x.add(1))
                let dis = "Unvaxxed tRNA gain formula is better.<br>"+f1+" --> "+f2
                return reqdis + dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed tRNA\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 81))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.Us.trna.gte(tmp[this.layer].buyables[this.id].cost) && player.Us.severity.gte(tmp.Us.buyables[81].req)
            },
            maxAfford() {
                let s = player.Us.severity
                let t = player.Us.trna
                let cost = [1e6,1e11,1e32,25e67,5e87,6e202,"e1387","3e2503","e3419","e6924","e9611","e13466","e22370","e41656","e114330","e263030","e718550","ee111"]
                let req = [0,0,"e82500","e138300","e174800","e489000","e83e5","e37394000","e77590000","e276e6","e644e6","e777e6","e2384e6","e832e7","e44444444444","e714e8","e1485e8","ee111"]
                let target = new Decimal(0)
                for (i = 0; i < cost.length; i++) {
                    if (t.gte(cost[i]) && s.gte(req[i])) target = target.add(1)
                }
                return target.max(player.Us.buyables[81])
            },
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[81].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("uv",10)) player[this.layer].buyables[this.id] = b
                    else {
                    player.Us.trna = player.Us.trna.sub(cost)
                    player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1).min(b)
                    }
                }
            },
        },
        82: {
            title: "Transfer RNA",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[82].costb
                let exp = tmp.Us.buyables[82].coste
                let x = player.Us.buyables[82]
                if (x.gte(135)) x = x.mul(1.3).sub(135*.3).div(135).pow(1.1).mul(135)
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e34)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(100)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.3)
                return cost
            },
            base() { 
                let base = decimalTwo
                if (hasUpgrade("Us",85)) base = base.mul(1.01)
                if (hasUpgrade("Us",93)) base = base.mul(1.01)
                if (hasUpgrade("Us",101)) base = base.mul(1.01)
                if (hasUpgrade("Us",104)) base = base.mul(1.01)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[82]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "tRNA") return
                let extra = ""
                let dis = "Multiply "+colorText("span","#308030","x")+" by "+format(tmp.Us.buyables[82].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed tRNA\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 82))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.Us.trna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[82].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("uv",3)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Us.trna = player.Us.trna.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Us.trna
                let base = tmp.Us.buyables[82].costb
                let exp = tmp.Us.buyables[82].coste
                let target = s.div(1e34).log(base).root(exp)
                if (target.gte(135)) target = target.div(135).root(1.1).mul(135).add(135*.3).div(1.3)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[82].maxAfford
                let base = tmp.Us.buyables[82].costb
                let exp = tmp.Us.buyables[82].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e34)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[82] = player.Us.buyables[82].max(target)
                
                }
            },
        },
        83: {
            title: "Soluble RNA",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[83].costb
                let exp = tmp.Us.buyables[83].coste
                let x = player.Us.buyables[83]
                let cost = Decimal.pow(base,x.pow(exp)).mul(25e104)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1e3)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.15)
                return cost
            },
            base() { 
                let base = new Decimal(0.1)
                if (hasUpgrade("Us",85)) base = base.mul(1.01)
                if (hasUpgrade("Us",93)) base = base.mul(1.01)
                if (hasUpgrade("Us",101)) base = base.mul(1.01)
                if (hasUpgrade("Us",104)) base = base.mul(1.01)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[83]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "tRNA") return
                let extra = ""
                let dis = "Increase "+colorText("span","#808050","d")+" by "+format(tmp.Us.buyables[83].base)
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed tRNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 83))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.Us.trna.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[83].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("uv",3)) player[this.layer].buyables[this.id] = b
                    else {
                        player.Us.trna = player.Us.trna.sub(cost)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Us.trna
                let base = tmp.Us.buyables[83].costb
                let exp = tmp.Us.buyables[83].coste
                let target = s.div(25e104).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[83].maxAfford
                let base = tmp.Us.buyables[83].costb
                let exp = tmp.Us.buyables[83].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(25e104)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[83] = player.Us.buyables[83].max(target)
                
                }
            },
        },
        91: {
            title: "rrRNA",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[91].costb
                let exp = tmp.Us.buyables[91].coste
                let x = player.Us.buyables[91]
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e3)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1.2)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.07)
                return cost
            },
            base() { 
                let base = tmp.Us.rrnaAmt.sub(1e3).div(4).max(0).pow(0.5).add(15)
                if (base.gte(100)) base = base.log10().div(2).pow(2).mul(2).pow10().div(100).pow(2).mul(100)
                if (base.gte("e4e4")) base = base.log10().div(4e4).pow(0.7).mul(4e4).pow10().div("e4e4").pow(0.3).mul("e4e4")
                if (base.gte("ee9")) base = base.log10().div(1e9).pow(0.5).mul(1e9).pow10().div("ee9").pow(0.3).mul("ee9")
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[91]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "rRNA") return
                let extra = ""
                let dis = "Multiply base mutated rRNA gain by "+format(tmp.Us.buyables[91].base)+" (based on mutated rRNA)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" mutated rRNA\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 91))
            },
            unlocked() { return true }, 
            canAfford() {
                    return tmp.Us.rrnaAmt.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[91].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("uv",19)) player[this.layer].buyables[this.id] = b
                    else {
                        if (!hasMilestone("uv",18)) player.Us.rrna = decimalZero
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = tmp.Us.rrnaAmt
                let base = tmp.Us.buyables[91].costb
                let exp = tmp.Us.buyables[91].coste
                let target = s.div(1e3).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[91].maxAfford
                let base = tmp.Us.buyables[91].costb
                let exp = tmp.Us.buyables[91].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e3)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[91] = player.Us.buyables[91].max(target)
                
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.Us.buyables[91].canAfford) color = "#4156a5"
                return color
            }
        }
        },
        92: {
            title: "MrRNA",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[92].costb
                let exp = tmp.Us.buyables[92].coste
                let x = player.Us.buyables[92]
                let cost = Decimal.pow(base,x.pow(exp)).mul(2500)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1.21)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.07)
                return cost
            },
            base() { 
                let base = player.e.mm.div(1e300).max(1).pow(0.1).add(1)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[92]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "rRNA") return
                let extra = ""
                let dis = "Multiply base mutated rRNA gain by "+format(tmp.Us.buyables[92].base)+" (based on MMNA)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" mutated rRNA\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 92))
            },
            unlocked() { return true }, 
            canAfford() {
                    return tmp.Us.rrnaAmt.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[92].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("uv",19)) player[this.layer].buyables[this.id] = b
                    else {
                        if (!hasMilestone("uv",18)) player.Us.rrna = decimalZero
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = tmp.Us.rrnaAmt
                let base = tmp.Us.buyables[92].costb
                let exp = tmp.Us.buyables[92].coste
                let target = s.div(2500).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[92].maxAfford
                let base = tmp.Us.buyables[92].costb
                let exp = tmp.Us.buyables[92].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(2500)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[92] = player.Us.buyables[92].max(target)
                
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.Us.buyables[92].canAfford) color = "#4156a5"
                return color
            }
        }
        },
        93: {
            title: "MurRNA",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[93].costb
                let exp = tmp.Us.buyables[93].coste
                let x = player.Us.buyables[93]
                let cost = Decimal.pow(base,x.pow(exp)).mul(8400)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1.22)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.07)
                return cost
            },
            base() { 
                let base = player.e.mu.mul(player.e.mu2.pow(2)).mul(player.Us.mu.mul(player.Us.mu2.pow(2))).div(4.6e7).pow(7).add(1)
                if (base.gte(1e16)) base = base.log10().div(16).pow(3).mul(16).pow10().div(1e16).pow(3).mul(1e16)
                if (base.gte(1e30)) base = base.log10().div(30).pow(1.5).mul(30).pow10().div(1e30).pow(10).mul(1e30)
                if (hasMilestone("Ud",7) && !player.Ud.activeChallenge) base = base.pow(2023)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[93]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "rRNA") return
                let extra = ""
                let dis = "Multiply base mutated rRNA gain by "+format(tmp.Us.buyables[93].base)+" (based on All mutations)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" mutated rRNA\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 93))
            },
            unlocked() { return true }, 
            canAfford() {
                    return tmp.Us.rrnaAmt.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[93].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("uv",19)) player[this.layer].buyables[this.id] = b
                    else {
                        if (!hasMilestone("uv",18)) player.Us.rrna = decimalZero
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = tmp.Us.rrnaAmt
                let base = tmp.Us.buyables[93].costb
                let exp = tmp.Us.buyables[93].coste
                let target = s.div(8400).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[93].maxAfford
                let base = tmp.Us.buyables[93].costb
                let exp = tmp.Us.buyables[93].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(8400)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[93] = player.Us.buyables[93].max(target)
                
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.Us.buyables[93].canAfford) color = "#4156a5"
                return color
            }
        }
        },
        94: {
            title: "mrRNA",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[94].costb
                let exp = tmp.Us.buyables[94].coste
                let x = player.Us.buyables[94]
                let cost = Decimal.pow(base,x.pow(exp)).mul(24700)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(1.23)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.07)
                return cost
            },
            base() { 
                let base = powExp(player.e.mrna.add(1),0.45).pow(0.003).div(1e5).add(1)
                if (base.gte("e2500")) base = base.log10().div(2500).pow(0.8).mul(2500).pow10().div("e2500").pow(0.6).mul("e2500")
                if (base.gte("e12500")) base = base.log10().div(12500).pow(0.7).mul(12500).pow10().div("e12500").pow(0.6).mul("e12500")
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[94]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "rRNA") return
                let extra = ""
                let dis = "Multiply base mutated rRNA gain by "+format(tmp.Us.buyables[94].base)+" (based on mRNA)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" mutated rRNA\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 94))
            },
            unlocked() { return true }, 
            canAfford() {
                    return tmp.Us.rrnaAmt.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[94].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("uv",19)) player[this.layer].buyables[this.id] = b
                    else {
                        if (!hasMilestone("uv",18)) player.Us.rrna = decimalZero
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = tmp.Us.rrnaAmt
                let base = tmp.Us.buyables[94].costb
                let exp = tmp.Us.buyables[94].coste
                let target = s.div(24700).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[94].maxAfford
                let base = tmp.Us.buyables[94].costb
                let exp = tmp.Us.buyables[94].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(24700)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[94] = player.Us.buyables[94].max(target)
                
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.Us.buyables[94].canAfford) color = "#4156a5"
                return color
            }
        }
        },
        101: {
            title: "rExp",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[101].costb
                let exp = tmp.Us.buyables[101].coste
                let x = player.Us.buyables[101]
                if (x.gte(3e4)) x = x.div(3e4).pow(1.3).mul(4e4).sub(1e4)
                if (x.gte(1500)) x = x.div(1500).pow(1.2).mul(2000).sub(500)
                if (x.gte(100)) x = x.div(100).pow(1.2).mul(200).sub(100)
                let cost = Decimal.pow(base,x.pow(exp)).mul(59100)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(2)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.2)
                return cost
            },
            base() { 
                let base = tet10(slog(tmp.Us.rrnaAmt.sub(59000).max(10)).mul(0.8).sub(1)).div(3e3).add(0.016)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[101]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "rRNA") return
                let extra = ""
                let dis = "Increase mutated rRNA gain exponent by "+format(tmp.Us.buyables[101].base)+" (based on mutated rRNA)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" mutated rRNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 101))
            },
            unlocked() { return true }, 
            canAfford() {
                    return tmp.Us.rrnaAmt.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[101].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("uv",19)) player[this.layer].buyables[this.id] = b
                    else {
                        if (!hasMilestone("uv",18)) player.Us.rrna = decimalZero
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = tmp.Us.rrnaAmt
                let base = tmp.Us.buyables[101].costb
                let exp = tmp.Us.buyables[101].coste
                let target = s.div(59100).log(base).root(exp)
                if (target.gte(100)) target = target.add(100).div(200).root(1.2).mul(100)
                if (target.gte(1500)) target = target.add(500).div(2000).root(1.2).mul(1500)
                if (target.gte(3e4)) target = target.add(1e4).div(4e4).root(1.3).mul(3e4)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[101].maxAfford
                let base = tmp.Us.buyables[101].costb
                let exp = tmp.Us.buyables[101].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(59100)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[101] = player.Us.buyables[101].max(target)
                
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.Us.buyables[101].canAfford) color = "#4156a5"
                return color
            }
        }
        },
        102: {
            title: "MExp",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[102].costb
                let exp = tmp.Us.buyables[102].coste
                let x = player.Us.buyables[102]
                if (x.gte(3e4)) x = x.div(3e4).pow(1.3).mul(4e4).sub(1e4)
                if (x.gte(1500)) x = x.div(1500).pow(1.2).mul(2000).sub(500)
                if (x.gte(100)) x = x.div(100).pow(1.2).mul(200).sub(100)
                let cost = Decimal.pow(base,x.pow(exp)).mul(66100)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(2.1)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.2)
                return cost
            },
            base() { 
                let base = tet10(slog(player.e.mm.div("e510").max(10)).mul(0.8).sub(1)).div(3e3).add(0.016)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[102]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "rRNA") return
                let extra = ""
                let dis = "Increase mutated rRNA gain exponent by "+format(tmp.Us.buyables[102].base)+" (based on MMNA)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" mutated rRNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 102))
            },
            unlocked() { return true }, 
            canAfford() {
                    return tmp.Us.rrnaAmt.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[102].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("uv",19)) player[this.layer].buyables[this.id] = b
                    else {
                        if (!hasMilestone("uv",18)) player.Us.rrna = decimalZero
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = tmp.Us.rrnaAmt
                let base = tmp.Us.buyables[102].costb
                let exp = tmp.Us.buyables[102].coste
                let target = s.div(66100).log(base).root(exp)
                if (target.gte(100)) target = target.add(100).div(200).root(1.2).mul(100)
                if (target.gte(1500)) target = target.add(500).div(2000).root(1.2).mul(1500)
                if (target.gte(3e4)) target = target.add(1e4).div(4e4).root(1.3).mul(3e4)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[102].maxAfford
                let base = tmp.Us.buyables[102].costb
                let exp = tmp.Us.buyables[102].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(66100)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[102] = player.Us.buyables[102].max(target)
                
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.Us.buyables[102].canAfford) color = "#4156a5"
                return color
            }
        }
        },
        103: {
            title: "MuExp",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[103].costb
                let exp = tmp.Us.buyables[103].coste
                let x = player.Us.buyables[103]
                if (x.gte(3e4)) x = x.div(3e4).pow(1.3).mul(4e4).sub(1e4)
                if (x.gte(1500)) x = x.div(1500).pow(1.2).mul(2000).sub(500)
                if (x.gte(100)) x = x.div(100).pow(1.2).mul(200).sub(100)
                let cost = Decimal.pow(base,x.pow(exp)).mul(94600)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(2.2)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.2)
                return cost
            },
            base() { 
                let mu = player.e.mu.mul(player.e.mu2.pow(2)).mul(player.Us.mu.mul(player.Us.mu2.pow(2))) 
                let base = tet10(slog(mu.div(22e7).max(1)).mul(0.8)).div(2e3).add(0.016)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[103]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "rRNA") return
                let extra = ""
                let dis = "Increase mutated rRNA gain exponent by "+format(tmp.Us.buyables[103].base)+" (based on All mutations)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" mutated rRNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 103))
            },
            unlocked() { return true }, 
            canAfford() {
                    return tmp.Us.rrnaAmt.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[103].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("uv",19)) player[this.layer].buyables[this.id] = b
                    else {
                        if (!hasMilestone("uv",18)) player.Us.rrna = decimalZero
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = tmp.Us.rrnaAmt
                let base = tmp.Us.buyables[103].costb
                let exp = tmp.Us.buyables[103].coste
                let target = s.div(94600).log(base).root(exp)
                if (target.gte(100)) target = target.add(100).div(200).root(1.2).mul(100)
                if (target.gte(1500)) target = target.add(500).div(2000).root(1.2).mul(1500)
                if (target.gte(3e4)) target = target.add(1e4).div(4e4).root(1.3).mul(3e4)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[103].maxAfford
                let base = tmp.Us.buyables[103].costb
                let exp = tmp.Us.buyables[103].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(94600)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[103] = player.Us.buyables[103].max(target)
                
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.Us.buyables[103].canAfford) color = "#4156a5"
                return color
            }
        }
        },
        104: {
            title: "mExp",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[104].costb
                let exp = tmp.Us.buyables[104].coste
                let x = player.Us.buyables[104]
                if (x.gte(3e4)) x = x.div(3e4).pow(1.3).mul(4e4).sub(1e4)
                if (x.gte(1500)) x = x.div(1500).pow(1.2).mul(2000).sub(500)
                if (x.gte(100)) x = x.div(100).pow(1.2).mul(200).sub(100)
                let cost = Decimal.pow(base,x.pow(exp)).mul(148100)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(2.3)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.2)
                return cost
            },
            base() { 
                let mu = powExp(player.e.mrna.add(1),0.5).pow(0.003).div(1e5).add(1)
                if (mu.gte("ee7")) mu = mu.log10().div(1e7).pow(0.4).mul(1e7).pow10()
                let base = tet10(slog(mu.div(1e21).max(1)).mul(0.8).sub(1)).div(2e3).add(0.016)
                if (base.gte(0.057)) base = base.add(0.0855).div(2.5)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[104]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "rRNA") return
                let extra = ""
                let dis = "Increase mutated rRNA gain exponent by "+format(tmp.Us.buyables[104].base)+" (based on mRNA)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" mutated rRNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 104))
            },
            unlocked() { return true }, 
            canAfford() {
                    return tmp.Us.rrnaAmt.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[104].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("uv",19)) player[this.layer].buyables[this.id] = b
                    else {
                        if (!hasMilestone("uv",18)) player.Us.rrna = decimalZero
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = tmp.Us.rrnaAmt
                let base = tmp.Us.buyables[104].costb
                let exp = tmp.Us.buyables[104].coste
                let target = s.div(148100).log(base).root(exp)
                if (target.gte(100)) target = target.add(100).div(200).root(1.2).mul(100)
                if (target.gte(1500)) target = target.add(500).div(2000).root(1.2).mul(1500)
                if (target.gte(3e4)) target = target.add(1e4).div(4e4).root(1.3).mul(3e4)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[104].maxAfford
                let base = tmp.Us.buyables[104].costb
                let exp = tmp.Us.buyables[104].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(148100)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[104] = player.Us.buyables[104].max(target)
                
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.Us.buyables[104].canAfford) color = "#4156a5"
                return color
            }
        }
        },
        111: {
            title: "rTet",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[111].costb
                let exp = tmp.Us.buyables[111].coste
                let x = player.Us.buyables[111]
                if (x.gte(1e3)) x = x.log10().div(3).pow(1.2).mul(3).pow10().mul(1.3).sub(300)
                if (x.gte(60)) x = x.div(60).pow(1.2).mul(120).sub(60)
                let cost = Decimal.pow(base,x.pow(exp)).mul(2633e3)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(3)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.5)
                return cost
            },
            base() { 
                let base = slog(tmp.Us.rrnaAmt.div(2e5).max(10)).pow(1.2).div(5)
                if (base.gte(0.58)) base = base.add(0.29).div(1.5)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[111]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "rRNA") return
                let extra = ""
                let dis = "Increase mutated rRNA gain tetration base by "+format(tmp.Us.buyables[111].base)+" (based on mutated rRNA)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" mutated rRNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 111))
            },
            unlocked() { return true }, 
            canAfford() {
                    return tmp.Us.rrnaAmt.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[111].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("uv",19)) player[this.layer].buyables[this.id] = b
                    else {
                        if (!hasMilestone("uv",18)) player.Us.rrna = decimalZero
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = tmp.Us.rrnaAmt
                let base = tmp.Us.buyables[111].costb
                let exp = tmp.Us.buyables[111].coste
                let target = s.div(2633e3).log(base).root(exp)
                if (target.gte(60)) target = target.add(60).div(120).root(1.2).mul(60)
                if (target.gte(1e3)) target = target.add(300).div(1.3).log10().div(3).root(1.2).mul(3).pow10()
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[111].maxAfford
                let base = tmp.Us.buyables[111].costb
                let exp = tmp.Us.buyables[111].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(2633e3)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[111] = player.Us.buyables[111].max(target)
                
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.Us.buyables[111].canAfford) color = "#4156a5"
                return color
            }
        }
        },
        112: {
            title: "MTet",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[112].costb
                let exp = tmp.Us.buyables[112].coste
                let x = player.Us.buyables[112]
                if (x.gte(1e3)) x = x.log10().div(3).pow(1.2).mul(3).pow10().mul(1.3).sub(300)
                if (x.gte(60)) x = x.div(60).pow(1.2).mul(120).sub(60)
                let cost = Decimal.pow(base,x.pow(exp)).mul(204e5)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(3.5)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.5)
                return cost
            },
            base() { 
                let base = slog(player.e.mm.div("e1230").max(10)).sub(1).pow(1.2).div(5)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[112]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "rRNA") return
                let extra = ""
                let dis = "Increase mutated rRNA gain tetration base by "+format(tmp.Us.buyables[112].base)+" (based on MMNA)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" mutated rRNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 112))
            },
            unlocked() { return true }, 
            canAfford() {
                    return tmp.Us.rrnaAmt.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[112].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("uv",19)) player[this.layer].buyables[this.id] = b
                    else {
                        if (!hasMilestone("uv",18)) player.Us.rrna = decimalZero
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = tmp.Us.rrnaAmt
                let base = tmp.Us.buyables[112].costb
                let exp = tmp.Us.buyables[112].coste
                let target = s.div(204e5).log(base).root(exp)
                if (target.gte(60)) target = target.add(60).div(120).root(1.2).mul(60)
                if (target.gte(1e3)) target = target.add(300).div(1.3).log10().div(3).root(1.2).mul(3).pow10()
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[112].maxAfford
                let base = tmp.Us.buyables[112].costb
                let exp = tmp.Us.buyables[112].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(204e5)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[112] = player.Us.buyables[112].max(target)
                
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.Us.buyables[112].canAfford) color = "#4156a5"
                return color
            }
        }
        },
        113: {
            title: "MuTet",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[113].costb
                let exp = tmp.Us.buyables[113].coste
                let x = player.Us.buyables[113]
                if (x.gte(1e3)) x = x.log10().div(3).pow(1.2).mul(3).pow10().mul(1.3).sub(300)
                if (x.gte(60)) x = x.div(60).pow(1.2).mul(120).sub(60)
                let cost = Decimal.pow(base,x.pow(exp)).mul(529e6)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(4)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.5)
                return cost
            },
            base() { 
                let mu = player.e.mu.mul(player.e.mu2.pow(2)).mul(player.Us.mu.mul(player.Us.mu2.pow(2))) 
                let base = slog(mu.sub(3e9).pow(2).div(1e16).max(10)).pow(1.2).div(5)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[113]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "rRNA") return
                let extra = ""
                let dis = "Increase mutated rRNA gain tetration base by "+format(tmp.Us.buyables[113].base)+" (based on All Mutations)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" mutated rRNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 113))
            },
            unlocked() { return true }, 
            canAfford() {
                    return tmp.Us.rrnaAmt.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[113].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("uv",19)) player[this.layer].buyables[this.id] = b
                    else {
                        if (!hasMilestone("uv",18)) player.Us.rrna = decimalZero
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = tmp.Us.rrnaAmt
                let base = tmp.Us.buyables[113].costb
                let exp = tmp.Us.buyables[113].coste
                let target = s.div(529e6).log(base).root(exp)
                if (target.gte(60)) target = target.add(60).div(120).root(1.2).mul(60)
                if (target.gte(1e3)) target = target.add(300).div(1.3).log10().div(3).root(1.2).mul(3).pow10()
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[113].maxAfford
                let base = tmp.Us.buyables[113].costb
                let exp = tmp.Us.buyables[113].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(529e6)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[113] = player.Us.buyables[113].max(target)
                
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.Us.buyables[113].canAfford) color = "#4156a5"
                return color
            }
        }
        },
        114: {
            title: "mTet",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Us.buyables[114].costb
                let exp = tmp.Us.buyables[114].coste
                let x = player.Us.buyables[114]
                if (x.gte(1e3)) x = x.log10().div(3).pow(1.2).mul(3).pow10().mul(1.3).sub(300)
                if (x.gte(60)) x = x.div(60).pow(1.2).mul(120).sub(60)
                let cost = Decimal.pow(base,x.pow(exp)).mul(707e7)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(4.5)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.5)
                return cost
            },
            base() { 
                let mu = powExp(player.e.mrna.add(1),0.5).pow(0.003).div(1e5).add(1) 
                let base = slog(mu.div(1e300).max(10)).sub(1).pow(1.2).div(5)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Us.buyables[114]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Us" || player.subtabs.Us.mainTabs != "rRNA") return
                let extra = ""
                let dis = "Increase mutated rRNA gain tetration base by "+format(tmp.Us.buyables[114].base)+" (based on mRNA)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" mutated rRNA\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Us", 114))
            },
            unlocked() { return true }, 
            canAfford() {
                    return tmp.Us.rrnaAmt.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Us.buyables[114].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (hasMilestone("uv",19)) player[this.layer].buyables[this.id] = b
                    else {
                        if (!hasMilestone("uv",18)) player.Us.rrna = decimalZero
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = tmp.Us.rrnaAmt
                let base = tmp.Us.buyables[114].costb
                let exp = tmp.Us.buyables[114].coste
                let target = s.div(707e7).log(base).root(exp)
                if (target.gte(60)) target = target.add(60).div(120).root(1.2).mul(60)
                if (target.gte(1e3)) target = target.add(300).div(1.3).log10().div(3).root(1.2).mul(3).pow10()
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Us.buyables[114].maxAfford
                let base = tmp.Us.buyables[114].costb
                let exp = tmp.Us.buyables[114].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(707e7)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Us.buyables[114] = player.Us.buyables[114].max(target)
                
                }
            },
            style: {"width":"140px","height":"140px",
            'background-color'() {
                let color = "#bf8f8f"
                if (tmp.Us.buyables[114].canAfford) color = "#4156a5"
                return color
            }
        }
        },
    },
    clickables: {
        rows: 2,
        cols: 3,
        getAttemptAmount(force = false){
            let ret = decimalOne
            if (!shiftDown && !force) return ret
            if (hasUpgrade("Us",55)) ret = ret.mul(5)
            if (hasMilestone("Us",31)) ret = ret.mul(5)
            if (hasUpgrade("uv",55)) ret = ret.mul(3)
            if (hasUpgrade("uv",65)) ret = ret.mul(3)
            if (hasUpgrade("uv",71)) ret = ret.mul(3)
            if (hasUpgrade("ct",545)) ret = ret.mul(2)
            if (hasMilestone("Us",43)) ret = ret.mul(tmp.Us.milestones[43].effect)
            if (hasMilestone("Us",46)) ret = ret.mul(5)
            return ret
        },
        getSub() {
            let m = player.Us.mu2
            let sub = m.mul(m.add(1)).div(2).add(m.mul(14))
            return sub
        },
        11: {
            title() {return colorText("h3","#4a845d","UnRecover")},
            display() {
                return "Divide boosted recovery amount and gain by "+format(tmp.Us.clickables[11].effect)+" for "+formatTime(10)+".<br>Time: "+formatTime(player.Us.trnaTime[0])+"<br>Cooldown: "+formatTime(player.Us.cTime[0])+".<br>Cost: "+format(tmp.Us.clickables[11].cost)+" unvaxxed tRNA"
            },
            canClick() {
                let up = !hasUpgrade("Us",94) || (hasUpgrade("Us",94) && player.Us.recoveries.div(tmp.Us.clickables[11].effect.pow(2)).gte(tmp.Us.recoveryGain))
                let rec = player.Us.trnaTime[1] > 0 || !hasMilestone("uv",16)
                return player.Us.trna.gte(tmp.Us.clickables[11].cost) && player.Us.cTime[0]==0 && up && rec
            },
            cost() {
                return player.Us.trna.sub(1e28).div(2).add(1e28).max(1e28)
            },
            effect() {
                let eff = new Decimal(30)
                if (hasUpgrade("Us",72)) eff = eff.mul(5)
                if (hasUpgrade("Us",73)) eff = eff.mul(100/15)
                if (hasUpgrade("Us",75)) eff = eff.mul(tmp.Us.upgrades[75].effect)
                if (hasMilestone("Us",45)) eff = eff.pow(2)
                return eff
            },
            unlocked() { return hasUpgrade("Us",65) }, 
            onClick() {
                let cool = 45
                if (hasMilestone("uv",0)) cool = 30
                if (hasMilestone("uv",1)) cool = 25
                if (hasMilestone("uv",4)) cool = 20
                if (hasMilestone("uv",6)) cool = 15
                player.Us.trna = player.Us.trna.sub(tmp.Us.clickables[11].cost)
                player.Us.recoveries = player.Us.recoveries.div(tmp.Us.clickables[11].effect)
                player.Us.trnaTime[0] = 10
                player.Us.cTime[0] = cool
            },
        },
        12: {
            title() {return colorText("h3","#2894a3","UnRetRNA")},
            display() {
                let dis = "Raise unvaxxed tRNA effect, root boosted recovery effect to "+format(tmp.Us.clickables[12].effect)+(hasUpgrade("Us",85)?"":" and divide unvaxxed tRNA gain by 10,000")
                if (hasUpgrade("Ud",35)) dis += ", and multiply unvaxxed tRNA 2nd effect by "+format(tmp.Us.clickables[12].effect2)
                return "<span style='font-size:9px'>"+dis+" for "+formatTime(10)+".<br>Time: "+formatTime(player.Us.trnaTime[1])+"<br>Cooldown: "+formatTime(player.Us.cTime[1])+".<br>Cost: "+format(tmp.Us.clickables[12].cost)+" unvaxxed tRNA</span>"
            },
            canClick() {return player.Us.trna.gte(tmp.Us.clickables[12].cost) && player.Us.cTime[1]==0},
            cost() {
                return player.Us.trna.sub("e682").mul(0.9999).add("e682").max("e682")
            },
            effect() {
                let eff = new Decimal(1.03)
                if (hasMilestone("Us",25)) eff = eff.add(0.01)
                if (hasMilestone("Us",26)) eff = eff.add(0.01)
                if (hasMilestone("Us",45)) eff = eff.add(0.01)
                if (hasUpgrade("Us",92)) eff = eff.add(0.01)
                if (hasUpgrade("Us",95)) eff = eff.add(0.01)
                if (hasUpgrade("Us",121)) eff = eff.add(tmp.Us.upgrades[121].effect)
                return eff
            },
            effect2() {
                let eff = new Decimal(1.3)
                return eff
            },
            unlocked() { return hasMilestone("Us",22) }, 
            onClick() {
                let cool = 60
                if (hasMilestone("uv",5)) cool = 50
                if (hasMilestone("uv",7)) cool = 40
                if (hasMilestone("uv",8)) cool = 30
                if (hasMilestone("uv",9)) cool = 25
                if (hasMilestone("uv",10)) cool = 20
                if (hasMilestone("uv",11)) cool = 18
                if (hasMilestone("uv",14)) cool = 17
                if (hasMilestone("uv",16)) cool = 16
                if (hasMilestone("uv",18)) cool = 15
                if (hasMilestone("uv",19)) cool = 14
                if (hasMilestone("uv",20)) cool = 13
                if (hasUpgrade("uv",91)) cool = 12.5
                if (hasUpgrade("uv",92)) cool = 12
                if (hasUpgrade("uv",94)) cool = 11.5
                if (hasUpgrade("uv",95)) cool = 11
                if (hasUpgrade("uv",96)) cool = 10.8
                player.Us.trnaTime[1] = 10
                player.Us.cTime[1] = cool
                if (!hasMilestone("Us",56)) player.Us.trna = player.Us.trna.sub(tmp.Us.clickables[12].cost)
            },
        },
        21: {
            display() {
                return "<h2>Max All (X)</h2><br>Cooldown: "+formatTime(player.Us.maxCool)
            },
            canClick() {return player.Us.maxCool == 0},
            unlocked() { return hasUpgrade("uv",51) }, 
            onClick() {
                for (i = 0; i < player.Us.sympBuy.length; i++){
                    layers.Us.buyables[player.Us.sympBuy[i]].buy()
                }
                player.Us.maxCool = tmp.uv.buyables[21].effect.toNumber()
            },
        },
        22: {
            display() {
                return "<h2>Max All (X)</h2><br>Cooldown: "+formatTime(player.Us.trnaCool)
            },
            canClick() {return player.Us.trnaCool == 0},
            unlocked() { return hasMilestone("uv",6) }, 
            onClick() {
                for (i = 0; i < player.Us.trnaBuy.length; i++){
                    layers.Us.buyables[player.Us.trnaBuy[i]].buy()
                }
                player.Us.trnaCool = tmp.uv.buyables[22].effect.toNumber()
            },
        },
        23: {
            display() {
                return "<h2>Max All (X)</h2><br>Cooldown: "+formatTime(player.Us.rrnaCool)
            },
            canClick() {return player.Us.rrnaCool == 0},
            unlocked() { return hasUpgrade("uv",83) }, 
            onClick() {
                for (let i in player.Us.buyables){
                    if (i>90) layers.Us.buyables[i].buy()
                }
                player.Us.rrnaCool = tmp.uv.buyables[41].effect.toNumber()
            },
            style: {
                'background-color'() {
                    let color = "#bf8f8f"
                    if (tmp.Us.clickables[23].canClick) color = "#4156a5"
                    return color
                }
            }
        },
        31: {
            title: "tRNA Mutation",
            display() {
                let num = player.Us.mu.sub(tmp.Us.clickables.getSub).div(10)
                let mmna = hasMilestone("ct",12) && !inChallenge("ct",32)?"":formatWhole(tmp.Us.clickables[31].mmnacost)+" MMNA<br>"
                let dis = "Virus Number:"+format(num,1) +"<br>Cost:"+ formatWhole(tmp.Us.clickables[31].trnacost)
                dis += " unvaxxed tRNA<br>"+mmna+"Chance: "+ format(tmp.Us.clickables[31].chance.mul(100))+"%"
                return dis
            },
            trnacost() {
                let x = player.Us.mu
                let y = player.Us.mu2
                if (x.gte(273)) x = x.div(273).pow(1.6).mul(273).sub(0)
                if (x.gte(148)) x = x.div(148).pow(1.6).mul(250).sub(102)
                if (x.gte(105)) x = x.div(105).pow(1.3).mul(250).sub(145)
                if (y.gte(12)) y = y.div(12).pow(1.5).mul(12)
                if (y.gte(15)) y = y.div(15).pow(1.5).mul(20)
                let e = x.add(y.mul(1.922).pow(2)).pow(1.6)
                if (hasMilestone("Us",30)) e = e.div(1.5)
                if (hasMilestone("Us",35)) e = e.div(1.2)
                if (hasUpgrade("Us",95)) e = e.div(1.1)
                if (hasUpgrade("Us",102)) e = e.div(1.2)
                if (hasMilestone("Us",48)) e = e.div(1.05)
                let cost = Decimal.pow(1e15,e).mul("e1150")
                return cost
            },
            mmnacost() {
                let x = player.Us.mu
                let div = 1
                let y = player.Us.mu2
                let n = x.sub(tmp.Us.clickables.getSub)
                let mult = Decimal.pow(2.5e14,y.pow(1.25))
                let cost = Decimal.pow(1.2,x.pow(1.2).div(div)).mul(3e14).mul(mult)
                if (y.gte(2)) cost = cost.mul(Decimal.pow(y.div(5).add(1),n.pow(1.3)))
                if (y.gte(6)) cost = cost.mul(Decimal.pow(1e20,y.sub(5).pow(1.4)))
                if (y.gte(7)) cost = cost.pow(1.05).mul(1e5)
                if (y.gte(8)) cost = cost.pow(1.2).div(1e50)
                if (y.gte(9)) cost = cost.mul(Decimal.pow(1e50,y.sub(8).pow(1.4))).mul(Decimal.pow(y.div(5).add(2),n.mul(2.5).pow(1.4)))
                if (y.gte(14)) cost = cost.mul(Decimal.pow(1e100,y.sub(11.75).pow(1.6)))
                if (y.gte(11)) cost = cost.pow(1.1)
                if (y.gte(12)) cost = cost.pow(1.1)
                if (hasMilestone("Us",50) && player.e.mm.gte("4e648")) cost = cost.pow(0.9)
                return cost
            },
            chance() {
                let x = player.Us.mu.sub(tmp.Us.clickables.getSub)
                let b = Decimal.pow(0.75,player.Us.mu2.pow(2).div(20).add(1))
                let ch = Decimal.pow(b,x.sub(1))
                return ch.min(1)
            },
            canClick() {
                let tcost = tmp.Us.clickables[31].trnacost
                let mcost = tmp.Us.clickables[31].mmnacost
                let num = player.Us.mu.sub(tmp.Us.clickables.getSub)
                return player.e.mm.gte(mcost) && player.Us.trna.gte(tcost) && num.lt(player.Us.mu2.add(15))
            },
            onClick(force = false){
                let b = 0
                let remaining = layers.Us.clickables.getAttemptAmount(force).mul(player.Us.tmutPer).max(1)
                let data = player.Us
                let id = 31
                        while (b < 1000){
                                b ++ 
                                if (!this.canClick()) break 
                                let chance = this.chance()
                                let cc = this.mmnacost()
                                let cost = this.trnacost()

                                let times = getTimesRequired(chance)
                                // the random chance factor
                                let m =  player.e.mm.div(cc)
                                let maxMMNA = m.mul(player.Us.tmutPer).max(1).floor().min(m.floor())
                                // max num at current MMNA
                                let m2 =  data.trna.div(cost)
                                let maxMu = m2.mul(player.Us.tmutPer).max(1).floor().min(m2.floor())
                                //max num at current mu

                                let target = Decimal.min(times, maxMMNA)
                                if (false) {
                                    target = times
                                }
                                target = target.min(maxMu).min(remaining)
                                //max num overall
                                
                                remaining = remaining.minus(target) //how many bulks left
                                if (true){
                                data.trna = data.trna.sub(cost.times(target)).max(0)
                                player.e.mm = player.e.mm.minus(cc.times(target)).max(0)
                                }
                                //remove MMNA

                                if (target != times) break
                                //didnt do it enough times
                                
                                //if did do enough, add one
                                data.mu = data.mu.plus(1)
                        } 
            },
            unlocked() {return hasMilestone("Us",22)},
            style: {"width":"140px","height":"140px",}
        },
        32: {
            title: "SARS Mutation",
            display() {
                let num = player.Us.mu.sub(tmp.Us.clickables.getSub).div(10)
                let max = tmp.Us.clickables[32].max
                let m = player.Us.mu2
                let virus = player.Us.sars[m.min(15)]
                if (m.gte(16)) virus+="<sup>"+formatWhole(m.sub(14))+"</sup>"
                let mmna = hasMilestone("ct",12) && !inChallenge("ct",32)?"":formatWhole(tmp.Us.clickables[32].mmnacost)+" MMNA<br>"
                let dis = "Virus:SARS-"+virus+"-"+format(num,1)+(m.gte(max)?" (MAXED)":"")+"<br>Cost:"+ formatWhole(tmp.Us.clickables[32].trnacost)
                dis += " unvaxxed tRNA<br>"+format(m.add(15).div(10),1)+" Virus Number<br>"+mmna+"Chance: "+ format(tmp.Us.clickables[32].chance.mul(100))+"%"
                return dis
            },
            max() {
                let max = new Decimal(15)
                if (hasUpgrade('Us',134)) max = max.add(1)
                if (hasUpgrade('Us',135)) max = max.add(1)
                if (hasUpgrade('Ud',23)) max = max.add(1)
                if (hasUpgrade('Ud',24)) max = max.add(1)
                if (hasUpgrade('Ud',25)) max = max.add(1)
                if (hasMilestone('Ud',7)) max = max.add(1)
                if (hasMilestone('Ud',8)) max = max.add(1)
                if (hasMilestone('Ud',9)) max = max.add(1)
                return max
            },
            trnacost() {//2455
                let x = player.Us.mu2
                if (hasMilestone("Us",46)) {
                    let e = 1
                    if (player.e.mm.gte("3.65e365")) e /=1.2
                    if (hasMilestone("Us",48)) e /=1.12
                    x = x.sub(6).mul(e).add(6) 
                }
                if (hasUpgrade("Us",94)) x = x.div(1.25)
                if (hasUpgrade("Us",104)) x = x.div(1.043)
                if (hasMilestone("Us",39)) x = x.div(1.25)
                if (hasMilestone("Us",41)) x = x.div(1.15)
                if (hasMilestone("Us",44)) x = x.div(1.05)
                let cost = Decimal.pow(10,Decimal.pow(5,x).mul(485)).mul("e1960")
                return cost
            },
            mmnacost() {
                let x = player.Us.mu2
                let cost = Decimal.pow(1e20/600,x.pow(1.3)).mul(6e27)
                if (x.gte(6)) cost = cost.mul(Decimal.pow(1e40,x.sub(5).pow(1.4)))
                if (x.gte(9)) cost = cost.mul(Decimal.pow(1e50,x.sub(8).pow(1.5)))
                if (x.gte(13)) cost = cost.mul(Decimal.pow(1e160,x.sub(11.5).pow(1.6)))
                if (x.gte(10)) cost = cost.pow(1.027)
                if (x.gte(11)) cost = cost.pow(1.075)
                return cost
            },
            chance() {
                let x = player.Us.mu2
                if (x.gte(8)) x = x.div(8).pow(2).mul(16).sub(8)
                let ch = Decimal.pow(0.5,x.sub(1))
                return ch.min(1)
            },
            canClick() {
                let tcost = tmp.Us.clickables[32].trnacost
                let mcost = tmp.Us.clickables[32].mmnacost
                let max = tmp.Us.clickables[32].max
                let num = player.Us.mu.sub(tmp.Us.clickables.getSub)
                return player.e.mm.gte(mcost) && player.Us.trna.gte(tcost) && num.gte(player.Us.mu2.add(15)) && player.Us.mu2.lt(max)
            },
            onClick(force = false){
                let b = 0
                let remaining = layers.Us.clickables.getAttemptAmount(force).mul(player.Us.tmutPer).max(1)
                let data = player.Us
                let id = 32
                        while (b < 1000){
                                b ++ 
                                if (!this.canClick()) break 
                                let chance = this.chance()
                                let cc = this.mmnacost()
                                let cost = this.trnacost()

                                let times = getTimesRequired(chance)
                                // the random chance factor
                                let m =  player.e.mm.div(cc)
                                let maxMMNA = m.mul(player.Us.tmutPer).max(1).floor().min(m.floor())
                                // max num at current MMNA
                                let m2 =  data.trna.div(cost)
                                let maxMu = m2.mul(player.Us.tmutPer).max(1).floor().min(m2.floor())
                                //max num at current mu

                                let target = Decimal.min(times, maxMMNA)
                                if (false) {
                                    target = times
                                }
                                target = target.min(maxMu).min(remaining)
                                //max num overall
                                
                                remaining = remaining.minus(target) //how many bulks left
                                if (true){
                                data.trna = data.trna.sub(cost.times(target)).max(0)
                                player.e.mm = player.e.mm.minus(cc.times(target)).max(0)
                                }
                                //remove MMNA

                                if (target != times) break
                                //didnt do it enough times
                                
                                //if did do enough, add one
                                data.mu2 = data.mu2.plus(1)
                        } 
            },
            unlocked() {return hasMilestone("Us",22)},
            style: {"width":"140px","height":"140px",}
        },
        41: {
            display() {
                let d = ["1%","10%","50%","100%"]
                let dis = d[player.Us.mutPercent % 4]
                return dis
            },
            canClick() {return true},
            onClick() {
                player.Us.mutPercent ++
            },
            style: {'height':'70px','min-height':'70px', 'width':'70px', 'font-size':'13px', 'background-color': "#00AA55"
            }
        },
        42: {
            display() {
                let d = ["1%","10%","50%","100%"]
                let dis = d[player.Us.tmutPercent % 4]
                return dis
            },
            canClick() {return true},
            onClick() {
                player.Us.tmutPercent ++
            },
            style: {'height':'70px','min-height':'70px', 'width':'70px', 'font-size':'13px'
            }
        },
    },
})
addLayer("Ud", {
    name: "unvaxxed deaths",
    symbol: "UD",
    position: 3,
    startData() { return {
        points: decimalZero,
        total: decimalZero,
        best: decimalZero,
        bestPer: decimalZero,
        time: 0,
        challPoints: [decimalZero,decimalZero,decimalZero,decimalZero],
    unlocked: true
    }},
    row: 3,
    color: "#a9146a",
    requires: Decimal.pow(10,215e12),
    resource: "unvaxxed deaths",
    resourceSingular: "unvaxxed death",
    baseResource: "unvaxxed severity",
    baseSingular: "unvaxxed severity",
    baseAmount() { 
        return player.Us.severity
    },
    type: "custom",
    branches: ["Up"],
    hotkeys: [
        {
            key:"D", description: "Shift+D:Reset for unvaxxed deaths", onPress() {
                if (canReset(this.layer))
                    doReset(this.layer)
            },
            unlocked() {return player.uv.points.gte(7) && inChallenge("ct",32)}
        },
    ],
    layerShown() {
        return player.uv.tree == "unvaxxed" && player.uv.points.gte(7)
    },
    doReset(resettingLayer) {
        let keep = [];
        if (resettingLayer == "Ud") {
            player.Ud.bestPer = player.Ud.bestPer.max(tmp.Ud.getResetGain.div(player.Ud.time+1e-11))
            player.Ud.time = 0
            player.e.mu = decimalZero
            player.e.mu2 = decimalZero
        }
        if (layers[resettingLayer].row > this.row) layerDataReset(this.layer, keep)
    },
    effect() {
        let exp = decimalTwo
        if (hasUpgrade("uv",96) && player.Ud.points.gte(303e301)) exp = exp.mul(5)
        let eff = player.Ud.points.add(1).pow(exp)
        return eff
    },
    effectDescription() {
        let dis = "which "+pluralize(player.Ud.points,'boosts','boost')+" base CRNA gain by "+layerText("h2", "Ud", format(tmp.Ud.effect))
        return dis
    },
    gainMult () {
        let mult = tmp.Ud.buyables[12].effect
        if (hasUpgrade("Ud",13)) mult = mult.mul(tmp.Ud.upgrades[13].effect)
        if (hasUpgrade("uv",93)) mult = mult.mul(tmp.uv.upgrades[93].effect)
        if (hasUpgrade("uv",91)) mult = mult.mul(3)
        if (hasMilestone("uv",24)) mult = mult.mul(3)
        if (hasMilestone("uv",25)) {
            mult = mult.mul(3)
            if (player.uv.virusTotal.gte(1e71)) mult = mult.mul(3)
        }
        if (hasUpgrade("uv",92)) mult = mult.mul(2)
        if (hasMilestone("Ud",4)) mult = mult.mul(tmp.Ud.milestones[4].effect)
        return mult
    },
    baseMult () {
        let mult = new Decimal(1/1e14)
        return mult
    },
    gainExp () {
        let exp = tmp.Ud.buyables[13].effect.add(3)
        if (hasUpgrade("Ud",21)) exp = exp.add(0.3)
        if (hasChallenge("Ud", 11)) exp = exp.add(tmp.Ud.challenges[11].rewardEffect)
        return exp
    },
    gainExp2 () {
        let exp = decimalOne
        return exp
    },
    getResetGain() {
        let f = tmp.Ud.baseAmount
        if (f.lt(tmp.Ud.requires)) return decimalZero
        let gain = f.div("e115e12").log10().mul(tmp.Ud.baseMult).pow(tmp.Ud.gainExp).mul(tmp.Ud.gainMult).pow(tmp.Ud.gainExp2)
        return gain.floor()
    },
    getNextAt() {
        let next = tmp.Ud.getResetGain.add(1).max(1)
        next = next.root(tmp.Ud.gainExp2).div(tmp.Ud.gainMult).root(tmp.Ud.gainExp).div(tmp.Ud.baseMult).pow10().mul("e115e12")
		return next.max("e215e12");
    },
    prestigeButtonText() {
        let b = tmp.Ud.getResetGain
        let next = tmp.Ud.getNextAt
        let text = "Reset for +<b>"+formatWhole(b)+"</b> "+pluralize(b,tmp.Ud.resourceSingular,tmp.Ud.resource,true)+"<br><br>Next at "+formatWhole(next)+" "+pluralize(next,tmp.Ud.baseSingular,tmp.Ud.baseResource)+"<br>"
        let gain = b.div(player.Ud.time+1e-11)
        if (gain.gte(10)) text += format(gain) + "/s"
        else text += format(gain.mul(60)) + "/min"
        return text
    },
    canReset() {
        return tmp.Ud.baseAmount.gte(tmp.Ud.requires) && player.Ud.time>=8
    },
    update(diff) {
        player.Ud.time+=diff
        if (hasMilestone("uv",24)) generatePoints("Ud",diff*0.005)
    },
    tabFormat: {
        "Main": {
        content:[
            function() {if (player.tab == "Ud") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Ud") return "resource-display"},
            "blank",
            ["display-text", 
                function() {
                    let gain = player.Ud.bestPer
                    let text = ''
                    if (gain.gte(10)) text += format(gain) + "/s"
                    else text += format(gain.mul(60)) + "/min"
                    let a = "There is an 8 second cooldown (" + formatTime(Math.max(0,8-player.Ud.time))+")<br>Reset time: "+formatTime(player.Ud.time)
                    let b = "<br>Best gain/min: "+text
                    let c = "<br>Unvaxxed Deaths reset all previous unvaxxed layers."
                     return a+b+c
                }
                ],
            ["upgrades",[1,2,3,4,5]],
            ]
        },
        "Milestones": {
            content:[
                function() {if (player.tab == "Ud") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Ud") return "resource-display"},
            "blank",
            "milestones"
            ],
        },
        "Buyables": {
            content:[
                function() {if (player.tab == "Ud") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Ud") return "resource-display"},
            "blank",
            "buyables"
            ],
            unlocked() {return hasMilestone("Ud",2)}
        },
        "Challenges": {
            content:[
                function() {if (player.tab == "Ud") return "main-display"},
            "prestige-button",
            function() {if (player.tab == "Ud") return "resource-display"},
            "blank",
            "challenges"
            ],
            unlocked() {return hasMilestone("Ud",3)}
        },
    },
    milestones: {
        0: {
            requirementDescription: "1 total unvaxxed death (1)",
            effectDescription: "Keep UU upgrades and milestones on reset.",
            done() { return player.Ud.total.gte(1) }
        },
        1: {
            requirementDescription: "3 total unvaxxed deaths (2)",
            effectDescription: "Keep 1st 40 and 57th US milestones on reset.",
            done() { return player.Ud.total.gte(3) }
        },
        2: {
            requirementDescription: "10,000 total unvaxxed deaths (3)",
            effectDescription: "Unlock Buyables, keep 1st 59 US milestones on reset.",
            done() { return player.Ud.total.gte(1e4) }
        },
        3: {
            requirementDescription() {return format(8041030742)+" total unvaxxed deaths (4)"},
            effectDescription: "Unlock Challenges.",
            done() { return player.Ud.total.gte(8041030742) }
        },
        4: {
            requirementDescription() {return "1 CTNA (5)"},
            effect() {
                let eff = player.ct.points.add(1).pow(0.5)
                if (hasUpgrade("Ud",24)) eff = eff.pow(1.5)
                if (hasUpgrade("Ud",25)) eff = eff.pow(1.5)
                if (hasUpgrade("Ud",31)) eff = eff.pow(1.2)
                return eff
            },
            effectDescription() {return "CTNA boosts unvaxxed death gain.<br>Currently: "+format(tmp.Ud.milestones[4].effect)+"x"},
            done() { return player.ct.points.gte(1) && inChallenge("ct",32) }
        },
        5: {
            requirementDescription() {return format(5e271)+" total unvaxxed deaths (6)"},
            effect() {
                let eff = powExp(player.Ud.points.div(1e200).add(1),0.75).pow(0.075)
                return eff
            },
            effectDescription() {return "Unvaxxed deaths boost CTNA gain.<br>Currently: "+format(tmp.Ud.milestones[5].effect)+"x"},
            done() { return player.Ud.total.gte(5e271) }
        },
        6: {
            requirementDescription() {return format(2e13)+" CTNA (7)"},
            effect() {
                let eff = tmp.ct.buyables[11].effect
                return eff
            },
            effectDescription() {return "'CRNA Exponent' adds to CRNA exponent and multiply its base by milestones+1.<br>Currently: +"+format(tmp.Ud.milestones[6].effect)},
            done() { return player.ct.points.gte(2e13) && inChallenge("ct",32) }
        },
        7: {
            requirementDescription() {return format("e472")+" total unvaxxed deaths (8)"},
            effectDescription() {return "SARS Mutation limit+1, 'MurRNA' base^2,023 out of challenges."},
            done() { return player.Ud.total.gte("e472") }
        },
        8: {
            requirementDescription() {return format("e820")+" total unvaxxed deaths (9)"},
            effectDescription() {return "SARS Mutation limit+1, UnBoosted Virus effect dilation+0.2."},
            done() { return player.Ud.total.gte("e820") }
        },
        9: {
            requirementDescription() {return format("e880")+" total unvaxxed deaths (10)"},
            effectDescription() {return "SARS Mutation limit+1, US milestone 5 1st effect is exponent."},
            done() { return player.Ud.total.gte("e880") }
        },
    },
    upgrades: {
        rows: 10,
        cols: 5,
        11: {
            title: "Deadly Softcap",
            cost: decimalFive,
            description: "Unvaxxed Deaths make unvaxxed severity 2nd softcap later.",
            effect(){
                let eff = player.Ud.points.mul(5).add(15).log10().pow(0.5)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Ud.upgrades[11].effect)
                return dis
            },
        },
        12: {
            title: "UnrRNA",
            cost: decimalTen,
            description: "Unvaxxed Deaths add to mutated rRNA exponent.",
            effect(){
                let eff = player.Ud.points.mul(7).add(15).log10().pow(0.45).sub(1).div(3)
                return eff
            },
            effectDisplay(){
                let dis = "+"+format(tmp.Ud.upgrades[12].effect)
                return dis
            },
        },
        13: {
            title: "Deadly rRNA",
            cost: new Decimal(50),
            description: "Mutated rRNA boosts unvaxxed death gain.",
            effect(){
                let eff = tmp.Us.rrnaAmt.div(1e100).add(10).log10().pow(0.6).add(1)
                if (hasChallenge("Ud",22)) eff = eff.pow(tmp.Ud.challenges[22].rewardEffect2)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Ud.upgrades[13].effect)+"x"
                return dis
            },
        },
        14: {
            title: "Deadly Log",
            cost: new Decimal(250),
            description: "Unvaxxed deaths boost CRNA gain after log.",
            effect(){
                let eff = powExp(player.Ud.points.div(100).add(1),0.5).pow(0.5)
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Ud.upgrades[14].effect)+"x"
                return dis
            },
        },
        15: {
            title: "Deadly Recovery",
            cost: new Decimal(2023),
            description: "Unvaxxed deaths reduce boosted recovery effects, mutated rRNA effect^1.1.",
            effect(){
                let eff = player.Ud.points.div(200).add(15).log10().pow(-0.45)
                return eff
            },
            effectDisplay(){
                let dis = "^"+format(tmp.Ud.upgrades[15].effect)
                return dis
            },
        },
        21: {
            title: "Deadly Limit",
            cost: new Decimal(2e8),
            description: "Unvaxxed deaths boost MMNA limit, mutated rRNA slog subtractor/1.005, UD gain exp+0.3.",
            effect(){
                let eff = player.Ud.points.add(1).pow(202.3)
                if (eff.gte("e2023")) eff = eff.log10().div(2023).pow(2.023).mul(2023).pow10()
                return eff
            },
            effectDisplay(){
                let dis = format(tmp.Ud.upgrades[21].effect)+"x"
                return dis
            },
        },
        22: {
            title: "Deadly Milestone",
            cost: new Decimal(1e71),
            description: "Uncoating power and UU milestone 29 eff^3, US milestone 46 eff is dilated ^1.5.",
        },
        23: {
            title: "Deadly SARS",
            cost: new Decimal(3e90),
            description: "SARS Mutation limit+1, UnBoosted Virus effect dilation+0.1.",
        },
        24: {
            title: "Deadlier SARS",
            cost: new Decimal(5e197),
            description: "SARS Mutation limit+1, UnBoosted Virus effect dilation+0.1, milestone 5 effect^1.5.",
        },
        25: {
            title: "Deadliest SARS",
            cost: new Decimal(1e228),
            description: "SARS Mutation limit+1, milestone 5 effect^1.5.",
        },
        31: { // 10^(19 to 23)^2
            title: "Deadly Pain",
            cost: new Decimal("e361"),
            description: "Change 'Severe Pain' effect to exponent, milestone 5 effect^1.2.",
        },
        32: {
            title: "Deadly Atpms",
            cost: new Decimal("e400"),
            description: "Change 'Severe Atoms' effect to exponent.",
        },
        33: {
            title: "Deadly MMNA",
            cost: new Decimal("e441"),
            description: "'ImRNA' boosts MMNA effect.",
            effectDisplay(){
                let dis = "^"+format(tmp.Us.upgrades[41].effect2)
                return dis
            },
        },
        34: {
            title: "Deadly Cases",
            cost: new Decimal("e484"),
            description: "Change 'Caser RNA' effect to exponent but reduce 'Cased Carbon' effect.",
        },
        35: {
            title: "Deadly tRNA",
            cost: new Decimal("e529"),
            description: "Unvaxxed tRNA boosts MMNA effect.",
            effectDisplay(){
                let dis = "^"+format(tmp.Us.trnaEff2)
                return dis
            },
        },
        41: {
            title: "Deadly Conjunctivitis",
            cost: new Decimal("e1000"),
            description: "Change 'Severe Conjunctivitis' effect to exponent.",
        },
    },
    buyables: {
		rows: 4,
        cols: 4,
        11: {
            title: "Deadly CRNA",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Ud.buyables[11].costb
                let exp = tmp.Ud.buyables[11].coste
                let x = player.Ud.buyables[11]
                let cost = Decimal.pow(base,x.pow(exp)).mul(5e3)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(10)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.5)
                return cost
            },
            base() { 
                let base = player.Ud.points.add(10).log10().add(10).log10().sub(1)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Ud.buyables[11]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Ud" || player.subtabs.Ud.mainTabs != "Buyables") return
                let extra = ""
                let dis = "Increase CRNA gain exponent by "+format(tmp.Ud.buyables[11].base)+" (based on unvaxxed deaths)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed deaths\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Ud", 11))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.Ud.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Ud.buyables[11].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        if (true) player.Ud.points = player.Ud.points.sub(cost).max(0)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Ud.points
                let base = tmp.Ud.buyables[11].costb
                let exp = tmp.Ud.buyables[11].coste
                let target = s.div(5e3).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Ud.buyables[11].maxAfford
                let base = tmp.Ud.buyables[11].costb
                let exp = tmp.Ud.buyables[11].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(5e3)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Ud.buyables[11] = player.Ud.buyables[11].max(target)
                
                }
            },
        },
        12: {
            title: "Deadly Deaths",
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Ud.buyables[12].costb
                let exp = tmp.Ud.buyables[12].coste
                let x = player.Ud.buyables[12]
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e5)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(10)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.5)
                return cost
            },
            base() { 
                let base = player.Ud.points.add(10).log10().pow(0.25).add(2)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Ud.buyables[12]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.pow(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Ud" || player.subtabs.Ud.mainTabs != "Buyables") return
                let extra = ""
                let dis = "Multiply unvaxxed death gain by "+format(tmp.Ud.buyables[12].base)+" (based on unvaxxed deaths)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed deaths\n\
                Effect: " + format(tmp[this.layer].buyables[this.id].effect)+"x\n\
                Amount: " + formatWhole(getBuyableAmount("Ud", 12))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.Ud.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Ud.buyables[12].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        if (true) player.Ud.points = player.Ud.points.sub(cost).max(0)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Ud.points
                let base = tmp.Ud.buyables[12].costb
                let exp = tmp.Ud.buyables[12].coste
                let target = s.div(1e5).log(base).root(exp)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Ud.buyables[12].maxAfford
                let base = tmp.Ud.buyables[12].costb
                let exp = tmp.Ud.buyables[12].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e5)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Ud.buyables[12] = player.Ud.buyables[12].max(target)
                
                }
            },
        },
        13: {
            title() {
                let d = "Deadly Exponent"
                let sc = player.Ud.buyables[13].gte(28)?"Distant ":""
                let dis = sc+d
                return dis
            },
            distantStart() {
                let start = new Decimal(28)
                return start
            },
            cost() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let base = tmp.Ud.buyables[13].costb
                let exp = tmp.Ud.buyables[13].coste
                let x = player.Ud.buyables[13]
                let start = tmp.Ud.buyables[13].distantStart
                if (x.gte(start)) x = x.div(start).pow(1.5).mul(start.mul(1.4)).sub(start.mul(0.4))
                let cost = Decimal.pow(base,x.pow(exp)).mul(1e9)
                return cost
            },
            costb() { // cost for buying xth buyable, can be an object if there are multiple currencies
                let cost = new Decimal(100)
                return cost
            },
            coste() { 
                let cost = new Decimal(1.5)
                return cost
            },
            base() { 
                let base = player.Ud.points.add(10).log10().add(10).log10().pow(0.5).sub(1).mul(1.5)
                return base
            },
            effect() { // Effects of owning x of the items, x is a decimal
                let x = player.Ud.buyables[13]
                let base = tmp[this.layer].buyables[this.id].base
                return Decimal.mul(base, x);
            },
            display() { // Everything else displayed in the buyable button after the title
                if (player.tab != "Ud" || player.subtabs.Ud.mainTabs != "Buyables") return
                let extra = ""
                let dis = "Increase unvaxxed death gain exponent by "+format(tmp.Ud.buyables[13].base)+" (based on unvaxxed deaths)"
                return dis + ".\n\
                Cost: " + formatWhole(tmp[this.layer].buyables[this.id].cost)+" unvaxxed deaths\n\
                Effect: +" + format(tmp[this.layer].buyables[this.id].effect)+"\n\
                Amount: " + formatWhole(getBuyableAmount("Ud", 13))
            },
            unlocked() { return true }, 
            canAfford() {
                    return player.Ud.points.gte(tmp[this.layer].buyables[this.id].cost)},
            buy() { 
                cost = tmp[this.layer].buyables[this.id].cost
                let max = tmp.Ud.buyables[13].maxAfford
                let b = max.max(1)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    if (false) player[this.layer].buyables[this.id] = b
                    else {
                        if (true) player.Ud.points = player.Ud.points.sub(cost).max(0)
                        player[this.layer].buyables[this.id] = player[this.layer].buyables[this.id].add(1).max(1)
                    }
                }
            },
            maxAfford() {
                let s = player.Ud.points
                let base = tmp.Ud.buyables[13].costb
                let exp = tmp.Ud.buyables[13].coste
                let start = tmp.Ud.buyables[13].distantStart
                let target = s.div(1e9).log(base).root(exp)
                if (target.gte(start)) target = target.add(start.mul(0.4)).div(start.mul(1.4)).root(1.5).mul(start)
                return target.floor().add(1)
            },
            buyMax() { 
                let target = tmp.Ud.buyables[13].maxAfford
                let base = tmp.Ud.buyables[13].costb
                let exp = tmp.Ud.buyables[13].coste
                let cost = Decimal.pow(base,target.pow(exp)).mul(1e9)
                if (tmp[this.layer].buyables[this.id].canAfford) {
                    player.Ud.buyables[13] = player.Ud.buyables[13].max(target)
                
                }
            },
        },
    },
    challenges: { 
        rows: 6,
        cols: 2,
        11: {
            name: "UD Challenge 1",
            currencyDisplayName: "unvaxxed severity",
            currencyInternalName: "severity",
            currencyLayer: "Us",
            completionLimit: 1e308,
            challengeDescription: function() {
                let c11 = "You can't gain unvaxxed symptoms. Unvaxxed severity gain is UD<sup>√log10(mRNA)</sup>."
                if (inChallenge("Ud", 11)) c11 = c11 + " (In Challenge)"
                if (challengeCompletions("Ud", 11) == 1) c11 = c11 + " (Completed)"
                return c11
            },
            goal(){
                return Decimal.pow(10,13600)
            },
            cp() {
                let x = player.Us.severity.add(10).log10().div(13600).pow(3)
                if (x.gte(10)) x = x.div(10).pow(0.3).mul(2).add(8)
                return x
            },
            onComplete() {
                player.Ud.challPoints[0] = tmp.Ud.challenges[11].cp.floor().max(player.Ud.challPoints[0])
            },
            rewardDescription() {
                let dis = "Unvaxxed symptoms add to mutated rRNA and unvaxxed death gain exponent. <br>Challenge Points:" + formatWhole(player.Ud.challPoints[0])
                let next = tmp.Ud.challenges[11].cp.floor().max(player.Ud.challPoints[0]).add(1).max(1)
                if (next.gte(10)) next = next.sub(8).div(2).root(0.3).mul(10)
                next = next.root(3).mul(13600).pow10().sub(10)
                if (inChallenge("Ud", 11)) {
                    dis += "(+" + formatWhole(tmp.Ud.challenges[11].cp.sub(player.Ud.challPoints[0]).max(0).floor()) + ")"
                    dis += "<br>Next at " + format(next)
                }
                return dis
            },
            rewardEffect() {
                let exp = player.Ud.challPoints[0].pow(0.25).add(1)
                if (exp.gte(2.2)) exp = exp.add(11).div(6)
                let eff = player.Us.points.add(1).log10().pow(exp).div(300)
                if (eff.gte(1.6)) eff = eff.div(1.6).log10().add(1.6)
                if (eff.gte(2)) eff = eff.div(2).pow(0.5).mul(2)
                return eff
            },
            rewardDisplay() {
                return "+" + format(this.rewardEffect())
            },
            unlocked(){
                return hasMilestone("Ud", 3)
            }
        },
        12: {
            name: "UD Challenge 2",
            currencyDisplayName: "unvaxxed tRNA",
            currencyInternalName: "trna",
            currencyLayer: "Us",
            completionLimit: 1e308,
            challengeDescription: function() {
                let c12 = "UnBoosted Virus effect is 1. "+colorText("span","#308030","x")+" is UD<sup>log10(UD)*log10(MMNA)<sup>0.25</sup>/1,000</sup>+1."
                if (inChallenge("Ud", 12)) c12 = c12 + " (In Challenge)"
                if (challengeCompletions("Ud", 12) == 1) c12 = c12 + " (Completed)"
                return c12
            },
            goal(){
                return Decimal.pow(10,60000)
            },
            cp() {
                let x = player.Us.trna.add(10).log10().div(60000).pow(3)
                if (x.gte(10)) x = x.div(10).pow(0.3).mul(2).add(8)
                return x
            },
            onComplete() {
                player.Ud.challPoints[1] = tmp.Ud.challenges[12].cp.floor().max(player.Ud.challPoints[1])
            },
            rewardDescription() {
                let dis = "CTNA gain*100. Unvaxxed deaths boost "+colorText("span","#308030","x")+". <br>Challenge Points:" + formatWhole(player.Ud.challPoints[1])
                let next = tmp.Ud.challenges[12].cp.floor().max(player.Ud.challPoints[1]).add(1).max(1)
                if (next.gte(10)) next = next.sub(8).div(2).root(0.3).mul(10)
                next = next.root(3).mul(60000).pow10().sub(10)
                if (inChallenge("Ud", 12)) {
                    dis += "(+" + formatWhole(tmp.Ud.challenges[12].cp.sub(player.Ud.challPoints[1]).max(0).floor()) + ")"
                    dis += "<br>Next at " + format(next)
                }
                return dis
            },
            rewardEffect() {
                let exp = player.Ud.challPoints[1].pow(0.5).add(1)
                let eff = player.Ud.points.add(10).log10().add(10).log10().pow(2).sub(1).mul(exp).div(25).add(1)
                return eff
            },
            rewardDisplay() {
                return "^" + format(this.rewardEffect())
            },
            unlocked(){
                return hasMilestone("Ud", 3)
            }
        },
        21: {
            name: "UD Challenge 3",
            currencyDisplayName: "mutated rRNA",
            completionLimit: 1e308,
            challengeDescription: function() {
                let c21 = "UnBoosted Virus effect is 1. Base mutated rRNA gain is UD<sup>log10(UD)*log10(CRNA)<sup>0.75</sup>/1,000</sup>."
                if (inChallenge("Ud", 21)) c21 = c21 + " (In Challenge)"
                if (challengeCompletions("Ud", 21) == 1) c21 = c21 + " (Completed)"
                return c21
            },
            canComplete() {
                return tmp.Us.rrnaAmt.gte(this.goal())
            },
            goal(){
                return new Decimal(25e48)
            },
            cp() {
                let x = tmp.Us.rrnaAmt.div(25).add(10).log10().sub(23).div(25).pow(3)
                if (x.gte(10)) x = x.div(10).pow(0.3).mul(2).add(8)
                return x
            },
            onComplete() {
                player.Ud.challPoints[2] = tmp.Ud.challenges[21].cp.floor().max(player.Ud.challPoints[2])
            },
            rewardDescription() {
                let dis = "CTNA gain*100. Unvaxxed deaths boost mutated rRNA gain. <br>Challenge Points:" + formatWhole(player.Ud.challPoints[2])
                let next = tmp.Ud.challenges[21].cp.floor().max(player.Ud.challPoints[2]).add(1).max(1)
                if (next.gte(10)) next = next.sub(8).div(2).root(0.3).mul(10)
                next = next.root(3).mul(25).add(23).pow10().sub(10).mul(25)
                if (inChallenge("Ud", 21)) {
                    dis += "(+" + formatWhole(tmp.Ud.challenges[21].cp.sub(player.Ud.challPoints[2]).max(0).floor()) + ")"
                    dis += "<br>Next at " + format(next)
                }
                return dis
            },
            rewardEffect() {
                if (inChallenge("Ud",21)) return decimalOne
                let exp = player.Ud.challPoints[2].pow(0.5).add(1)
                let eff = player.Ud.points.div(1e200).add(10).log10().add(10).log10().pow(2).sub(1).mul(exp).div(100).add(1)
                return eff
            },
            rewardDisplay() {
                return "^" + format(this.rewardEffect())
            },
            unlocked(){
                return hasMilestone("Ud", 3)
            }
        },
        22: {
            name: "UD Challenge 4",
            currencyDisplayName: "mutated rRNA",
            completionLimit: 1e308,
            countsAs: [11,12,21],
            challengeDescription: function() {
                let c22 = "ALL previous challenges are applied at once."
                if (inChallenge("Ud", 22)) c22 = c22 + " (In Challenge)"
                if (challengeCompletions("Ud", 22) == 1) c22 = c22 + " (Completed)"
                return c22
            },
            canComplete() {
                return tmp.Us.rrnaAmt.gte(this.goal())
            },
            goal(){
                return new Decimal(255e44)
            },
            cp() {
                let x = tmp.Us.rrnaAmt.div(255).add(10).log10().sub(9).div(35).pow(2.5)
                if (x.gte(10)) x = x.div(10).pow(0.3).mul(2).add(8)
                return x
            },
            onComplete() {
                player.Ud.challPoints[3] = tmp.Ud.challenges[22].cp.floor().max(player.Ud.challPoints[3])
            },
            rewardDescription() {
                let dis = "CTNA gain*100. CTNA boosts MMNA limit and 'Deadly rRNA'. <br>Challenge Points:" + formatWhole(player.Ud.challPoints[3])
                let next = tmp.Ud.challenges[22].cp.floor().max(player.Ud.challPoints[3]).add(1).max(1)
                if (next.gte(10)) next = next.sub(8).div(2).root(0.3).mul(10)
                next = next.root(2.5).mul(35).add(9).pow10().sub(10).mul(255)
                if (inChallenge("Ud", 22)) {
                    dis += "(+" + formatWhole(tmp.Ud.challenges[22].cp.sub(player.Ud.challPoints[3]).max(0).floor()) + ")"
                    dis += "<br>Next at " + format(next)
                }
                return dis
            },
            rewardEffect() {
                if (inChallenge("Ud",22)) return decimalOne
                let exp = player.Ud.challPoints[3].pow(0.5).add(1)
                let eff = player.ct.points.div(1e17).add(10).log10().pow(0.35).sub(1).mul(exp).div(3).add(1)
                return eff
            },
            rewardEffect2() {
                if (inChallenge("Ud",22)) return decimalOne
                let exp = player.Ud.challPoints[3]
                if (exp.gte(6)) exp = exp.sub(0.75)
                exp = exp.pow(0.55).add(1)
                let eff = player.ct.points.div(1e17).add(10).log10().pow(0.55).sub(1).mul(exp).mul(1.5).add(1)
                return eff
            },
            rewardDisplay() {
                return "^" + format(this.rewardEffect()) + ", ^"+ format(this.rewardEffect2())
            },
            unlocked(){
                return hasMilestone("Ud", 3)
            }
        },
    },
})